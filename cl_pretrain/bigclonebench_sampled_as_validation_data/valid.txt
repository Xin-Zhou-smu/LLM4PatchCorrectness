bigclonebench-test-0|SpecialSeperatorForDevSet|-  @Test(expected = GadgetException.class) public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\n+  @Test(expected = GadgetException.class) public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\n HttpRequest request = createCacheableRequest();\n expect(pipeline.execute(request)).andReturn(new HttpResponse("malformed junk")).once();\n replay(pipeline);\n try {\n specFactory.getGadgetSpec(createContext(SPEC_URL, false));\n fail("No exception thrown on bad parse");\n }\n catch (GadgetException e) {\n }\n specFactory.getGadgetSpec(createContext(SPEC_URL, false));\n }\n|SpecialSeperatorForDevSet|public InputStream getInputStream() throws TGBrowserException {\n try {\n if (!this.isFolder()) {\n URL url = new URL(this.url);\n InputStream stream = url.openStream();\n return stream;\n }\n }\n catch (Throwable throwable) {\n throw new TGBrowserException(throwable);\n }\n-   return null;\n+   return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-1|SpecialSeperatorForDevSet|private boolean getWave(String url, String Word) {\n try {\n File FF = new File(f.getParent() + "/" + f.getName() + "pron");\n FF.mkdir();\n URL url2 = new URL(url);\n BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\n File Fdel = new File(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n if (!Fdel.exists()) {\n FileOutputStream outstream = new FileOutputStream(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\n char[] binput = new char[1024];\n int len = stream.read(binput, 0, 1024);\n while (len > 0) {\n bwriter.write(binput, 0, len);\n len = stream.read(binput, 0, 1024);\n }\n bwriter.close();\n outstream.close();\n }\n stream.close();\n }\n catch (Exception e) {\n System.out.println(e.getMessage());\n return false;\n }\n-   return true;\n+   return true;\n }\n|SpecialSeperatorForDevSet|private int[] sort(int n) {\n-   int[] mas = new int[n];\n+   int[] mas = new int[n];\n Random rand = new Random();\n for (int i = 0;\n i < n;\n i++) {\n mas[i] = rand.nextInt(10) + 1;\n }\n boolean t = true;\n int tmp = 0;\n while (t) {\n t = false;\n for (int i = 0;\n i < mas.length - 1;\n i++) {\n if (mas[i] > mas[i + 1]) {\n tmp = mas[i];\n mas[i] = mas[i + 1];\n mas[i + 1] = tmp;\n t = true;\n }\n }\n }\n return mas;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-2|SpecialSeperatorForDevSet|public static String encodePassword(String password) {\n MessageDigest md;\n try {\n md = MessageDigest.getInstance("SHA");\n md.update(password.getBytes());\n String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName("x-base64"));\n return encodedPassword;\n }\n catch (NoSuchAlgorithmException e) {\n return null;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public int create(BusinessObject o) throws DAOException {\n int insert = 0;\n int id = 0;\n Item item = (Item) o;\n try {\n PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery("INSERT_ITEM"));\n pst.setString(1, item.getDescription());\n pst.setDouble(2, item.getUnit_price());\n pst.setInt(3, item.getQuantity());\n pst.setDouble(4, item.getVat());\n pst.setInt(5, item.getIdProject());\n pst.setInt(6, item.getIdCurrency());\n insert = pst.executeUpdate();\n if (insert <= 0) {\n connection.rollback();\n throw new DAOException("Number of rows <= 0");\n }\n else if (insert > 1) {\n connection.rollback();\n throw new DAOException("Number of rows > 1");\n }\n Statement st = connection.createStatement();\n ResultSet rs = st.executeQuery("select max(id_item) from item");\n-   rs.next();\n+   rs.next();\n id = rs.getInt(1);\n connection.commit();\n }\n catch (SQLException e) {\n Log.write(e.getMessage());\n throw new DAOException("A SQLException has occured");\n }\n catch (NullPointerException npe) {\n Log.write(npe.getMessage());\n throw new DAOException("Connection null");\n }\n return id;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-3|SpecialSeperatorForDevSet|@Override protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\n if ((url == null) || (proxy == null)) {\n-   throw new IllegalArgumentException(Messages.getString("luni.1B"));\n+   throw new IllegalArgumentException(Messages.getString("luni.1B"));\n }\n return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\n }\n|SpecialSeperatorForDevSet|public String insertSmsInf(Sms sms) throws Exception {\n String smsId = null;\n Connection conn = null;\n PreparedStatement pstmt = null;\n StringBuffer buffer = new StringBuffer();\n try {\n buffer.append("INSERT INTO COMTNSMS\n");\n buffer.append(" (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n");\n buffer.append(" FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n");\n buffer.append("VALUES\n");\n buffer.append("(?, ?, ?, ?, SYSDATE())");\n conn = SmsBasicDBUtil.getConnection();\n conn.setAutoCommit(false);\n smsId = getNextId(conn);\n pstmt = conn.prepareStatement(buffer.toString());\n-   int index = 0;\n+   int index = 0;\n pstmt.setString(++index, smsId);\n pstmt.setString(++index, sms.getTrnsmitTelno());\n pstmt.setString(++index, sms.getTrnsmitCn());\n pstmt.setString(++index, sms.getFrstRegisterId());\n pstmt.executeUpdate();\n conn.commit();\n return smsId;\n }\n catch (Exception ex) {\n if (conn != null) {\n conn.rollback();\n }\n throw ex;\n }\n finally {\n SmsBasicDBUtil.close(null, pstmt, conn);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-4|SpecialSeperatorForDevSet|public static String SHA(String source) {\n logger.info(source);\n String result = null;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA");\n digest.update(source.getBytes());\n byte[] bytes = digest.digest();\n-   result = EncodeUtils.hexEncode(bytes);\n+   result = EncodeUtils.hexEncode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n logger.info(result);\n return result;\n }\n|SpecialSeperatorForDevSet|@Test public void test_validate_geo_getEvents() {\n try {\n SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");\n File schemaLocation = new File("tes.xsd");\n Schema schema = factory.newSchema(schemaLocation);\n Validator validator = schema.newValidator();\n URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026");\n InputStream inputStream = url.openStream();\n Source source = new StreamSource(inputStream);\n validator.validate(source);\n }\n catch (IOException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("File not found", true);\n }\n catch (SAXException ex) {\n-   Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n+   Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("Schema did not validate", true);\n }\n assertTrue(true);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-5|SpecialSeperatorForDevSet|private void callService() {\n try {\n URL url = new URL(baseUrl + servicePath + attributes);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n StringBuffer buf = new StringBuffer();\n while ((inputLine = in.readLine()) != null) {\n buf.append(inputLine);\n }\n in.close();\n-   answer = buf.toString();\n+   answer = buf.toString();\n }\n catch (MalformedURLException e) {\n answer = "Malformed Url:" + e.getMessage();\n return;\n }\n catch (IOException e) {\n answer = "I/O exception: " + e.getMessage();\n return;\n }\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   }\n+   }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-6|SpecialSeperatorForDevSet|private byte[] scramble411(String password, String seed) {\n MessageDigest md;\n try {\n md = MessageDigest.getInstance("SHA-1");\n byte[] passwordHashStage1 = md.digest(password.getBytes());\n md.reset();\n byte[] passwordHashStage2 = md.digest(passwordHashStage1);\n md.reset();\n md.update(seed.getBytes());\n md.update(passwordHashStage2);\n byte[] toBeXord = md.digest();\n int numToXor = toBeXord.length;\n for (int i = 0;\n i < numToXor;\n i++) {\n toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);\n }\n return toBeXord;\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n if (logger.isLoggable(Level.SEVERE)) {\n logger.log(Level.SEVERE, e.getMessage(), e);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private void streamContains(String in, InputStream stream) throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(stream, baos);\n byte[] bytes = baos.toByteArray();\n-   String cmp = new String(bytes, "UTF-8");\n+   String cmp = new String(bytes, "UTF-8");\n assertTrue(cmp.contains(in));\n baos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-7|SpecialSeperatorForDevSet|public Vector parse(String link) {\n addMessage("Parsing: " + link);\n links.removeAllElements();\n URLConnection conn = null;\n-   Reader rd = null;\n+   Reader rd = null;\n EditorKit kit = new HTMLEditorKit();\n Document doc = kit.createDefaultDocument();\n doc.putProperty("IgnoreCharsetDirective", Boolean.TRUE);\n URL url = null;\n try {\n url = new URL(link);\n }\n catch (MalformedURLException err) {\n System.out.println("Malformed URL");\n return links;\n }\n try {\n conn = new URL(link).openConnection();\n rd = new InputStreamReader(conn.getInputStream());\n }\n catch (Exception err) {\n err.printStackTrace();\n return links;\n }\n try {\n kit.read(rd, doc, 0);\n ElementIterator it = new ElementIterator(doc);\n javax.swing.text.Element elem;\n while ((elem = it.next()) != null) {\n SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\n if (s != null) {\n if (s.toString().indexOf("script") >= 0) continue;\n String lnk = "";\n try {\n lnk = s.getAttribute(HTML.Attribute.HREF).toString();\n }\n catch (Exception err) {\n continue;\n }\n int j = 0;\n if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);\n URL urlLink = new URL(url, lnk);\n if (!url.getHost().equals(urlLink.getHost())) continue;\n String str = urlLink.toString();\n if (!str.startsWith("http")) continue;\n if (str.endsWith(".pdf")) {\n continue;\n }\n for (int i = 0;\n i < leaveSuffix.length;\n i++) {\n if ((str.endsWith(leaveSuffix[i]))) continue;\n }\n boolean skip = false;\n for (int i = 0;\n i < suffix.length;\n i++) {\n if ((str.endsWith(suffix[i]))) skip = true;\n }\n if (!skip) {\n try {\n conn = urlLink.openConnection();\n }\n catch (Exception err) {\n }\n String contentType = null;\n if (contentType == null) contentType = conn.getContentType();\n if (contentType.equals("application/pdf")) {\n continue;\n }\n else if (!contentType.equals("text/html")) {\n continue;\n }\n }\n if (!links.contains(urlLink.toString())) {\n links.addElement(urlLink.toString());\n }\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return links;\n }\n|SpecialSeperatorForDevSet|@Test public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {\n Exception e = new UnsuccessfulResponseException(resp);\n expect(mockBackend.execute(host, req, ctx)).andThrow(e);\n replay(mockBackend);\n HttpResponse result = impl.execute(host, req, ctx);\n-   verify(mockBackend);\n+   verify(mockBackend);\n assertSame(resp, result);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-8|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\n Statement s = null;\n try {\n s = con.createStatement();\n s.executeUpdate(statement);\n con.commit();\n }\n catch (Throwable e) {\n if (do_log) {\n logger.log(Level.INFO, "Update failed. Transaction is rolled back", e);\n }\n-   con.rollback();\n+   con.rollback();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-9|SpecialSeperatorForDevSet|public String getData(DefaultHttpClient httpclient) {\n try {\n HttpGet get = new HttpGet("http://3dforandroid.appspot.com/api/v1/note");\n get.setHeader("Content-Type", "application/json");\n get.setHeader("Accept", "*/*");\n HttpResponse response = httpclient.execute(get);\n HttpEntity entity = response.getEntity();\n InputStream instream = entity.getContent();\n responseMessage = read(instream);\n if (instream != null) instream.close();\n }\n catch (ClientProtocolException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return responseMessage;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n-   sourceChannel.close();\n+   sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-10|SpecialSeperatorForDevSet|-  public static void copyFile(File source, File dest) throws IOException {\n+  public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n-   if (in != null) in.close();\n+   if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-10|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n-   }\n+   }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n if (from.isDirectory()) {\n if (!to.exists()) {\n to.mkdir();\n }\n File[] children = from.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".") || children[i].getName().equals("..")) {\n continue;\n }\n if (children[i].isDirectory()) {\n File f = new File(to, children[i].getName());\n copyFile(children[i], f);\n }\n else {\n copyFile(children[i], to);\n }\n }\n }\n else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n if (to.isDirectory()) {\n to = new File(to, from.getName());\n }\n FileInputStream in = new FileInputStream(from);\n FileOutputStream out = new FileOutputStream(to);\n-   byte[] buf = new byte[32678];\n+   byte[] buf = new byte[32678];\n int read;\n while ((read = in.read(buf)) > -1) {\n out.write(buf, 0, read);\n }\n closeStream(in);\n closeStream(out);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-11|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n-   if (sourceChannel != null) sourceChannel.close();\n+   if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n-   FileChannel destinationChannel = null;\n+   FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-11|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|private void bootKernel(String conf) {\n try {\n AssetManager am = getResources().getAssets();\n InputStream is = am.open(conf + ".conf");\n Properties props = new Properties();\n props.load(is);\n-   is.close();\n+   is.close();\n Log.d("bootKernel", "Listing sdcard assets...");\n String[] sdcardfiles = am.list("sdcard");\n for (String file : sdcardfiles) {\n Log.d("bootKernel", "Copying sdcard asset " + file + ".");\n AssetFileDescriptor afd = am.openFd("sdcard/" + file);\n FileInputStream fis = afd.createInputStream();\n FileChannel fic = fis.getChannel();\n FileOutputStream fos = new FileOutputStream("/sdcard/" + file);\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n }\n Configuration gconf = new JavaPropertiesConfiguration(props);\n Configuration bconf = gconf.subset("boot");\n String kclass_name = bconf.getString("kernel");\n Log.d("bootKernel", "Attempting to load kernel from class '" + kclass_name + "'...");\n Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n Kernel kernel = kclass.newInstance();\n Log.d("bootKernel", "Kernel loaded, proceeding with boot...");\n BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n kernel.boot(bctx).get();\n Log.d("bootKernel", "Kernel boot complete.");\n }\n catch (Exception e) {\n Log.e("bootKernel", "Unable to boot kernel due to exception.", e);\n finish();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-12|SpecialSeperatorForDevSet|public static void BubbleSortShort2(short[] num) {\n int last_exchange;\n int right_border = num.length - 1;\n do {\n last_exchange = 0;\n for (int j = 0;\n j < num.length - 1;\n-   j++) {\n+   j++) {\n if (num[j] > num[j + 1]) {\n short temp = num[j];\n num[j] = num[j + 1];\n num[j + 1] = temp;\n last_exchange = j;\n }\n }\n right_border = last_exchange;\n }\n while (right_border > 0);\n }\n|SpecialSeperatorForDevSet|public static InputStream getResourceAsStreamIfAny(String resPath) {\n URL url = findResource(resPath);\n try {\n return url == null ? null : url.openStream();\n }\n catch (IOException e) {\n ZMLog.warn(e, " URL open Connection got an exception!");\n return null;\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-13|SpecialSeperatorForDevSet|public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n-   md.update(text.getBytes("UTF-8"), 0, text.length());\n+   md.update(text.getBytes("UTF-8"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n-   try {\n+   try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-14|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n ps.setString(num++, portalUserBean.getPhone());\n ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n-   break;\n+   break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n File ifp = new File(src);\n File ofp = new File(dest);\n if (ifp.exists() == false) {\n throw new IOException("file '" + src + "' does not exist");\n }\n FileInputStream fis = new FileInputStream(ifp);\n-   FileOutputStream fos = new FileOutputStream(ofp);\n+   FileOutputStream fos = new FileOutputStream(ofp);\n byte[] b = new byte[1024];\n while (fis.read(b) > 0) fos.write(b);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-15|SpecialSeperatorForDevSet|public String getUser() {\n try {\n HttpGet get = new HttpGet("http://api.linkedin.com/v1/people/~");\n consumer.sign(get);\n HttpClient client = new DefaultHttpClient();\n HttpResponse response = client.execute(get);\n if (response != null) {\n int statusCode = response.getStatusLine().getStatusCode();\n if (statusCode != 200) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n StringBuffer sBuf = new StringBuffer();\n String linea;\n BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));\n while ((linea = reader.readLine()) != null) {\n sBuf.append(linea);\n-   }\n+   }\n reader.close();\n response.getEntity().consumeContent();\n get.abort();\n String salida = sBuf.toString();\n String user_firstname = salida.split("</first-name>")[0].split("<first-name>")[1];\n String user_lastname = salida.split("</last-name>")[0].split("<last-name>")[1];\n return user_firstname + " " + user_lastname;\n }\n }\n catch (UnsupportedEncodingException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (IOException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthMessageSignerException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthExpectationFailedException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthCommunicationException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private static List<Properties> findExtensions() {\n URL url = null;\n try {\n List<Properties> extensions = new ArrayList<Properties>();\n Enumeration<URL> res = ExtensionHelper.class.getClassLoader().getResources("logdistiller.properties");\n while (res.hasMoreElements()) {\n url = res.nextElement();\n Properties prop = new Properties();\n prop.load(url.openStream());\n extensions.add(prop);\n }\n return extensions;\n }\n catch (IOException ioe) {\n String msg = (url == null) ? "unable to list resources logdistiller.properties" : "unable to load resource " + url.toExternalForm();\n-   throw new RuntimeException(msg, ioe);\n+   throw new RuntimeException(msg, ioe);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-16|SpecialSeperatorForDevSet|public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n InputStream is = ffConfigurable.getInputConfigStream();\n try {\n OutputStream os = new FileOutputStream(file);\n IOUtils.copy(is, os);\n }\n catch (Exception e) {\n-   throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n+   throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n }\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n-   InputStream in = url.openStream();\n+   InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-17|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n-   }\n+   }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n-   byte[] buffer = new byte[65536];\n+   byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-18|SpecialSeperatorForDevSet|public void runInternal() {\n connection = null;\n boolean itemsLoadedPartially = false;\n boolean loadNext = false;\n HashSet<String> visited = new HashSet<String>();\n do {\n try {\n setProgressMessage(url.toString(), -1);\n visited.add(url.toString());\n long startTimeStamp = System.currentTimeMillis();\n delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n URLConnection conn = url.openConnection();\n if (conn instanceof HttpsURLConnection) {\n onError("HTTPs is not supported yet");\n return;\n }\n if (!(conn instanceof HttpURLConnection)) {\n onError("Only HTTP supported");\n return;\n }\n connection = (HttpURLConnection) conn;\n connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");\n if (referer != null) connection.setRequestProperty("Referer", referer);\n connection.setInstanceFollowRedirects(true);\n connection.setAllowUserInteraction(false);\n connection.setConnectTimeout(CONNECT_TIMEOUT);\n connection.setReadTimeout(READ_TIMEOUT);\n connection.setDoInput(true);\n String fileName = null;\n String disp = connection.getHeaderField("Content-Disposition");\n if (disp != null) {\n int p = disp.indexOf("filename=");\n if (p > 0) {\n fileName = disp.substring(p + 9);\n }\n }\n int response = -1;\n response = connection.getResponseCode();\n L.d("Response: " + response);\n if (response != 200) {\n onError("Error " + response);\n return;\n }\n String contentType = connection.getContentType();\n String contentEncoding = connection.getContentEncoding();\n int contentLen = connection.getContentLength();\n L.d("Entity content length: " + contentLen);\n L.d("Entity content type: " + contentType);\n L.d("Entity content encoding: " + contentEncoding);\n setProgressMessage(url.toString(), contentLen);\n InputStream is = connection.getInputStream();\n delayedProgress.cancel();\n is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n boolean isZip = contentType != null && contentType.equals("application/zip");\n if (expectedType != null) contentType = expectedType;\n else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n byte[] buf = new byte[contentLen];\n if (is.read(buf) != contentLen) {\n onError("Wrong content length");\n return;\n }\n is.close();\n is = null;\n is = new ByteArrayInputStream(buf);\n if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";\n }\n if (contentType.startsWith("application/atom+xml")) {\n L.d("Parsing feed");\n parseFeed(is);\n itemsLoadedPartially = true;\n if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;\nprofile=opds-catalog")) {\n if (handler.entries.size() < MAX_OPDS_ITEMS) {\n url = new URL(handler.docInfo.nextLink.href);\n loadNext = !visited.contains(url.toString());\n L.d("continue with next part: " + url);\n }\n else {\n L.d("max item count reached: " + handler.entries.size());\n loadNext = false;\n }\n }\n else {\n loadNext = false;\n }\n }\n else {\n if (fileName == null) fileName = defaultFileName;\n L.d("Downloading book: " + contentEncoding);\n downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n if (progressShown) coolReader.getEngine().hideProgress();\n loadNext = false;\n itemsLoadedPartially = false;\n }\n }\n catch (Exception e) {\n L.e("Exception while trying to open URI " + url.toString(), e);\n if (progressShown) coolReader.getEngine().hideProgress();\n onError("Error occured while reading OPDS catalog");\n break;\n }\n finally {\n if (connection != null) try {\n connection.disconnect();\n }\n catch (Exception e) {\n }\n }\n }\n-   while (loadNext);\n+   while (loadNext);\n if (progressShown) coolReader.getEngine().hideProgress();\n if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n @Override public void run() {\n L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");\n callback.onFinish(handler.docInfo, handler.entries);\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|@Override public void incluir(Igreja igreja) throws Exception {\n Connection connection = criaConexao(false);\n String sql = "insert into igreja ? as idlocal, ? as possui_salao;\n";\n String sql2 = "SELECT MAX(idlocal) FROM Local";\n PreparedStatement stmt = null;\n PreparedStatement stmt2 = null;\n ResultSet rs = null;\n try {\n-   stmt = connection.prepareStatement(sql);\n+   stmt = connection.prepareStatement(sql);\n stmt2 = connection.prepareStatement(sql2);\n rs = stmt2.executeQuery();\n stmt.setInt(1, rs.getInt("max"));\n stmt.setBoolean(2, igreja.getPossuiSalao());\n int retorno = stmt.executeUpdate();\n if (retorno == 0) {\n connection.rollback();\n throw new SQLException("Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!");\n }\n connection.commit();\n }\n catch (SQLException e) {\n connection.rollback();\n throw e;\n }\n finally {\n try {\n stmt.close();\n stmt2.close();\n rs.close();\n this.fechaConexao();\n }\n catch (SQLException e) {\n throw e;\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-19|SpecialSeperatorForDevSet|String fetch_pls(String pls) {\n InputStream pstream = null;\n if (pls.startsWith("http://")) {\n try {\n URL url = null;\n if (running_as_applet) {\n url = new URL(getCodeBase(), pls);\n }\n else {\n url = new URL(pls);\n }\n URLConnection urlc = url.openConnection();\n pstream = urlc.getInputStream();\n }\n catch (Exception ee) {\n System.err.println(ee);\n return null;\n }\n }\n if (pstream == null && !running_as_applet) {\n try {\n pstream = new FileInputStream(System.getProperty("user.dir") + System.getProperty("file.separator") + pls);\n }\n catch (Exception ee) {\n System.err.println(ee);\n return null;\n }\n }\n String line = null;\n while (true) {\n try {\n-   line = readline(pstream);\n+   line = readline(pstream);\n }\n catch (Exception e) {\n }\n if (line == null) {\n break;\n }\n if (line.startsWith("File1=")) {\n byte[] foo = line.getBytes();\n int i = 6;\n for (;\n i < foo.length;\n i++) {\n if (foo[i] == 0x0d) {\n break;\n }\n }\n return line.substring(6, i);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private BufferedImage _getImage(String urlStr) throws IOException {\n-   URL url = new URL(urlStr);\n+   URL url = new URL(urlStr);\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.connect();\n InputStream in = null;\n try {\n in = conn.getInputStream();\n return ImageIO.read(in);\n }\n finally {\n IOUtilities.close(in);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-20|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|@Test public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {\n Exception e = new UnsuccessfulResponseException(resp);\n expect(mockBackend.execute(host, req, ctx)).andThrow(e);\n replay(mockBackend);\n HttpResponse result = impl.execute(host, req, ctx);\n verify(mockBackend);\n assertSame(resp, result);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-21|SpecialSeperatorForDevSet|public static String md5Hash(String src) {\n try {\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(src.getBytes());\n return bytesArrayToHexString(md.digest());\n }\n catch (Exception e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|@Before public void setUp() throws Exception {\n final URL url = getClass().getClassLoader().getResource("insecureSSL.keystore");\n final KeyStore keystore = KeyStore.getInstance("jks");\n final char[] pwd = "nopassword".toCharArray();\n keystore.load(url.openStream(), pwd);\n final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();\n trustManagerFactory.init(keystore);\n final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();\n keyManagerFactory.init(keystore, pwd);\n final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n final SSLContext serverSSLContext = SSLContext.getInstance("TLS");\n serverSSLContext.init(keyManagers, trustManagers, null);\n localServer_ = new LocalTestServer(serverSSLContext);\n localServer_.registerDefaultHandlers();\n-   localServer_.start();\n+   localServer_.start();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-22|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n-   else {\n+   else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n-   }\n+   }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-22|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n-   }\n+   }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n-   if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n+   if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-23|SpecialSeperatorForDevSet|public void postData(String protocol, String host, String form, String data) throws Exception {\n if ((protocol == null) || (protocol.equals(""))) {\n protocol = DEFAULT_PROTOCOL;\n }\n if ((host == null) || (host.equals(""))) {\n host = DEFAULT_HOST;\n }\n if (form == null) {\n form = DEFAULT_FORM;\n }\n if (data == null) {\n throw new IllegalArgumentException("Invalid data");\n }\n URL url = new URL(protocol, host, form);\n URLConnection con = url.openConnection();\n con.setDoOutput(true);\n con.setDoInput(true);\n con.setUseCaches(false);\n-   con.setRequestProperty("Content-type", "application/x-www-form-urlencoded");\n+   con.setRequestProperty("Content-type", "application/x-www-form-urlencoded");\n con.setRequestProperty("Content-length", String.valueOf(data.length()));\n PrintStream out = new PrintStream(con.getOutputStream(), true);\n out.print(data);\n out.close();\n BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n while (in.readLine() != null) {\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String fromPath, String toPath) {\n try {\n File inputFile = new File(fromPath);\n String dirImg = (new File(toPath)).getParent();\n File tmp = new File(dirImg);\n if (!tmp.exists()) {\n tmp.mkdir();\n }\n File outputFile = new File(toPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n-   ex.printStackTrace();\n+   ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-24|SpecialSeperatorForDevSet|public static String doPost(String URL, List<NameValuePair> params) {\n try {\n OauthUtil util = new OauthUtil();\n URI uri = new URI(URL);\n HttpClient httpclient = util.getNewHttpClient();\n HttpPost postMethod = new HttpPost(uri);\n StringBuffer paramString = new StringBuffer();\n paramString.append("OAuth");\n for (int i = 0;\n i < params.size();\n i++) {\n paramString.append(" " + params.get(i).getName());\n paramString.append("=\"" + encodeUrl(params.get(i).getValue()) + "\",");\n }\n String xx = paramString.substring(0, paramString.length() - 1);\n postMethod.addHeader("Authorization", xx);\n HttpResponse httpResponse = httpclient.execute(postMethod);\n if (httpResponse.getStatusLine().getStatusCode() == 200) {\n-   String strResult = EntityUtils.toString(httpResponse.getEntity());\n+   String strResult = EntityUtils.toString(httpResponse.getEntity());\n Log.i("DEBUG", "result: " + strResult);\n return strResult;\n }\n }\n catch (Exception e) {\n Log.i("DEBUG", e.toString());\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public void resolvePlugins() {\n try {\n File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\n File pluginsFile = new File(cacheDir, "plugins.xml");\n if (!pluginsFile.exists()) {\n URL pluginURL = new URL("http://xpontus.sourceforge.net/snapshot/plugins.xml");\n InputStream is = pluginURL.openStream();\n OutputStream os = FileUtils.openOutputStream(pluginsFile);\n IOUtils.copy(is, os);\n IOUtils.closeQuietly(os);\n IOUtils.closeQuietly(is);\n }\n resolvePlugins(pluginsFile.getAbsolutePath());\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-25|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n }\n }\n connection.commit();\n }\n-   catch (Exception ex) {\n+   catch (Exception ex) {\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public InputStream openInput(Fragment path) throws IOException {\n int len = path.words().size();\n String p = Util.combine("/", path.words().subList(1, len));\n URL url = new URL("http", path.words().get(0), p);\n InputStream result = url.openStream();\n return result;\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-26|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n-   }\n+   }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private static final String hash(String input, String algorithm) {\n try {\n MessageDigest dig = MessageDigest.getInstance(algorithm);\n dig.update(input.getBytes());\n StringBuffer result = new StringBuffer();\n byte[] digest = dig.digest();\n String[] hex = {\n "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" }\n;\n for (int i = 0;\n i < digest.length;\n i++) {\n-   int u = digest[i];\n+   int u = digest[i];\n u &= 0x000000FF;\n int highCount = u / 16;\n int lowCount = u - (highCount * 16);\n result.append(hex[highCount]);\n result.append(hex[lowCount]);\n }\n return result.toString();\n }\n catch (NoSuchAlgorithmException e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-27|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n-   log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n+   log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private static byte[] baseHash(String name, String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.reset();\n digest.update(name.toLowerCase().getBytes());\n digest.update(password.getBytes());\n return digest.digest();\n }\n-   catch (NoSuchAlgorithmException ex) {\n+   catch (NoSuchAlgorithmException ex) {\n d("MD5 algorithm not found!");\n throw new RuntimeException("MD5 algorithm not found! Unable to authenticate");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-28|SpecialSeperatorForDevSet|-  HttpRepository(Path path) throws IOException {\n+  HttpRepository(Path path) throws IOException {\n super(path);\n this.url = new URL(path.toURLString());\n HttpURLConnection.setFollowRedirects(true);\n this.connection = (HttpURLConnection) url.openConnection();\n this.ns = Names.getNamespace(path);\n }\n|SpecialSeperatorForDevSet|public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n MessageDigest messagedigest;\n StringBuilder stringbuffer = new StringBuilder();\n try {\n messagedigest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n throw new RuntimeException(nosuchalgorithmexception);\n }\n StringBuffer stringbuffer2;\n InetAddress inetaddress = InetAddress.getLocalHost();\n long l = System.currentTimeMillis();\n long l1 = 0L;\n if (secure) l1 = _secureRand.nextLong();\n else l1 = _rand.nextLong();\n stringbuffer.append(inetaddress.toString());\n stringbuffer.append(":");\n stringbuffer.append(Long.toString(l));\n stringbuffer.append(":");\n stringbuffer.append(Long.toString(l1));\n messagedigest.update(stringbuffer.toString().getBytes());\n byte abyte0[] = messagedigest.digest();\n StringBuffer stringbuffer1 = new StringBuffer();\n for (int i = 0;\n i < abyte0.length;\n i++) {\n int j = abyte0[i] & 0xff;\n if (j < 16) stringbuffer1.append('0');\n stringbuffer1.append(Integer.toHexString(j));\n }\n String s = stringbuffer1.toString();\n stringbuffer2 = new StringBuffer();\n if (sep) {\n stringbuffer2.append(s.substring(0, 8));\n stringbuffer2.append("-");\n stringbuffer2.append(s.substring(8, 12));\n stringbuffer2.append("-");\n stringbuffer2.append(s.substring(12, 16));\n stringbuffer2.append("-");\n stringbuffer2.append(s.substring(16, 20));\n stringbuffer2.append("-");\n stringbuffer2.append(s.substring(20));\n return stringbuffer2.toString();\n }\n else {\n-   return s;\n+   return s;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-29|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public boolean referredFilesChanged() throws MalformedURLException, IOException {\n for (String file : referredFiles) {\n-   if (FileUtils.isURI(file)) {\n+   if (FileUtils.isURI(file)) {\n URLConnection url = new URL(file).openConnection();\n if (url.getLastModified() > created) return true;\n }\n else if (FileUtils.isFile(file)) {\n File f = new File(file);\n if (f.lastModified() > created) return true;\n }\n }\n return false;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-30|SpecialSeperatorForDevSet|-  public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n+  public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n parseURL = url;\n URLConnection connection = url.openConnection();\n if (charset == null) {\n charset = Charset.forName("UTF-8");\n }\n Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n return internalParse(reader, target);\n }\n|SpecialSeperatorForDevSet|private void parse() throws Exception {\n BufferedReader br = null;\n InputStream httpStream = null;\n URL fileURL = new URL(url);\n URLConnection urlConnection = fileURL.openConnection();\n httpStream = urlConnection.getInputStream();\n br = new BufferedReader(new InputStreamReader(httpStream, "UTF-8"));\n String ligne;\n String post;\n String date;\n String titre;\n String resume;\n String url2DL;\n while ((ligne = br.readLine()) != null) {\n if (ligne.indexOf("div class=\"post\" id=\"post") != -1) {\n post = null;\n date = null;\n titre = null;\n try {\n post = ligne.substring(ligne.indexOf("post-") + 5, ligne.indexOf("\"", ligne.indexOf("post-")));\n ligne = br.readLine();\n date = ligne.substring(ligne.indexOf("<div class=\"date\"><span>") + 24);\n date = date.replaceAll("</span>", "").replaceAll("</div>", "").trim();\n log.info("Post : " + post + " du " + date);\n ligne = br.readLine();\n ligne = br.readLine();\n titre = ligne.substring(ligne.indexOf(">", ligne.indexOf("title")) + 1, ligne.indexOf("</a>"));\n-   titre = titre.replaceAll("&#8217;\n+   titre = titre.replaceAll("&#8217;\n", "'").replaceAll("&#8220;\n", "\"").replaceAll("&#8221;\n", "\"");\n url2DL = ligne.substring(ligne.indexOf("<a href=\"") + 9, ligne.indexOf("/\"")).trim();\n url2DL = url2DL.replace("mega-films.net", "mega-protect.com") + ".php";\n log.info("Titre : " + titre);\n log.info("To DL : " + url2DL);\n ligne = br.readLine();\n ligne = br.readLine();\n ligne = br.readLine();\n ligne = br.readLine();\n ligne = br.readLine();\n ligne = br.readLine();\n ligne = br.readLine();\n resume = ligne.substring(ligne.indexOf("<em>") + 4, ligne.indexOf("</em>"));\n resume = resume.replaceAll("&#8217;\n", "'").replaceAll("&#8220;\n", "\"").replaceAll("&#8221;\n", "\"");\n log.info("Resume : " + resume);\n }\n catch (Exception e) {\n log.error("ERREUR : Le film n'a pas pu etre parse...");\n }\n log.info("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-31|SpecialSeperatorForDevSet|private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {\n HttpClient client = new DefaultHttpClient();\n HttpGet httpGet = new HttpGet(downloadUrl);\n final File outputFile = new File(destinationFile);\n createParentDirectories(outputFile);\n FileOutputStream outputStream;\n outputStream = new FileOutputStream(outputFile);\n final HttpResponse response = client.execute(httpGet);\n if (isInterrupted()) {\n outputStream.close();\n return;\n }\n final HttpEntity entity = response.getEntity();\n InputStream inputStream = null;\n try {\n if (entity != null) {\n inputStream = entity.getContent();\n CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {\n @Override public long getSkipBetweenUpdates() {\n return entity.getContentLength() * 2 / PERCENTAGE_BASE;\n }\n @Override public void onUpdate(final long copiedLength) {\n int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());\n handleUpdate(STATUS_DOWNLOADING, percentage);\n }\n }\n;\n copyStreams(inputStream, outputStream, callback);\n }\n }\n finally {\n try {\n outputStream.close();\n if (inputStream != null) {\n inputStream.close();\n }\n }\n catch (IOException e) {\n Log.v(DictionaryForMIDs.LOG_TAG, "Exception while closing stream: " + e);\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static String fetchUrl(String urlString) {\n try {\n URL url = new URL(urlString);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n StringBuilder builder = new StringBuilder();\n while ((line = reader.readLine()) != null) {\n builder.append(line);\n }\n reader.close();\n return builder.toString();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n-   }\n+   }\n return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-32|SpecialSeperatorForDevSet|private BufferedImage _getImage(String urlStr) throws IOException {\n URL url = new URL(urlStr);\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.connect();\n InputStream in = null;\n try {\n in = conn.getInputStream();\n return ImageIO.read(in);\n-   }\n+   }\n finally {\n IOUtilities.close(in);\n }\n }\n|SpecialSeperatorForDevSet|public Reader getGETReader_bak(URL url) {\n Reader reader = null;\n if (Navigator.isVerbose()) System.out.println("Web3DService.getGETReader caching " + url);\n int contentLength = -1;\n URLConnection urlc;\n try {\n urlc = url.openConnection();\n urlc.setReadTimeout(Navigator.TIME_OUT);\n if (getEncoding() != null) {\n urlc.setRequestProperty("Authorization", "Basic " + getEncoding());\n }\n urlc.connect();\n String content_type = urlc.getContentType();\n if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;\ncharset=ISO-8859-1")) {\n InputStream is = urlc.getInputStream();\n DataInputStream d = new DataInputStream(is);\n contentLength = urlc.getContentLength();\n byte[] content = new byte[contentLength];\n if (d != null) {\n d.readFully(content, 0, contentLength);\n }\n is.close();\n d.close();\n ByteArrayInputStream bais = new ByteArrayInputStream(content);\n reader = new InputStreamReader(bais);\n }\n else if (content_type.equalsIgnoreCase("model/vrml.gzip")) {\n InputStream is = urlc.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(is);\n GZIPInputStream gis = new GZIPInputStream(bis);\n StringBuffer sb = new StringBuffer();\n BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));\n char chars[] = new char[10240];\n int len = 0;\n contentLength = 0;\n while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n }\n chars = null;\n gis.close();\n zipReader.close();\n bis.close();\n is.close();\n reader = new StringReader(sb.toString());\n }\n else if (content_type.equalsIgnoreCase("model/vrml.encrypted")) {\n InputStream is = urlc.getInputStream();\n StringBuffer sb = new StringBuffer();\n Cipher pbeCipher = createCipher();\n if (pbeCipher != null) {\n CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));\n char chars[] = new char[1024];\n int len = 0;\n contentLength = 0;\n while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n-   }\n+   }\n chars = null;\n cis.close();\n bufReader.close();\n reader = new StringReader(sb.toString());\n }\n }\n else if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) {\n InputStream is = urlc.getInputStream();\n StringBuffer sb = new StringBuffer();\n Cipher pbeCipher = createCipher();\n if (pbeCipher != null) {\n CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n GZIPInputStream gis = new GZIPInputStream(cis);\n BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));\n char chars[] = new char[1024];\n int len = 0;\n contentLength = 0;\n while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n }\n chars = null;\n bufReader.close();\n gis.close();\n cis.close();\n reader = new StringReader(sb.toString());\n }\n }\n else if (content_type.equalsIgnoreCase("text/html;\ncharset=utf-8")) {\n System.out.println("text/html;\ncharset=utf-8");\n }\n else {\n System.err.println("ContentNegotiator.startLoading unsupported MIME type: " + content_type);\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return reader;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-33|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n-   return toHexString(md.digest());\n+   return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|public static void copy(File from_file, File to_file) throws IOException {\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_file.getName());\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_file.getName());\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_file.getName());\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_file.getName());\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n-   to = new FileOutputStream(to_file);\n+   to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-34|SpecialSeperatorForDevSet|int doOne(int bid, int tid, int aid, int delta) {\n int aBalance = 0;\n if (Conn == null) {\n bench.incrementFailedTransactionCount();\n return 0;\n }\n try {\n if (Benchmark.prepared_stmt) {\n pstmt1.setInt(1, delta);\n pstmt1.setInt(2, aid);\n pstmt1.executeUpdate();\n pstmt1.clearWarnings();\n pstmt2.setInt(1, aid);\n ResultSet RS = pstmt2.executeQuery();\n pstmt2.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n pstmt3.setInt(1, delta);\n pstmt3.setInt(2, tid);\n pstmt3.executeUpdate();\n pstmt3.clearWarnings();\n pstmt4.setInt(1, delta);\n pstmt4.setInt(2, bid);\n pstmt4.executeUpdate();\n pstmt4.clearWarnings();\n pstmt5.setInt(1, tid);\n pstmt5.setInt(2, bid);\n pstmt5.setInt(3, aid);\n pstmt5.setInt(4, delta);\n pstmt5.executeUpdate();\n pstmt5.clearWarnings();\n }\n else {\n Statement Stmt = Conn.createStatement();\n String Query = "UPDATE accounts";\n Query += " SET Abalance = Abalance + " + delta;\n Query += " WHERE Aid = " + aid;\n int res = Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "SELECT Abalance";\n Query += " FROM accounts";\n Query += " WHERE Aid = " + aid;\n ResultSet RS = Stmt.executeQuery(Query);\n Stmt.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n Query = "UPDATE tellers";\n Query += " SET Tbalance = Tbalance + " + delta;\n-   Query += " WHERE Tid = " + tid;\n+   Query += " WHERE Tid = " + tid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "UPDATE branches";\n Query += " SET Bbalance = Bbalance + " + delta;\n Query += " WHERE Bid = " + bid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "INSERT INTO history(Tid, Bid, Aid, delta)";\n Query += " VALUES (";\n Query += tid + ",";\n Query += bid + ",";\n Query += aid + ",";\n Query += delta + ")";\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Stmt.close();\n }\n if (Benchmark.transactions) {\n Conn.commit();\n }\n return aBalance;\n }\n catch (java.lang.Exception e) {\n if (Benchmark.verbose) {\n System.out.println("Transaction failed: " + e.getMessage());\n e.printStackTrace();\n }\n bench.incrementFailedTransactionCount();\n if (Benchmark.transactions) {\n try {\n Conn.rollback();\n }\n catch (SQLException e1) {\n }\n }\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n logger.fine("...got destination channel " + destChannel + "...");\n-   logger.fine("...Got channels...");\n+   logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-35|SpecialSeperatorForDevSet|public String md5(String plainText) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(plainText.getBytes());\n byte[] digest = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < digest.length;\n i++) {\n plainText = Integer.toHexString(0xFF & digest[i]);\n if (plainText.length() < 2) {\n plainText = "0" + plainText;\n }\n hexString.append(plainText);\n }\n-   return hexString.toString();\n+   return hexString.toString();\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-   WritableByteChannel channel = newChannel(baos);\n+   WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-36|SpecialSeperatorForDevSet|private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\n Statement s = null;\n try {\n s = con.createStatement();\n s.executeUpdate(statement);\n-   con.commit();\n+   con.commit();\n }\n catch (Throwable e) {\n if (do_log) {\n logger.log(Level.INFO, "Update failed. Transaction is rolled back", e);\n }\n con.rollback();\n }\n }\n|SpecialSeperatorForDevSet|protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n HttpSession reqSession = request.getSession();\n ArrayList<File> uploadFiles = new ArrayList<File>();\n LOG.info("UploadServlet Upload request received");\n if (ServletFileUpload.isMultipartContent(request)) {\n LOG.debug("UploadServlet Received a multipart request.");\n }\n else {\n LOG.debug("UploadServlet Received a non-multipart request.");\n }\n String tempDirName = UUID.randomUUID().toString();\n File tempUploadDir = new File(adapter.getRootPath() + File.separator + "temp" + File.separator + tempDirName);\n tempUploadDir.getParentFile().mkdir();\n while (tempUploadDir.exists()) {\n tempDirName = UUID.randomUUID().toString();\n tempUploadDir = new File(adapter.getRootPath() + File.separator + "temp" + File.separator + tempDirName);\n }\n tempUploadDir.mkdir();\n File attachmentDir = (File) (reqSession.getAttribute("up2p:attachdir"));\n if (attachmentDir != null) {\n LOG.info("UploadServlet: Copying provided attachment to upload dir from: " + attachmentDir.getAbsolutePath());\n tempUploadDir.delete();\n attachmentDir.renameTo(tempUploadDir);\n reqSession.removeAttribute("up2p:attachdir");\n }\n LOG.info("UploadServlet: Using temporary directory: " + tempUploadDir.getPath());\n PairList paramMap = null;\n if (ServletFileUpload.isMultipartContent(request)) {\n paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\n if (paramMap.size() == 0) {\n LOG.debug("UploadServlet Parsed multipart request and " + "found no parameters. Parsing as regular" + " request instead.");\n paramMap = copyParameters(request);\n LOG.debug("UploadServlet Parsed as regular request and found " + paramMap.size() + " parameters.");\n }\n }\n else {\n paramMap = copyParameters(request);\n }\n String communityId = getCurrentCommunityId(request.getSession());\n String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\n LOG.debug("UploadServlet: Got active community: " + newcommunity);\n if (newcommunity != null) {\n communityId = newcommunity;\n LOG.debug("switching to community" + communityId);\n }\n if (communityId == null || communityId.length() == 0) {\n LOG.warn("UploadServlet Current community ID is missing from" + "the user session.");\n writeError(request, response, "The current community is unknown." + " Please select a community before performing " + "any actions.", paramMap);\n for (File f : tempUploadDir.listFiles()) {\n f.delete();\n }\n tempUploadDir.delete();\n return;\n }\n LOG.info("UploadServlet Uploading to community " + communityId + ".");\n uploadFiles.clear();\n Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\n String filename = "";\n try {\n if (uploadedFileIter.hasNext()) {\n filename = uploadedFileIter.next();\n }\n else {\n throw new IOException("UploadServlet: No up2p:filename parameters were found.");\n }\n if (filename.startsWith("file:")) filename = filename.substring(5);\n if (filename.length() == 0) {\n throw new IOException("UploadServlet: An empty up2p:filename parameter was submitted.");\n }\n File resourceFile = null;\n resourceFile = new File(adapter.getStorageDirectory(communityId), filename);\n File tempResFile = new File(tempUploadDir, filename);\n if (!tempResFile.exists() && !resourceFile.exists()) {\n throw new IOException("UploadServlet: The uploaded resource could not be found.");\n }\n if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\n resourceFile = FileUtil.createUniqueFile(resourceFile);\n LOG.info("UploadServlet: Direct upload, copying resource file.\n\tOriginal: " + tempResFile.getPath() + "\n\tNew: " + resourceFile.getPath());\n resourceFile.getParentFile().mkdir();\n FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\n FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\n filename = resourceFile.getName();\n }\n LOG.info("UploadServlet: resource file name: " + filename);\n uploadFiles.add(resourceFile);\n }\n catch (IOException e) {\n LOG.error("UploadServlet: " + e.getMessage());\n writeError(request, response, e.getMessage(), paramMap);\n return;\n }\n String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\n if (editResourceId != null && editResourceId.length() > 0) {\n LOG.debug("UploadServlet: Got edit resource: " + editResourceId);\n File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\n if (editAttach.exists() && editAttach.isDirectory()) {\n LOG.debug("UploadServlet: Copying additional attachments from: " + editAttach.getAbsolutePath());\n for (File oldFile : editAttach.listFiles()) {\n File newFile = new File(tempUploadDir, oldFile.getName());\n if (!newFile.exists()) {\n LOG.debug("UploadServlet: Copying attachment: " + oldFile.getAbsolutePath() + " to " + newFile.getAbsolutePath());\n FileOutputStream attachCopyStream = new FileOutputStream(newFile);\n FileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n }\n else {\n LOG.debug("UploadServlet: Attachment " + newFile.getName() + " explicitly replaced in new upload.");\n }\n }\n }\n }\n String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\n boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\n if (batchUpload) {\n LOG.info("UploadSerlvet Recieved batch upload request.");\n File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\n uploadFiles.clear();\n LOG.debug("UploadServlet resource file stored at: " + batchFile.getPath());\n XMLReader reader = TransformerHelper.getXMLReader();\n reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\n try {\n FileInputStream batchInput = new FileInputStream(batchFile);\n reader.parse(new InputSource(batchInput));\n batchInput.close();\n }\n catch (Exception e) {\n LOG.error("UploadServlet: Error parsing batch upload file.");\n LOG.error("UploadServlet: " + e.getMessage());\n writeError(request, response, "Uploaded content was not a valid batch resource file.", paramMap);\n return;\n }\n batchFile.delete();\n adapter.addNotification("Batch file succesfully processed into " + uploadFiles.size() + " resources.");\n }\n boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\n String id = "";\n boolean duplicateResource = false;\n int uploadCount = 0;\n for (int i = 0;\n i < uploadFiles.size();\n i++) {\n LOG.info("UploadServlet Publishing resource to WebAdapter: " + uploadFiles.get(i).getName());\n try {\n id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\n uploadFiles.remove(i);\n i--;\n uploadCount++;\n LOG.info("UploadServlet Resource published with id: " + id);\n }\n catch (IOException e) {\n LOG.warn("UploadServlet IO Error occured in reading the uploaded file: " + e.getMessage(), e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "An error occured in reading the uploaded file: " + e.getMessage(), paramMap);\n return;\n }\n catch (SAXParseException e) {\n LOG.warn("UploadServlet SAX Parse Error occured in uploaded resource: " + e.getMessage());\n String errMsg = "Invalid XML in the uploaded resource.<br/>" + e.getMessage() + "<br/><br/>File location: " + uploadFiles.get(i).getAbsolutePath() + "<br/>Line: " + e.getLineNumber() + " Column: " + e.getColumnNumber();\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, errMsg, paramMap);\n return;\n }\n catch (SAXException e) {\n LOG.warn("UploadServlet Invalid XML in uploaded resource: " + e.getMessage());\n String errMsg = "Invalid XML in uploaded resource<br/><i>" + e.getMessage() + "</i><br/>" + "File location: " + uploadFiles.get(i).getAbsolutePath();\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, errMsg, paramMap);\n return;\n }\n catch (DuplicateResourceException e) {\n LOG.info("UploadServlet Duplicate Resource: " + e.getResourceId() + " Community: " + e.getCommunityId());\n if (batchUpload) {\n if (!duplicateResource) {\n adapter.addNotification("Warning: Batch upload contained previously published " + " resources which have been discarded.");\n duplicateResource = true;\n }\n }\n else {\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n if (respondWithXml != null && respondWithXml.length() > 0) {\n writeError(request, response, "This resource is already shared with resource " + " id: " + e.getResourceId(), paramMap);\n return;\n }\n String redirect = response.encodeURL("/overwrite.jsp?up2p:community=" + e.getCommunityId() + "&up2p:resource=" + e.getResourceId());\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n return;\n }\n }\n catch (NetworkAdapterException e) {\n LOG.info("UploadServlet Error in the Network Adapter for" + " community ID " + communityId, e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "Error in the Network Adapter for this community. <br/>" + e.getMessage(), paramMap);\n return;\n }\n catch (ResourceNotFoundException e) {\n LOG.info("UploadServlet Error Resource not found " + e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "Error : <br/>" + e.getMessage(), paramMap);\n return;\n }\n }\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\n String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n if (respondWithXml != null && respondWithXml.length() > 0) {\n-   response.setContentType("text/xml");\n+   response.setContentType("text/xml");\n PrintWriter out = response.getWriter();\n out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n out.println("<upload success=\"true\" >");\n out.println("<resid>" + id + "</resid>");\n out.println("</upload>");\n }\n else if (ajaxRequest != null && ajaxRequest.length() > 0) {\n LOG.debug("UploadServlet Recieved xmlHttp request, responding with XML");\n response.setContentType("text/xml");\n PrintWriter out = response.getWriter();\n out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n out.print("<resource id=\"" + request.getParameter(HttpParams.UP2P_RESOURCE) + "\" ");\n if (request.getParameter(HttpParams.UP2P_PEERID) != null) {\n out.print("peerid=\"" + request.getParameter(HttpParams.UP2P_PEERID) + "\" ");\n }\n out.println("/>");\n }\n else if (batchUpload) {\n adapter.addNotification(uploadCount + " resources were succesfully published.");\n request.setAttribute("up2p.display.mode", "view");\n String redirect = response.encodeURL("/view.jsp?up2p:community=" + communityId);\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n }\n else if (!pushUpload) {\n request.setAttribute("up2p.display.mode", "view");\n String redirect = response.encodeURL("/view.jsp?up2p:resource=" + id);\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n }\n return;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-37|SpecialSeperatorForDevSet|private void readIntoList(URL url, Map<String, JMenuItem> list) {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n-   int commandNameBegin = inputLine.indexOf(">") + 1;\n+   int commandNameBegin = inputLine.indexOf(">") + 1;\n int commandNameEnd = inputLine.indexOf("</a>");\n JMenuItem item = new JMenuItem("<html>" + inputLine + "</html>");\n if (list == allRooms) {\n item.setActionCommand("/room " + inputLine.substring(commandNameBegin, commandNameEnd));\n }\n else {\n item.setActionCommand("/" + inputLine.substring(commandNameBegin, commandNameEnd) + " ");\n }\n item.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jTextField1.setText(e.getActionCommand());\n popup.setVisible(false);\n }\n }\n);\n list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);\n }\n in.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public Bitmap retrieveBitmap(String urlString) {\n Log.d(Constants.LOG_TAG, "making HTTP trip for image:" + urlString);\n Bitmap bitmap = null;\n try {\n URL url = new URL(urlString);\n-   URLConnection conn = url.openConnection();\n+   URLConnection conn = url.openConnection();\n conn.setConnectTimeout(3000);\n conn.setReadTimeout(5000);\n bitmap = BitmapFactory.decodeStream(conn.getInputStream());\n }\n catch (MalformedURLException e) {\n Log.e(Constants.LOG_TAG, "Exception loading image, malformed URL", e);\n }\n catch (IOException e) {\n Log.e(Constants.LOG_TAG, "Exception loading image, IO error", e);\n }\n return bitmap;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-38|SpecialSeperatorForDevSet|public static String md5Hash(String src) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(src.getBytes());\n return bytesArrayToHexString(md.digest());\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n HttpSession reqSession = request.getSession();\n ArrayList<File> uploadFiles = new ArrayList<File>();\n LOG.info("UploadServlet Upload request received");\n if (ServletFileUpload.isMultipartContent(request)) {\n LOG.debug("UploadServlet Received a multipart request.");\n }\n else {\n LOG.debug("UploadServlet Received a non-multipart request.");\n }\n String tempDirName = UUID.randomUUID().toString();\n File tempUploadDir = new File(adapter.getRootPath() + File.separator + "temp" + File.separator + tempDirName);\n tempUploadDir.getParentFile().mkdir();\n while (tempUploadDir.exists()) {\n tempDirName = UUID.randomUUID().toString();\n tempUploadDir = new File(adapter.getRootPath() + File.separator + "temp" + File.separator + tempDirName);\n }\n tempUploadDir.mkdir();\n File attachmentDir = (File) (reqSession.getAttribute("up2p:attachdir"));\n if (attachmentDir != null) {\n LOG.info("UploadServlet: Copying provided attachment to upload dir from: " + attachmentDir.getAbsolutePath());\n tempUploadDir.delete();\n attachmentDir.renameTo(tempUploadDir);\n reqSession.removeAttribute("up2p:attachdir");\n }\n LOG.info("UploadServlet: Using temporary directory: " + tempUploadDir.getPath());\n PairList paramMap = null;\n if (ServletFileUpload.isMultipartContent(request)) {\n paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\n if (paramMap.size() == 0) {\n LOG.debug("UploadServlet Parsed multipart request and " + "found no parameters. Parsing as regular" + " request instead.");\n paramMap = copyParameters(request);\n LOG.debug("UploadServlet Parsed as regular request and found " + paramMap.size() + " parameters.");\n }\n }\n else {\n paramMap = copyParameters(request);\n }\n String communityId = getCurrentCommunityId(request.getSession());\n String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\n LOG.debug("UploadServlet: Got active community: " + newcommunity);\n if (newcommunity != null) {\n communityId = newcommunity;\n LOG.debug("switching to community" + communityId);\n }\n if (communityId == null || communityId.length() == 0) {\n LOG.warn("UploadServlet Current community ID is missing from" + "the user session.");\n writeError(request, response, "The current community is unknown." + " Please select a community before performing " + "any actions.", paramMap);\n for (File f : tempUploadDir.listFiles()) {\n f.delete();\n }\n tempUploadDir.delete();\n return;\n }\n LOG.info("UploadServlet Uploading to community " + communityId + ".");\n uploadFiles.clear();\n Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\n String filename = "";\n try {\n if (uploadedFileIter.hasNext()) {\n filename = uploadedFileIter.next();\n }\n else {\n throw new IOException("UploadServlet: No up2p:filename parameters were found.");\n }\n if (filename.startsWith("file:")) filename = filename.substring(5);\n if (filename.length() == 0) {\n throw new IOException("UploadServlet: An empty up2p:filename parameter was submitted.");\n }\n File resourceFile = null;\n resourceFile = new File(adapter.getStorageDirectory(communityId), filename);\n File tempResFile = new File(tempUploadDir, filename);\n if (!tempResFile.exists() && !resourceFile.exists()) {\n throw new IOException("UploadServlet: The uploaded resource could not be found.");\n }\n if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\n resourceFile = FileUtil.createUniqueFile(resourceFile);\n LOG.info("UploadServlet: Direct upload, copying resource file.\n\tOriginal: " + tempResFile.getPath() + "\n\tNew: " + resourceFile.getPath());\n resourceFile.getParentFile().mkdir();\n FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\n FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\n filename = resourceFile.getName();\n }\n LOG.info("UploadServlet: resource file name: " + filename);\n uploadFiles.add(resourceFile);\n }\n catch (IOException e) {\n LOG.error("UploadServlet: " + e.getMessage());\n writeError(request, response, e.getMessage(), paramMap);\n return;\n }\n String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\n if (editResourceId != null && editResourceId.length() > 0) {\n LOG.debug("UploadServlet: Got edit resource: " + editResourceId);\n File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\n if (editAttach.exists() && editAttach.isDirectory()) {\n LOG.debug("UploadServlet: Copying additional attachments from: " + editAttach.getAbsolutePath());\n for (File oldFile : editAttach.listFiles()) {\n File newFile = new File(tempUploadDir, oldFile.getName());\n if (!newFile.exists()) {\n LOG.debug("UploadServlet: Copying attachment: " + oldFile.getAbsolutePath() + " to " + newFile.getAbsolutePath());\n FileOutputStream attachCopyStream = new FileOutputStream(newFile);\n FileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n }\n else {\n LOG.debug("UploadServlet: Attachment " + newFile.getName() + " explicitly replaced in new upload.");\n }\n }\n }\n }\n String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\n boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\n if (batchUpload) {\n LOG.info("UploadSerlvet Recieved batch upload request.");\n File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\n uploadFiles.clear();\n LOG.debug("UploadServlet resource file stored at: " + batchFile.getPath());\n XMLReader reader = TransformerHelper.getXMLReader();\n reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\n try {\n FileInputStream batchInput = new FileInputStream(batchFile);\n reader.parse(new InputSource(batchInput));\n batchInput.close();\n }\n catch (Exception e) {\n LOG.error("UploadServlet: Error parsing batch upload file.");\n LOG.error("UploadServlet: " + e.getMessage());\n writeError(request, response, "Uploaded content was not a valid batch resource file.", paramMap);\n return;\n }\n batchFile.delete();\n adapter.addNotification("Batch file succesfully processed into " + uploadFiles.size() + " resources.");\n }\n boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\n String id = "";\n boolean duplicateResource = false;\n int uploadCount = 0;\n for (int i = 0;\n i < uploadFiles.size();\n i++) {\n LOG.info("UploadServlet Publishing resource to WebAdapter: " + uploadFiles.get(i).getName());\n try {\n id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\n uploadFiles.remove(i);\n i--;\n uploadCount++;\n LOG.info("UploadServlet Resource published with id: " + id);\n }\n catch (IOException e) {\n LOG.warn("UploadServlet IO Error occured in reading the uploaded file: " + e.getMessage(), e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "An error occured in reading the uploaded file: " + e.getMessage(), paramMap);\n return;\n-   }\n+   }\n catch (SAXParseException e) {\n LOG.warn("UploadServlet SAX Parse Error occured in uploaded resource: " + e.getMessage());\n String errMsg = "Invalid XML in the uploaded resource.<br/>" + e.getMessage() + "<br/><br/>File location: " + uploadFiles.get(i).getAbsolutePath() + "<br/>Line: " + e.getLineNumber() + " Column: " + e.getColumnNumber();\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, errMsg, paramMap);\n return;\n }\n catch (SAXException e) {\n LOG.warn("UploadServlet Invalid XML in uploaded resource: " + e.getMessage());\n String errMsg = "Invalid XML in uploaded resource<br/><i>" + e.getMessage() + "</i><br/>" + "File location: " + uploadFiles.get(i).getAbsolutePath();\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, errMsg, paramMap);\n return;\n }\n catch (DuplicateResourceException e) {\n LOG.info("UploadServlet Duplicate Resource: " + e.getResourceId() + " Community: " + e.getCommunityId());\n if (batchUpload) {\n if (!duplicateResource) {\n adapter.addNotification("Warning: Batch upload contained previously published " + " resources which have been discarded.");\n duplicateResource = true;\n }\n }\n else {\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n if (respondWithXml != null && respondWithXml.length() > 0) {\n writeError(request, response, "This resource is already shared with resource " + " id: " + e.getResourceId(), paramMap);\n return;\n }\n String redirect = response.encodeURL("/overwrite.jsp?up2p:community=" + e.getCommunityId() + "&up2p:resource=" + e.getResourceId());\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n return;\n }\n }\n catch (NetworkAdapterException e) {\n LOG.info("UploadServlet Error in the Network Adapter for" + " community ID " + communityId, e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "Error in the Network Adapter for this community. <br/>" + e.getMessage(), paramMap);\n return;\n }\n catch (ResourceNotFoundException e) {\n LOG.info("UploadServlet Error Resource not found " + e);\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n writeError(request, response, "Error : <br/>" + e.getMessage(), paramMap);\n return;\n }\n }\n uploadFilesCleanup(uploadFiles, tempUploadDir);\n String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\n String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n if (respondWithXml != null && respondWithXml.length() > 0) {\n response.setContentType("text/xml");\n PrintWriter out = response.getWriter();\n out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n out.println("<upload success=\"true\" >");\n out.println("<resid>" + id + "</resid>");\n out.println("</upload>");\n }\n else if (ajaxRequest != null && ajaxRequest.length() > 0) {\n LOG.debug("UploadServlet Recieved xmlHttp request, responding with XML");\n response.setContentType("text/xml");\n PrintWriter out = response.getWriter();\n out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n out.print("<resource id=\"" + request.getParameter(HttpParams.UP2P_RESOURCE) + "\" ");\n if (request.getParameter(HttpParams.UP2P_PEERID) != null) {\n out.print("peerid=\"" + request.getParameter(HttpParams.UP2P_PEERID) + "\" ");\n }\n out.println("/>");\n }\n else if (batchUpload) {\n adapter.addNotification(uploadCount + " resources were succesfully published.");\n request.setAttribute("up2p.display.mode", "view");\n String redirect = response.encodeURL("/view.jsp?up2p:community=" + communityId);\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n }\n else if (!pushUpload) {\n request.setAttribute("up2p.display.mode", "view");\n String redirect = response.encodeURL("/view.jsp?up2p:resource=" + id);\n LOG.info("UploadServlet Redirecting to " + redirect);\n RequestDispatcher rd = request.getRequestDispatcher(redirect);\n rd.forward(request, response);\n }\n return;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-39|SpecialSeperatorForDevSet|private static String getVersion() {\n debug.print("");\n String version = null;\n String version_url = "http://kmttg.googlecode.com/svn/trunk/version";\n try {\n URL url = new URL(version_url);\n URLConnection con = url.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) version = inputLine;\n in.close();\n }\n-   catch (Exception ex) {\n+   catch (Exception ex) {\n version = null;\n }\n return version;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n-   try {\n+   try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-40|SpecialSeperatorForDevSet|public byte[] getBytesFromUrl(String url) {\n try {\n HttpGet get = new HttpGet(url);\n HttpResponse response = this.getHttpClient().execute(get);\n HttpEntity entity = response.getEntity();\n if (entity == null) {\n-   throw new RuntimeException("response body was empty");\n+   throw new RuntimeException("response body was empty");\n }\n return EntityUtils.toByteArray(entity);\n }\n catch (RuntimeException ex) {\n throw ex;\n }\n catch (Exception ex) {\n throw new RuntimeException(ex);\n }\n }\n|SpecialSeperatorForDevSet|protected String getRequestContent(String urlText) throws Exception {\n URL url = new URL(urlText);\n HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\n urlcon.connect();\n BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\n String line = reader.readLine();\n reader.close();\n urlcon.disconnect();\n return line;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-41|SpecialSeperatorForDevSet|public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n }\n catch (NoSuchAlgorithmException nsae) {\n-   _log.error(nsae, nsae);\n+   _log.error(nsae, nsae);\n }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|-  public static String digest(String algorithm, String text) {\n+  public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n }\n catch (NoSuchAlgorithmException nsae) {\n _log.error(nsae, nsae);\n }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-41|SpecialSeperatorForDevSet|public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n }\n catch (NoSuchAlgorithmException nsae) {\n _log.error(nsae, nsae);\n-   }\n+   }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|public synchronized String encryptPassword(String passwordString) throws Exception {\n MessageDigest digest = null;\n digest = MessageDigest.getInstance("SHA");\n digest.update(passwordString.getBytes("UTF-8"));\n-   byte raw[] = digest.digest();\n+   byte raw[] = digest.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-42|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n-   IOUtils.copy(source, podArchiveOutputStream);\n+   IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|public void conMail(MailObject mail) throws NetworkException, ContentException {\n HttpClient client = HttpConfig.newInstance();\n String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + "&" + HttpConfig.BBS_MAIL_N_PARAM_NAME + "=" + mail.getNumber();\n HttpGet get = new HttpGet(url);\n try {\n HttpResponse response = client.execute(get);\n HttpEntity entity = response.getEntity();\n if (HTTPUtil.isXmlContentType(response)) {\n Document doc = XmlOperator.readDocument(entity.getContent());\n BBSBodyParseHelper.parseMailContent(doc, mail);\n }\n else {\n String msg = BBSBodyParseHelper.parseFailMsg(entity);\n throw new ContentException(msg);\n }\n }\n catch (ClientProtocolException e) {\n e.printStackTrace();\n throw new NetworkException(e);\n }\n catch (IOException e) {\n e.printStackTrace();\n throw new NetworkException(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-43|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n-   logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n+   logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|private void addQDInformation() {\n try {\n long qdDate = System.currentTimeMillis();\n if (_local == true) {\n File qdFile = new File("qdinfo.dat");\n if (!qdFile.exists()) {\n return;\n }\n qdDate = qdFile.lastModified();\n }\n if (qdDate > this._qdFileDate) {\n this._qdFileDate = qdDate;\n for (int ii = 0;\n ii < this._projectInfo.size();\n ii++) {\n Information info = getInfo(ii);\n if (info != null) {\n info._qdValue = null;\n }\n-   }\n+   }\n Reader reader = null;\n if (_local == true) {\n reader = new FileReader("qdinfo.dat");\n }\n else {\n StringBuffer urlName = new StringBuffer();\n urlName.append("http://boston.quik.com/rph/");\n urlName.append("qdinfo.dat");\n try {\n URL url = new URL(urlName.toString());\n InputStream stream = url.openStream();\n reader = new InputStreamReader(stream);\n }\n catch (MalformedURLException mue) {\n mue.printStackTrace();\n }\n }\n BufferedReader file = new BufferedReader(reader);\n try {\n String line = null;\n while ((line = file.readLine()) != null) {\n if (line.startsWith("pg ")) {\n this._qdDate = Long.parseLong(line.substring(3), 16);\n this._qdDate = (this._qdDate + 946684800) * 1000;\n }\n else if (line.startsWith("pt ")) {\n line = line.substring(3).trim();\n int pos = -1;\n while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\n int projectNum = 0;\n Double value = null;\n if (pos > 0) {\n projectNum = Integer.parseInt(line.substring(0, pos));\n line = line.substring(pos).trim();\n }\n pos = line.indexOf(' ');\n if (pos > 0) {\n value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\n line = line.substring(pos).trim();\n }\n Information info = getInfo(projectNum);\n if (info == null) {\n info = createInfo(projectNum);\n }\n if (info._qdValue == null) {\n info._qdValue = value;\n }\n }\n }\n }\n }\n finally {\n file.close();\n }\n }\n }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-44|SpecialSeperatorForDevSet|public static byte[] getSystemStateHash() {\n MessageDigest sha1;\n try {\n sha1 = MessageDigest.getInstance("SHA1");\n }\n catch (Exception e) {\n throw new Error("Error in RandomSeed, no sha1 hash");\n-   }\n+   }\n sha1.update((byte) System.currentTimeMillis());\n sha1.update((byte) Runtime.getRuntime().totalMemory());\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update(stackDump(new Throwable()));\n try {\n Properties props = System.getProperties();\n Enumeration names = props.propertyNames();\n while (names.hasMoreElements()) {\n String name = (String) names.nextElement();\n sha1.update(name.getBytes());\n sha1.update(props.getProperty(name).getBytes());\n }\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n try {\n sha1.update(InetAddress.getLocalHost().toString().getBytes());\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n Runtime.getRuntime().gc();\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update((byte) System.currentTimeMillis());\n return sha1.digest();\n }\n|SpecialSeperatorForDevSet|public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {\n FileReader reader = null;\n Writer writer = null;\n try {\n reader = new FileReader(sourceFile);\n logger.info("Using source file: " + trimPath(userDir, sourceFile));\n if (!destinationFile.getParentFile().exists()) {\n createDirectory(destinationFile.getParentFile());\n }\n writer = new FileWriter(destinationFile);\n logger.info("Destination file: " + trimPath(userDir, destinationFile));\n execute(reader, writer, conversionType, java2HtmlConfig);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n if (writer != null) {\n try {\n writer.close();\n writer = null;\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (reader != null) {\n try {\n reader.close();\n reader = null;\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-45|SpecialSeperatorForDevSet|public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n-   String urlStr = System.getProperty(propertyName);\n+   String urlStr = System.getProperty(propertyName);\n if (urlStr == null || urlStr.length() == 0) {\n return null;\n }\n InputStream in = null;\n DOMRetriever xmlDoc = null;\n try {\n URL url = new URL(urlStr);\n xmlDoc = new DOMRetriever(in = url.openStream());\n }\n catch (MalformedURLException e) {\n throw new RuntimeException(e);\n }\n finally {\n if (in != null) in.close();\n }\n return newInstance(xmlDoc);\n }\n|SpecialSeperatorForDevSet|@Override public void Start() {\n try {\n Enumeration<URL> resources = Configurator.class.getClassLoader().getResources(IOCContainer.GetApplicationName() + ".config");\n while (resources.hasMoreElements()) {\n URL url = resources.nextElement();\n if (Logger.logger.isDebugEnabled()) {\n Logger.logger.debug("Loading '" + url + "'");\n }\n JSONValue configFileContents = JSONValue.Decode(url.openStream(), url.toString());\n if (configFileContents instanceof JSONObjectValue) {\n for (Configurable configurable : IOCContainer.LookupAll(Configurable.class)) {\n JSONValue jsonData = ((JSONObjectValue) configFileContents).GetProperty(configurable.GetConfigSectionName());\n-   if (jsonData != null) {\n+   if (jsonData != null) {\n if (Logger.logger.isDebugEnabled()) {\n Logger.logger.debug("Configurging " + configurable.getClass() + " with '" + jsonData.Encode());\n }\n try {\n configurable.Configure(jsonData);\n }\n catch (Throwable th1) {\n Logger.logger.error("Caught throwable while configuring " + configurable.getClass() + ":" + th1.getMessage() + ". IGNORED.", th1);\n Logger.logger.error("[Continued]. Config Data was:" + jsonData.Encode());\n }\n }\n }\n }\n else {\n Logger.logger.error("'" + url + "' does not contain a json object. Skipping and looking for other applciation.config files in classpath ...");\n }\n }\n }\n catch (Throwable th) {\n throw new RuntimeException("Exception while attempting to load application.config:'" + th.getMessage() + "'", th);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-46|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n-   sha1hash = md.digest();\n+   sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|private void tail(String[] cmd, int pos) throws IOException {\n CommandFormat c = new CommandFormat("tail", 1, 1, "f");\n String src = null;\n Path path = null;\n try {\n List<String> parameters = c.parse(cmd, pos);\n src = parameters.get(0);\n-   }\n+   }\n catch (IllegalArgumentException iae) {\n System.err.println("Usage: java FsShell " + TAIL_USAGE);\n throw iae;\n }\n boolean foption = c.getOpt("f") ? true : false;\n path = new Path(src);\n FileSystem srcFs = path.getFileSystem(getConf());\n if (srcFs.isDirectory(path)) {\n throw new IOException("Source must be a file.");\n }\n long fileSize = srcFs.getFileStatus(path).getLen();\n long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n while (true) {\n FSDataInputStream in = srcFs.open(path);\n in.seek(offset);\n IOUtils.copyBytes(in, System.out, 1024, false);\n offset = in.getPos();\n in.close();\n if (!foption) {\n break;\n }\n fileSize = srcFs.getFileStatus(path).getLen();\n offset = (fileSize > offset) ? offset : fileSize;\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e) {\n break;\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-47|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n-   catch (NoSuchAlgorithmException e1) {\n+   catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n|SpecialSeperatorForDevSet|public static TopicMap getTopicMap(URL url) {\n String baseURI = url.toString();\n InputStream inputStream = null;\n try {\n-   inputStream = url.openStream();\n+   inputStream = url.openStream();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return getTopicMap(inputStream, baseURI);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-48|SpecialSeperatorForDevSet|private void updateFile(File file) throws FileNotFoundException, IOException {\n File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, ""));\n-   FileChannel in = null;\n+   FileChannel in = null;\n FileChannel out = null;\n try {\n if (!destFile.exists()) {\n destFile.getParentFile().mkdirs();\n destFile.createNewFile();\n }\n in = new FileInputStream(file).getChannel();\n out = new FileOutputStream(destFile).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (out != null) out.close();\n if (in != null) in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void testHttpsConnection_Not_Found_Response() throws Throwable {\n setUpStoreProperties();\n-   try {\n+   try {\n SSLContext ctx = getContext();\n ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n TestHostnameVerifier hnv = new TestHostnameVerifier();\n HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n URL url = new URL("https://localhost:" + ss.getLocalPort());\n HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n try {\n doInteraction(connection, ss, NOT_FOUND_CODE);\n fail("Expected exception was not thrown.");\n }\n catch (FileNotFoundException e) {\n if (DO_LOG) {\n System.out.println("Expected exception was thrown: " + e.getMessage());\n }\n }\n connection.connect();\n }\n finally {\n tearDownStoreProperties();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-49|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n return file.getAbsolutePath();\n }\n else {\n return url.toString();\n }\n }\n-   catch (Throwable t) {\n+   catch (Throwable t) {\n }\n return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n-   md.update(eventstr.getBytes("utf-8"));\n+   md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-50|SpecialSeperatorForDevSet|private InputStream openRemoteStream(String remoteURL, String pathSuffix) {\n URL url;\n InputStream in = null;\n try {\n url = new URL(remoteURL + pathSuffix);\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n in = connection.getInputStream();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n }\n return in;\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) {\n sb.append('0');\n }\n-   sb.append(Integer.toHexString(b));\n+   sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-51|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n-   finally {\n+   finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void addQDInformation() {\n try {\n long qdDate = System.currentTimeMillis();\n if (_local == true) {\n File qdFile = new File("qdinfo.dat");\n if (!qdFile.exists()) {\n return;\n }\n qdDate = qdFile.lastModified();\n }\n if (qdDate > this._qdFileDate) {\n this._qdFileDate = qdDate;\n for (int ii = 0;\n ii < this._projectInfo.size();\n ii++) {\n Information info = getInfo(ii);\n if (info != null) {\n info._qdValue = null;\n }\n }\n Reader reader = null;\n if (_local == true) {\n reader = new FileReader("qdinfo.dat");\n }\n else {\n StringBuffer urlName = new StringBuffer();\n urlName.append("http://boston.quik.com/rph/");\n-   urlName.append("qdinfo.dat");\n+   urlName.append("qdinfo.dat");\n try {\n URL url = new URL(urlName.toString());\n InputStream stream = url.openStream();\n reader = new InputStreamReader(stream);\n }\n catch (MalformedURLException mue) {\n mue.printStackTrace();\n }\n }\n BufferedReader file = new BufferedReader(reader);\n try {\n String line = null;\n while ((line = file.readLine()) != null) {\n if (line.startsWith("pg ")) {\n this._qdDate = Long.parseLong(line.substring(3), 16);\n this._qdDate = (this._qdDate + 946684800) * 1000;\n }\n else if (line.startsWith("pt ")) {\n line = line.substring(3).trim();\n int pos = -1;\n while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\n int projectNum = 0;\n Double value = null;\n if (pos > 0) {\n projectNum = Integer.parseInt(line.substring(0, pos));\n line = line.substring(pos).trim();\n }\n pos = line.indexOf(' ');\n if (pos > 0) {\n value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\n line = line.substring(pos).trim();\n }\n Information info = getInfo(projectNum);\n if (info == null) {\n info = createInfo(projectNum);\n }\n if (info._qdValue == null) {\n info._qdValue = value;\n }\n }\n }\n }\n }\n finally {\n file.close();\n }\n }\n }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-52|SpecialSeperatorForDevSet|@Test public void test_validate_geo_getEvents() {\n try {\n SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");\n File schemaLocation = new File("tes.xsd");\n Schema schema = factory.newSchema(schemaLocation);\n-   Validator validator = schema.newValidator();\n+   Validator validator = schema.newValidator();\n URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026");\n InputStream inputStream = url.openStream();\n Source source = new StreamSource(inputStream);\n validator.validate(source);\n }\n catch (IOException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("File not found", true);\n }\n catch (SAXException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("Schema did not validate", true);\n }\n assertTrue(true);\n }\n|SpecialSeperatorForDevSet|private void loadDynamically(File result, String extraPath) {\n URL url = null;\n InputStream is = null;\n-   FileOutputStream fos = null;\n+   FileOutputStream fos = null;\n try {\n url = new URL(homeServerUrl + extraPath);\n is = url.openStream();\n fos = new FileOutputStream(result);\n byte[] buff = new byte[8192];\n int nbRead;\n while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);\n }\n catch (IOException e) {\n throw new StellariumException("Cannot dynamically load " + result + " from " + url);\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n e.printStackTrace(System.out);\n }\n }\n if (fos != null) {\n try {\n fos.close();\n }\n catch (IOException e) {\n e.printStackTrace(System.out);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-53|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n-   catch (IOException ioe) {\n+   catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-53|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   catch (UnrecoverableKeyException e) {\n+   catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n-   int b2, b3;\n+   int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-54|SpecialSeperatorForDevSet|protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {\n-   HttpPost request = new HttpPost(serviceUri);\n+   HttpPost request = new HttpPost(serviceUri);\n HttpParams params = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());\n HttpConnectionParams.setSoTimeout(params, getSoTimeout());\n HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);\n request.setParams(params);\n request.addHeader("Authorization", "Basic " + Base64Coder.encodeString(serviceUser + ":" + servicePass));\n HttpEntity entity;\n try {\n entity = new JSONEntity(jsonRequest);\n }\n catch (UnsupportedEncodingException e1) {\n throw new JSONRPCException("Unsupported encoding", e1);\n }\n request.setEntity(entity);\n try {\n long t = System.currentTimeMillis();\n HttpResponse response = httpClient.execute(request);\n t = System.currentTimeMillis() - t;\n Log.d("json-rpc", "Request time :" + t);\n String responseString = EntityUtils.toString(response.getEntity());\n responseString = responseString.trim();\n JSONObject jsonResponse = new JSONObject(responseString);\n if (jsonResponse.has("error")) {\n Object jsonError = jsonResponse.get("error");\n if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get("error"));\n return jsonResponse;\n }\n else {\n return jsonResponse;\n }\n }\n catch (ClientProtocolException e) {\n throw new JSONRPCException("HTTP error", e);\n }\n catch (IOException e) {\n throw new JSONRPCException("IO error", e);\n }\n catch (JSONException e) {\n throw new JSONRPCException("Invalid JSON response", e);\n }\n }\n|SpecialSeperatorForDevSet|public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {\n Assert.notNull(resourceName, "Resource name must not be null");\n-   ClassLoader clToUse = classLoader;\n+   ClassLoader clToUse = classLoader;\n if (clToUse == null) {\n clToUse = ClassUtils.getDefaultClassLoader();\n }\n Properties properties = new Properties();\n Enumeration urls = clToUse.getResources(resourceName);\n while (urls.hasMoreElements()) {\n URL url = (URL) urls.nextElement();\n InputStream is = null;\n try {\n URLConnection con = url.openConnection();\n con.setUseCaches(false);\n is = con.getInputStream();\n properties.load(is);\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n }\n return properties;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-55|SpecialSeperatorForDevSet|public String generateToken(String code) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA1");\n-   md.update(code.getBytes());\n+   md.update(code.getBytes());\n byte[] bytes = md.digest();\n return toHex(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException("SHA1 missing");\n }\n }\n|SpecialSeperatorForDevSet|public String generateToken(String code) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA1");\n-   md.update(code.getBytes());\n+   md.update(code.getBytes());\n byte[] bytes = md.digest();\n return toHex(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException("SHA1 missing");\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-55|SpecialSeperatorForDevSet|public String generateToken(String code) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA1");\n md.update(code.getBytes());\n byte[] bytes = md.digest();\n return toHex(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException("SHA1 missing");\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String getMD5Hash(String in) {\n StringBuffer result = new StringBuffer(32);\n try {\n-   MessageDigest md5 = MessageDigest.getInstance("MD5");\n+   MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(in.getBytes());\n Formatter f = new Formatter(result);\n for (byte b : md5.digest()) {\n f.format("%02x", b);\n }\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n return result.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-56|SpecialSeperatorForDevSet|private MediaWikiResult getFromUri(String url) throws OntologyServiceException {\n try {\n logger.info("getting " + url);\n HttpURLConnection connection = (java.net.HttpURLConnection) new URL(url).openConnection();\n connection.setRequestProperty("User-Agent", "OntoCat-" + Math.random());\n BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());\n JAXBContext jaxbContext = JAXBContext.newInstance("uk.ac.ebi.ontocat.mediawiki.jaxb");\n Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n return (MediaWikiResult) unmarshaller.unmarshal(bin);\n }\n catch (Exception e) {\n e.printStackTrace();\n throw new OntologyServiceException(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n File srcDir = new File(args[0]);\n File dstDir = new File(args[1]);\n File[] srcFiles = srcDir.listFiles();\n for (File f : srcFiles) {\n if (f.isDirectory()) continue;\n try {\n FileChannel srcChannel = new FileInputStream(f).getChannel();\n FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty("file.separator") + f.getName()).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(1024);\n int nr = 0;\n srcChannel.position(nr);\n nr += srcChannel.read(buffer);\n while (nr < f.length()) {\n buffer.flip();\n-   dstChannel.write(buffer);\n+   dstChannel.write(buffer);\n buffer.clear();\n nr += srcChannel.read(buffer);\n }\n srcChannel.close();\n dstChannel.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-57|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n-   digest.update(PasswordSalt.getBytes("UTF-16"));\n+   digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|public String shorten(String url) {\n List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n qparams.add(new BasicNameValuePair("version", "2.0.1"));\n qparams.add(new BasicNameValuePair("longUrl", url));\n-   if (login != null) {\n+   if (login != null) {\n qparams.add(new BasicNameValuePair("login", login));\n qparams.add(new BasicNameValuePair("apiKey", apiKey));\n qparams.add(new BasicNameValuePair("history", "1"));\n }\n try {\n BasicHttpParams params = new BasicHttpParams();\n DefaultHttpClient httpclient = new DefaultHttpClient(params);\n URI uri = URIUtils.createURI("http", "api.j.mp", -1, "/shorten", URLEncodedUtils.format(qparams, "UTF-8"), null);\n HttpGet httpget = new HttpGet(uri);\n if (logger.isDebugEnabled()) logger.debug("HttpGet.uri={\n}\n", httpget.getURI());\n HttpResponse response = httpclient.execute(httpget);\n HttpEntity entity = response.getEntity();\n if (entity != null) {\n InputStream instream = entity.getContent();\n JsonFactory f = new JsonFactory();\n JsonParser jp = f.createJsonParser(instream);\n JmpShortenResponse responseObj = new JmpShortenResponse();\n for (;\n ;\n ) {\n JsonToken token = jp.nextToken();\n String fieldname = jp.getCurrentName();\n if (logger.isDebugEnabled()) logger.debug("Token={\n}\n, currentName={\n}\n", token, fieldname);\n if (token == JsonToken.START_OBJECT) {\n continue;\n }\n if (token == JsonToken.END_OBJECT) {\n break;\n }\n if ("errorCode".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setErrorCode(jp.getIntValue());\n }\n else if ("errorMessage".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setErrorMessage(jp.getText());\n }\n else if ("statusCode".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setStatusCode(jp.getText());\n }\n else if ("results".equals(fieldname)) {\n Map<String, ShortenedUrl> results = parseResults(jp);\n responseObj.setResults(results);\n }\n else {\n throw new IllegalStateException("Unrecognized field '" + fieldname + "'!");\n }\n }\n Map<String, ShortenedUrl> results = responseObj.getResults();\n if (results == null) {\n return null;\n }\n ShortenedUrl shortened = results.get(url);\n if (shortened == null) {\n return null;\n }\n if (logger.isDebugEnabled()) logger.debug("JmpShortenResponse: {\n}\n", responseObj);\n if ("OK".equals(responseObj.getStatusCode())) {\n return shortened.getShortUrl();\n }\n if (logger.isWarnEnabled()) logger.warn("JmpShortenResponse: {\n}\n", responseObj);\n }\n }\n catch (IOException ex) {\n if (logger.isWarnEnabled()) logger.warn("Exception!", ex);\n }\n catch (URISyntaxException ex) {\n if (logger.isWarnEnabled()) logger.warn("Exception!", ex);\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-58|SpecialSeperatorForDevSet|private static FrameworkFactory getFrameworkFactory() throws Exception {\n URL url = Main.class.getClassLoader().getResource("META-INF/services/org.osgi.framework.launch.FrameworkFactory");\n-   if (url != null) {\n+   if (url != null) {\n BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n try {\n for (String s = br.readLine();\n s != null;\n s = br.readLine()) {\n s = s.trim();\n if ((s.length() > 0) && (s.charAt(0) != '#')) {\n return (FrameworkFactory) Class.forName(s).newInstance();\n }\n }\n }\n finally {\n if (br != null) br.close();\n }\n }\n throw new Exception("Could not find framework factory.");\n }\n|SpecialSeperatorForDevSet|public static boolean doTest(Getter<?> context, Document node) {\n try {\n URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, "url"), context));\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n Assert.isTrue(conn.getResponseCode() < 400);\n conn.disconnect();\n-   return true;\n+   return true;\n }\n catch (Exception e) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-59|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n-   FileChannel destination = new FileOutputStream(out).getChannel();\n+   FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-59|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n-   FileChannel source = new FileInputStream(in).getChannel();\n+   FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-60|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n-   rs = pst2.executeQuery();\n+   rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n else {\n retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n StringBuffer sb = new StringBuffer();\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA-512");\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n throw new Exception(e.getMessage());\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new Exception(e.getMessage());\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-61|SpecialSeperatorForDevSet|private static boolean setBundleInfoName(String location, List<BundleInfo> list) {\n try {\n URL url = new URL(location);\n BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));\n while (true) {\n String line = br.readLine();\n if (line == null) {\n break;\n }\n int pos1 = line.indexOf('=');\n-   if (pos1 < 0) {\n+   if (pos1 < 0) {\n continue;\n }\n String bundleSymbolicName = line.substring(0, pos1);\n String bundleName = line.substring(pos1 + 1);\n for (BundleInfo info : list) {\n if (info.bundleSymbolicName.equals(bundleSymbolicName)) {\n info.bundleName = bundleName;\n break;\n }\n }\n }\n return true;\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return false;\n }\n|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n-   try {\n+   try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-62|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n-   finally {\n+   finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private String postXml(String url, String soapAction, String xml) {\n try {\n URLConnection conn = new URL(url).openConnection();\n if (conn instanceof HttpURLConnection) {\n HttpURLConnection hConn = (HttpURLConnection) conn;\n hConn.setRequestMethod("POST");\n }\n conn.setConnectTimeout(this.connectionTimeout);\n conn.setReadTimeout(this.connectionTimeout);\n conn.setRequestProperty("Content-Type", "text/xml;\n charset=utf-8");\n conn.setRequestProperty("Accept", "application/soap+xml, text/*");\n if (soapAction != null) {\n conn.setRequestProperty("SOAPAction", soapAction);\n }\n conn.setDoOutput(true);\n OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n out.write(xml);\n out.close();\n BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n StringBuilder buf = new StringBuilder();\n String str;\n while ((str = resp.readLine()) != null) {\n-   buf.append(str);\n+   buf.append(str);\n }\n return buf.toString();\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-63|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n-   }\n+   }\n }\n connection.commit();\n }\n catch (Exception ex) {\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n-   }\n+   }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-64|SpecialSeperatorForDevSet|public static String fetchUrl(String urlString) {\n-   try {\n+   try {\n URL url = new URL(urlString);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n StringBuilder builder = new StringBuilder();\n while ((line = reader.readLine()) != null) {\n builder.append(line);\n }\n reader.close();\n return builder.toString();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n return "";\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-65|SpecialSeperatorForDevSet|private void reload() {\n if (xml != null) {\n try {\n String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());\n-   if (currentDate.equalsIgnoreCase(exchangeRateDate)) {\n+   if (currentDate.equalsIgnoreCase(exchangeRateDate)) {\n return;\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n XPath xpath = null;\n try {\n DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n URLConnection conn = null;\n URL url = new URL("http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml");\n conn = url.openConnection();\n xml = docBuilder.parse(conn.getInputStream());\n xpath = XPathFactory.newInstance().newXPath();\n exchangeRateDate = xpath.evaluate("/Envelope/Cube/Cube/@time", xml);\n xpath = XPathFactory.newInstance().newXPath();\n NodeList currenciesNode = (NodeList) xpath.evaluate("/Envelope/Cube/Cube/Cube[@currency]", xml, XPathConstants.NODESET);\n currencies = new String[currenciesNode.getLength()];\n for (int i = 0;\n i < currencies.length;\n i++) {\n currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem("currency").getTextContent();\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public boolean update(String dbName, Query[] queries) throws ServiceException {\n Connection con = null;\n PreparedStatement pstmt = null;\n int rows = 0;\n try {\n con = getDbConnection().getConnection(dbName);\n con.setAutoCommit(false);\n for (int i = 0;\n i < queries.length;\n i++) {\n Query query = queries[i];\n System.out.println(query.getSql());\n pstmt = con.prepareStatement(query.getSql());\n addParametersToQuery(query, pstmt);\n rows += pstmt.executeUpdate();\n }\n con.commit();\n return rows > 0;\n }\n catch (DbException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n log.error("[DAOService::update] Execute rollback " + e.getMessage(), e);\n try {\n con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n catch (SQLException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n try {\n-   con.rollback();\n+   con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n finally {\n closeConnection(con, pstmt, null);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-66|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n+   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|private String getFullClassName(URL url, String className) throws Exception {\n JarInputStream jis = new JarInputStream(url.openStream());\n ZipEntry zentry = null;\n while ((zentry = jis.getNextEntry()) != null) {\n String name = zentry.getName();\n-   int lastPos = name.lastIndexOf(".class");\n+   int lastPos = name.lastIndexOf(".class");\n if (lastPos < 0) {\n continue;\n }\n name = name.replace('/', '.');\n int pos = -1;\n if (className != null) {\n pos = name.indexOf(className);\n if (pos >= 0 && name.length() == pos + className.length() + 6) {\n jis.close();\n return (name.substring(0, lastPos));\n }\n }\n }\n jis.close();\n return (null);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-67|SpecialSeperatorForDevSet|public static void main(String args[]) {\n int temp;\n-   int[] a1 = {\n+   int[] a1 = {\n 6, 2, -3, 7, -1, 8, 9, 0 }\n;\n for (int j = 0;\n j < (a1.length * a1.length);\n j++) {\n for (int i = 0;\n i < a1.length - 1;\n i++) {\n if (a1[i] > a1[i + 1]) {\n temp = a1[i];\n a1[i] = a1[i + 1];\n a1[i + 1] = temp;\n }\n }\n }\n for (int i = 0;\n i < a1.length;\n i++) {\n System.out.print(" " + a1[i]);\n }\n }\n|SpecialSeperatorForDevSet|private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\n InputStream in = downloadData(s3key);\n-   if (in == null) {\n+   if (in == null) {\n throw new IOException("No data found");\n }\n in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\n File temp = File.createTempFile("dirsync", null);\n FileOutputStream fout = new FileOutputStream(temp);\n try {\n IOUtils.copy(in, fout);\n if (target.exists()) {\n target.delete();\n }\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n FileUtils.moveFile(temp, target);\n }\n catch (IOException e) {\n fetchStream(in);\n throw e;\n }\n finally {\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-68|SpecialSeperatorForDevSet|protected static Parser buildParser(URL url) throws IOException, ParserException {\n Parser parser;\n URLConnection connection = openConnection(url);\n if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {\n parser = new Parser(connection);\n }\n else {\n parser = null;\n }\n return parser;\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Override protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\n if ((url == null) || (proxy == null)) {\n throw new IllegalArgumentException(Messages.getString("luni.1B"));\n }\n return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-69|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n-   }\n+   }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|@Override protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {\n HttpURLConnection connection = null;\n try {\n switch(method) {\n case GET: connection = openConnection(url.concat("?").concat(formEncode(parameters)));\n-   connection.setRequestMethod("GET");\n+   connection.setRequestMethod("GET");\n connection.connect();\n break;\n case POST: connection = openConnection(url);\n connection.setRequestMethod("POST");\n connection.setDoOutput(true);\n connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");\n connection.connect();\n final OutputStream out = connection.getOutputStream();\n out.write(formEncode(parameters).getBytes());\n out.flush();\n out.close();\n break;\n }\n final int statusCode = connection.getResponseCode();\n if (statusCode / 100 != 2) {\n final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());\n if (error == null) throw new FoursquareException(connection.getResponseMessage());\n else if ("error".equals(error.getType())) throw new FoursquareException(error.getMessage());\n else if ("unauthorized".equals(error.getType())) throw new AuthenticationException(error.getMessage());\n else if ("ratelimited".equals(error.getType())) throw new RateLimitingException(error.getMessage());\n else throw new FoursquareException(connection.getResponseMessage());\n }\n return parseBody(connection.getInputStream(), handler);\n }\n catch (final IOException e) {\n throw new FoursquareException(e);\n }\n catch (final ParserConfigurationException e) {\n throw new FoursquareException(e);\n }\n catch (final SAXException e) {\n throw new FoursquareException(e);\n }\n finally {\n if (connection != null) connection.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-70|SpecialSeperatorForDevSet|public String getUser() {\n try {\n HttpGet get = new HttpGet("http://api.linkedin.com/v1/people/~");\n consumer.sign(get);\n HttpClient client = new DefaultHttpClient();\n HttpResponse response = client.execute(get);\n if (response != null) {\n int statusCode = response.getStatusLine().getStatusCode();\n if (statusCode != 200) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n StringBuffer sBuf = new StringBuffer();\n String linea;\n BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));\n while ((linea = reader.readLine()) != null) {\n sBuf.append(linea);\n }\n reader.close();\n response.getEntity().consumeContent();\n get.abort();\n String salida = sBuf.toString();\n String user_firstname = salida.split("</first-name>")[0].split("<first-name>")[1];\n String user_lastname = salida.split("</last-name>")[0].split("<last-name>")[1];\n return user_firstname + " " + user_lastname;\n }\n }\n catch (UnsupportedEncodingException e) {\n-   this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n+   this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (IOException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthMessageSignerException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthExpectationFailedException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthCommunicationException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public APIResponse delete(String id) throws Exception {\n APIResponse response = new APIResponse();\n connection = (HttpURLConnection) new URL(url + "/api/variable/delete/" + id).openConnection();\n connection.setRequestMethod("DELETE");\n connection.setConnectTimeout(TIMEOUT);\n connection.connect();\n if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n response.setDone(true);\n response.setMessage("Variable Deleted!");\n }\n else {\n response.setDone(false);\n response.setMessage("Delete Variable Error Code: Http (" + connection.getResponseCode() + ")");\n }\n connection.disconnect();\n return response;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-71|SpecialSeperatorForDevSet|@Before public void init() throws IOException {\n file = new File(LOCATION);\n-   url = file.toURI().toURL();\n+   url = file.toURI().toURL();\n stream = url.openStream();\n byteArray = IOUtils.toByteArray(new FileInputStream(file));\n content = FileUtils.readFileToString(file);\n }\n|SpecialSeperatorForDevSet|public static synchronized String toSHA1(String str) {\n Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");\n try {\n MessageDigest md;\n md = MessageDigest.getInstance(SHA1);\n byte[] sha1hash = new byte[40];\n md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n-   sha1hash = md.digest();\n+   sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n catch (UnsupportedEncodingException ex) {\n ex.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-72|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n-   try {\n+   try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-73|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n-   System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n+   System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public void run() {\n if (status == COMPLETE) {\n return;\n }\n waitRandom();\n RandomAccessFile file = null;\n InputStream inputStream = null;\n-   boolean success = false;\n+   boolean success = false;\n URL url = null;\n try {\n BeatportAccessor beatportAccessor = new BeatportAccessor();\n if (sessionCookies == null) {\n sessionCookies = beatportAccessor.getSessionCookies(user, password);\n }\n url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));\n log.info("Open (DownloadWorker.run): " + url);\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", BeatportAccessor.userAgent);\n connection.setRequestProperty("Cookie", sessionCookies);\n connection.connect();\n if (connection.getResponseCode() / 100 != 2) {\n log.error("Unexpected response from server: " + connection.getResponseCode());\n error();\n return;\n }\n if (connection.getContentType().indexOf("text") >= 0) {\n log.error("Tried to request: " + url.toString());\n log.error("Unexpected file content type from server: " + connection.getContentType());\n log.error("Server replied:\n" + getContentAsString(connection));\n error();\n return;\n }\n int contentLength = connection.getContentLength();\n if (contentLength < 1) {\n log.error("Invalid content length: " + connection.getContentLength());\n error();\n return;\n }\n if (size == -1) {\n size = contentLength;\n stateChanged();\n }\n else if (size != contentLength) {\n changeTotal(0, contentLength - size);\n }\n if (new File(tmpFileName(fileName)).exists()) {\n if (!new File(tmpFileName(fileName)).delete()) {\n throw new Exception("Could not delete file: " + tmpFileName(fileName));\n }\n }\n file = new RandomAccessFile(tmpFileName(fileName), "rw");\n file.seek(downloaded);\n inputStream = connection.getInputStream();\n if (started == 0) {\n started = System.currentTimeMillis();\n time = started;\n }\n statusChangedObserver.statusChanged(status);\n byte buffer[] = new byte[MAX_BUFFER_SIZE];\n while (status == DOWNLOADING) {\n if (size - downloaded < MAX_BUFFER_SIZE) {\n buffer = new byte[(int) (size - downloaded)];\n }\n int read = inputStream.read(buffer);\n if (read == -1) break;\n file.write(buffer, 0, read);\n downloaded += read;\n changeTotal(read, 0);\n stateChanged();\n }\n if (status == DOWNLOADING) {\n stopped = System.currentTimeMillis();\n status = COMPLETE;\n }\n statusChangedObserver.statusChanged(status);\n stateChanged();\n success = true;\n }\n catch (Exception e) {\n e.printStackTrace();\n error();\n }\n finally {\n try {\n file.close();\n }\n catch (Exception e) {\n }\n if (success) {\n try {\n if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {\n throw new Exception("Rename Failed");\n }\n }\n catch (Exception e) {\n log.error("Error moving temp file " + tmpFileName(fileName) + " file: " + fileName, e);\n }\n }\n else {\n try {\n new File(tmpFileName(fileName)).delete();\n }\n catch (Exception e) {\n log.error("Error deleting erroneous temp file: " + tmpFileName(fileName), e);\n }\n }\n try {\n inputStream.close();\n }\n catch (Exception e) {\n log.error("Error closing input stream of: " + url + " / " + fileName, e);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-74|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n-   assertTrue(encoder.isCompleted());\n+   assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n-   assertTrue(encoder.isCompleted());\n+   assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-74|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n-   assertEquals("stuff;\n+   assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|private static void copyFile(File src, File dst) throws IOException {\n-   FileChannel in = new FileInputStream(src).getChannel();\n+   FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-75|SpecialSeperatorForDevSet|@Override protected Reader openConnection(URL url) throws IOException {\n try {\n if (limit != null) {\n limit.acquirePermit();\n }\n return super.openConnection(url);\n }\n catch (InterruptedException e) {\n-   throw new IOException(e);\n+   throw new IOException(e);\n }\n }\n|SpecialSeperatorForDevSet|public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n _cman = mgr;\n _sock = sock;\n for (int i = 0;\n i < 256;\n i++) {\n String key = Integer.toHexString(i);\n if (key.length() < 2) key = "0" + key;\n availcmd.push(key);\n commands.put(key, null);\n }\n try {\n _sout = new PrintWriter(_sock.getOutputStream(), true);\n _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n String seed = "";\n Random rand = new Random();\n for (int i = 0;\n i < 16;\n i++) {\n String hex = Integer.toHexString(rand.nextInt(256));\n if (hex.length() < 2) hex = "0" + hex;\n seed += hex.substring(hex.length() - 2);\n }\n String pass = _mpsw + seed + _spsw;\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n String hash = hash2hex(md5.digest()).toLowerCase();\n-   String banner = "INIT " + "servername" + " " + hash + " " + seed;\n+   String banner = "INIT " + "servername" + " " + hash + " " + seed;\n sendLine(banner);\n String txt = readLine(5);\n if (txt == null) {\n throw new IOException("Slave did not send banner !!");\n }\n String sname = "";\n String spass = "";\n String sseed = "";\n try {\n String[] items = txt.split(" ");\n sname = items[1].trim();\n spass = items[2].trim();\n sseed = items[3].trim();\n }\n catch (Exception e) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n pass = _spsw + sseed + _mpsw;\n md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n hash = hash2hex(md5.digest()).toLowerCase();\n if (!sname.equals(_name)) {\n AsyncSlaveListener.invalidSlave("INITFAIL Unknown", _sock);\n }\n if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n start();\n }\n catch (IOException e) {\n if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n logger.info("Check slaves.xml on the master that you are allowed to connect.");\n }\n logger.info("IOException: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e1) {\n }\n }\n catch (Exception e) {\n logger.warn("Exception: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e2) {\n }\n }\n System.gc();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-76|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n-   else {\n+   else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n-   }\n+   }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-77|SpecialSeperatorForDevSet|public AsciiParser(String systemID) throws GridBagException {\n String id = systemID;\n if (id.endsWith(".xml")) {\n id = StringUtils.replace(id, ".xml", ".gbc");\n }\n ClassLoader loader = this.getClass().getClassLoader();\n URL url = loader.getResource(id);\n-   if (url == null) {\n+   if (url == null) {\n throw new GridBagException("Cannot located resource : \"" + systemID + "\".");\n }\n try {\n InputStream inStream = url.openStream();\n constraints = getLines(inStream);\n inStream.close();\n }\n catch (IOException ie1) {\n throw new GridBagException("Cannot read from resource " + id);\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n-   System.out.println("-> files generated in /results subdirectory:");\n+   System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-78|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n-   }\n+   }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n-   outfile.close();\n+   outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-78|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n-   BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n+   BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n logger.info("copyFile(File src=" + src + ", File dest=" + dest + ", int bufSize=" + bufSize + ", boolean force=" + force + ") - start");\n File f = new File(Configuration.getArchiveDir());\n if (!f.exists()) {\n f.mkdir();\n }\n if (dest.exists()) {\n if (force) {\n dest.delete();\n }\n else {\n-   throw new IOException("Cannot overwrite existing file: " + dest);\n+   throw new IOException("Cannot overwrite existing file: " + dest);\n }\n }\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) {\n break;\n }\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n }\n logger.debug("copyFile(File, File, int, boolean) - end");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-79|SpecialSeperatorForDevSet|private String getFullClassName(URL url, String className) throws Exception {\n JarInputStream jis = new JarInputStream(url.openStream());\n ZipEntry zentry = null;\n while ((zentry = jis.getNextEntry()) != null) {\n String name = zentry.getName();\n int lastPos = name.lastIndexOf(".class");\n if (lastPos < 0) {\n continue;\n }\n name = name.replace('/', '.');\n int pos = -1;\n if (className != null) {\n pos = name.indexOf(className);\n if (pos >= 0 && name.length() == pos + className.length() + 6) {\n jis.close();\n return (name.substring(0, lastPos));\n }\n }\n }\n jis.close();\n-   return (null);\n+   return (null);\n }\n|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n URL urlhome = new URL("http://www.verussolutions.biz/NGLDashBoard.xml");\n URLConnection uc = urlhome.openConnection();\n InputStreamReader input = new InputStreamReader(uc.getInputStream());\n BufferedReader in = new BufferedReader(input);\n String inputLine;\n String xmlData = "";\n while ((inputLine = in.readLine()) != null) {\n xmlData += inputLine;\n }\n-   in.close();\n+   in.close();\n PrintWriter fw = new PrintWriter(new FileWriter(System.getProperty("user.home") + "/NGLDashBoard.xml"));\n fw.println(xmlData);\n fw.flush();\n fw.close();\n }\n catch (Exception exp) {\n exp.printStackTrace();\n }\n try {\n Document doc = new SAXBuilder().build(new File(System.getProperty("user.home") + "/NGLDashBoard.xml"));\n String onlinsuppcdat = doc.getRootElement().getChild("OnlineSupportInformation").getText();\n CDATA cdata = new CDATA(onlinsuppcdat);\n host.setOnlineInformationHTML(cdata.getText());\n onlinsuppcdat = doc.getRootElement().getChild("News").getText();\n cdata = new CDATA(onlinsuppcdat);\n host.setNewsHTML(cdata.getText());\n host.fillData();\n }\n catch (Exception exp) {\n exp.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-80|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|KeyStore getKeyStore() throws JarSignerException {\n if (keyStore == null) {\n KeyStore store = null;\n if (providerName == null) {\n try {\n store = KeyStore.getInstance(this.storeType);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n }\n else {\n try {\n store = KeyStore.getInstance(storeType, providerName);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchProviderException e) {\n e.printStackTrace();\n }\n }\n if (storeURI == null) {\n throw new JarSignerException("Cannot load the keystore " + " error con el keystore");\n }\n try {\n storeURI = storeURI.replace(File.separatorChar, '/');\n URL url = null;\n try {\n url = new URL(storeURI);\n }\n catch (java.net.MalformedURLException e) {\n url = new File(storeURI).toURI().toURL();\n }\n InputStream is = null;\n try {\n is = url.openStream();\n store.load(is, storePass);\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n }\n catch (Exception e) {\n throw new JarSignerException("Cannot load the keystore " + storeURI, e);\n }\n-   keyStore = store;\n+   keyStore = store;\n }\n return keyStore;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-81|SpecialSeperatorForDevSet|public void init(ServletContext context) throws ScratchException {\n try {\n log.debug("Attempting to load Controllers from file: " + REGISTRY_FILENAME);\n ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n while (urls.hasMoreElements()) {\n URL url = urls.nextElement();\n log.debug("Found: " + url);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String className = null;\n while ((className = reader.readLine()) != null) {\n className = className.trim();\n-   if (!"".equals(className) && !className.startsWith("#")) {\n+   if (!"".equals(className) && !className.startsWith("#")) {\n log.debug("Found class: " + className);\n Class<?> clazz = classLoader.loadClass(className);\n addClass(clazz);\n }\n }\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n log.error(e);\n }\n catch (ClassNotFoundException e) {\n e.printStackTrace();\n log.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public void init(ServletContext context) throws ScratchException {\n try {\n log.debug("Attempting to load Controllers from file: " + REGISTRY_FILENAME);\n ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n while (urls.hasMoreElements()) {\n URL url = urls.nextElement();\n log.debug("Found: " + url);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String className = null;\n while ((className = reader.readLine()) != null) {\n className = className.trim();\n if (!"".equals(className) && !className.startsWith("#")) {\n log.debug("Found class: " + className);\n Class<?> clazz = classLoader.loadClass(className);\n addClass(clazz);\n }\n }\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n log.error(e);\n }\n catch (ClassNotFoundException e) {\n e.printStackTrace();\n-   log.error(e);\n+   log.error(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-81|SpecialSeperatorForDevSet|public void init(ServletContext context) throws ScratchException {\n try {\n log.debug("Attempting to load Controllers from file: " + REGISTRY_FILENAME);\n ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n while (urls.hasMoreElements()) {\n URL url = urls.nextElement();\n log.debug("Found: " + url);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String className = null;\n while ((className = reader.readLine()) != null) {\n className = className.trim();\n if (!"".equals(className) && !className.startsWith("#")) {\n log.debug("Found class: " + className);\n Class<?> clazz = classLoader.loadClass(className);\n addClass(clazz);\n }\n }\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n log.error(e);\n }\n catch (ClassNotFoundException e) {\n e.printStackTrace();\n-   log.error(e);\n+   log.error(e);\n }\n }\n|SpecialSeperatorForDevSet|@Override public void run() {\n-   try {\n+   try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-82|SpecialSeperatorForDevSet|static HashSet<Integer> readZoneIDs(String zoneFileName) {\n HashSet<Integer> zoneids = new HashSet<Integer>();\n try {\n URL url = zoneFileName.getClass().getResource(zoneFileName);\n LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));\n String line = null;\n while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));\n }\n catch (Exception xc) {\n xc.printStackTrace();\n }\n return zoneids;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-83|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n-   buf.append("0");\n+   buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|public void descargarArchivo() {\n try {\n FileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());\n FileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);\n FileChannel inChannel = fis.getChannel();\n FileChannel outChannel = fos.getChannel();\n inChannel.transferTo(0, inChannel.size(), outChannel);\n fis.close();\n fos.close();\n }\n-   catch (IOException ioe) {\n+   catch (IOException ioe) {\n System.err.println("Error al Generar Copia del Material\n" + ioe);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-84|SpecialSeperatorForDevSet|public File read() throws IOException {\n URLConnection conn = url.openConnection();\n conn.setConnectTimeout(5000);\n conn.setReadTimeout(5000);\n conn.connect();\n int length = conn.getContentLength();\n String tempDir = System.getProperty("java.io.tmpdir");\n if (tempDir == null) {\n tempDir = ".";\n-   }\n+   }\n File tempFile = new File(tempDir + "/" + new GUID() + ".dat");\n tempFile.deleteOnExit();\n InputStream in = null;\n OutputStream out = null;\n ProgressMonitor monitor = new ProgressMonitor(parentComponent, "Downloading " + url, null, 0, length);\n try {\n in = conn.getInputStream();\n out = new BufferedOutputStream(new FileOutputStream(tempFile));\n int buflen = 1024 * 30;\n int bytesRead = 0;\n byte[] buf = new byte[buflen];\n ;\n long start = System.currentTimeMillis();\n for (int nRead = in.read(buf);\n nRead != -1;\n nRead = in.read(buf)) {\n if (monitor.isCanceled()) {\n return null;\n }\n bytesRead += nRead;\n out.write(buf, 0, nRead);\n monitor.setProgress(bytesRead);\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n monitor.close();\n }\n return tempFile;\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-85|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n-   InputStream in = getClass().getResourceAsStream(resourcePath);\n+   InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-85|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n-   FileOutputStream out = FileUtils.openOutputStream(dest);\n+   FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public boolean gerarTutorialPage() {\n try {\n File indexDir = criarDiretorioSite();\n File cssDir = criarDiretorioCss();\n File capDir = criarDiretorioCapitulos();\n File licDir = criarDiretorioLicoes();\n File midDir = criarDiretorioMidias();\n File filesDir = criarDiretorioArquivos();\n File videosDir = new File(filesDir + "/videos");\n videosDir.mkdir();\n File imagensDir = new File(filesDir + "/imagens");\n imagensDir.mkdir();\n String local = System.getProperty("user.dir");\n FileChannel srcCss1 = new FileInputStream(local + "/bin/style/layout.css").getChannel();\n FileChannel destCss1 = new FileOutputStream(cssDir + "/layout.css").getChannel();\n destCss1.transferFrom(srcCss1, 0, srcCss1.size());\n srcCss1.close();\n destCss1.close();\n FileChannel srcCss2 = new FileInputStream(local + "/bin/style/elementos.css").getChannel();\n FileChannel destCss2 = new FileOutputStream(cssDir + "/elementos.css").getChannel();\n-   destCss2.transferFrom(srcCss2, 0, srcCss2.size());\n+   destCss2.transferFrom(srcCss2, 0, srcCss2.size());\n srcCss2.close();\n destCss2.close();\n FileChannel srcCss3 = new FileInputStream(local + "/bin/style/estilo-cap-lic-mid.css").getChannel();\n FileChannel destCss3 = new FileOutputStream(cssDir + "/estilo-cap-lic-mid.css").getChannel();\n destCss3.transferFrom(srcCss3, 0, srcCss3.size());\n srcCss3.close();\n destCss3.close();\n FileChannel srcCss4 = new FileInputStream(local + "/bin/style/layout_ie.css").getChannel();\n FileChannel destCss4 = new FileOutputStream(cssDir + "/layout_ie.css").getChannel();\n destCss4.transferFrom(srcCss4, 0, srcCss4.size());\n srcCss4.close();\n destCss4.close();\n FileChannel srcCss5 = new FileInputStream(local + "/bin/style/elementos_ie.css").getChannel();\n FileChannel destCss5 = new FileOutputStream(cssDir + "/elementos_ie.css").getChannel();\n destCss5.transferFrom(srcCss5, 0, srcCss5.size());\n srcCss5.close();\n destCss5.close();\n FileChannel srcCss6 = new FileInputStream(local + "/bin/style/estilo-cap-lic-mid_ie.css").getChannel();\n FileChannel destCss6 = new FileOutputStream(cssDir + "/estilo-cap-lic-mid_ie.css").getChannel();\n destCss6.transferFrom(srcCss6, 0, srcCss6.size());\n srcCss6.close();\n destCss6.close();\n copiarMidias(videosDir, imagensDir);\n escreverMidiasPage(midDir);\n escreverLicoesPage(licDir);\n escreverCapitulosPages(capDir);\n FileWriter indexHtml = new FileWriter(indexDir + "/index.html");\n indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\n indexHtml.close();\n System.out.println("Site gerado com sucesso");\n JOptionPane.showMessageDialog(null, "Web Site gerado com sucesso", "\\o/", JOptionPane.INFORMATION_MESSAGE);\n return true;\n }\n catch (Exception e) {\n e.printStackTrace();\n System.err.println("Site não gerado");\n JOptionPane.showMessageDialog(null, "Web Site não gerado corretamente", "Ops...", JOptionPane.ERROR_MESSAGE);\n return false;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-86|SpecialSeperatorForDevSet|public boolean submit(String uri) throws java.io.IOException, Exception {\n if (getUserInfo()) {\n String encodedrdf = URLEncoder.encode(rdfpayload, "UTF-8");\n URL url = new URL(uri);\n URLConnection connection = url.openConnection();\n connection.setDoOutput(true);\n setDescription(mDescription.getText());\n addCreator(mUser.getText());\n lastUser = mUser.getText();\n PrintWriter out = new PrintWriter(connection.getOutputStream());\n out.println("rdfblob=" + encodedrdf);\n writeCreators(out);\n writeCategories(out);\n writeName(out);\n-   writeDescription(out);\n+   writeDescription(out);\n writeDate(out);\n out.println("&inputtype=1");\n out.println("&op=Submit");\n out.close();\n return doSubmit(connection, rdfpayload);\n }\n else {\n JOptionPane.showMessageDialog(null, "Submit cannot be completed without user information, please try again.", "User Info Error", JOptionPane.ERROR_MESSAGE);\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public static String getHash(String uri) throws NoSuchAlgorithmException {\n MessageDigest mDigest = MessageDigest.getInstance("MD5");\n mDigest.update(uri.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n-   for (int i = 0;\n+   for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-87|SpecialSeperatorForDevSet|public static String plainToMD(LoggerCollection loggerCol, String input) {\n byte[] byteHash = null;\n MessageDigest md = null;\n StringBuilder md5result = new StringBuilder();\n try {\n md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes());\n byteHash = md.digest();\n-   for (int i = 0;\n+   for (int i = 0;\n i < byteHash.length;\n i++) {\n md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n }\n }\n catch (NoSuchAlgorithmException ex) {\n loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);\n }\n return (md5result.toString());\n }\n|SpecialSeperatorForDevSet|private static RemoteFile getRemoteFile(String url) {\n long size = 0;\n String realUrl = "";\n try {\n HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();\n size = conn.getContentLength();\n realUrl = conn.getURL().toString();\n conn.disconnect();\n }\n catch (Exception e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n RemoteFile rf = new RemoteFile(size, realUrl);\n return rf;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-88|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n-   }\n+   }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n-   try {\n+   try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-88|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n-   Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n+   Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-89|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n-   OutputStream dest = new FileOutputStream(destFile);\n+   OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n-   md = MessageDigest.getInstance("SHA-1");\n+   md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-90|SpecialSeperatorForDevSet|public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\n ConnectionProvider cp = null;\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement pstmt = null;\n PrivilegeFactory factory = PrivilegeFactory.getInstance();\n Operation op = factory.createOperation();\n try {\n cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\n conn = cp.getConnection();\n try {\n pstmt = conn.prepareStatement(DEL_ROLE_PERM);\n pstmt.setString(1, roleid);\n pstmt.executeUpdate();\n }\n catch (Exception e) {\n }\n if ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\n return;\n }\n else {\n conn.setAutoCommit(false);\n pstmt = conn.prepareStatement(ADD_ROLE_PERM);\n Iterator role_perm_ir = role_perm_collect.iterator();\n while (role_perm_ir.hasNext()) {\n RolePermission rolePerm = (RolePermission) role_perm_ir.next();\n pstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\n pstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\n pstmt.setString(3, String.valueOf(rolePerm.getResopid()));\n pstmt.executeUpdate();\n }\n conn.commit();\n conn.setAutoCommit(true);\n }\n }\n catch (Exception e) {\n conn.rollback();\n throw new DAOException();\n }\n finally {\n try {\n if (conn != null) {\n conn.close();\n }\n if (pstmt != null) {\n pstmt.close();\n }\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|KeyStore getKeyStore() throws JarSignerException {\n if (keyStore == null) {\n KeyStore store = null;\n if (providerName == null) {\n try {\n store = KeyStore.getInstance(this.storeType);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n }\n else {\n try {\n store = KeyStore.getInstance(storeType, providerName);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchProviderException e) {\n e.printStackTrace();\n }\n }\n if (storeURI == null) {\n throw new JarSignerException("Cannot load the keystore " + " error con el keystore");\n }\n try {\n storeURI = storeURI.replace(File.separatorChar, '/');\n-   URL url = null;\n+   URL url = null;\n try {\n url = new URL(storeURI);\n }\n catch (java.net.MalformedURLException e) {\n url = new File(storeURI).toURI().toURL();\n }\n InputStream is = null;\n try {\n is = url.openStream();\n store.load(is, storePass);\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n }\n catch (Exception e) {\n throw new JarSignerException("Cannot load the keystore " + storeURI, e);\n }\n keyStore = store;\n }\n return keyStore;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-91|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n-   FileOutputStream fos = new FileOutputStream(file);\n+   FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n|SpecialSeperatorForDevSet|private String hashKey(String key) {\n String hashed = "";\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(key.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n hashed = hash.toString(16);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n hashed = String.valueOf(key.hashCode());\n }\n return hashed;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-92|SpecialSeperatorForDevSet|protected static InputStream loadResource(String resource) throws MissingResourceException {\n Thread thread = Thread.currentThread();\n ClassLoader cLoader = thread.getContextClassLoader();\n URL url = cLoader.getResource(resource);\n if (url == null) {\n throw new MissingResourceException("Unable to find resource '" + resource + "'.", resource, resource);\n }\n try {\n InputStream is = url.openStream();\n return is;\n }\n catch (IOException e) {\n throw new MissingResourceException("Unable to load resource '" + resource + "' (IOException).", resource, resource);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public int update(BusinessObject o) throws DAOException {\n int update = 0;\n Bill bill = (Bill) o;\n try {\n PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery("UPDATE_BILL"));\n pst.setInt(1, bill.getId());\n update = pst.executeUpdate();\n if (update <= 0) {\n connection.rollback();\n throw new DAOException("Number of rows <= 0");\n }\n else if (update > 1) {\n connection.rollback();\n throw new DAOException("Number of rows > 1");\n }\n connection.commit();\n }\n catch (SQLException e) {\n Log.write(e.getMessage());\n throw new DAOException("A SQLException has occured");\n }\n catch (NullPointerException npe) {\n Log.write(npe.getMessage());\n-   throw new DAOException("Connection null");\n+   throw new DAOException("Connection null");\n }\n return update;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-93|SpecialSeperatorForDevSet|private static InputStream openNamedResource(String name) throws java.io.IOException {\n InputStream in = null;\n boolean result = false;\n boolean httpURL = true;\n URL propsURL = null;\n try {\n propsURL = new URL(name);\n }\n catch (MalformedURLException ex) {\n httpURL = false;\n propsURL = null;\n }\n if (propsURL == null) {\n propsURL = UserProperties.class.getResource(name);\n }\n if (propsURL != null) {\n URLConnection urlConn = propsURL.openConnection();\n if (httpURL) {\n-   String hdrVal = urlConn.getHeaderField(0);\n+   String hdrVal = urlConn.getHeaderField(0);\n if (hdrVal != null) {\n String code = HTTPUtilities.getResultCode(hdrVal);\n if (code != null) {\n if (!code.equals("200")) {\n throw new java.io.IOException("status code = " + code);\n }\n }\n }\n }\n in = urlConn.getInputStream();\n }\n return in;\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n-   ++j) {\n+   ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-94|SpecialSeperatorForDevSet|public static String uncompress(String readPath, boolean mkdir) throws Exception {\n ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\n BufferedInputStream bis = new BufferedInputStream(arcInputStream);\n File baseDir = new File(readPath).getParentFile();\n String basePath = baseDir.getPath() + "/";\n if (mkdir) {\n String[] schema = readPath.split("/");\n String baseName = schema[schema.length - 1].replaceAll(".zip", "");\n FileUtils.forceMkdir(new File(basePath + baseName));\n basePath = basePath + baseName + "/";\n }\n ArchiveEntry entry;\n-   while ((entry = arcInputStream.getNextEntry()) != null) {\n+   while ((entry = arcInputStream.getNextEntry()) != null) {\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(basePath + entry.getName()));\n }\n else {\n String writePath = basePath + entry.getName();\n String dirName = FilenameUtils.getPath(writePath);\n FileUtils.forceMkdir(new File(dirName));\n BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\n int i = 0;\n while ((i = bis.read()) != -1) {\n bos.write(i);\n }\n IOUtils.closeQuietly(bos);\n }\n }\n IOUtils.closeQuietly(bis);\n return basePath;\n }\n|SpecialSeperatorForDevSet|public Vector<String> getNetworkServersIPs(String netaddress) {\n Vector<String> result = new Vector<String>();\n boolean serverline = false;\n String line;\n String[] splitline;\n try {\n URL url = new URL(netaddress);\n URLConnection connection = url.openConnection();\n BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n while ((line = reader.readLine()) != null) {\n if ((serverline) && line.startsWith(";\n")) {\n serverline = false;\n }\n-   if (serverline) {\n+   if (serverline) {\n splitline = line.split(":");\n result.add(splitline[1]);\n }\n if (line.startsWith("!SERVERS")) {\n serverline = true;\n }\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return result;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-95|SpecialSeperatorForDevSet|public static HttpResponse createUrlResponse(final URL url, final TcpConnection connection) throws IOException, NullPointerException {\n String fullPath = url.toString();\n-   URLConnection conn = url.openConnection();\n+   URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n final long length = conn.getContentLength();\n if (connection.isDebugEnabled()) connection.logDebug("Sending " + fullPath + " to " + connection.getRemoteAddress() + " (length: " + length + ").");\n return createInputStreamResponse(in, conn.getContentType(), length, connection);\n }\n|SpecialSeperatorForDevSet|public void load(String url) throws IOException {\n this.url = url;\n int col = url.indexOf(':');\n if (col > 1 && col < 5) {\n load(new URL(url).openStream());\n-   }\n+   }\n else {\n if (new File(url).exists()) {\n System.out.println("Loading JAD from file : " + url);\n FileInputStream fin = new FileInputStream(url);\n try {\n load(fin);\n }\n finally {\n fin.close();\n }\n }\n else {\n InputStream in = getClass().getResourceAsStream(url);\n if (in != null) {\n System.out.println("Loading JAD from classpath : " + url);\n load(in);\n }\n else {\n throw new IOException("\"" + url + "\" was found in file system or classpath");\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-96|SpecialSeperatorForDevSet|public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\n byte[] digest = new byte[0];\n if (!(attribute.getLocalName().equals("xmlns") || attribute.getLocalName().startsWith("xmlns:"))) try {\n MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n md.update((byte) 0);\n md.update((byte) 0);\n md.update((byte) 0);\n md.update((byte) 2);\n md.update(getExpandedName(attribute).getBytes("UnicodeBigUnmarked"));\n-   md.update((byte) 0);\n+   md.update((byte) 0);\n md.update((byte) 0);\n md.update(attribute.getAttributeValue().getBytes("UnicodeBigUnmarked"));\n digest = md.digest();\n }\n catch (NoSuchAlgorithmException e) {\n throw new OMException(e);\n }\n catch (UnsupportedEncodingException e) {\n throw new OMException(e);\n }\n return digest;\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n-   out.flush();\n+   out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-97|SpecialSeperatorForDevSet|@Override protected String doInBackground(Void... params) {\n HttpClient httpClient = new DefaultHttpClient();\n HttpContext localContext = new BasicHttpContext();\n HttpPost httpPost = new HttpPost(urlFormated);\n try {\n MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n for (int index = 0;\n index < POSTparamList.size();\n index++) {\n if (POSTparamList.get(index).getName().equalsIgnoreCase("image")) {\n entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n }\n else {\n entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n }\n }\n httpPost.setEntity(entity);\n HttpResponse response = httpClient.execute(httpPost, localContext);\n return processAnswer(response);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return null;\n }\n-  \n+  |SpecialSeperatorForDevSet|private InputStream getPageStream(String query) throws MalformedURLException, IOException {\n-   URL url = new URL(baseUrl + query + "&rhtml=no");\n+   URL url = new URL(baseUrl + query + "&rhtml=no");\n URLConnection connection = url.openConnection();\n connection.connect();\n InputStream in = connection.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(in);\n return bis;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-98|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n-   assertEquals("the two string are equals", reference, destination1.toString());\n+   assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|public int read(String name) {\n status = STATUS_OK;\n try {\n name = name.trim();\n if (name.indexOf("://") > 0) {\n URL url = new URL(name);\n-   in = new BufferedInputStream(url.openStream());\n+   in = new BufferedInputStream(url.openStream());\n }\n else {\n in = new BufferedInputStream(new FileInputStream(name));\n }\n status = read(in);\n }\n catch (IOException e) {\n status = STATUS_OPEN_ERROR;\n }\n return status;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-99|SpecialSeperatorForDevSet|public static boolean existsURL(String urlStr) {\n try {\n URL url = ProxyURLFactory.createHttpUrl(urlStr);\n-   HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+   HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.connect();\n int responseCode = con.getResponseCode();\n con.disconnect();\n return !(responseCode == HttpURLConnection.HTTP_NOT_FOUND);\n }\n catch (IOException e) {\n e.printStackTrace();\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public void copy(File s, File t) throws IOException {\n FileChannel in = (new FileInputStream(s)).getChannel();\n FileChannel out = (new FileOutputStream(t)).getChannel();\n in.transferTo(0, s.length(), out);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-100|SpecialSeperatorForDevSet|public String readRemoteFile() throws IOException {\n String response = "";\n boolean eof = false;\n URL url = new URL(StaticData.remoteFile);\n InputStream is = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String s;\n s = br.readLine();\n response = s;\n while (!eof) {\n try {\n s = br.readLine();\n if (s == null) {\n eof = true;\n br.close();\n }\n else response += s;\n }\n catch (EOFException eo) {\n eof = true;\n }\n catch (IOException e) {\n System.out.println("IO Error : " + e.getMessage());\n }\n }\n return response;\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n-   throw new AppenderInitializationError("Can't create backup dir for backup storage");\n+   throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-101|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n-   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n+   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n-   }\n+   }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-102|SpecialSeperatorForDevSet|private int addIDs(PeakListRow row, String name) {\n {\n BufferedReader in = null;\n try {\n String urlName = "http://gmd.mpimp-golm.mpg.de/search.aspx?query=" + name;\n URL url = new URL(urlName);\n in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine, score = "0";\n while ((inputLine = in.readLine()) != null) {\n String metaboliteID = "";\n if (inputLine.contains("href=\"Metabolites/")) {\n String[] dataScore = inputLine.split("</td><td>");\n score = dataScore[0].substring(dataScore[0].indexOf("<td>") + 4);\n metaboliteID = inputLine.substring(inputLine.indexOf("href=\"Metabolites/") + 18, inputLine.indexOf("aspx\">") + 4);\n urlName = "http://gmd.mpimp-golm.mpg.de/Metabolites/" + metaboliteID;\n inputLine = in.readLine();\n inputLine = in.readLine();\n String[] data = inputLine.split("</td><td>");\n String molecularWeight = data[data.length - 1].replaceAll("&nbsp;\n", "");\n row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n break;\n }\n else if (inputLine.contains("href=\"Analytes/")) {\n String[] dataScore = inputLine.split("</td><td>");\n score = dataScore[0].substring(dataScore[0].indexOf("<td>") + 4);\n metaboliteID = inputLine.substring(inputLine.indexOf("href=\"Analytes/") + 15, inputLine.indexOf("aspx\">") + 4);\n urlName = "http://gmd.mpimp-golm.mpg.de/Analytes/" + metaboliteID;\n inputLine = in.readLine();\n inputLine = in.readLine();\n String[] data = inputLine.split("</td><td>");\n String molecularWeight = data[data.length - 1].replaceAll("&nbsp;\n", "");\n row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n break;\n }\n else if (inputLine.contains("href=\"ReferenceSubstances/")) {\n String[] dataScore = inputLine.split("</td><td>");\n score = dataScore[0].substring(dataScore[0].indexOf("<td>") + 4);\n metaboliteID = inputLine.substring(inputLine.indexOf("href=\"ReferenceSubstances/") + 26, inputLine.indexOf("aspx\">") + 4);\n urlName = "http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/" + metaboliteID;\n inputLine = in.readLine();\n inputLine = in.readLine();\n String[] data = inputLine.split("</td><td>");\n String molecularWeight = data[data.length - 1].replaceAll("&nbsp;\n", "");\n row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n break;\n }\n }\n in.close();\n urlName = searchMetabolite(urlName);\n if (urlName != null && urlName.contains(".aspx")) {\n url = new URL(urlName);\n in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.contains("<meta http-equiv=\"keywords\" content=")) {\n String line = inputLine.substring(inputLine.indexOf("<meta http-equiv=\"keywords\" content=") + 37, inputLine.indexOf("\" /></head>"));\n String[] names = line.split(", ");\n for (String id : names) {\n if (id.contains("PubChem")) {\n id = id.substring(id.indexOf("PubChem") + 8);\n String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());\n if (pubChem.length() == 0) {\n pubChem += id;\n }\n else {\n pubChem += ", " + id;\n }\n row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);\n }\n else if (id.contains("ChEBI")) {\n id = id.substring(id.indexOf("ChEBI:") + 6);\n row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);\n }\n else if (id.contains("KEGG")) {\n id = id.substring(id.indexOf("KEGG:") + 6);\n row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);\n }\n else if (id.contains("CAS")) {\n id = id.substring(id.indexOf("CAS:") + 5);\n row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);\n }\n-   else if (id.contains("ChemSpider") || id.contains("MAPMAN") || id.contains("Beilstein:")) {\n+   else if (id.contains("ChemSpider") || id.contains("MAPMAN") || id.contains("Beilstein:")) {\n }\n else {\n String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());\n if (synonym.length() == 0) {\n synonym += id;\n }\n else {\n synonym += " // " + id;\n }\n synonym = synonym.replaceAll("&amp;\n#39;\n", "'");\n row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);\n }\n }\n break;\n }\n }\n in.close();\n }\n return Integer.parseInt(score);\n }\n catch (IOException ex) {\n Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);\n return 0;\n }\n }\n }\n|SpecialSeperatorForDevSet|-  public void testAutoCommit() throws Exception {\n+  public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-103|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n-   }\n+   }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(string.getBytes());\n byte byteData[] = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) hexString.append('0');\n-   hexString.append(hex);\n+   hexString.append(hex);\n }\n return hexString.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-104|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n FTPClient ftp = new FTPClient();\n try {\n ftp.connect("localhost", 21);\n ftp.login("ftpuser", "ftpuser123");\n System.out.println("Current: " + ftp.printWorkingDirectory());\n System.out.println("Dir status: " + ftp.makeDirectory(DIR));\n ftp.changeWorkingDirectory(DIR);\n System.out.println("File status: " + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));\n }\n finally {\n ftp.disconnect();\n }\n }\n catch (Exception e) {\n throw new RuntimeException(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n-   try {\n+   try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-105|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n-   throw new NoContentException("Unable to find or read reference text.");\n+   throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n StringBuffer sb = new StringBuffer();\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA-512");\n }\n catch (NoSuchAlgorithmException e) {\n throw new Exception(e.getMessage());\n }\n try {\n-   md.update(plaintext.getBytes("UTF-8"));\n+   md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new Exception(e.getMessage());\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-106|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n-   int bread = 0;\n+   int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|private String executePost(String targetURL, String urlParameters) {\n URL url;\n HttpURLConnection connection = null;\n try {\n url = new URL(targetURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("POST");\n connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");\n connection.setRequestProperty("Content-Length", "" + Integer.toString(urlParameters.getBytes().length));\n connection.setRequestProperty("Content-Language", "en-US");\n connection.setUseCaches(false);\n connection.setDoInput(true);\n connection.setDoOutput(true);\n DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n wr.writeBytes(urlParameters);\n wr.flush();\n wr.close();\n InputStream is = connection.getInputStream();\n BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n String line;\n StringBuffer response = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n response.append(line);\n-   response.append('\r');\n+   response.append('\r');\n }\n rd.close();\n return response.toString();\n }\n catch (Exception e) {\n e.printStackTrace();\n return null;\n }\n finally {\n if (connection != null) {\n connection.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-107|SpecialSeperatorForDevSet|@Override public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\n final Connection connection = this.getConnection();\n try {\n connection.setAutoCommit(false);\n String queryString = "DELETE " + this.getJvmInvocationsSchemaAndTableName() + " FROM " + this.getJvmInvocationsSchemaAndTableName() + " INNER JOIN " + this.getJvmElementsSchemaAndTableName() + " ON " + this.getJvmElementsSchemaAndTableName() + ".element_id = " + this.getJvmInvocationsSchemaAndTableName() + ".element_id WHERE ";\n if (contextName != null) {\n queryString = queryString + " context_name LIKE ? AND ";\n }\n if (dateFrom != null) {\n queryString = queryString + " start_timestamp >= ? AND ";\n }\n if (dateTo != null) {\n queryString = queryString + " start_timestamp <= ? AND ";\n }\n queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\n final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\n int indexCounter = 1;\n if (contextName != null) {\n preparedStatement.setString(indexCounter, contextName);\n indexCounter = indexCounter + 1;\n }\n if (dateFrom != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\n indexCounter = indexCounter + 1;\n }\n if (dateTo != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\n indexCounter = indexCounter + 1;\n }\n preparedStatement.executeUpdate();\n preparedStatement.close();\n connection.commit();\n }\n catch (final SQLException e) {\n try {\n connection.rollback();\n }\n catch (final SQLException ex) {\n JeeObserverServerContext.logger.log(Level.SEVERE, "Transaction rollback error.", ex);\n }\n JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\n throw new DatabaseException("Error deleting JVM statistics.", e);\n }\n finally {\n-   this.releaseConnection(connection);\n+   this.releaseConnection(connection);\n }\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-108|SpecialSeperatorForDevSet|-  String runScript(String scriptName) {\n+  String runScript(String scriptName) {\n String data = "";\n try {\n URL url = new URL(getCodeBase().toString() + scriptName);\n InputStream in = url.openStream();\n BufferedInputStream buffIn = new BufferedInputStream(in);\n do {\n int temp = buffIn.read();\n if (temp == -1) break;\n data = data + (char) temp;\n }\n while (true);\n }\n catch (Exception e) {\n data = "error!";\n }\n return data;\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n-   int extractLineEvery = new Integer(args[1]).intValue();\n+   int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-109|SpecialSeperatorForDevSet|public void run() {\n waiting(200);\n txtinfo.post(new Runnable() {\n-   public void run() {\n+   public void run() {\n txtinfo.setText("Searching");\n }\n }\n);\n try {\n URL url = new URL(urlAddress);\n SAXParserFactory spf = SAXParserFactory.newInstance();\n SAXParser sp = spf.newSAXParser();\n XMLReader xr = sp.getXMLReader();\n XMLHandlerReviews myXMLHandler = new XMLHandlerReviews();\n xr.setContentHandler(myXMLHandler);\n xr.parse(new InputSource(url.openStream()));\n if (statuscode != 200 && statuscode != 206) {\n throw new Exception();\n }\n nReviewsOnPage = myXMLHandler.nItems;\n statuscode = myXMLHandler.statuscode;\n if (nReviewsOnPage > 0) {\n authors = new String[nReviewsOnPage];\n reviews = new String[nReviewsOnPage];\n ratings = new String[nReviewsOnPage];\n titles = new String[nReviewsOnPage];\n listtext = new String[nReviewsOnPage];\n for (int i = 0;\n i < nReviewsOnPage;\n i++) {\n reviews[i] = myXMLHandler.reviews[i];\n authors[i] = myXMLHandler.authors[i];\n titles[i] = myXMLHandler.titles[i];\n ratings[i] = myXMLHandler.ratings[i];\n if (authors[i] == null || authors[i] == "") {\n authors[i] = "Anonymous";\n }\n if (ratings[i] == null || ratings[i] == "") {\n listtext[i] = titles[i] + " - " + reviews[i] + " - " + authors[i];\n }\n else {\n listtext[i] = "Score: " + ratings[i] + " - " + titles[i] + " - " + reviews[i] + " - " + authors[i];\n }\n }\n nTotalReviews = myXMLHandler.nTotalItems;\n final int fnmin = iFirstReviewOnPage;\n final int fnmax = iFirstReviewOnPage + nReviewsOnPage - 1;\n final int fntotalitems = nTotalReviews;\n if (nTotalReviews > fnmax) {\n nextButton.post(new Runnable() {\n public void run() {\n nextButton.setVisibility(0);\n }\n }\n);\n }\n else {\n nextButton.post(new Runnable() {\n public void run() {\n nextButton.setVisibility(8);\n }\n }\n);\n }\n if (iFirstReviewOnPage > 1) {\n previousButton.post(new Runnable() {\n public void run() {\n previousButton.setVisibility(0);\n }\n }\n);\n }\n else if (nTotalReviews > fnmax) {\n previousButton.post(new Runnable() {\n public void run() {\n previousButton.setVisibility(8);\n }\n }\n);\n }\n else {\n previousButton.post(new Runnable() {\n public void run() {\n previousButton.setVisibility(4);\n }\n }\n);\n }\n txtinfo.post(new Runnable() {\n public void run() {\n if (title != null && title != "") {\n txtinfo.setText(title + "\n" + getString(R.string.showing) + " " + fnmin + " " + getString(R.string.through) + " " + fnmax + " " + getString(R.string.of) + " " + fntotalitems);\n }\n else {\n txtinfo.setText(getString(R.string.showing) + " " + fnmin + " " + getString(R.string.through) + " " + fnmax + " " + getString(R.string.of) + " " + fntotalitems);\n }\n }\n }\n);\n handlerSetList.sendEmptyMessage(0);\n }\n else {\n txtinfo.post(new Runnable() {\n public void run() {\n txtinfo.setText(title + getString(R.string.no_reviews_for_this_album));\n }\n }\n);\n }\n }\n catch (Exception e) {\n final Exception ef = e;\n txtinfo.post(new Runnable() {\n public void run() {\n txtinfo.setText(R.string.search_failed);\n }\n }\n);\n }\n dialog.dismiss();\n handlerDoneLoading.sendEmptyMessage(0);\n }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n-   }\n+   }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-110|SpecialSeperatorForDevSet|public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {\n HttpClient client = new SSLHttpClient();\n StringBuilder builder = new StringBuilder(url).append("?" + SESSION_PARAM + "=" + sessionId).append("&" + CMD_PARAM + "=" + CMD_SERVERMODIF);\n HttpGet method = httpGetMethod(builder.toString());\n try {\n HttpResponse response = client.execute(method);\n Header header = response.getFirstHeader(HEADER_NAME);\n if (header != null && HEADER_VALUE.equals(header.getValue())) {\n int code = response.getStatusLine().getStatusCode();\n if (code == HttpStatus.SC_OK) {\n long expectedLength = response.getEntity().getContentLength();\n InputStream is = response.getEntity().getContent();\n FileUtils.writeInFile(is, out, expectedLength);\n return true;\n }\n else {\n throw new SynchronizationException("Command 'receive' : HTTP error code returned." + code, SynchronizationException.ERROR_RECEIVE);\n }\n }\n else {\n throw new SynchronizationException("HTTP header is invalid", SynchronizationException.ERROR_RECEIVE);\n }\n }\n catch (Exception e) {\n throw new SynchronizationException("Command 'receive' -> ", e, SynchronizationException.ERROR_RECEIVE);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n-   HttpPost postMethod = new HttpPost(url);\n+   HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-111|SpecialSeperatorForDevSet|@Test public void test02_ok() throws Exception {\n DefaultHttpClient client = new DefaultHttpClient();\n try {\n HttpPost post = new HttpPost(chartURL);\n List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n nameValuePairs.add(new BasicNameValuePair("ws", "getDomainEvolution"));\n-   nameValuePairs.add(new BasicNameValuePair("chartTitle", "test"));\n+   nameValuePairs.add(new BasicNameValuePair("chartTitle", "test"));\n nameValuePairs.add(new BasicNameValuePair("type", "chart"));\n nameValuePairs.add(new BasicNameValuePair("firstDate", "20111124"));\n nameValuePairs.add(new BasicNameValuePair("lastDate", "20111125"));\n nameValuePairs.add(new BasicNameValuePair("wsParams", "type,counting,protocol,unit,proxy,domain,timeScale,period"));\n nameValuePairs.add(new BasicNameValuePair("wsParamsValues", "chart,volume,all,hits,all,google.com,day,360"));\n nameValuePairs.add(new BasicNameValuePair("serieTitle", "serie"));\n post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n HttpResponse response = client.execute(post);\n HttpEntity entity = response.getEntity();\n assertNotNull(entity);\n InputStream instream = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n System.out.println(reader.readLine());\n instream.close();\n assertEquals("error :" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());\n }\n finally {\n client.getConnectionManager().shutdown();\n }\n }\n|SpecialSeperatorForDevSet|@Override public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n boolean baseURLWasNull = setBaseURLFromModelURL(url);\n OBJModel model = loadModel(url.openStream(), skin);\n if (baseURLWasNull) {\n popBaseURL();\n }\n-   return (model);\n+   return (model);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-112|SpecialSeperatorForDevSet|private boolean getWave(String url, String Word) {\n try {\n File FF = new File(f.getParent() + "/" + f.getName() + "pron");\n FF.mkdir();\n URL url2 = new URL(url);\n BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\n File Fdel = new File(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n if (!Fdel.exists()) {\n FileOutputStream outstream = new FileOutputStream(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\n char[] binput = new char[1024];\n int len = stream.read(binput, 0, 1024);\n while (len > 0) {\n bwriter.write(binput, 0, len);\n len = stream.read(binput, 0, 1024);\n }\n bwriter.close();\n outstream.close();\n }\n stream.close();\n }\n catch (Exception e) {\n System.out.println(e.getMessage());\n-   return false;\n+   return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|public static void checkForUpgrade(Event event) throws Exception {\n ((Component) UiUtil.findComponent("downloadUpgrade")).setVisible(false);\n ((Component) UiUtil.findComponent("applyUpgrade")).setVisible(false);\n ((Component) UiUtil.findComponent("restartRequiredHbox")).setVisible(false);\n ((Component) UiUtil.findComponent("restartRequiredAlert")).setVisible(false);\n new Command("DELETE FROM TBLINSTALLATION WHERE STATUS<>'APPLIED'").executeNonQuery();\n String clientAppliedVersion = new Command("SELECT MAX(VERSION) FROM TBLINSTALLATION WHERE STATUS='APPLIED'").executeScalarAsString();\n if (NullStatus.isNull(clientAppliedVersion)) {\n clientAppliedVersion = "20050101";\n }\n String macquery = "";\n String clientMAC = "";\n String clientUNITID = UiUtil.getUNITUID();\n ArrayList<String> macList = getMacList();\n for (int i = 0;\n i < macList.size();\n i++) {\n clientMAC += macList.get(i) + ",";\n macquery += "'" + macList.get(i) + "'";\n if (i < macList.size() - 1) {\n macquery += ",";\n }\n }\n URL urlLICENSEQUERY = new URL("http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=" + clientAppliedVersion + "&tegsoftCLIENTUNITID=" + clientUNITID + "&tegsoftCLIENTMAC=" + clientMAC + "&tegsoftCOMMAND=LICENSEQUERY");\n URLConnection urlConnection = urlLICENSEQUERY.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n String commingList = "";\n String line;\n while ((line = in.readLine()) != null) {\n commingList += line;\n }\n in.close();\n String licenseArray[] = commingList.split("</ROW>");\n if (licenseArray.length > 0) {\n String fields[] = licenseArray[0].split("</FLD>");\n String STATUS = fields[0];\n String ERRORMSG = fields[1];\n if ("FAIL".equals(STATUS)) {\n if ("NOUNITID".equals(ERRORMSG)) {\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n return;\n }\n if ("NOCUSTOMER".equals(ERRORMSG)) {\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n return;\n }\n if ("NOVALIDLICENSE".equals(ERRORMSG)) {\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n return;\n }\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n return;\n }\n }\n Dataset TBLLICENSE = new Dataset("TBLLICENSE", "TBLLICENSE");\n Command command = new Command("DELETE FROM TBLLICENSE WHERE UNITUID={\nUNITUID}\n AND (NOTES IN (");\n command.append(macquery);\n command.append(") OR NOTES IS NULL) ");\n command.executeNonQuery();\n for (int i = 1;\n i < licenseArray.length;\n i++) {\n String fields[] = licenseArray[i].split("</FLD>");\n String LICTYPE = fields[0];\n String UNIQUEKEY = fields[1];\n String LICKEY = fields[2];\n DataRow dataRow = TBLLICENSE.addNewDataRow();\n dataRow.set("LICENSENAME", LICTYPE);\n dataRow.set("LICENSE", LICKEY);\n dataRow.set("NOTES", UNIQUEKEY);\n TBLLICENSE.save();\n }\n URL url = new URL("http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=" + clientAppliedVersion + "&tegsoftCLIENTUNITID=" + clientUNITID + "&tegsoftCLIENTMAC=" + clientMAC);\n urlConnection = url.openConnection();\n in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n String upgradeList = "";\n while ((line = in.readLine()) != null) {\n upgradeList += line;\n }\n in.close();\n Dataset TBLINSTALLATION = new Dataset("TBLINSTALLATION", "TBLINSTALLATION");\n String upgrades[] = upgradeList.split("</ROW>");\n if (upgrades.length > 0) {\n String fields[] = upgrades[0].split("</FLD>");\n String STATUS = fields[0];\n String ERRORMSG = fields[1];\n if ("FAIL".equals(STATUS)) {\n if ("NOUNITID".equals(ERRORMSG)) {\n-   UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n+   UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n return;\n }\n if ("NOCUSTOMER".equals(ERRORMSG)) {\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n return;\n }\n if ("NOVALIDLICENSE".equals(ERRORMSG)) {\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n return;\n }\n UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n return;\n }\n }\n boolean restartRequired = false;\n boolean updateAvailable = false;\n for (int i = 1;\n i < upgrades.length;\n i++) {\n String fields[] = upgrades[i].split("</FLD>");\n String VERSION = fields[0];\n String ORDERID = fields[1];\n String UPGRADETYPE = fields[2];\n String DESCRIPTION = fields[3];\n String STATUS = "UNAPPLIED";\n String PRDNAME = "TegsoftCC";\n if ("TEGSOFTJARS".equals(UPGRADETYPE) || "TOBEJARS".equals(UPGRADETYPE) || "ALLJARS".equals(UPGRADETYPE) || "CONFIGASTERISK".equals(UPGRADETYPE)) {\n restartRequired = true;\n }\n DataRow dataRow = TBLINSTALLATION.addNewDataRow();\n dataRow.set("ORDERID", ORDERID);\n dataRow.set("PRDNAME", PRDNAME);\n dataRow.set("UPGRADETYPE", UPGRADETYPE);\n dataRow.set("VERSION", VERSION);\n dataRow.set("STATUS", STATUS);\n dataRow.set("DESCRIPTION", DESCRIPTION);\n TBLINSTALLATION.save();\n updateAvailable = true;\n }\n UiUtil.getDataset("TBLINSTALLATION").reFill();\n if (restartRequired) {\n ((Component) UiUtil.findComponent("restartRequiredHbox")).setVisible(true);\n ((Component) UiUtil.findComponent("restartRequiredAlert")).setVisible(true);\n }\n if (updateAvailable) {\n ((Component) UiUtil.findComponent("downloadUpgrade")).setVisible(true);\n UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_4));\n }\n else {\n UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_5));\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-113|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File src, File dst) throws IOException {\n+  public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-113|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|private static void copyFile(File src, File dst) throws IOException {\n-   FileChannel in = new FileInputStream(src).getChannel();\n+   FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-114|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n-   ZipEntry outEntry = new ZipEntry(entryName);\n+   ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n-   if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n+   if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-114|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n-   File[] ls = destPath.listFiles();\n+   File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|public static File copyFile(File fileToCopy, File copiedFile) {\n-   BufferedInputStream in = null;\n+   BufferedInputStream in = null;\n BufferedOutputStream outWriter = null;\n if (!copiedFile.exists()) {\n try {\n copiedFile.createNewFile();\n }\n catch (IOException e1) {\n e1.printStackTrace();\n return null;\n }\n }\n try {\n in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n int c;\n while ((c = in.read()) != -1) outWriter.write(c);\n in.close();\n outWriter.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n return null;\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n return copiedFile;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-115|SpecialSeperatorForDevSet|private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n-   zaos.closeArchiveEntry();\n+   zaos.closeArchiveEntry();\n }\n }\n|SpecialSeperatorForDevSet|private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n-   }\n+   }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n zaos.closeArchiveEntry();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-115|SpecialSeperatorForDevSet|private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n-   zae.setSize(file.length());\n+   zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n zaos.closeArchiveEntry();\n }\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n-   }\n+   }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-116|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n-   try {\n+   try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n-   valueAfterMD5 = sb.toString();\n+   valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-117|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String st = "http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz";\n URL url = new URL(st);\n InputStream fis = null;\n if ("file".equals(url.getProtocol())) fis = new FileInputStream(url.getFile());\n else if ("http".equals(url.getProtocol())) fis = url.openStream();\n ZipInputStream zis = new ZipInputStream(fis);\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n System.out.println("Extracting: " + entry);\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(entry.getName());\n BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n-   dest.flush();\n+   dest.flush();\n dest.close();\n }\n zis.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String st = "http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz";\n URL url = new URL(st);\n InputStream fis = null;\n if ("file".equals(url.getProtocol())) fis = new FileInputStream(url.getFile());\n else if ("http".equals(url.getProtocol())) fis = url.openStream();\n ZipInputStream zis = new ZipInputStream(fis);\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n System.out.println("Extracting: " + entry);\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(entry.getName());\n BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n-   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n+   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-117|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String st = "http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz";\n URL url = new URL(st);\n InputStream fis = null;\n if ("file".equals(url.getProtocol())) fis = new FileInputStream(url.getFile());\n else if ("http".equals(url.getProtocol())) fis = url.openStream();\n ZipInputStream zis = new ZipInputStream(fis);\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n System.out.println("Extracting: " + entry);\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(entry.getName());\n BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n-   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n+   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n-   Experiment exp = null;\n+   Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-118|SpecialSeperatorForDevSet|-  public static void copy(File sourceFile, File destinationFile) throws IOException {\n+  public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|public int exists(String fileToCheck) throws IOException {\n FTPClient ftp = new FTPClient();\n int found = 0;\n try {\n int reply = 0;\n ftp.connect(this.endpointURL, this.endpointPort);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n throw new IOException("Ftp exists server refused connection.");\n }\n if (!ftp.login("anonymous", "")) {\n ftp.logout();\n throw new IOException("FTP: server wrong passwd");\n }\n-   ftp.enterLocalPassiveMode();\n+   ftp.enterLocalPassiveMode();\n if (ftp.listNames(fileToCheck) != null) {\n found = 1;\n }\n ftp.logout();\n }\n catch (Exception e) {\n throw new IOException(e.getMessage());\n }\n return found;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-119|SpecialSeperatorForDevSet|private void updateFile(File file) throws FileNotFoundException, IOException {\n File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, ""));\n FileChannel in = null;\n-   FileChannel out = null;\n+   FileChannel out = null;\n try {\n if (!destFile.exists()) {\n destFile.getParentFile().mkdirs();\n destFile.createNewFile();\n }\n in = new FileInputStream(file).getChannel();\n out = new FileOutputStream(destFile).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (out != null) out.close();\n if (in != null) in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static JSONObject getJSONData(String url) throws JSONException {\n JSONObject jObject = null;\n InputStream data = null;\n DefaultHttpClient httpClient = new DefaultHttpClient();\n URI uri;\n try {\n uri = new URI(url);\n HttpGet httpGet = new HttpGet(uri);\n HttpResponse response = httpClient.execute(httpGet);\n data = response.getEntity().getContent();\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader;\n reader = new BufferedReader(new InputStreamReader(data), 8192);\n while ((line = reader.readLine()) != null) builder.append(line);\n reader.close();\n jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n return jObject;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-120|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n-   assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n+   assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n-   rs.close();\n+   rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-120|SpecialSeperatorForDevSet|-  public void testAutoCommit() throws Exception {\n+  public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\n ProjectDeploymentConfiguration config = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n try {\n String query = "INSERT INTO ProjectDeploymentConfigurations" + "(projectID, name, description) VALUES (" + projectID + ", '" + name + "', '" + description + "')";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProjectDeploymentConfigurations WHERE " + " projectID = " + projectID + " AND " + " name = '" + name + "' AND " + " description = '" + description + "'";\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n connection.rollback();\n String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n }\n config = getProjectDeploymentConfiguration(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n catch (Exception e) {\n }\n String msg = "SQLException in createNewProjectDeploymentConfig";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n-   }\n+   }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return config;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-121|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|static String encrypt(String plaintext) {\n MessageDigest d = null;\n try {\n d = MessageDigest.getInstance("SHA-1");\n d.update(plaintext.getBytes("UTF-8"));\n }\n catch (Exception e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return new String(Base64.encodeBase64(d.digest()));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-122|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n-   }\n+   }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n-   String path = ((Element) link).getAttribute("src");\n+   String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-122|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n-   name.append(hashCode(IOUtils.toString(reader))).append(".js");\n+   name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n-   int pxlen = p.getReadLength();\n+   int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-123|SpecialSeperatorForDevSet|private void load() throws SQLException {\n Connection conn = null;\n Statement stmt = null;\n try {\n conn = FidoDataSource.getConnection();\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n ClearData.clearTables(stmt);\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (100, 'Living Thing')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (300, 'Dog')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (400, 'Sheltie')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (500, 'Eskimo')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (600, 'Person')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (700, 'Collar')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (800, 'Ball')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (401, 'Fido')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (501, 'Samantha')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (801, 'A collar')");\n stmt.executeQuery("select setval('objects_objectid_seq', 1000)");\n stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)");\n stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('color')");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('weight')");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('length')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('green', 'color')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('blue', 'color')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('light', 'weight')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('heavy', 'weight')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('short', 'length')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('long', 'length')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)");\n stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')");\n stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{\n+-}\nN[.N]', 'D+', 800, 'number')");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('actor')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('origin')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('destination')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('object')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('instrument')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('beneficiary')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('location')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')");\n stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')");\n stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('the', 1)");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('a', 2)");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('an', 2)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('S', 1)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)");\n-   stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)");\n+   stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('D', 10)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)");\n stmt.executeQuery("select setval('instructions_instructionid_seq', 1)");\n int next = 2;\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'throw', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'test', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'actor', 1, 'hasa', '300', '')");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'instrument', 3, null, null, 'blue')");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (1, null, null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'get', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'drop', null, 0, null, null, null)");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 1, " + (next + 0) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 2, " + (next + 1) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 1, " + (next + 1) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 2, " + (next + 0) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 1, " + (next + 2) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 2, " + (next + 3) + ")");\n stmt.executeQuery("select setval('transactions_transactionid_seq', 1)");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 4) + ", 'throw something')");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 5) + ", 'get something')");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 6) + ", 'drop something')");\n stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'actor', 1, 'hasa', 'object', '', 3)");\n stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'object', 4, '', '', 'heavy', 4)");\n stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', " + (next + 6) + ")");\n stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', " + (next + 5) + ")");\n stmt.executeQuery("select setval('verbtransactions_verbid_seq', 1)");\n stmt.executeUpdate("insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)");\n stmt.executeUpdate("insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)");\n stmt.executeUpdate("update SystemProperties set value = 'Play Data' where name = 'DB Data Version'");\n conn.commit();\n }\n catch (SQLException e) {\n if (conn != null) conn.rollback();\n throw e;\n }\n finally {\n if (stmt != null) stmt.close();\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|@Override public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {\n if (query == null) {\n return null;\n }\n String encodedQuery = "";\n try {\n encodedQuery = URLEncoder.encode(query, "UTF-8");\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n throw e;\n }\n final int startAt = 0;\n final int pageNr = (startAt - 1) / 30;\n final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));\n HttpParams httpparams = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);\n HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);\n DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);\n httpclient.getParams().setParameter("http.useragent", "Mozilla/5.0 (Windows;\n U;\n Windows NT 6.1;\n en-US;\n rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");\n HttpGet httpget = new HttpGet(url);\n HttpResponse response = httpclient.execute(httpget);\n InputStream instream = response.getEntity().getContent();\n String html = HttpHelper.ConvertStreamToString(instream);\n instream.close();\n return parseHtml(html);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-124|SpecialSeperatorForDevSet|public static int createEmptyCart() {\n int SHOPPING_ID = 0;\n Connection con = null;\n try {\n con = getConnection();\n }\n catch (java.lang.Exception ex) {\n ex.printStackTrace();\n }\n try {\n PreparedStatement insert_cart = null;\n SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber("shopping_cart"));\n insert_cart = con.prepareStatement("INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )");\n-   insert_cart.setInt(1, SHOPPING_ID);\n+   insert_cart.setInt(1, SHOPPING_ID);\n insert_cart.executeUpdate();\n con.commit();\n insert_cart.close();\n returnConnection(con);\n }\n catch (java.lang.Exception ex) {\n try {\n con.rollback();\n ex.printStackTrace();\n }\n catch (Exception se) {\n System.err.println("Transaction rollback failed.");\n }\n }\n return SHOPPING_ID;\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-125|SpecialSeperatorForDevSet|protected static Parser buildParser(URL url) throws IOException, ParserException {\n Parser parser;\n URLConnection connection = openConnection(url);\n if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {\n parser = new Parser(connection);\n }\n else {\n-   parser = null;\n+   parser = null;\n }\n return parser;\n }\n|SpecialSeperatorForDevSet|public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\n if (TESTING) {\n HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\n ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()));\n return ret;\n }\n int retries = 0;\n while (retries < 3) {\n try {\n ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\n String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>");\n Document doc = DocumentHelper.parseText(reqPre);\n doc.getRootElement().element("Resource").element("Contents").setText(recordContent);\n URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"));\n InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8");\n BufferedReader buffered = new BufferedReader(reader);\n StringBuffer sb = new StringBuffer();\n String line;\n while ((line = buffered.readLine()) != null) {\n sb.append(line);\n }\n Document d = DocumentHelper.parseText(sb.toString());\n HashSet<String> places = new HashSet<String>();\n for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName");\n it.hasNext();\n ) {\n Element plcEl = it.next();\n String val = plcEl.elementTextTrim("TermName");\n if (!val.equals("") && !places.contains(val)) {\n places.add(val);\n String entryID = plcEl.attributeValue("entryID");\n Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\n for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry");\n it2.hasNext();\n ) {\n Element idEl = it2.next();\n if (idEl.attributeValue("entryID").equals(entryID)) plc.getV2().add(idEl.attributeValue("id"));\n }\n-   ret.add(plc);\n+   ret.add(plc);\n }\n }\n return ret;\n }\n catch (Exception e) {\n log.debug("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage(), e);\n System.out.println("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage());\n retries++;\n }\n }\n System.out.println("Too many retries. Giving up.");\n return new HashSet<Tuple<String, ArrayList<String>>>();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-126|SpecialSeperatorForDevSet|public boolean actEstadoEnBD(int idRonda) {\n int intResult = 0;\n String sql = "UPDATE ronda " + " SET estado = 1" + " WHERE numeroRonda = " + idRonda;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n-   connection.rollback();\n+   connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) {\n try {\n FileChannel inChannel = null, outChannel = null;\n try {\n out.getParentFile().mkdirs();\n inChannel = new FileInputStream(in).getChannel();\n outChannel = new FileOutputStream(out).getChannel();\n outChannel.transferFrom(inChannel, 0, inChannel.size());\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n catch (Exception e) {\n ObjectUtils.throwAsError(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-127|SpecialSeperatorForDevSet|@Override public URLConnection openConnection(URL url) throws IOException {\n if (!url.getProtocol().equals("file")) {\n-   String name = url.getFile();\n+   String name = url.getFile();\n File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));\n if (!f.exists()) {\n File f2 = new File(f.getParentFile(), f.getName() + "-not_found");\n if (!f2.exists()) {\n try {\n f.getParentFile().mkdirs();\n downloadFile(url, f);\n }\n catch (IOException e) {\n f.delete();\n throw e;\n }\n }\n }\n return f.toURI().toURL().openConnection();\n }\n return super.openConnection(url);\n }\n|SpecialSeperatorForDevSet|public static String encryptPassword(String plainPassword) {\n StringBuffer sb = new StringBuffer();\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(plainPassword.getBytes());\n byte[] digestBytes = messageDigest.digest();\n String hex = null;\n for (int i = 0;\n i < digestBytes.length;\n i++) {\n hex = Integer.toHexString(0xFF & digestBytes[i]);\n if (hex.length() < 2) sb.append("0");\n sb.append(hex);\n }\n }\n catch (Exception ex) {\n System.out.println(ex.getMessage());\n }\n return new String(sb);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-128|SpecialSeperatorForDevSet|private InputStream getInputStream(String item) {\n InputStream is = null;\n URLConnection urlc = null;\n try {\n URL url = new URL(item);\n urlc = url.openConnection();\n is = urlc.getInputStream();\n current_source = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort() + url.getFile();\n }\n catch (Exception ee) {\n System.err.println(ee);\n }\n int i = 0;\n udp_port = -1;\n udp_baddress = null;\n while (urlc != null) {\n String s = urlc.getHeaderField(i);\n String t = urlc.getHeaderFieldKey(i);\n if (s == null) {\n-   break;\n+   break;\n }\n i++;\n if ("udp-port".equals(t)) {\n try {\n udp_port = Integer.parseInt(s);\n }\n catch (Exception e) {\n }\n }\n else if ("udp-broadcast-address".equals(t)) {\n udp_baddress = s;\n }\n }\n return is;\n }\n|SpecialSeperatorForDevSet|public static byte[] getSystemStateHash() {\n MessageDigest sha1;\n try {\n sha1 = MessageDigest.getInstance("SHA1");\n }\n catch (Exception e) {\n-   throw new Error("Error in RandomSeed, no sha1 hash");\n+   throw new Error("Error in RandomSeed, no sha1 hash");\n }\n sha1.update((byte) System.currentTimeMillis());\n sha1.update((byte) Runtime.getRuntime().totalMemory());\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update(stackDump(new Throwable()));\n try {\n Properties props = System.getProperties();\n Enumeration names = props.propertyNames();\n while (names.hasMoreElements()) {\n String name = (String) names.nextElement();\n sha1.update(name.getBytes());\n sha1.update(props.getProperty(name).getBytes());\n }\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n try {\n sha1.update(InetAddress.getLocalHost().toString().getBytes());\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n Runtime.getRuntime().gc();\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update((byte) System.currentTimeMillis());\n return sha1.digest();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-129|SpecialSeperatorForDevSet|public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n if (monitor != null && monitor.isCanceled()) {\n return;\n-   }\n+   }\n try {\n ftpClient = new FTPClient();\n ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n ftpClient.connect();\n try {\n Thread.sleep(1000);\n }\n catch (InterruptedException e) {\n e.printStackTrace();\n }\n ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n try {\n Thread.sleep(1000);\n }\n catch (InterruptedException e) {\n e.printStackTrace();\n }\n if (from != null) {\n FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\n synchedSet.add(ftpHolder);\n }\n JobHandler.aquireFTPLock();\n for (Iterator iter = synchedSet.iterator();\n iter.hasNext();\n ) {\n if (monitor != null && monitor.isCanceled()) {\n JobHandler.releaseFTPLock();\n ftpClient.quit();\n return;\n }\n Thread.yield();\n FTPHolder element = (FTPHolder) iter.next();\n ftpClient.setType(FTPTransferType.ASCII);\n ftpClient.put(element.from, element.to);\n if (element.renameTo != null) {\n try {\n ftpClient.delete(element.renameTo);\n }\n catch (Exception e) {\n }\n ftpClient.rename(element.to, element.renameTo);\n log.info("RENAME: " + element.to + "To: " + element.renameTo);\n }\n }\n JobHandler.releaseFTPLock();\n ftpClient.quit();\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (FTPException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n synchedSet.clear();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n-   bin.close();\n+   bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-130|SpecialSeperatorForDevSet|public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n if (part.getBody() != null) {\n long attachmentId = localAttachment.mId;\n InputStream in = part.getBody().getInputStream();\n File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n if (!saveIn.exists()) {\n saveIn.mkdirs();\n }\n File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n saveAs.createNewFile();\n-   FileOutputStream out = new FileOutputStream(saveAs);\n+   FileOutputStream out = new FileOutputStream(saveAs);\n long copySize = IOUtils.copy(in, out);\n in.close();\n out.close();\n String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n localAttachment.mSize = copySize;\n localAttachment.mContentUri = contentUriString;\n ContentValues cv = new ContentValues();\n cv.put(AttachmentColumns.SIZE, copySize);\n cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n context.getContentResolver().update(uri, cv, null, null);\n }\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n-   else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n+   else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-131|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-131|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String fetchUrl(String urlString) {\n try {\n URL url = new URL(urlString);\n-   BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n+   BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n StringBuilder builder = new StringBuilder();\n while ((line = reader.readLine()) != null) {\n builder.append(line);\n }\n reader.close();\n return builder.toString();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n return "";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-132|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n-   System.out.println("");\n+   System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-133|SpecialSeperatorForDevSet|public void read(String skeletonFilename) throws Exception {\n ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();\n URL url = loader.getResource(skeletonFilename);\n if (null == url) {\n throw new Exception("Cannot locate '" + skeletonFilename + "' - aborting.");\n }\n String line;\n StringBuilder section = new StringBuilder();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));\n while (null != (line = reader.readLine())) {\n if (line.startsWith("---")) {\n sections.add(section.toString());\n section.setLength(0);\n }\n else {\n section.append(line);\n section.append(NL);\n-   }\n+   }\n }\n if (section.length() > 0) {\n sections.add(section.toString());\n }\n if (sections.size() != size) {\n throw new Exception("Skeleton file '" + skeletonFilename + "' has " + sections.size() + " static sections, but " + size + " were expected.");\n }\n }\n|SpecialSeperatorForDevSet|public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n if (url == null) throw new IllegalArgumentException("Keystore url may not be null");\n LOG.debug("Initializing key store");\n KeyStore keystore = null;\n if (url.getFile().endsWith(".p12")) keystore = KeyStore.getInstance("pkcs12");\n else keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n keystore.load(url.openStream(), password != null ? password.toCharArray() : null);\n return keystore;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-134|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n-   MessageDigest md;\n+   MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public void importCSV(InputStream csvfile) throws Exception {\n try {\n String[] qmarks = new String[columns.length];\n for (int i = 0;\n i < qmarks.length;\n-   i++) {\n+   i++) {\n qmarks[i] = "?";\n }\n if (cleartable) {\n String delsql = "delete from " + table;\n Statement delstm = conn.createStatement();\n delstm.executeUpdate(delsql);\n }\n String sql = "insert into " + table + " (" + StringUtils.join(columns, ", ") + ") values (" + StringUtils.join(qmarks, ", ") + ")";\n log.debug("SQL: " + sql);\n PreparedStatement stm = conn.prepareStatement(sql);\n int datatypes[] = new int[columns.length];\n for (int i = 0;\n i < columns.length;\n i++) {\n Table tbl = project.getTableByName(table);\n if (tbl == null) throw new OntopiaRuntimeException("Unknown table: " + table);\n Column col = tbl.getColumnByName(columns[i]);\n if (col == null) throw new OntopiaRuntimeException("Unknown table column: " + columns[i]);\n if (col.getType() == null) throw new OntopiaRuntimeException("Column type is null: " + col.getType());\n DataType datatype = project.getDataTypeByName(col.getType(), "generic");\n if (datatype == null) throw new OntopiaRuntimeException("Unknown column type: " + col.getType());\n String dtype = datatype.getType();\n if ("varchar".equals(dtype)) datatypes[i] = Types.VARCHAR;\n else if ("integer".equals(dtype)) datatypes[i] = Types.INTEGER;\n else throw new OntopiaRuntimeException("Unknown datatype: " + dtype);\n }\n LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n for (int i = 0;\n i < ignorelines;\n i++) {\n String line = reader.readLine();\n if (line == null) break;\n }\n log.debug("[" + StringUtils.join(columns, ", ") + "]");\n int lineno = 0;\n while (true) {\n lineno++;\n String line = reader.readLine();\n if (line == null) break;\n try {\n String[] cols = StringUtils.split(line, separator);\n if (cols.length > columns.length && !ignorecolumns) log.debug("Ignoring columns: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n log.debug("CVALUES: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n String dmesg = "(";\n for (int i = 0;\n i < columns.length;\n i++) {\n String col = cols[i];\n if (stripquotes) {\n int len = col.length();\n if (len > 1 && ((col.charAt(0) == '"' && col.charAt(len - 1) == '"') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);\n }\n if (col != null && col.equals("")) col = null;\n dmesg = dmesg + col;\n if (i < columns.length - 1) dmesg = dmesg + ", ";\n stm.setObject(i + 1, col, datatypes[i]);\n }\n dmesg = dmesg + ")";\n log.debug(dmesg);\n stm.execute();\n }\n catch (Exception e) {\n conn.rollback();\n throw new OntopiaRuntimeException("Cannot read line " + lineno + ": '" + line + "'", e);\n }\n }\n conn.commit();\n }\n finally {\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-135|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n-   }\n+   }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\n if (normaliseWhitespace) {\n profileDiff = removeWhitespaces(profileDiff);\n-   }\n+   }\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(profileDiff.getBytes());\n return new BASE64Encoder().encode(md.digest());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-136|SpecialSeperatorForDevSet|@Test public void testLoadSource() throws IOException {\n ArticleMetadata metadata = new ArticleMetadata();\n metadata.setId("http://arxiv.org/abs/math/0205003v1");\n InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n Assert.assertNotNull(inputStream);\n StringWriter writer = new StringWriter();\n IOUtils.copy(inputStream, writer, "utf8");\n String contents = writer.toString();\n Assert.assertTrue(contents.contains("A strengthening of the Nyman"));\n-   inputStream.close();\n+   inputStream.close();\n }\n|SpecialSeperatorForDevSet|-  @Test public void testLoadSource() throws IOException {\n+  @Test public void testLoadSource() throws IOException {\n ArticleMetadata metadata = new ArticleMetadata();\n metadata.setId("http://arxiv.org/abs/math/0205003v1");\n InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n Assert.assertNotNull(inputStream);\n StringWriter writer = new StringWriter();\n IOUtils.copy(inputStream, writer, "utf8");\n String contents = writer.toString();\n Assert.assertTrue(contents.contains("A strengthening of the Nyman"));\n inputStream.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-136|SpecialSeperatorForDevSet|@Test public void testLoadSource() throws IOException {\n ArticleMetadata metadata = new ArticleMetadata();\n metadata.setId("http://arxiv.org/abs/math/0205003v1");\n InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n Assert.assertNotNull(inputStream);\n StringWriter writer = new StringWriter();\n IOUtils.copy(inputStream, writer, "utf8");\n-   String contents = writer.toString();\n+   String contents = writer.toString();\n Assert.assertTrue(contents.contains("A strengthening of the Nyman"));\n inputStream.close();\n }\n|SpecialSeperatorForDevSet|public void test() throws Exception {\n StorageStringWriter s = new StorageStringWriter(2048, "UTF-8");\n s.addText("Test");\n try {\n s.getOutputStream();\n fail("Should throw IOException as method not supported.");\n }\n catch (IOException e) {\n }\n s.getWriter().write("ing is important");\n s.close(ResponseStateOk.getInstance());\n assertEquals("Testing is important", s.getText());\n InputStream input = s.getInputStream();\n StringWriter writer = new StringWriter();\n IOUtils.copy(input, writer, "UTF-8");\n assertEquals("Testing is important", writer.toString());\n try {\n s.getWriter();\n fail("Should throw IOException as storage is closed.");\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-137|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n-   try {\n+   try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|private void uploadFile() {\n String end = "\r\n";\n String twoHyphens = "--";\n String boundary = "*****";\n try {\n URL url = new URL(actionUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setDoInput(true);\n con.setDoOutput(true);\n con.setUseCaches(false);\n con.setRequestMethod("POST");\n con.setRequestProperty("Connection", "Keep-Alive");\n con.setRequestProperty("Charset", "UTF-8");\n con.setRequestProperty("Content-Type", "multipart/form-data;\nboundary=" + boundary);\n DataOutputStream ds = new DataOutputStream(con.getOutputStream());\n ds.writeBytes(twoHyphens + boundary + end);\n ds.writeBytes("Content-Disposition: form-data;\n " + "name=\"file1\";\nfilename=\"" + newName + "\"" + end);\n ds.writeBytes(end);\n FileInputStream fStream = new FileInputStream(uploadFile);\n int bufferSize = 1024;\n byte[] buffer = new byte[bufferSize];\n int length = -1;\n while ((length = fStream.read(buffer)) != -1) {\n ds.write(buffer, 0, length);\n }\n ds.writeBytes(end);\n ds.writeBytes(twoHyphens + boundary + twoHyphens + end);\n fStream.close();\n ds.flush();\n-   InputStream is = con.getInputStream();\n+   InputStream is = con.getInputStream();\n int ch;\n StringBuffer b = new StringBuffer();\n while ((ch = is.read()) != -1) {\n b.append((char) ch);\n }\n showDialog(b.toString().trim());\n ds.close();\n }\n catch (Exception e) {\n showDialog("" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-138|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n-   location = tokenizer.nextToken();\n+   location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n-   rating = Integer.parseInt(tokenizer.nextToken());\n+   rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-138|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n-   }\n+   }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public static String md5(String text) {\n String encrypted = "";\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(text.getBytes());\n encrypted = hex(md.digest());\n }\n catch (NoSuchAlgorithmException nsaEx) {\n-   }\n+   }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-139|SpecialSeperatorForDevSet|public ArrayList<String> showTopLetters() {\n int[] tempArray = new int[engCountLetters.length];\n char[] tempArrayLetters = new char[abcEng.length];\n ArrayList<String> resultTopFiveLetters = new ArrayList<String>();\n tempArray = engCountLetters.clone();\n tempArrayLetters = abcEng.clone();\n int tempCount;\n char tempLetters;\n for (int j = 0;\n j < (abcEng.length * abcEng.length);\n j++) {\n for (int i = 0;\n i < abcEng.length - 1;\n i++) {\n if (tempArray[i] > tempArray[i + 1]) {\n-   tempCount = tempArray[i];\n+   tempCount = tempArray[i];\n tempLetters = tempArrayLetters[i];\n tempArray[i] = tempArray[i + 1];\n tempArrayLetters[i] = tempArrayLetters[i + 1];\n tempArray[i + 1] = tempCount;\n tempArrayLetters[i + 1] = tempLetters;\n }\n }\n }\n for (int i = tempArrayLetters.length - 1;\n i > tempArrayLetters.length - 6;\n i--) {\n resultTopFiveLetters.add(tempArrayLetters[i] + ":" + tempArray[i]);\n }\n return resultTopFiveLetters;\n }\n|SpecialSeperatorForDevSet|public byte[] getClassBytes(String className, ClassLoader classLoader) {\n URLClassLoader cl = new URLClassLoader(urls, classLoader);\n String resource = className.replace('.', '/') + ".class";\n InputStream is = null;\n try {\n URL url = cl.getResource(resource);\n if (url == null) {\n throw new RuntimeException("Class Resource not found for " + resource);\n }\n is = url.openStream();\n byte[] classBytes = InputStreamTransform.readBytes(is);\n return classBytes;\n }\n catch (IOException e) {\n throw new RuntimeException("IOException reading bytes for " + className, e);\n }\n finally {\n if (is != null) {\n try {\n-   is.close();\n+   is.close();\n }\n catch (IOException e) {\n throw new RuntimeException("Error closing InputStream for " + className, e);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-140|SpecialSeperatorForDevSet|public void actionPerformed(ActionEvent e) {\n if ("register".equals(e.getActionCommand())) {\n buttonClicked = "register";\n try {\n String data = URLEncoder.encode("ver", "UTF-8") + "=" + URLEncoder.encode(Double.toString(questVer), "UTF-8");\n data += "&" + URLEncoder.encode("name", "UTF-8") + "=" + URLEncoder.encode(name.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("os", "UTF-8") + "=" + URLEncoder.encode(os.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("jre", "UTF-8") + "=" + URLEncoder.encode(jre.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("email", "UTF-8") + "=" + URLEncoder.encode(email.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode("Qr7SchF", "UTF-8");\n data += "&" + URLEncoder.encode("answers", "UTF-8") + "=" + URLEncoder.encode(Integer.toString(getAnswers()), "UTF-8");\n URL url = new URL("http://ubcdcreator.sourceforge.net/register.php");\n URLConnection conn = url.openConnection();\n conn.setDoInput(true);\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(data);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n while ((line = rd.readLine()) != null) {\n }\n rd.close();\n wr.close();\n }\n catch (Exception ex) {\n }\n setVisible(false);\n-   }\n+   }\n else if ("cancel".equals(e.getActionCommand())) {\n buttonClicked = "cancel";\n setVisible(false);\n }\n else if ("never".equals(e.getActionCommand())) {\n buttonClicked = "never";\n setVisible(false);\n }\n }\n|SpecialSeperatorForDevSet|private BingResponse queryBing(BingRequest request) throws BingException {\n try {\n if (logger.isDebugEnabled()) {\n logger.debug("Searching through bing...");\n }\n String query = request.getQuery();\n query = URLEncoder.encode(query, "UTF-8");\n URL url = new URL("http://api.bing.net/json.aspx?" + "AppId=" + request.getAppId() + "&Query=" + query + "&Sources=" + request.getType().toString());\n URLConnection connection = null;\n if (useProxy) {\n if (proxyType == null) {\n throw new BingException("Please set a proxy first before trying to connect through a proxy", new Throwable());\n }\n connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);\n }\n else {\n connection = new URL(url.toString()).openConnection();\n }\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n while ((line = reader.readLine()) != null) {\n-   builder.append(line);\n+   builder.append(line);\n }\n String response = builder.toString();\n ResponseParser parser = new ResponseParser();\n parser.getError(response);\n return parser.getResults(response);\n }\n catch (MalformedURLException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n }\n catch (IOException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-141|SpecialSeperatorForDevSet|public String readRemoteFile() throws IOException {\n String response = "";\n boolean eof = false;\n URL url = new URL(StaticData.remoteFile);\n InputStream is = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String s;\n s = br.readLine();\n response = s;\n-   while (!eof) {\n+   while (!eof) {\n try {\n s = br.readLine();\n if (s == null) {\n eof = true;\n br.close();\n }\n else response += s;\n }\n catch (EOFException eo) {\n eof = true;\n }\n catch (IOException e) {\n System.out.println("IO Error : " + e.getMessage());\n }\n }\n return response;\n }\n|SpecialSeperatorForDevSet|public void testReadPerMemberSixSmall() throws IOException {\n GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n gzin.setEofEachMember(true);\n for (int i = 0;\n-   i < 3;\n+   i < 3;\n i++) {\n int count2 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 1-byte member count", 1, count2);\n gzin.nextMember();\n int count3 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 5-byte member count", 5, count3);\n gzin.nextMember();\n }\n int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong eof count", 0, countEnd);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-142|SpecialSeperatorForDevSet|public boolean resourceExists(String location) {\n if ((location == null) || (location.length() == 0)) {\n return false;\n }\n try {\n URL url = buildURL(location);\n URLConnection cxn = url.openConnection();\n InputStream is = null;\n try {\n byte[] byteBuffer = new byte[2048];\n is = cxn.getInputStream();\n while (is.read(byteBuffer, 0, 2048) >= 0) ;\n return true;\n }\n finally {\n-   if (is != null) {\n+   if (is != null) {\n is.close();\n }\n }\n }\n catch (IOException ex) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|protected String getPasswordHash(String password) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n log.error("MD5 algorithm not found", e);\n throw new ServiceException(e);\n }\n-   md.update(password.getBytes());\n+   md.update(password.getBytes());\n byte[] hash = md.digest();\n StringBuffer buf = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n buf.append(Integer.toHexString(hash[i] & 0xff));\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-143|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) {\n try {\n if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n System.out.println("sourceFile & destinationFile is null");\n System.exit(-1);\n }\n if (sourceFile.isDirectory()) {\n File[] tmp = sourceFile.listFiles();\n File f;\n for (int i = 0;\n i < tmp.length;\n i++) {\n f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n f.getParentFile().mkdirs();\n copy(tmp[i], f);\n }\n }\n else {\n System.out.println("\nCopy from: " + sourceFile + "\n\n to: " + destinationFile);\n FileChannel source = new FileInputStream(sourceFile).getChannel();\n FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static URLConnection openProxiedConnection(URL url) throws IOException {\n if (proxyHost != null) {\n System.getProperties().put("proxySet", "true");\n System.getProperties().put("proxyHost", proxyHost);\n System.getProperties().put("proxyPort", proxyPort);\n }\n-   URLConnection cnx = url.openConnection();\n+   URLConnection cnx = url.openConnection();\n if (proxyUsername != null) {\n cnx.setRequestProperty("Proxy-Authorization", proxyEncodedPassword);\n }\n return cnx;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-144|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n-   sb.append(str);\n+   sb.append(str);\n }\n in.close();\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|private long getSize(String url) throws ClientProtocolException, IOException {\n url = normalizeUrl(url);\n Log.i(LOG_TAG, "Head " + url);\n HttpHead httpGet = new HttpHead(url);\n HttpResponse response = mHttpClient.execute(httpGet);\n if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n throw new IOException("Unexpected Http status code " + response.getStatusLine().getStatusCode());\n }\n Header[] clHeaders = response.getHeaders("Content-Length");\n-   if (clHeaders.length > 0) {\n+   if (clHeaders.length > 0) {\n Header header = clHeaders[0];\n return Long.parseLong(header.getValue());\n }\n return -1;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-145|SpecialSeperatorForDevSet|private static void readData() {\n StringTokenizer sTok;\n topSet = new HashSet();\n sTok = new StringTokenizer(tops, ",");\n while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\n leftSet = new HashSet();\n sTok = new StringTokenizer(lefts, ",");\n while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\n rightSet = new HashSet();\n sTok = new StringTokenizer(rights, ",");\n while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\n farRightSet = new HashSet();\n sTok = new StringTokenizer(farrights, ",");\n while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\n vowelSet = new HashSet();\n sTok = new StringTokenizer(vowels, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n vowelSet.add(ntk = sTok.nextToken());\n if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n puncSet = new HashSet();\n sTok = new StringTokenizer(others, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n puncSet.add(ntk = sTok.nextToken());\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n charSet = new HashSet();\n tibSet = new HashSet();\n sTok = new StringTokenizer(tibetanConsonants, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n tibSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n sanskritStackSet = new HashSet();\n sTok = new StringTokenizer(otherConsonants, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n sanskritStackSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n numberSet = new HashSet();\n sTok = new StringTokenizer(numbers, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n numberSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n charSet.add("Y");\n charSet.add("R");\n charSet.add("W");\n validInputSequences.put("Y", anyOldObjectWillDo);\n validInputSequences.put("R", anyOldObjectWillDo);\n validInputSequences.put("W", anyOldObjectWillDo);\n sTok = null;\n top_vowels = new HashSet();\n top_vowels.add(i_VOWEL);\n top_vowels.add(e_VOWEL);\n top_vowels.add(o_VOWEL);\n top_vowels.add(ai_VOWEL);\n top_vowels.add(au_VOWEL);\n top_vowels.add(reverse_i_VOWEL);\n try {\n URL url = TibetanMachineWeb.class.getResource(fileName);\n if (url == null) {\n System.err.println("Cannot find " + fileName + ";\n aborting.");\n System.exit(1);\n }\n InputStreamReader isr = new InputStreamReader(url.openStream());\n BufferedReader in = new BufferedReader(isr);\n System.out.println("Reading Tibetan Machine Web code table " + fileName);\n String line;\n boolean hashOn = false;\n boolean isTibetan = false;\n boolean isSanskrit = false;\n boolean ignore = false;\n while ((line = in.readLine()) != null) {\n if (line.startsWith("<?")) {\n if (line.equalsIgnoreCase("<?Consonants?>")) {\n isSanskrit = false;\n isTibetan = true;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Numbers?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Vowels?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Other?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Tibetan?>")) {\n isSanskrit = false;\n isTibetan = true;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Numbers?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) {\n isSanskrit = true;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?ToWylie?>")) {\n-   isSanskrit = false;\n+   isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Ignore?>")) {\n isSanskrit = false;\n ignore = true;\n }\n }\n else if (line.startsWith("//")) {\n ;\n }\n else if (line.equals("")) {\n ;\n }\n else {\n StringTokenizer st = new StringTokenizer(line, DELIMITER, true);\n String wylie = null;\n DuffCode[] duffCodes;\n duffCodes = new DuffCode[11];\n int k = 0;\n StringBuffer escapedToken = new StringBuffer("");\n ThdlDebug.verify(escapedToken.length() == 0);\n while (st.hasMoreTokens()) {\n String val = getEscapedToken(st, escapedToken);\n if (val.equals(DELIMITER) && escapedToken.length() == 0) {\n k++;\n }\n else if (!val.equals("")) {\n if (escapedToken.length() != 0) {\n escapedToken = new StringBuffer("");\n ThdlDebug.verify(escapedToken.length() == 0);\n }\n switch(k) {\n case 0: wylie = val;\n break;\n case 1: duffCodes[TM] = new DuffCode(val, false);\n break;\n case 2: if (!ignore) {\n duffCodes[REDUCED_C] = new DuffCode(val, true);\n }\n break;\n case 3: duffCodes[TMW] = new DuffCode(val, true);\n if (null != duffCodes[TM]) {\n TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n }\n if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error("tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but " + val + " appears two or more times.");\n TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\n if (wylie.toLowerCase().startsWith("\\uf0")) {\n int x = Integer.parseInt(wylie.substring("\\u".length()), 16);\n ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\n NonUnicodeToTMW[x - ''] = new DuffCode[] {\n duffCodes[TMW] }\n;\n }\n break;\n case 4: case 5: case 6: case 7: case 8: case 9: if (!ignore) {\n try {\n duffCodes[k - 1] = new DuffCode(val, true);\n }\n catch (Exception e) {\n System.err.println("Couldn't make a DuffCode out of " + val + ";\n line is " + line + ";\n k is " + k);\n }\n }\n break;\n case 10: if (!val.equals("none")) {\n StringBuffer unicodeBuffer = new StringBuffer();\n StringTokenizer uTok = new StringTokenizer(val, ",");\n while (uTok.hasMoreTokens()) {\n String subval = uTok.nextToken();\n ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\n try {\n int x = Integer.parseInt(subval, 16);\n ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\n unicodeBuffer.append((char) x);\n }\n catch (NumberFormatException e) {\n ThdlDebug.verify(false);\n }\n }\n TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\n char ch;\n if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\n if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {\n throw new Error("tibwn.ini has more than one TMW fellow listed that has the Unicode " + val + ", but it's not on the list of specially handled glyphs");\n }\n UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];\n }\n }\n break;\n case 11: if (!ignore) {\n duffCodes[HALF_C] = new DuffCode(val, true);\n }\n break;\n case 12: if (!ignore) {\n DuffCode binduCode = new DuffCode(val, true);\n binduMap.put(duffCodes[TMW], binduCode);\n }\n break;\n case 13: throw new Error("tibwn.ini has only 13 columns, you tried to use a 14th column.");\n }\n }\n else {\n if (k == 10) {\n throw new Error("needed none or some unicode;\n line is " + line);\n }\n }\n }\n if (k < 10) {\n throw new Error("needed none or some unicode;\n line is " + line);\n }\n if (!ignore) {\n if (null == wylie) throw new Error(fileName + " has a line ^" + DELIMITER + " which means that no Wylie is assigned. That isn't supported.");\n if (hashOn) {\n tibHash.put(Manipulate.unescape(wylie), duffCodes);\n }\n if (isTibetan) {\n StringBuffer wylieWithoutDashes = new StringBuffer(wylie);\n for (int wl = 0;\n wl < wylieWithoutDashes.length();\n wl++) {\n if (wylieWithoutDashes.charAt(wl) == '-') {\n wylieWithoutDashes.deleteCharAt(wl);\n --wl;\n }\n }\n tibSet.add(wylieWithoutDashes.toString());\n }\n if (isSanskrit) {\n sanskritStackSet.add(wylie);\n }\n if (null == duffCodes[TMW]) throw new Error(fileName + " has a line with wylie " + wylie + " but no TMW;\n that's not allowed");\n int font = duffCodes[TMW].getFontNum();\n int code = duffCodes[TMW].getCharNum() - 32;\n toHashKey[font][code] = Manipulate.unescape(wylie);\n }\n }\n }\n }\n catch (IOException e) {\n System.out.println("file Disappeared");\n ThdlDebug.noteIffyCode();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-146|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n try {\n URL url = _toURL(xml_location);\n-   if (url == null) {\n+   if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n else {\n in_stream = url.openStream();\n }\n }\n catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|@Test public void testCopyUnknownSize() throws IOException {\n final InputStream in = new ByteArrayInputStream(TEST_DATA);\n final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n assertEquals("Mismatched copy size", TEST_DATA.length, cpySize);\n-   final byte[] outArray = out.toByteArray();\n+   final byte[] outArray = out.toByteArray();\n assertArrayEquals("Mismatched data", TEST_DATA, outArray);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-147|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n-   fails.add(true);\n+   fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n FTPClient client = new FTPClient();\n try {\n client.connect("192.168.1.10");\n client.login("a", "123456");\n String[] names = client.listNames();\n for (String name : names) {\n System.out.println("Name = " + name);\n }\n FTPFile[] ftpFiles = client.listFiles();\n for (FTPFile ftpFile : ftpFiles) {\n if (ftpFile.getType() == FTPFile.FILE_TYPE) {\n System.out.println("FTPFile: " + ftpFile.getName() + ";\n " + FileUtils.byteCountToDisplaySize(ftpFile.getSize()));\n-   }\n+   }\n }\n client.logout();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n try {\n client.disconnect();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-148|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n-   }\n+   }\n|SpecialSeperatorForDevSet|private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[64];\n-   md.update(input.getBytes("iso-8859-1"), 0, input.length());\n+   md.update(input.getBytes("iso-8859-1"), 0, input.length());\n md5hash = md.digest();\n return this.convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-149|SpecialSeperatorForDevSet|public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {\n ProgramProfilingMessageSymbol profilingMessageSymbol = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n-   try {\n+   try {\n String query = "INSERT INTO ProgramProfilingMessageSymbols" + "(projectDeploymentConfigurationID, programMessageSymbolID)" + " VALUES (" + configID + ", " + programMessageSymbolID + ")";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProgramProfilingMessageSymbols WHERE " + "projectDeploymentConfigurationID = " + configID + " AND " + "programMessageSymbolID = " + programMessageSymbolID;\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n connection.rollback();\n String msg = "Attempt to create program profiling message " + "symbol failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n }\n profilingMessageSymbol = getProfilingMessageSymbol(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n catch (Exception e) {\n }\n String msg = "SQLException in createNewProfilingMessageSymbol";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return profilingMessageSymbol;\n }\n|SpecialSeperatorForDevSet|public void Load(String fname) throws Exception {\n File f = null;\n try {\n if ("".equals(fname) || fname == null) throw new Exception();\n System.out.println("Loading mapfile " + fname);\n }\n catch (Exception e) {\n throw new Exception("File not found");\n }\n-   aType = null;\n+   aType = null;\n fieldtype.clear();\n creatures.clear();\n aElement = new String("");\n content = null;\n Ax = -1;\n Ay = -1;\n aTemplate = -1;\n SAXParserFactory factory = SAXParserFactory.newInstance();\n data_read = 0;\n URL url = this.game.mainClass.getClassLoader().getResource(fname);\n if (url == null) {\n throw new Exception("Can't load map from : " + fname);\n }\n try {\n SAXParser parser = factory.newSAXParser();\n parser.parse(url.openStream(), this);\n }\n catch (Exception e) {\n System.out.println("Can't open XML : " + e);\n }\n for (int i = 0;\n i < fieldtype.size();\n i++) {\n System.out.println((MapField) fieldtype.get(i));\n }\n game.player.setpos(start_x, start_y);\n System.out.println("Player starting position set");\n start_x = -1;\n start_y = -1;\n System.out.println("Map \"" + fname + "\" loaded");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-150|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n-   jEdit.getProperty("version-check.url"), e.toString() }\n+   jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-151|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n-   ZipEntry entry = (ZipEntry) entries.nextElement();\n+   ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|public static String encryptPassword(String plainPassword) {\n StringBuffer sb = new StringBuffer();\n-   try {\n+   try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(plainPassword.getBytes());\n byte[] digestBytes = messageDigest.digest();\n String hex = null;\n for (int i = 0;\n i < digestBytes.length;\n i++) {\n hex = Integer.toHexString(0xFF & digestBytes[i]);\n if (hex.length() < 2) sb.append("0");\n sb.append(hex);\n }\n }\n catch (Exception ex) {\n System.out.println(ex.getMessage());\n }\n return new String(sb);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-152|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n-   for (int j = 0;\n+   for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|@Override public Content getContent(Object principal, ContentPath path, Version version, Map<String, Object> properties) throws ContentException {\n String uniqueName = path.getBaseName();\n URL url = buildURL(uniqueName);\n URLContent content = new URLContent(url, this.getName(), uniqueName);\n content.setUniqueName(uniqueName);\n content.setReadable(true);\n content.setWritable(writable);\n content.setExists(true);\n try {\n URLConnection connection = url.openConnection();\n String mimeType = connection.getContentType();\n content.setMimeType(mimeType);\n content.setWritable(true);\n }\n catch (IOException ex) {\n throw new ContentException("unable to obtain mime type of " + url, ex);\n }\n-   return content;\n+   return content;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-153|SpecialSeperatorForDevSet|private void reload() {\n if (xml != null) {\n try {\n String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());\n if (currentDate.equalsIgnoreCase(exchangeRateDate)) {\n return;\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n XPath xpath = null;\n try {\n DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n URLConnection conn = null;\n URL url = new URL("http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml");\n conn = url.openConnection();\n xml = docBuilder.parse(conn.getInputStream());\n xpath = XPathFactory.newInstance().newXPath();\n exchangeRateDate = xpath.evaluate("/Envelope/Cube/Cube/@time", xml);\n xpath = XPathFactory.newInstance().newXPath();\n NodeList currenciesNode = (NodeList) xpath.evaluate("/Envelope/Cube/Cube/Cube[@currency]", xml, XPathConstants.NODESET);\n currencies = new String[currenciesNode.getLength()];\n for (int i = 0;\n i < currencies.length;\n i++) {\n-   currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem("currency").getTextContent();\n+   currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem("currency").getTextContent();\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|-  public static String POST(String url, String[][] props) throws IOException {\n+  public static String POST(String url, String[][] props) throws IOException {\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n conn.setRequestMethod("POST");\n for (int i = 0;\n i < props.length;\n ++i) {\n conn.addRequestProperty(props[i][0], props[i][1]);\n }\n conn.connect();\n try {\n return new String((byte[]) conn.getContent());\n }\n finally {\n conn.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-154|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n-   out.write((byte) pxlen);\n+   out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n-   if (hasPixelData) {\n+   if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-154|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n-   out.write(b3 >> 4);\n+   out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|-  public static void main(String args[]) throws IOException {\n+  public static void main(String args[]) throws IOException {\n BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n out = new TitleCaseFilter(out);\n String line;\n while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-155|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n-   view.showWaitCursor();\n+   view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n-   ZipEntry ze = jar.getEntry(jarEntry);\n+   ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-156|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n-   while ((line = outfile.readLine()) != null) {\n+   while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|@Test public void test30_passwordAging() throws Exception {\n Db db = DbConnection.defaultCieDbRW();\n try {\n db.begin();\n Config.setProperty(db, "com.entelience.esis.security.passwordAge", "5", 1);\n PreparedStatement pst = db.prepareStatement("UPDATE e_people SET last_passwd_change = '2006-07-01' WHERE user_name = ?");\n pst.setString(1, "esis");\n db.executeUpdate(pst);\n db.commit();\n p_logout();\n t30login1();\n assertTrue(isPasswordExpired());\n PeopleInfoLine me = getCurrentPeople();\n assertNotNull(me.getPasswordExpirationDate());\n assertTrue(me.getPasswordExpirationDate().before(DateHelper.now()));\n t30chgpasswd();\n assertFalse(isPasswordExpired());\n me = getCurrentPeople();\n assertNotNull(me.getPasswordExpirationDate());\n assertTrue(me.getPasswordExpirationDate().after(DateHelper.now()));\n-   p_logout();\n+   p_logout();\n t30login2();\n assertFalse(isPasswordExpired());\n t30chgpasswd2();\n db.begin();\n Config.setProperty(db, "com.entelience.esis.security.passwordAge", "0", 1);\n db.commit();\n }\n catch (Exception e) {\n e.printStackTrace();\n db.rollback();\n }\n finally {\n db.safeClose();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-157|SpecialSeperatorForDevSet|-  public static String eventHash(String eventstr) {\n+  public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\n URL url = new URL(urlToRetrieve);\n URLConnection uc = url.openConnection();\n InputStream is = uc.getInputStream();\n-   BufferedReader in = new BufferedReader(new InputStreamReader(is));\n+   BufferedReader in = new BufferedReader(new InputStreamReader(is));\n StringBuilder output = new StringBuilder(16384);\n String str;\n boolean first = true;\n while ((str = in.readLine()) != null) {\n if (!first) output.append("\n");\n first = false;\n output.append(str);\n }\n in.close();\n System.err.println(((HttpURLConnection) uc).getResponseMessage());\n return output.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-158|SpecialSeperatorForDevSet|void addDataFromURL(URL theurl) {\n String line;\n InputStream in = null;\n-   try {\n+   try {\n in = theurl.openStream();\n BufferedReader data = new BufferedReader(new InputStreamReader(in));\n while ((line = data.readLine()) != null) {\n thetext.append(line + "\n");\n }\n }\n catch (Exception e) {\n System.out.println(e.toString());\n thetext.append(theurl.toString());\n }\n try {\n in.close();\n }\n catch (Exception e) {\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n-   destination.transferFrom(source, 0, source.size());\n+   destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-159|SpecialSeperatorForDevSet|public HttpResponse<E> doRequest(HttpMethods method, HttpHeader[] headers, boolean auth, URI target, BlipMessagePart body) throws HttpRequestException {\n HttpRequest<E> con = createConnection(method, target);\n if (defaultHeaders != null) {\n putHeaders(con, defaultHeaders);\n }\n if (headers != null) {\n putHeaders(con, headers);\n }\n try {\n if (auth && authStrategy != null) {\n authStrategy.perform(con);\n }\n-   if (body != null) {\n+   if (body != null) {\n bodyGenerator.writeBody(con, body);\n }\n HttpResponse<E> res = execute(con);\n return res;\n }\n catch (IOException e) {\n throw new HttpRequestException("Error executing request", e);\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File source, File destination) throws FileNotFoundException, IOException {\n if (source == null) throw new NullPointerException("The source may not be null.");\n if (destination == null) throw new NullPointerException("The destination may not be null.");\n FileInputStream sourceStream = new FileInputStream(source);\n destination.getParentFile().mkdirs();\n-   FileOutputStream destStream = new FileOutputStream(destination);\n+   FileOutputStream destStream = new FileOutputStream(destination);\n try {\n FileChannel sourceChannel = sourceStream.getChannel();\n FileChannel destChannel = destStream.getChannel();\n destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n }\n finally {\n try {\n sourceStream.close();\n destStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-160|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n-   md.update(_originalPassword.getBytes("UTF-8"));\n+   md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-160|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n-   return encodedPassword;\n+   return encodedPassword;\n }\n|SpecialSeperatorForDevSet|public static String getUniqueKey() {\n String digest = "";\n try {\n final MessageDigest md = MessageDigest.getInstance("MD5");\n final String timeVal = "" + (System.currentTimeMillis() + 1);\n String localHost = "";\n-   try {\n+   try {\n localHost = InetAddress.getLocalHost().toString();\n }\n catch (UnknownHostException e) {\n println("Warn: getUniqueKey(), Error trying to get localhost" + e.getMessage());\n }\n final String randVal = "" + new Random().nextInt();\n final String val = timeVal + localHost + randVal;\n md.reset();\n md.update(val.getBytes());\n digest = toHexString(md.digest());\n }\n catch (NoSuchAlgorithmException e) {\n println("Warn: getUniqueKey() " + e);\n }\n return digest;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-161|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n-   finally {\n+   finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-161|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n-   }\n+   }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n }\n|SpecialSeperatorForDevSet|public void copyLogic() {\n if (getState() == States.Idle) {\n setState(States.Synchronizing);\n try {\n-   FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty("binPath") + name + ".class")).getChannel();\n+   FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty("binPath") + name + ".class")).getChannel();\n FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty("agentFileLocation") + name + ".class")).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n setState(States.Idle);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-162|SpecialSeperatorForDevSet|-  public static String getPagina(String strurl) {\n+  public static String getPagina(String strurl) {\n String resp = "";\n Authenticator.setDefault(new Autenticador());\n try {\n URL url = new URL(strurl);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String str;\n while ((str = in.readLine()) != null) {\n resp += str;\n }\n in.close();\n }\n catch (MalformedURLException e) {\n resp = e.toString();\n }\n catch (IOException e) {\n resp = e.toString();\n }\n catch (Exception e) {\n resp = e.toString();\n }\n return resp;\n }\n|SpecialSeperatorForDevSet|public HttpResponse fetch(HttpServletRequest request) throws IOException {\n GUI = SwingUI.getApplicatoin();\n DefaultHttpClient httpclient = new DefaultHttpClient();\n CookieSpecFactory csf = new CookieSpecFactory() {\n public CookieSpec newInstance(HttpParams params) {\n return new BrowserCompatSpec() {\n @Override public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {\n }\n }\n;\n }\n }\n;\n if (Helper.useProxy()) {\n-   HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());\n+   HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());\n httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n }\n httpclient.getCookieSpecs().register("easy", csf);\n httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, "easy");\n String currentRemoteGAEHost = Helper.getRemoteServer();\n try {\n HttpUriRequest httpRequest = createRequest(request);\n addHeader(request, httpRequest);\n HttpResponse response = httpclient.execute(httpRequest);\n if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {\n challengeProxy(currentRemoteGAEHost);\n }\n logger.info(Helper.count.incrementAndGet() + " Response received from " + request.getRequestURL().toString() + ", status is " + response.getStatusLine());\n GUI.updateFetchCount();\n return response;\n }\n catch (ClientProtocolException e) {\n logger.error("Fetch ClientProtocol Error", e);\n throw e;\n }\n catch (IOException e) {\n logger.error("Fetch IO Error", e);\n throw e;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-163|SpecialSeperatorForDevSet|private static void setMembers() {\n try {\n URL url = new URL(getTracUrl() + "newticket");\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String buffer = reader.readLine();\n while (buffer != null) {\n if (buffer.contains("<select id=\"component\" name=\"component\">")) {\n Pattern pattern = Pattern.compile(">[^<]+?<");\n Matcher matcher = pattern.matcher(buffer);\n Vector<String> erg = new Vector<String>();\n int start = 0;\n while (matcher.find(start)) {\n int von = matcher.start() + 1;\n int bis = matcher.end() - 1;\n erg.add(Recoder.recode(buffer.substring(von, bis), "UTF-8", Recoder.getDefaultEncoding()));\n start = bis;\n }\n m_strComponents = new String[erg.size()];\n erg.toArray(m_strComponents);\n }\n if (buffer.contains("<select id=\"priority\" name=\"priority\">")) {\n Pattern pattern = Pattern.compile(">[^<]+?<");\n Matcher matcher = pattern.matcher(buffer);\n Vector<String> erg = new Vector<String>();\n int start = 0;\n while (matcher.find(start)) {\n int von = matcher.start() + 1;\n int bis = matcher.end() - 1;\n erg.add(Recoder.recode(buffer.substring(von, bis), "UTF-8", Recoder.getDefaultEncoding()));\n start = bis;\n }\n m_strPriorities = new String[erg.size()];\n erg.toArray(m_strPriorities);\n }\n buffer = reader.readLine();\n }\n }\n catch (MalformedURLException e) {\n System.out.println("e1");\n }\n catch (IOException e) {\n System.out.println(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\n-   if (normaliseWhitespace) {\n+   if (normaliseWhitespace) {\n profileDiff = removeWhitespaces(profileDiff);\n }\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(profileDiff.getBytes());\n return new BASE64Encoder().encode(md.digest());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-164|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n-   long typeGid = getGID(namespaceId, id);\n+   long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n-   if (!removeReferencesInRoleTypes) {\n+   if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-164|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n-   conn.setAutoCommit(true);\n+   conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n-   preparedStatement2.setInt(2, component.getId());\n+   preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-165|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n-   ImageIcon icon = new ImageIcon(imageURL);\n+   ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n-   jd.pack();\n+   jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-165|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n-   if (!"png".equals(ext)) {\n+   if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-166|SpecialSeperatorForDevSet|public void Load(String fname) throws Exception {\n File f = null;\n try {\n if ("".equals(fname) || fname == null) throw new Exception();\n System.out.println("Loading mapfile " + fname);\n }\n catch (Exception e) {\n throw new Exception("File not found");\n }\n aType = null;\n fieldtype.clear();\n creatures.clear();\n aElement = new String("");\n content = null;\n Ax = -1;\n Ay = -1;\n aTemplate = -1;\n SAXParserFactory factory = SAXParserFactory.newInstance();\n data_read = 0;\n URL url = this.game.mainClass.getClassLoader().getResource(fname);\n if (url == null) {\n throw new Exception("Can't load map from : " + fname);\n }\n try {\n SAXParser parser = factory.newSAXParser();\n parser.parse(url.openStream(), this);\n }\n catch (Exception e) {\n System.out.println("Can't open XML : " + e);\n-   }\n+   }\n for (int i = 0;\n i < fieldtype.size();\n i++) {\n System.out.println((MapField) fieldtype.get(i));\n }\n game.player.setpos(start_x, start_y);\n System.out.println("Player starting position set");\n start_x = -1;\n start_y = -1;\n System.out.println("Map \"" + fname + "\" loaded");\n }\n|SpecialSeperatorForDevSet|public static void copy(File from, File to) {\n boolean result;\n if (from.isDirectory()) {\n File[] subFiles = from.listFiles();\n for (int i = 0;\n i < subFiles.length;\n i++) {\n File newDir = new File(to, subFiles[i].getName());\n result = false;\n if (subFiles[i].isDirectory()) {\n if (newDir.exists()) result = true;\n else result = newDir.mkdirs();\n }\n else if (subFiles[i].isFile()) {\n try {\n result = newDir.createNewFile();\n }\n catch (IOException e) {\n log.error("unable to create new file: " + newDir, e);\n result = false;\n }\n }\n if (result) copy(subFiles[i], newDir);\n }\n }\n else if (from.isFile()) {\n FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n out = new FileOutputStream(to);\n int fileLength = (int) from.length();\n-   char charBuff[] = new char[fileLength];\n+   char charBuff[] = new char[fileLength];\n int len;\n int oneChar;\n while ((oneChar = in.read()) != -1) {\n out.write(oneChar);\n }\n }\n catch (FileNotFoundException e) {\n log.error("File not found!", e);\n }\n catch (IOException e) {\n log.error("Unable to read from file!", e);\n }\n finally {\n try {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n catch (IOException e1) {\n log.error("Error closing file reader/writer", e1);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-167|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n-   cacheFile = new File(cacheFile.getCanonicalPath());\n+   cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-168|SpecialSeperatorForDevSet|public static void fileUpload() throws IOException {\n HttpClient httpclient = new DefaultHttpClient();\n httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);\n HttpPost httppost = new HttpPost(postURL);\n File file = new File("d:/hai.html");\n System.out.println(ukeycookie);\n httppost.setHeader("Cookie", ukeycookie + ";\n-  " + skeycookie + ";\n+  " + skeycookie + ";\n" + usercookie);\n MultipartEntity mpEntity = new MultipartEntity();\n ContentBody cbFile = new FileBody(file);\n mpEntity.addPart("", cbFile);\n httppost.setEntity(mpEntity);\n System.out.println("Now uploading your file into mediafire...........................");\n HttpResponse response = httpclient.execute(httppost);\n HttpEntity resEntity = response.getEntity();\n System.out.println(response.getStatusLine());\n if (resEntity != null) {\n System.out.println("Getting upload response key value..........");\n uploadresponsekey = EntityUtils.toString(resEntity);\n getUploadResponseKey();\n System.out.println("upload resoponse key " + uploadresponsekey);\n }\n }\n|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n-   if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n+   if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-169|SpecialSeperatorForDevSet|public void init(ServletContext context) throws ScratchException {\n try {\n log.debug("Attempting to load Controllers from file: " + REGISTRY_FILENAME);\n ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n while (urls.hasMoreElements()) {\n URL url = urls.nextElement();\n log.debug("Found: " + url);\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String className = null;\n while ((className = reader.readLine()) != null) {\n className = className.trim();\n if (!"".equals(className) && !className.startsWith("#")) {\n log.debug("Found class: " + className);\n-   Class<?> clazz = classLoader.loadClass(className);\n+   Class<?> clazz = classLoader.loadClass(className);\n addClass(clazz);\n }\n }\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n log.error(e);\n }\n catch (ClassNotFoundException e) {\n e.printStackTrace();\n log.error(e);\n }\n }\n|SpecialSeperatorForDevSet|@Override protected Reader openConnection(URL url) throws IOException {\n try {\n if (limit != null) {\n limit.acquirePermit();\n }\n return super.openConnection(url);\n }\n-   catch (InterruptedException e) {\n+   catch (InterruptedException e) {\n throw new IOException(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-170|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n-   zos.setMethod(ZipOutputStream.DEFLATED);\n+   zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {\n this.zipFileName = url.toString();\n URLConnection urlConnection = url.openConnection();\n-   InputStream inputStream = urlConnection.getInputStream();\n+   InputStream inputStream = urlConnection.getInputStream();\n unzipNativeFormatFile(inputStream);\n parseAlertFiles();\n deleteAlertFiles();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-171|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException nsae) {\n+   catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static void copyAll(URL url, Writer out) {\n Reader in = null;\n try {\n in = new InputStreamReader(new BufferedInputStream(url.openStream()));\n copyAll(in, out);\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n finally {\n close(in);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-172|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n-   try {\n+   try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-172|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n-   LOGGER.error(e);\n+   LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-173|SpecialSeperatorForDevSet|public int exists(String fileToCheck) throws IOException {\n FTPClient ftp = new FTPClient();\n int found = 0;\n try {\n int reply = 0;\n ftp.connect(this.endpointURL, this.endpointPort);\n reply = ftp.getReplyCode();\n-   if (!FTPReply.isPositiveCompletion(reply)) {\n+   if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n throw new IOException("Ftp exists server refused connection.");\n }\n if (!ftp.login("anonymous", "")) {\n ftp.logout();\n throw new IOException("FTP: server wrong passwd");\n }\n ftp.enterLocalPassiveMode();\n if (ftp.listNames(fileToCheck) != null) {\n found = 1;\n }\n ftp.logout();\n }\n catch (Exception e) {\n throw new IOException(e.getMessage());\n }\n return found;\n }\n|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n-   addFile(portletTldFile, is, jout);\n+   addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-174|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n-   }\n+   }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|public static void testMapSource(MapSource mapSource, EastNorthCoordinate coordinate) {\n try {\n System.out.println("Testing " + mapSource.toString());\n int zoom = mapSource.getMinZoom() + ((mapSource.getMaxZoom() - mapSource.getMinZoom()) / 2);\n MapSpace mapSpace = mapSource.getMapSpace();\n int tilex = mapSpace.cLonToX(coordinate.lon, zoom) / mapSpace.getTileSize();\n int tiley = mapSpace.cLatToY(coordinate.lat, zoom) / mapSpace.getTileSize();\n url = new URL(mapSource.getTileUrl(zoom, tilex, tiley));\n System.out.println("Sample url: " + url);\n c = (HttpURLConnection) url.openConnection();\n System.out.println("Connecting...");\n c.connect();\n System.out.println("Connection established - response HTTP " + c.getResponseCode());\n if (c.getResponseCode() != 200) return;\n String contentType = c.getContentType();\n System.out.print("Image format : ");\n if ("image/png".equals(contentType)) System.out.println("png");\n else if ("image/jpeg".equals(contentType)) System.out.println("jpg");\n else System.out.println("unknown");\n String eTag = c.getHeaderField("ETag");\n boolean eTagSupported = (eTag != null);\n if (eTagSupported) {\n System.out.println("eTag : " + eTag);\n-   testIfNoneMatch();\n+   testIfNoneMatch();\n }\n else System.out.println("eTag : -");\n long date = c.getDate();\n if (date == 0) System.out.println("Date time : -");\n else System.out.println("Date time : " + new Date(date));\n long exp = c.getExpiration();\n if (exp == 0) System.out.println("Expiration time : -");\n else System.out.println("Expiration time : " + new Date(exp));\n long modified = c.getLastModified();\n if (modified == 0) System.out.println("Last modified time : not set");\n else System.out.println("Last modified time : " + new Date(modified));\n testIfModified();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n System.out.println("\n");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-175|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   Reader reader = new InputStreamReader(in, "US-ASCII");\n+   Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n-   InputStream in = new ByteArrayInputStream(inData);\n+   InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-175|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n-   in = new YellOnCloseInputStreamTest(in);\n+   in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n-   if (destFile.exists() && destFile.isDirectory()) {\n+   if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-176|SpecialSeperatorForDevSet|@Override protected String doInBackground(String... params) {\n try {\n final HttpParams param = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(param, 30000);\n HttpConnectionParams.setSoTimeout(param, 30000);\n DefaultHttpClient client = new DefaultHttpClient(param);\n HttpPost post = new HttpPost("http://www.google.com/loc/json");\n post.setEntity(new StringEntity(params[0]));\n if (DEBUG) Log.d("Location", params[0]);\n HttpResponse resp = client.execute(post);\n if (resp.getStatusLine().getStatusCode() == 200) {\n HttpEntity entity = resp.getEntity();\n String result = EntityUtils.toString(entity);\n-   return result;\n+   return result;\n }\n else {\n if (isFirstLocation) {\n requestGearsLocation(1);\n isFirstLocation = false;\n return RESULT_FIRST_FAILE;\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private void Submit2URL(URL url) throws Exception {\n HttpURLConnection urlc = null;\n try {\n urlc = (HttpURLConnection) url.openConnection();\n urlc.setRequestMethod("GET");\n urlc.setDoOutput(true);\n urlc.setDoInput(true);\n urlc.setUseCaches(false);\n urlc.setAllowUserInteraction(false);\n if (urlc.getResponseCode() != 200) {\n-   InputStream in = null;\n+   InputStream in = null;\n Reader reader = null;\n try {\n in = urlc.getInputStream();\n reader = new InputStreamReader(in, "UTF-8");\n int read = 0;\n char[] buf = new char[1024];\n String error = null;\n while ((read = reader.read(buf)) >= 0) {\n if (error == null) error = new String(buf, 0, read);\n else error += new String(buf, 0, read);\n }\n throw new NpsException(error, ErrorHelper.SYS_UNKOWN);\n }\n finally {\n if (reader != null) try {\n reader.close();\n }\n catch (Exception e1) {\n }\n if (in != null) try {\n in.close();\n }\n catch (Exception e1) {\n }\n }\n }\n }\n finally {\n if (urlc != null) try {\n urlc.disconnect();\n }\n catch (Exception e1) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-177|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n-   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n+   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|-  public static void main(String[] args) throws Exception {\n+  public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("Usage: URLDumper <URL> <file>");\n System.exit(1);\n }\n String location = args[0];\n String file = args[1];\n URL url = new URL(location);\n FileOutputStream fos = new FileOutputStream(file);\n byte[] bytes = new byte[4096];\n InputStream is = url.openStream();\n int read;\n while ((read = is.read(bytes)) != -1) {\n fos.write(bytes, 0, read);\n }\n is.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-178|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n-   throw new UnsupportedEncodingException();\n+   throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|public void open(String openStr) throws IOException {\n String commProtocol = "comm:";\n String rxtxProtocol = "rxtx:";\n String netProtocol = "net:";\n if (openStr.startsWith(commProtocol)) {\n CommConnection commConnection = CommConnection.open(openStr.substring(commProtocol.length()));\n this.setInputStream(commConnection.getInputStream());\n this.setOutputStream(commConnection.getOutputStream());\n }\n else if (openStr.startsWith(rxtxProtocol)) {\n RXTXConnection rxtxConnection = RXTXConnection.open(openStr.substring(commProtocol.length()));\n this.setInputStream(rxtxConnection.getInputStream());\n this.setOutputStream(rxtxConnection.getOutputStream());\n }\n else if (openStr.startsWith(netProtocol)) {\n SocketConnection socketConn = SocketConnection.open(openStr.substring(netProtocol.length()));\n this.setInputStream(socketConn.getInputStream());\n this.setOutputStream(socketConn.getOutputStream());\n-   }\n+   }\n else {\n URL url = new URL(openStr);\n URLConnection urlConn = url.openConnection();\n this.setInputStream(urlConn.getInputStream());\n try {\n this.setOutputStream(urlConn.getOutputStream());\n }\n catch (UnknownServiceException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-179|SpecialSeperatorForDevSet|private static String lastModified(URL url) {\n try {\n URLConnection conn = url.openConnection();\n return long2date(conn.getLastModified());\n }\n catch (Exception e) {\n SWGAide.printDebug("cach", 1, "SWGCraftCache:lastModified: " + e.getMessage());\n }\n return "0";\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Override public byte[] download(URI uri) throws NetworkException {\n log.info("download: " + uri);\n HttpGet httpGet = new HttpGet(uri.toString());\n try {\n HttpResponse httpResponse = httpClient.execute(httpGet);\n return EntityUtils.toByteArray(httpResponse.getEntity());\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw new NetworkException(e);\n }\n finally {\n httpGet.abort();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-180|SpecialSeperatorForDevSet|@Override public void incluir(Igreja igreja) throws Exception {\n Connection connection = criaConexao(false);\n-   String sql = "insert into igreja ? as idlocal, ? as possui_salao;\n+   String sql = "insert into igreja ? as idlocal, ? as possui_salao;\n";\n String sql2 = "SELECT MAX(idlocal) FROM Local";\n PreparedStatement stmt = null;\n PreparedStatement stmt2 = null;\n ResultSet rs = null;\n try {\n stmt = connection.prepareStatement(sql);\n stmt2 = connection.prepareStatement(sql2);\n rs = stmt2.executeQuery();\n stmt.setInt(1, rs.getInt("max"));\n stmt.setBoolean(2, igreja.getPossuiSalao());\n int retorno = stmt.executeUpdate();\n if (retorno == 0) {\n connection.rollback();\n throw new SQLException("Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!");\n }\n connection.commit();\n }\n catch (SQLException e) {\n connection.rollback();\n throw e;\n }\n finally {\n try {\n stmt.close();\n stmt2.close();\n rs.close();\n this.fechaConexao();\n }\n catch (SQLException e) {\n throw e;\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n URL url = new URL(args[0]);\n HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();\n httpCon.setDoOutput(true);\n httpCon.setRequestMethod("PUT");\n OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());\n out.write("fatal error");\n out.close();\n System.out.println("end");\n }\n catch (Exception e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-181|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = null;\n md = MessageDigest.getInstance("SHA");\n-   md.update(plaintext.getBytes("UTF-8"));\n+   md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n String fileName = file.getFileName();\n String assetsPath = FileFactory.getRealAssetsRootPath();\n new java.io.File(assetsPath).mkdir();\n java.io.File workingFile = getAssetIOFile(file);\n DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n if (destination != null && destination.getInode() > 0) {\n FileInputStream is = new FileInputStream(workingFile);\n FileChannel channelFrom = is.getChannel();\n java.io.File newVersionFile = getAssetIOFile(destination);\n FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n channelFrom.transferTo(0, channelFrom.size(), channelTo);\n channelTo.force(false);\n channelTo.close();\n channelFrom.close();\n }\n if (newDataFile != null) {\n FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n-   writeCurrentChannel.truncate(0);\n+   writeCurrentChannel.truncate(0);\n FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n writeCurrentChannel.force(false);\n writeCurrentChannel.close();\n fromChannel.close();\n if (UtilMethods.isImage(fileName)) {\n BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n int height = img.getHeight();\n file.setHeight(height);\n int width = img.getWidth();\n file.setWidth(width);\n }\n String folderPath = workingFile.getParentFile().getAbsolutePath();\n Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n java.io.File directory = new java.io.File(folderPath);\n java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n for (java.io.File iofile : files) {\n try {\n iofile.delete();\n }\n catch (SecurityException e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.");\n }\n catch (Exception e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + e.getMessage());\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-182|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n-   ((MultiPartEmail) email).attach(attachment);\n+   ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n-   email.addHeader("X-priority", "5");\n+   email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-182|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n-   for (int i = 0;\n+   for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|private void displayDiffResults() throws IOException {\n File outFile = File.createTempFile("diff", ".htm");\n outFile.deleteOnExit();\n FileOutputStream outStream = new FileOutputStream(outFile);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");\n if (addedTable.length() > 0) {\n out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");\n out.write(addedTable.toString());\n out.write("</table><br><br>");\n }\n if (modifiedTable.length() > 0) {\n out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");\n out.write(modifiedTable.toString());\n out.write("</table><br><br>");\n }\n if (deletedTable.length() > 0) {\n out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n out.write(deletedTable.toString());\n out.write("</table><br><br>");\n }\n out.write("<table name=METRICS BORDER>\n");\n if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n out.write("<tr><td>Base:&nbsp;\n</td><td>");\n out.write(Long.toString(base));\n-   out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n+   out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n</td><td>");\n out.write(Long.toString(deleted));\n out.write("</td></tr>\n<tr><td>Modified:&nbsp;\n</td><td>");\n out.write(Long.toString(modified));\n out.write("</td></tr>\n<tr><td>Added:&nbsp;\n</td><td>");\n out.write(Long.toString(added));\n out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;\n</td><td>");\n out.write(Long.toString(added + modified));\n out.write("</td></tr>\n");\n }\n out.write("<tr><td>Total:&nbsp;\n</td><td>");\n out.write(Long.toString(total));\n out.write("</td></tr>\n</table></div>");\n redlinesOut.close();\n out.flush();\n InputStream redlines = new FileInputStream(redlinesTempFile);\n byte[] buffer = new byte[4096];\n int bytesRead;\n while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n outStream.write("</BODY></HTML>".getBytes());\n outStream.close();\n Browser.launch(outFile.toURL().toString());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-183|SpecialSeperatorForDevSet|private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n File f = new File(path);\n String entryName = base + f.getName();\n FileInputStream goIn = new FileInputStream(f);\n-   TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n+   TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n taro.putArchiveEntry(tarEntry);\n if (f.isFile()) {\n IOUtils.copy(goIn, taro);\n taro.closeArchiveEntry();\n }\n else {\n taro.closeArchiveEntry();\n File[] children = f.listFiles();\n if (children != null) {\n for (File child : children) {\n addFileToTarGz(taro, child.getAbsolutePath(), entryName + "/");\n }\n }\n }\n taro.close();\n goIn.close();\n }\n|SpecialSeperatorForDevSet|public static String getURLContent(String urlToSearchString) throws IOException {\n URL url = new URL(urlToSearchString);\n URLConnection conn = url.openConnection();\n String encoding = conn.getContentEncoding();\n if (encoding == null) encoding = "ISO-8859-1";\n BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\n StringBuilder sb = new StringBuilder(16384);\n try {\n String line;\n while ((line = br.readLine()) != null) {\n sb.append(line);\n sb.append('\n');\n }\n }\n-   finally {\n+   finally {\n br.close();\n }\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-184|SpecialSeperatorForDevSet|private static byte[] baseHash(String name, String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n-   digest.reset();\n+   digest.reset();\n digest.update(name.toLowerCase().getBytes());\n digest.update(password.getBytes());\n return digest.digest();\n }\n catch (NoSuchAlgorithmException ex) {\n d("MD5 algorithm not found!");\n throw new RuntimeException("MD5 algorithm not found! Unable to authenticate");\n }\n }\n|SpecialSeperatorForDevSet|private String getFullClassName(URL url, String className) throws Exception {\n JarInputStream jis = new JarInputStream(url.openStream());\n ZipEntry zentry = null;\n while ((zentry = jis.getNextEntry()) != null) {\n String name = zentry.getName();\n int lastPos = name.lastIndexOf(".class");\n if (lastPos < 0) {\n continue;\n }\n name = name.replace('/', '.');\n int pos = -1;\n if (className != null) {\n pos = name.indexOf(className);\n if (pos >= 0 && name.length() == pos + className.length() + 6) {\n jis.close();\n return (name.substring(0, lastPos));\n }\n }\n }\n jis.close();\n return (null);\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-185|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n-   pst1.setString(2, instructions);\n+   pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n else {\n retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private boolean setPayload() throws IOException {\n if (Index < Headers.length) {\n FileOutputStream fos = new FileOutputStream(Headers[Index], true);\n FileInputStream fis = new FileInputStream(HeadlessData);\n-   FileChannel fic = fis.getChannel();\n+   FileChannel fic = fis.getChannel();\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n setDestination(Destinations[Index]);\n setPayload(Headers[Index]);\n Index++;\n return true;\n }\n return false;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-186|SpecialSeperatorForDevSet|public static AudioInputStream getWavFromURL(String urlstr) {\n URL url;\n AudioInputStream ais = null;\n try {\n url = new URL(urlstr);\n URLConnection c = url.openConnection();\n c.connect();\n InputStream stream = c.getInputStream();\n ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);\n LOG.debug("[getWavFromURL]Getting audio from URL: {\n0}\n");\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return ais;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copy(File from, File to) {\n boolean result;\n if (from.isDirectory()) {\n File[] subFiles = from.listFiles();\n for (int i = 0;\n i < subFiles.length;\n i++) {\n File newDir = new File(to, subFiles[i].getName());\n result = false;\n if (subFiles[i].isDirectory()) {\n if (newDir.exists()) result = true;\n else result = newDir.mkdirs();\n }\n else if (subFiles[i].isFile()) {\n try {\n result = newDir.createNewFile();\n }\n catch (IOException e) {\n log.error("unable to create new file: " + newDir, e);\n result = false;\n }\n-   }\n+   }\n if (result) copy(subFiles[i], newDir);\n }\n }\n else if (from.isFile()) {\n FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n out = new FileOutputStream(to);\n int fileLength = (int) from.length();\n char charBuff[] = new char[fileLength];\n int len;\n int oneChar;\n while ((oneChar = in.read()) != -1) {\n out.write(oneChar);\n }\n }\n catch (FileNotFoundException e) {\n log.error("File not found!", e);\n }\n catch (IOException e) {\n log.error("Unable to read from file!", e);\n }\n finally {\n try {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n catch (IOException e1) {\n log.error("Error closing file reader/writer", e1);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-187|SpecialSeperatorForDevSet|-  public static int createEmptyCart() {\n+  public static int createEmptyCart() {\n int SHOPPING_ID = 0;\n Connection con = null;\n try {\n con = getConnection();\n }\n catch (java.lang.Exception ex) {\n ex.printStackTrace();\n }\n try {\n PreparedStatement insert_cart = null;\n SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber("shopping_cart"));\n insert_cart = con.prepareStatement("INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )");\n insert_cart.setInt(1, SHOPPING_ID);\n insert_cart.executeUpdate();\n con.commit();\n insert_cart.close();\n returnConnection(con);\n }\n catch (java.lang.Exception ex) {\n try {\n con.rollback();\n ex.printStackTrace();\n }\n catch (Exception se) {\n System.err.println("Transaction rollback failed.");\n }\n }\n return SHOPPING_ID;\n }\n|SpecialSeperatorForDevSet|-  public void run() {\n+  public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-188|SpecialSeperatorForDevSet|private void Reserve() throws SQLException {\n Statement stbookings, stchartwl;\n String sp = "";\n if (useragent) sp = "agent";\n else sp = "user";\n String userbooksql = "";\n String agentbooksql = "";\n String bookingid = String.valueOf(System.currentTimeMillis());\n String currentcoach;\n String currentseat;\n try {\n if (useragent) {\n agentbooksql = "update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";\n agentbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";\n }\n else if (!useragent) {\n userbooksql = "update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";\n userbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";\n }\n for (int tickpos = 0;\n tickpos < booking_details.getNoOfPersons();\n tickpos++) {\n currentcoach = coach.get(tickpos);\n currentseat = seatno.get(tickpos);\n if (!currentcoach.equals("WL")) {\n String chartavailupdsql = "update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED modify do insert ";\n chartavailupdsql += "<seat number=\"" + currentseat + "\"><details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\" /></seat>";\n chartavailupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoach + "\"] ";\n chartavailupdsql += " return $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";\n System.out.println(chartavailupdsql);\n stchartwl = conn.createStatement();\n int updstat = stchartwl.executeUpdate(chartavailupdsql);\n if (updstat > 0) System.out.println("chart_wl availability updated");\n-   }\n+   }\n else if (currentcoach.equals("WL")) {\n String chartwlupdsql = "update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert ";\n chartwlupdsql += "<details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\" /></seat>";\n chartwlupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"] ";\n chartwlupdsql += " return $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";\n System.out.println(chartwlupdsql);\n stchartwl = conn.createStatement();\n int updstat = stchartwl.executeUpdate(chartwlupdsql);\n if (updstat > 0) System.out.println("chart_wl waitlisting updated");\n }\n if (useragent) agentbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>";\n else userbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>";\n }\n if (useragent) {\n agentbooksql += "</detail> as first into $new/book return $new' ) where agent_id like '" + booking_details.getUserId() + "'";\n System.out.println(agentbooksql);\n stbookings = conn.createStatement();\n int updstat = stbookings.executeUpdate(agentbooksql);\n if (updstat > 0) System.out.println("agent bookings updated");\n }\n else {\n userbooksql += "</detail> as first into $new/book return $new' ) where user_id like '" + booking_details.getUserId() + "'";\n System.out.println(userbooksql);\n stbookings = conn.createStatement();\n int updstat = stbookings.executeUpdate(userbooksql);\n if (updstat > 0) System.out.println("user bookings updated");\n }\n }\n catch (SQLException e) {\n conn.rollback();\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private String getHash(String string) {\n Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, "HashTime").start();\n MessageDigest md5 = null;\n-   try {\n+   try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n md5.reset();\n md5.update(string.getBytes());\n byte[] result = md5.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < result.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & result[i]));\n }\n String str = hexString.toString();\n hashTime.stop();\n return str;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-189|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n-   }\n+   }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void sort(float norm_abst[]) {\n-   float temp;\n+   float temp;\n for (int i = 0;\n i < 7;\n i++) {\n for (int j = 0;\n j < 7;\n j++) {\n if (norm_abst[j] > norm_abst[j + 1]) {\n temp = norm_abst[j];\n norm_abst[j] = norm_abst[j + 1];\n norm_abst[j + 1] = temp;\n }\n }\n }\n printFixed(norm_abst[0]);\n print(" ");\n printFixed(norm_abst[1]);\n print(" ");\n printFixed(norm_abst[2]);\n print(" ");\n printFixed(norm_abst[3]);\n print(" ");\n printFixed(norm_abst[4]);\n print(" ");\n printFixed(norm_abst[5]);\n print(" ");\n printFixed(norm_abst[6]);\n print(" ");\n printFixed(norm_abst[7]);\n print("\n");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-190|SpecialSeperatorForDevSet|@Override protected String doInBackground(String... params) {\n try {\n final HttpParams param = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(param, 30000);\n HttpConnectionParams.setSoTimeout(param, 30000);\n-   DefaultHttpClient client = new DefaultHttpClient(param);\n+   DefaultHttpClient client = new DefaultHttpClient(param);\n HttpPost post = new HttpPost("http://www.google.com/loc/json");\n post.setEntity(new StringEntity(params[0]));\n if (DEBUG) Log.d("Location", params[0]);\n HttpResponse resp = client.execute(post);\n if (resp.getStatusLine().getStatusCode() == 200) {\n HttpEntity entity = resp.getEntity();\n String result = EntityUtils.toString(entity);\n return result;\n }\n else {\n if (isFirstLocation) {\n requestGearsLocation(1);\n isFirstLocation = false;\n return RESULT_FIRST_FAILE;\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n SecretKey key = keyFactory.generateSecret(keySpec);\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-191|SpecialSeperatorForDevSet|private InputStream openStreamRaw(String filename) {\n InputStream stream = null;\n if (filename == null) return null;\n if (filename.length() == 0) {\n return null;\n }\n try {\n URL url = new URL(filename);\n stream = url.openStream();\n return stream;\n }\n catch (MalformedURLException mfue) {\n }\n catch (FileNotFoundException fnfe) {\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n ClassLoader cl = getClass().getClassLoader();\n stream = cl.getResourceAsStream("data/" + filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n }\n }\n-   stream = cl.getResourceAsStream(filename);\n+   stream = cl.getResourceAsStream(filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n }\n }\n return stream;\n }\n|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n-   }\n+   }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-192|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n-   totRead = in.read(cbuf);\n+   totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n-   return convertToHex(md5hash);\n+   return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-193|SpecialSeperatorForDevSet|public String postURL(String urlLocation, ArrayList headers, String content, HashMap postVariables, RenderEngine c) throws Exception {\n String postContent = null;\n if (postVariables != null) {\n boolean firstElement = true;\n postContent = new String();\n Iterator elements = postVariables.keySet().iterator();\n while (elements.hasNext()) {\n String key = (String) elements.next();\n String val = (String) postVariables.get(key);\n if (firstElement) {\n postContent += Encoder.URLEncode(key) + "=" + Encoder.URLEncode(val);\n firstElement = false;\n }\n else {\n postContent += "&" + Encoder.URLEncode(key) + "=" + Encoder.URLEncode(val);\n }\n }\n elements = null;\n }\n else {\n postContent = content;\n }\n Debug.log("Connecting to URL '" + urlLocation + "', content '" + postContent + "'");\n URL url = null;\n try {\n url = new URL(urlLocation);\n }\n catch (MalformedURLException e) {\n Debug.log("Unable to retrieve URL '" + urlLocation + "': " + e.getMessage());\n return null;\n }\n StringBuffer lines = new StringBuffer();\n HttpURLConnection conn = null;\n boolean contentLengthFound = false;\n try {\n conn = (HttpURLConnection) url.openConnection();\n loadCookies(urlLocation, conn, c);\n if (headers != null) {\n for (int i = 0;\n i < headers.size();\n i++) {\n String header = (String) headers.get(i);\n String key = header.substring(0, header.indexOf(":"));\n String value = header.substring(header.indexOf(":") + 2);\n if (key != null && key.equalsIgnoreCase("content-length")) {\n contentLengthFound = true;\n }\n Debug.log("Adding new request header '" + key + "'='" + value + "'");\n conn.setRequestProperty(key, value);\n }\n }\n if (!contentLengthFound) {\n Debug.log("Adding new request header 'Content-Length'='" + postContent.length() + "'");\n conn.setRequestProperty("Content-Length", Integer.toString(postContent.length()));\n }\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(postContent);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line = null;\n while ((line = rd.readLine()) != null) {\n lines.append(line);\n lines.append("\r\n");\n }\n handleHeaders(urlLocation, conn.getHeaderFields());\n wr.close();\n rd.close();\n wr = null;\n rd = null;\n }\n catch (IOException e) {\n if (conn != null) {\n lines = new StringBuffer();\n try {\n-   throw new Exception("Server returned error code '" + conn.getResponseCode() + "': " + conn.getResponseMessage());\n+   throw new Exception("Server returned error code '" + conn.getResponseCode() + "': " + conn.getResponseMessage());\n }\n catch (IOException ee) {\n throw new Exception("Unable to report error codes: " + ee.getMessage());\n }\n }\n Debug.log("I/O Exception occurred while communicating with endpoint: " + e.getMessage());\n return lines.toString().trim();\n }\n catch (Exception e) {\n }\n url = null;\n conn = null;\n return lines.toString().trim();\n }\n|SpecialSeperatorForDevSet|private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n-   String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n+   String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n log.println("Concat files into: " + outputFile);\n OutputStream out = new FileOutputStream(absPath + outputFile);\n byte[] buffer = new byte[4096];\n int readBytes;\n for (String file : inputFiles) {\n log.println(" Read: " + file);\n InputStream in = new FileInputStream(absPath + file);\n while ((readBytes = in.read(buffer)) != -1) {\n out.write(buffer, 0, readBytes);\n }\n in.close();\n }\n out.close();\n if (compress) {\n long normalSize = new File(absPath + outputFile).length();\n ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000");\n builder.directory(new File(absPath));\n Process process = builder.start();\n process.waitFor();\n long minSize = new File(absPath + outputFile).length();\n long diff = normalSize - minSize;\n double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n log.println("Result: " + percentage + " % (" + diffSize + " KB)");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-194|SpecialSeperatorForDevSet|public void test() {\n try {\n String query = "* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>" + "* <http://xmlns.com/foaf/0.1/knows> *";\n String url = "http://sindice.com/api/v2/search?qt=advanced&q=" + URLEncoder.encode(query, "utf-8") + "&qt=advanced";\n URL urlObj = new URL(url);\n URLConnection con = urlObj.openConnection();\n if (con != null) {\n Model model = ModelFactory.createDefaultModel();\n model.read(con.getInputStream(), null);\n }\n System.out.println(url);\n-   }\n+   }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public FileParse(String fileStr, String type) throws MalformedURLException, IOException {\n this.inFile = fileStr;\n this.type = type;\n System.out.println("File str " + fileStr);\n if (fileStr.indexOf("http://") == 0) {\n URL url = new URL(fileStr);\n urlconn = url.openConnection();\n inStream = urlconn.getInputStream();\n bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("File")) {\n File inFile = new File(fileStr);\n size = inFile.length();\n inStream = new FileInputStream(inFile);\n-   bufReader = new BufferedReader(new InputStreamReader(inStream));\n+   bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("URL")) {\n URL url = new URL(fileStr);\n urlconn = url.openConnection();\n inStream = urlconn.getInputStream();\n bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("URLZip")) {\n URL url = new URL(fileStr);\n inStream = new GZIPInputStream(url.openStream(), 16384);\n InputStreamReader zis = new InputStreamReader(inStream);\n bufReader = new BufferedReader(zis, 16384);\n }\n else {\n System.out.println("Unknown FileParse inType " + type);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-195|SpecialSeperatorForDevSet|@Override protected Reader openConnection(URL url) throws IOException {\n try {\n if (limit != null) {\n limit.acquirePermit();\n }\n return super.openConnection(url);\n }\n catch (InterruptedException e) {\n-   throw new IOException(e);\n+   throw new IOException(e);\n }\n }\n|SpecialSeperatorForDevSet|private IProject createJavaProject() {\n IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject("DefaultFolderPropertiesTest");\n if (!proj.exists()) {\n try {\n proj.create(null);\n proj.open(null);\n IProjectDescription desc = proj.getDescription();\n desc.setNatureIds(new String[] {\n JavaCore.NATURE_ID }\n);\n proj.setDescription(desc, null);\n IJavaProject javaProject = JavaCore.create(proj);\n javaProject.open(null);\n IFolder srcFolder1 = proj.getFolder(new Path("src"));\n srcFolder1.create(true, true, null);\n IFolder srcFolder2 = proj.getFolder(new Path("custom_src"));\n srcFolder2.create(true, true, null);\n IClasspathEntry[] classpathEntries = new IClasspathEntry[] {\n JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() }\n;\n javaProject.setRawClasspath(classpathEntries, null);\n IFolder binFolder = proj.getFolder(new Path("bin"));\n if (!binFolder.exists()) {\n binFolder.create(true, true, null);\n }\n javaProject.setOutputLocation(binFolder.getFullPath(), null);\n IFolder testFolder = proj.getFolder(new Path("test"));\n testFolder.create(true, true, null);\n IFolder resultFolder = proj.getFolder(new Path("result"));\n resultFolder.create(true, true, null);\n }\n catch (CoreException e) {\n fail(e.getMessage());\n }\n }\n return proj;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-196|SpecialSeperatorForDevSet|public static void fileDownload(String fAddress, String destinationDir) {\n int slashIndex = fAddress.lastIndexOf('/');\n int periodIndex = fAddress.lastIndexOf('.');\n String fileName = fAddress.substring(slashIndex + 1);\n URL url;\n try {\n url = new URL(fAddress);\n URLConnection uc = url.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n File file = new File(destinationDir + "/download.pdf");\n FileOutputStream fos = new FileOutputStream(file);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));\n-   int inputLine;\n+   int inputLine;\n while ((inputLine = in.read()) != -1) out.write(inputLine);\n in.close();\n }\n catch (Exception ex) {\n Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File in, File out) throws Exception {\n+  public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-197|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n-   in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n+   in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|@Test public void test_blueprintTypeByTypeID() throws Exception {\n URL url = new URL(baseUrl + "/blueprintTypeByTypeID/20188");\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("GET");\n connection.setRequestProperty("Accept", "application/json");\n assertThat(connection.getResponseCode(), equalTo(200));\n assertThat(getResponse(connection), equalTo("{\n\"blueprintTypeID\":20188,\"blueprintTypeName\":\"Obelisk Blueprint\",\"productTypeID\":20187,\"productTypeName\":\"Obelisk\",\"productCategoryID\":6,\"techLevel\":1,\"productionTime\":1280000,\"researchProductivityTime\":7680000,\"researchMaterialTime\":5120000,\"researchCopyTime\":2560000,\"researchTechTime\":500000,\"productivityModifier\":256000,\"wasteFactor\":10,\"maxProductionLimit\":1,\"productVolume\":\"17550000\",\"productPortionSize\":1,\"dumpVersion\":\"cru16\"}\n"));\n assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json;\n charset=utf-8"));\n-   connection = (HttpURLConnection) url.openConnection();\n+   connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("GET");\n connection.setRequestProperty("Accept", "application/xml");\n assertThat(connection.getResponseCode(), equalTo(200));\n assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>"));\n assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml;\n charset=utf-8"));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-198|SpecialSeperatorForDevSet|public boolean crear() {\n int result = 0;\n String sql = "insert into jugador" + "(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)" + "values (?, ?, ?, ?, ?, ?, ?)";\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n populatePreparedStatement(elJugador);\n result = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n-   conexionBD.close(ps);\n+   conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (result > 0);\n }\n|SpecialSeperatorForDevSet|public void readUNI(Vector<String> descriptions, String source) {\n InputStream is = null;\n try {\n URL url = new URL(source);\n is = url.openStream();\n Scanner scanner = new Scanner(is);\n scanner.nextLine();\n String line = "";\n String id = "";\n String desc = "";\n while (scanner.hasNextLine()) {\n line = scanner.nextLine();\n Scanner linescanner = new Scanner(line);\n linescanner.useDelimiter("\t");\n id = linescanner.next();\n linescanner.next();\n desc = linescanner.next();\n-   linescanner.useDelimiter("\n");\n+   linescanner.useDelimiter("\n");\n linescanner.next();\n descriptions.add(id + " " + desc);\n }\n }\n catch (MalformedURLException e) {\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n if (is != null) try {\n is.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-199|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n-   }\n+   }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {\n pAndamento.delimitarIntervaloDeVariacao(0, 49);\n WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);\n pAndamento.delimitarIntervaloDeVariacao(50, 100);\n if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {\n String sql = "INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)";\n OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;\n try {\n int quantidadeDeRegistrosImportados = 0;\n int numeroDoRegistro = 0;\n for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {\n ++numeroDoRegistro;\n stmtDestino.clearParameters();\n int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();\n Calendar calendario = Calendar.getInstance();\n calendario.clear();\n calendario.set(ano, mes, dia);\n java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());\n BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();\n stmtDestino.setDateAtName("DATA", vDATA);\n stmtDestino.setBigDecimalAtName("PRECO", vPRECO);\n int contagemDasInsercoes = stmtDestino.executeUpdate();\n quantidadeDeRegistrosImportados++;\n double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;\n pAndamento.setPercentualCompleto((int) percentualCompleto);\n }\n conDestino.commit();\n }\n-   catch (Exception ex) {\n+   catch (Exception ex) {\n conDestino.rollback();\n throw ex;\n }\n finally {\n if (stmtDestino != null && (!stmtDestino.isClosed())) {\n stmtDestino.close();\n }\n }\n }\n pAndamento.setPercentualCompleto(100);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-200|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|@Test public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {\n URL url = new URL(baseUrl + "/lookupType/cluster");\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("GET");\n connection.setRequestProperty("Accept", "application/json");\n assertThat(connection.getResponseCode(), equalTo(200));\n assertThat(getResponse(connection), equalTo("[{\n\"itemTypeID\":29055,\"itemCategoryID\":17,\"name\":\"Capital Gravimetric Sensor Cluster\",\"icon\":\"37_05\"}\n,{\n\"itemTypeID\":29056,\"itemCategoryID\":9,\"name\":\"Capital Gravimetric Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":29065,\"itemCategoryID\":17,\"name\":\"Capital Ladar Sensor Cluster\",\"icon\":\"37_07\"}\n,{\n\"itemTypeID\":29066,\"itemCategoryID\":9,\"name\":\"Capital Ladar Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":29069,\"itemCategoryID\":17,\"name\":\"Capital Magnetometric Sensor Cluster\",\"icon\":\"37_06\"}\n,{\n\"itemTypeID\":29070,\"itemCategoryID\":9,\"name\":\"Capital Magnetometric Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":29095,\"itemCategoryID\":17,\"name\":\"Capital Radar Sensor Cluster\",\"icon\":\"37_08\"}\n,{\n\"itemTypeID\":29096,\"itemCategoryID\":9,\"name\":\"Capital Radar Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":21013,\"itemCategoryID\":17,\"name\":\"Capital Sensor Cluster\",\"icon\":\"54_03\"}\n,{\n\"itemTypeID\":21014,\"itemCategoryID\":9,\"name\":\"Capital Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":32241,\"itemCategoryID\":17,\"name\":\"Drive Cluster EDF-285\",\"icon\":\"24_11\"}\n,{\n\"itemTypeID\":5279,\"itemCategoryID\":7,\"name\":\"F-23 Reciprocal Sensor Cluster Link\",\"icon\":\"03_09\",\"metaLevel\":4}\n,{\n\"itemTypeID\":11534,\"itemCategoryID\":17,\"name\":\"Gravimetric Sensor Cluster\",\"icon\":\"37_05\"}\n,{\n\"itemTypeID\":17340,\"itemCategoryID\":9,\"name\":\"Gravimetric Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":11536,\"itemCategoryID\":17,\"name\":\"Ladar Sensor Cluster\",\"icon\":\"37_07\"}\n,{\n\"itemTypeID\":17333,\"itemCategoryID\":9,\"name\":\"Ladar Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":11535,\"itemCategoryID\":17,\"name\":\"Magnetometric Sensor Cluster\",\"icon\":\"37_06\"}\n,{\n\"itemTypeID\":17345,\"itemCategoryID\":9,\"name\":\"Magnetometric Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":6218,\"itemCategoryID\":7,\"name\":\"Protected Gravimetric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":1}\n-  ,{\n+  ,{\n\"itemTypeID\":6222,\"itemCategoryID\":7,\"name\":\"Protected LADAR Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":1}\n,{\n\"itemTypeID\":6226,\"itemCategoryID\":7,\"name\":\"Protected Magnetometric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":1}\n,{\n\"itemTypeID\":6230,\"itemCategoryID\":7,\"name\":\"Protected Multi-Frequency Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":1}\n,{\n\"itemTypeID\":6234,\"itemCategoryID\":7,\"name\":\"Protected RADAR Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":1}\n,{\n\"itemTypeID\":7895,\"itemCategoryID\":7,\"name\":\"Prototype ECCM I Gravimetric Sensor Cluster\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":7893,\"itemCategoryID\":7,\"name\":\"Prototype ECCM I Ladar Sensor Cluster\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":7914,\"itemCategoryID\":7,\"name\":\"Prototype ECCM I Magnetometric Sensor Cluster\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":7896,\"itemCategoryID\":7,\"name\":\"Prototype ECCM I Omni Sensor Cluster\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":7892,\"itemCategoryID\":7,\"name\":\"Prototype ECCM I Radar Sensor Cluster\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":11537,\"itemCategoryID\":17,\"name\":\"Radar Sensor Cluster\",\"icon\":\"37_08\"}\n,{\n\"itemTypeID\":17336,\"itemCategoryID\":9,\"name\":\"Radar Sensor Cluster Blueprint\",\"icon\":\"03_02\"}\n,{\n\"itemTypeID\":6242,\"itemCategoryID\":7,\"name\":\"Sealed Gravimetric Backup Cluster\",\"icon\":\"04_10\",\"metaLevel\":0}\n,{\n\"itemTypeID\":6241,\"itemCategoryID\":7,\"name\":\"Sealed LADAR Backup Cluster\",\"icon\":\"04_10\",\"metaLevel\":0}\n,{\n\"itemTypeID\":6238,\"itemCategoryID\":7,\"name\":\"Sealed Magnetometric Backup Cluster\",\"icon\":\"04_10\",\"metaLevel\":0}\n,{\n\"itemTypeID\":6239,\"itemCategoryID\":7,\"name\":\"Sealed Multi-Frequency Backup Cluster\",\"icon\":\"04_10\",\"metaLevel\":0}\n,{\n\"itemTypeID\":6225,\"itemCategoryID\":7,\"name\":\"Sealed RADAR Backup Cluster\",\"icon\":\"04_10\",\"metaLevel\":0}\n,{\n\"itemTypeID\":20238,\"itemCategoryID\":7,\"name\":\"Secure Gravimetric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":2}\n,{\n\"itemTypeID\":20244,\"itemCategoryID\":7,\"name\":\"Secure Ladar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":2}\n,{\n\"itemTypeID\":20250,\"itemCategoryID\":7,\"name\":\"Secure Magnetometric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":2}\n,{\n\"itemTypeID\":20260,\"itemCategoryID\":7,\"name\":\"Secure Radar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":2}\n,{\n\"itemTypeID\":20240,\"itemCategoryID\":7,\"name\":\"Shielded Gravimetric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":3}\n,{\n\"itemTypeID\":20246,\"itemCategoryID\":7,\"name\":\"Shielded Ladar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":3}\n,{\n\"itemTypeID\":20252,\"itemCategoryID\":7,\"name\":\"Shielded Magnetometric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":3}\n,{\n\"itemTypeID\":20262,\"itemCategoryID\":7,\"name\":\"Shielded Radar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":3}\n,{\n\"itemTypeID\":21722,\"itemCategoryID\":17,\"name\":\"Sleeper Nanite Cluster\",\"icon\":\"55_15\"}\n,{\n\"itemTypeID\":20242,\"itemCategoryID\":7,\"name\":\"Warded Gravimetric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":20248,\"itemCategoryID\":7,\"name\":\"Warded Ladar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":20254,\"itemCategoryID\":7,\"name\":\"Warded Magnetometric Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":4}\n,{\n\"itemTypeID\":20264,\"itemCategoryID\":7,\"name\":\"Warded Radar Backup Cluster I\",\"icon\":\"04_10\",\"metaLevel\":4}\n]"));\n assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json;\n charset=utf-8"));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-201|SpecialSeperatorForDevSet|public static void loginBitShare() throws Exception {\n HttpParams params = new BasicHttpParams();\n params.setParameter("http.useragent", "Mozilla/5.0 (Windows;\n U;\n-   Windows NT 6.1;\n+   Windows NT 6.1;\n en-GB;\n rv:1.9.2) Gecko/20100115 Firefox/3.6");\n DefaultHttpClient httpclient = new DefaultHttpClient(params);\n System.out.println("Trying to log in to bitshare.com");\n HttpPost httppost = new HttpPost("http://bitshare.com/login.html");\n List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n formparams.add(new BasicNameValuePair("user", "007007dinesh"));\n formparams.add(new BasicNameValuePair("password", ""));\n formparams.add(new BasicNameValuePair("submit", "Login"));\n UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");\n httppost.setEntity(entity);\n HttpResponse httpresponse = httpclient.execute(httppost);\n Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();\n Cookie escookie = null;\n while (it.hasNext()) {\n escookie = it.next();\n System.out.println(escookie.getName() + " = " + escookie.getValue());\n }\n System.out.println(EntityUtils.toString(httpresponse.getEntity()));\n }\n|SpecialSeperatorForDevSet|public void removeRealm(final List<Integer> realmIds) {\n try {\n connection.setAutoCommit(false);\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("realm.remove"));\n Iterator<Integer> iter = realmIds.iterator();\n int realmId;\n while (iter.hasNext()) {\n realmId = iter.next();\n psImpl.setInt(1, realmId);\n psImpl.executeUpdate();\n cmDB.removeRealm(realmId);\n }\n }\n }\n);\n connection.commit();\n }\n catch (SQLException sqle) {\n log.error(sqle);\n if (connection != null) {\n-   try {\n+   try {\n connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n }\n finally {\n if (connection != null) {\n try {\n connection.setAutoCommit(true);\n }\n catch (SQLException ex) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-202|SpecialSeperatorForDevSet|private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {\n try {\n StringBuilder dataSB = new StringBuilder();\n dataSB.append(URLEncoder.encode("secret", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode("badsecurity", "UTF-8"));\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("version", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, "UTF-8"));\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("os", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(System.getProperty("os.name") + " " + System.getProperty("os.version"), "UTF-8"));\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("user", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(System.getProperty("user.name"), "UTF-8"));\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("msg", "UTF-8"));\n dataSB.append('=');\n-   dataSB.append(URLEncoder.encode(ex.getMessage(), "UTF-8"));\n+   dataSB.append(URLEncoder.encode(ex.getMessage(), "UTF-8"));\n ByteArrayOutputStream trace = new ByteArrayOutputStream();\n ex.printStackTrace(new PrintStream(trace));\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("trace", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(trace.toString(), "UTF-8"));\n if (config != null) {\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("config", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(config, "UTF-8"));\n }\n if (prob != null) {\n dataSB.append('&');\n dataSB.append(URLEncoder.encode("problem", "UTF-8"));\n dataSB.append('=');\n dataSB.append(URLEncoder.encode(prob, "UTF-8"));\n }\n URL url = new URL(errorServerURL);\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(dataSB.toString());\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String response = null;\n String line = null;\n while ((line = rd.readLine()) != null) {\n if (response == null) response = line;\n else System.out.println(line);\n }\n wr.close();\n rd.close();\n if (response.equals("success")) System.out.println("Exception sent to maRla development team");\n else System.out.println("Unable to send exception to development team: " + response);\n }\n catch (IOException ex2) {\n System.out.println("Unable to send exception to development team: " + ex2.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {\n getSession();\n final List<NameValuePair> params = new ArrayList<NameValuePair>();\n params.add(new BasicNameValuePair("query", "Queue='" + queueName + "' AND Status='open'"));\n params.add(new BasicNameValuePair("format", "i"));\n params.add(new BasicNameValuePair("orderby", "-id"));\n final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8"));\n final List<RTTicket> tickets = new ArrayList<RTTicket>();\n final List<Long> ticketIds = new ArrayList<Long>();\n try {\n final HttpResponse response = getClient().execute(get);\n int responseCode = response.getStatusLine().getStatusCode();\n if (responseCode != HttpStatus.SC_OK) {\n throw new RequestTrackerException("Received a non-200 response code from the server: " + responseCode);\n }\n else {\n InputStreamReader isr = null;\n BufferedReader br = null;\n try {\n if (response.getEntity() == null) return null;\n isr = new InputStreamReader(response.getEntity().getContent());\n br = new BufferedReader(isr);\n String line = null;\n do {\n line = br.readLine();\n if (line != null) {\n-   if (line.contains("does not exist.")) {\n+   if (line.contains("does not exist.")) {\n return null;\n }\n if (line.startsWith("ticket/")) {\n ticketIds.add(Long.parseLong(line.replace("ticket/", "")));\n }\n }\n }\n while (line != null);\n }\n catch (final Exception e) {\n throw new RequestTrackerException("Unable to read ticket IDs from query.", e);\n }\n finally {\n IOUtils.closeQuietly(br);\n IOUtils.closeQuietly(isr);\n }\n }\n }\n catch (final Exception e) {\n LogUtils.errorf(this, e, "An exception occurred while getting tickets for queue " + queueName);\n return null;\n }\n for (final Long id : ticketIds) {\n try {\n tickets.add(getTicket(id, false));\n }\n catch (final RequestTrackerException e) {\n LogUtils.warnf(this, e, "Unable to retrieve ticket.");\n }\n }\n return tickets;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-203|SpecialSeperatorForDevSet|public static String getURLContent(String urlPath, String requestData, String charset) {\n BufferedReader reader = null;\n HttpURLConnection conn = null;\n-   StringBuffer buffer = new StringBuffer();\n+   StringBuffer buffer = new StringBuffer();\n OutputStreamWriter out = null;\n try {\n URL url = new URL(urlPath);\n conn = (HttpURLConnection) url.openConnection();\n conn.setRequestMethod("POST");\n conn.setDoOutput(true);\n conn.setUseCaches(false);\n conn.setDefaultUseCaches(false);\n conn.setConnectTimeout(10000);\n conn.setReadTimeout(60000);\n out = new OutputStreamWriter(conn.getOutputStream(), charset);\n out.write(requestData);\n out.flush();\n int repCode = conn.getResponseCode();\n if (repCode == 200) {\n int count = 0;\n char[] chBuffer = new char[1024];\n BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));\n while ((count = input.read(chBuffer)) != -1) {\n buffer.append(chBuffer, 0, count);\n }\n }\n }\n catch (Exception ex) {\n logger.error("", ex);\n }\n finally {\n try {\n if (out != null) {\n out.close();\n }\n if (reader != null) {\n reader.close();\n }\n if (conn != null) {\n conn.disconnect();\n }\n }\n catch (Exception ex) {\n }\n }\n return buffer.toString();\n }\n|SpecialSeperatorForDevSet|@Override public void respondGet(HttpServletResponse resp) throws IOException {\n-   setHeaders(resp);\n+   setHeaders(resp);\n final OutputStream os;\n if (willDeflate()) {\n resp.setHeader("Content-Encoding", "gzip");\n os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);\n }\n else os = resp.getOutputStream();\n transferStreams(url.openStream(), os);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-204|SpecialSeperatorForDevSet|public String readPage(boolean ignoreComments) throws Exception {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n String html = "";\n if (ignoreComments) {\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.length() > 0) {\n if (inputLine.substring(0, 1).compareTo("#") != 0) {\n html = html + inputLine + "\n";\n-   }\n+   }\n }\n }\n }\n else {\n while ((inputLine = in.readLine()) != null) {\n html = html + inputLine + "\n";\n }\n }\n in.close();\n return html;\n }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n-   return true;\n+   return true;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-205|SpecialSeperatorForDevSet|@Override public String getMessageDigest() throws SarasvatiLoadException {\n if (messageDigest == null) {\n Collections.sort(nodes);\n Collections.sort(externals);\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA1");\n digest.update(name.getBytes());\n for (XmlNode node : nodes) {\n node.addToDigest(digest);\n }\n for (XmlExternal external : externals) {\n-   external.addToDigest(digest);\n+   external.addToDigest(digest);\n }\n messageDigest = SvUtil.getHexString(digest.digest());\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new SarasvatiException("Unable to load SHA1 algorithm", nsae);\n }\n }\n return messageDigest;\n }\n|SpecialSeperatorForDevSet|private VelocityEngine newVelocityEngine() {\n VelocityEngine velocityEngine = null;\n InputStream is = null;\n try {\n URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);\n is = url.openStream();\n Properties props = new Properties();\n props.load(is);\n velocityEngine = new VelocityEngine(props);\n velocityEngine.init();\n-   }\n+   }\n catch (Exception e) {\n throw new RuntimeException("can not find velocity props file, file=" + VELOCITY_PROPS_FILE, e);\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n }\n return velocityEngine;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-206|SpecialSeperatorForDevSet|-  private void download(String address, String localFileName) throws UrlNotFoundException, Exception {\n+  private void download(String address, String localFileName) throws UrlNotFoundException, Exception {\n String ext = G_File.getExtensao(address);\n if (ext.equals("jsp")) {\n throw new Exception("Erro ao baixar pagina JSP, tipo negado." + address);\n }\n File temp = new File(localFileName + ".tmp");\n if (temp.exists()) temp.delete();\n OutputStream out = null;\n URLConnection conn = null;\n InputStream in = null;\n try {\n try {\n URL url = new URL(address);\n conn = url.openConnection();\n in = conn.getInputStream();\n }\n catch (FileNotFoundException e2) {\n throw new UrlNotFoundException();\n }\n out = new BufferedOutputStream(new FileOutputStream(temp));\n byte[] buffer = new byte[1024];\n int numRead;\n long numWritten = 0;\n while ((numRead = in.read(buffer)) != -1) {\n out.write(buffer, 0, numRead);\n numWritten += numRead;\n }\n }\n catch (UrlNotFoundException exception) {\n throw exception;\n }\n catch (Exception exception) {\n throw exception;\n }\n finally {\n try {\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n catch (IOException ioe) {\n }\n }\n File oldArq = new File(localFileName);\n if (oldArq.exists()) {\n oldArq.delete();\n }\n oldArq = null;\n File nomeFinal = new File(localFileName);\n temp.renameTo(nomeFinal);\n }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-   String path = request.getPathInfo();\n+   String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-207|SpecialSeperatorForDevSet|public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {\n String fullname = System.mapLibraryName(name);\n String path = "native/" + sysName + "/" + fullname;\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n if (url == null) {\n if (!warning) {\n logger.log(Level.WARNING, "Cannot locate native library: {\n0}\n/{\n1}\n", new String[] {\n sysName, fullname }\n);\n }\n return;\n }\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n File targetFile = new File(getExtractionDir(), fullname);\n OutputStream out = null;\n try {\n if (targetFile.exists()) {\n long targetLastModified = targetFile.lastModified();\n long sourceLastModified = conn.getLastModified();\n if (targetLastModified + 1000 > sourceLastModified) {\n logger.log(Level.FINE, "Not copying library {\n0}\n. Latest already extracted.", fullname);\n return;\n }\n }\n out = new FileOutputStream(targetFile);\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n in = null;\n out.close();\n out = null;\n targetFile.setLastModified(conn.getLastModified());\n }\n catch (FileNotFoundException ex) {\n if (ex.getMessage().contains("used by another process")) {\n return;\n }\n throw ex;\n }\n finally {\n if (load) {\n System.load(targetFile.getAbsolutePath());\n }\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n logger.log(Level.FINE, "Copied {\n0}\n to {\n1}\n", new Object[] {\n-   fullname, targetFile }\n+   fullname, targetFile }\n);\n }\n|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n-   if (null != deletes) {\n+   if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-208|SpecialSeperatorForDevSet|public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {\n String fullname = System.mapLibraryName(name);\n String path = "native/" + sysName + "/" + fullname;\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n if (url == null) {\n if (!warning) {\n logger.log(Level.WARNING, "Cannot locate native library: {\n0}\n/{\n1}\n", new String[] {\n sysName, fullname }\n);\n }\n return;\n }\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n File targetFile = new File(getExtractionDir(), fullname);\n OutputStream out = null;\n try {\n if (targetFile.exists()) {\n long targetLastModified = targetFile.lastModified();\n long sourceLastModified = conn.getLastModified();\n if (targetLastModified + 1000 > sourceLastModified) {\n logger.log(Level.FINE, "Not copying library {\n0}\n. Latest already extracted.", fullname);\n-   return;\n+   return;\n }\n }\n out = new FileOutputStream(targetFile);\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n in = null;\n out.close();\n out = null;\n targetFile.setLastModified(conn.getLastModified());\n }\n catch (FileNotFoundException ex) {\n if (ex.getMessage().contains("used by another process")) {\n return;\n }\n throw ex;\n }\n finally {\n if (load) {\n System.load(targetFile.getAbsolutePath());\n }\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n logger.log(Level.FINE, "Copied {\n0}\n to {\n1}\n", new Object[] {\n fullname, targetFile }\n);\n }\n|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n-   System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n+   System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-209|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n-   return file.getAbsolutePath();\n+   return file.getAbsolutePath();\n }\n else {\n return url.toString();\n }\n }\n catch (Throwable t) {\n }\n return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|public static Vector[] getLinksFromURLFast(String p_url) throws Exception {\n timeCheck("getLinksFromURLFast ");\n URL x_url = new URL(p_url);\n URLConnection x_conn = x_url.openConnection();\n InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());\n BufferedReader x_reader = new BufferedReader(x_is_reader);\n String x_line = null;\n RE e = new RE("(.*/)", RE.REG_ICASE);\n-   System.out.println("RE: " + e.toString());\n+   System.out.println("RE: " + e.toString());\n REMatch x_match = e.getMatch(p_url);\n String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));\n e = new RE("(http://.*?)/?", RE.REG_ICASE);\n x_match = e.getMatch(p_url);\n String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));\n e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE);\n System.out.println("RE: " + e.toString());\n Vector x_links = new Vector(100);\n Vector x_texts = new Vector(100);\n StringBuffer x_buf = new StringBuffer(10000);\n REMatch[] x_matches = null;\n timeCheck("starting parsing ");\n while ((x_line = x_reader.readLine()) != null) {\n x_buf.append(x_line);\n }\n String x_page = x_buf.toString();\n String x_link = null;\n x_matches = e.getAllMatches(x_page);\n for (int i = 0;\n i < x_matches.length;\n i++) {\n x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));\n if (x_link.indexOf("mailto:") != -1) continue;\n x_link = toAbsolute(x_root, x_dir, x_link);\n x_links.addElement(x_link);\n x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));\n }\n Vector[] x_result = new Vector[2];\n x_result[0] = x_links;\n x_result[1] = x_texts;\n timeCheck("end parsing ");\n return x_result;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-210|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n-   while ((read = in.read(buffer)) >= 0) {\n+   while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n-   int read = -1;\n+   int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-210|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n-   FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n+   FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-211|SpecialSeperatorForDevSet|private void readIntoList(URL url, Map<String, JMenuItem> list) {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n int commandNameBegin = inputLine.indexOf(">") + 1;\n int commandNameEnd = inputLine.indexOf("</a>");\n JMenuItem item = new JMenuItem("<html>" + inputLine + "</html>");\n if (list == allRooms) {\n item.setActionCommand("/room " + inputLine.substring(commandNameBegin, commandNameEnd));\n }\n else {\n item.setActionCommand("/" + inputLine.substring(commandNameBegin, commandNameEnd) + " ");\n }\n item.addActionListener(new ActionListener() {\n-   public void actionPerformed(ActionEvent e) {\n+   public void actionPerformed(ActionEvent e) {\n jTextField1.setText(e.getActionCommand());\n popup.setVisible(false);\n }\n }\n);\n list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);\n }\n in.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public String insertSmsInf(Sms sms) throws Exception {\n String smsId = null;\n Connection conn = null;\n PreparedStatement pstmt = null;\n StringBuffer buffer = new StringBuffer();\n try {\n buffer.append("INSERT INTO COMTNSMS\n");\n buffer.append(" (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n");\n buffer.append(" FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n");\n buffer.append("VALUES\n");\n buffer.append("(?, ?, ?, ?, SYSDATE())");\n conn = SmsBasicDBUtil.getConnection();\n conn.setAutoCommit(false);\n smsId = getNextId(conn);\n pstmt = conn.prepareStatement(buffer.toString());\n int index = 0;\n pstmt.setString(++index, smsId);\n pstmt.setString(++index, sms.getTrnsmitTelno());\n pstmt.setString(++index, sms.getTrnsmitCn());\n pstmt.setString(++index, sms.getFrstRegisterId());\n pstmt.executeUpdate();\n conn.commit();\n return smsId;\n }\n catch (Exception ex) {\n if (conn != null) {\n conn.rollback();\n }\n throw ex;\n }\n finally {\n SmsBasicDBUtil.close(null, pstmt, conn);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-212|SpecialSeperatorForDevSet|public APIResponse create(Application application) throws Exception {\n APIResponse response = new APIResponse();\n connection = (HttpURLConnection) new URL(url + "/api/application/create").openConnection();\n connection.setDoOutput(true);\n connection.setRequestMethod("POST");\n connection.setRequestProperty("Content-Type", "application/json;\n charset=utf-8");\n connection.setUseCaches(false);\n connection.setConnectTimeout(TIMEOUT);\n connection.connect();\n marshaller.marshal(application, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), "utf-8")));\n connection.getOutputStream().flush();\n connection.getOutputStream().close();\n if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8")).readLine()));\n response.setDone(true);\n-   response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));\n+   response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));\n connection.getInputStream().close();\n }\n else {\n response.setDone(false);\n response.setMessage("Create Application Error Code: Http (" + connection.getResponseCode() + ")");\n }\n connection.disconnect();\n return response;\n }\n|SpecialSeperatorForDevSet|-  private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[64];\n md.update(input.getBytes("iso-8859-1"), 0, input.length());\n md5hash = md.digest();\n return this.convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-213|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n-   }\n+   }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|public void init() {\n super.init();\n Runnable doActions = new Runnable() {\n public void run() {\n if (_plot == null) {\n _plot = newPlot();\n }\n getContentPane().add(plot(), BorderLayout.NORTH);\n int width;\n int height;\n String widthspec = getParameter("width");\n if (widthspec != null) {\n width = Integer.parseInt(widthspec);\n }\n else {\n width = 400;\n }\n String heightspec = getParameter("height");\n if (heightspec != null) {\n height = Integer.parseInt(heightspec);\n }\n else {\n height = 400;\n }\n _setPlotSize(width, height);\n plot().setButtons(true);\n Color background = Color.white;\n String colorspec = getParameter("background");\n if (colorspec != null) {\n background = PlotBox.getColorByName(colorspec);\n }\n setBackground(background);\n plot().setBackground(background);\n getContentPane().setBackground(background);\n Color foreground = Color.black;\n colorspec = getParameter("foreground");\n if (colorspec != null) {\n foreground = PlotBox.getColorByName(colorspec);\n }\n setForeground(foreground);\n plot().setForeground(foreground);\n plot().setVisible(true);\n String dataurlspec = getParameter("dataurl");\n if (dataurlspec != null) {\n try {\n showStatus("Reading data");\n URL dataurl = new URL(getDocumentBase(), dataurlspec);\n InputStream in = dataurl.openStream();\n _read(in);\n showStatus("Done");\n }\n catch (MalformedURLException e) {\n System.err.println(e.toString());\n }\n catch (FileNotFoundException e) {\n System.err.println("PlotApplet: file not found: " + e);\n }\n catch (IOException e) {\n-   System.err.println("PlotApplet: error reading input file: " + e);\n+   System.err.println("PlotApplet: error reading input file: " + e);\n }\n }\n }\n }\n;\n try {\n SwingUtilities.invokeAndWait(doActions);\n }\n catch (Exception ex) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-214|SpecialSeperatorForDevSet|public String shorten(String url) {\n-   List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n+   List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n qparams.add(new BasicNameValuePair("version", "2.0.1"));\n qparams.add(new BasicNameValuePair("longUrl", url));\n if (login != null) {\n qparams.add(new BasicNameValuePair("login", login));\n qparams.add(new BasicNameValuePair("apiKey", apiKey));\n qparams.add(new BasicNameValuePair("history", "1"));\n }\n try {\n BasicHttpParams params = new BasicHttpParams();\n DefaultHttpClient httpclient = new DefaultHttpClient(params);\n URI uri = URIUtils.createURI("http", "api.j.mp", -1, "/shorten", URLEncodedUtils.format(qparams, "UTF-8"), null);\n HttpGet httpget = new HttpGet(uri);\n if (logger.isDebugEnabled()) logger.debug("HttpGet.uri={\n}\n", httpget.getURI());\n HttpResponse response = httpclient.execute(httpget);\n HttpEntity entity = response.getEntity();\n if (entity != null) {\n InputStream instream = entity.getContent();\n JsonFactory f = new JsonFactory();\n JsonParser jp = f.createJsonParser(instream);\n JmpShortenResponse responseObj = new JmpShortenResponse();\n for (;\n ;\n ) {\n JsonToken token = jp.nextToken();\n String fieldname = jp.getCurrentName();\n if (logger.isDebugEnabled()) logger.debug("Token={\n}\n, currentName={\n}\n", token, fieldname);\n if (token == JsonToken.START_OBJECT) {\n continue;\n }\n if (token == JsonToken.END_OBJECT) {\n break;\n }\n if ("errorCode".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setErrorCode(jp.getIntValue());\n }\n else if ("errorMessage".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setErrorMessage(jp.getText());\n }\n else if ("statusCode".equals(fieldname)) {\n token = jp.nextToken();\n responseObj.setStatusCode(jp.getText());\n }\n else if ("results".equals(fieldname)) {\n Map<String, ShortenedUrl> results = parseResults(jp);\n responseObj.setResults(results);\n }\n else {\n throw new IllegalStateException("Unrecognized field '" + fieldname + "'!");\n }\n }\n Map<String, ShortenedUrl> results = responseObj.getResults();\n if (results == null) {\n return null;\n }\n ShortenedUrl shortened = results.get(url);\n if (shortened == null) {\n return null;\n }\n if (logger.isDebugEnabled()) logger.debug("JmpShortenResponse: {\n}\n", responseObj);\n if ("OK".equals(responseObj.getStatusCode())) {\n return shortened.getShortUrl();\n }\n if (logger.isWarnEnabled()) logger.warn("JmpShortenResponse: {\n}\n", responseObj);\n }\n }\n catch (IOException ex) {\n if (logger.isWarnEnabled()) logger.warn("Exception!", ex);\n }\n catch (URISyntaxException ex) {\n if (logger.isWarnEnabled()) logger.warn("Exception!", ex);\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String target = null;\n boolean allowedToAccess = false;\n try {\n URL requestUrl = new URL("http:/" + request.getPathInfo());\n for (Enumeration en = allowedUrls.elements();\n en.hasMoreElements();\n ) {\n URL nextUrl = (URL) en.nextElement();\n if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n allowedToAccess = true;\n }\n }\n }\n catch (MalformedURLException ex) {\n System.err.println("Error in url: " + "http:/" + request.getPathInfo());\n return;\n }\n if (!allowedToAccess) {\n response.setStatus(407);\n return;\n }\n if (request.getPathInfo() != null && !request.getPathInfo().equals("")) {\n target = "http:/" + request.getPathInfo() + "?" + request.getQueryString();\n }\n else {\n response.setStatus(404);\n return;\n }\n InputStream is = null;\n ServletOutputStream out = null;\n try {\n URL url = new URL(target);\n-   URLConnection uc = url.openConnection();\n+   URLConnection uc = url.openConnection();\n response.setContentType(uc.getContentType());\n is = uc.getInputStream();\n out = response.getOutputStream();\n byte[] buf = new byte[4096];\n int bytesRead;\n while ((bytesRead = is.read(buf)) != -1) {\n out.write(buf, 0, bytesRead);\n }\n }\n catch (MalformedURLException e) {\n response.setStatus(404);\n }\n catch (IOException e) {\n response.setStatus(404);\n }\n finally {\n if (is != null) {\n is.close();\n }\n if (out != null) {\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-215|SpecialSeperatorForDevSet|public static PersistencyParameters parse(String unitName) {\n URL[] persistenceUnits;\n try {\n persistenceUnits = Classpath.search("META-INF/", "persistence.xml");\n }\n catch (IOException e) {\n throw new Error(e);\n }\n Set classes = new HashSet();\n for (int i = 0;\n i < persistenceUnits.length;\n i++) {\n URL url = persistenceUnits[i];\n try {\n nu.xom.Builder b = new nu.xom.Builder(false);\n Document d = b.build(url.openStream());\n Nodes unitNodes = d.getRootElement().query("//p:persistence-unit", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int j = 0;\n j < unitNodes.size();\n j++) {\n Node unitNode = unitNodes.get(j);\n Element unitElt = ((Element) unitNode);\n String uName = unitElt.getAttributeValue("name");\n if (!uName.equals(unitName)) continue;\n {\n PersistencyParameters parameters = new PersistencyParameters();\n Nodes classNodes = unitElt.query("//p:property", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int k = 0;\n k < classNodes.size();\n k++) {\n Node classNode = classNodes.get(k);\n if (!(classNode instanceof Element)) continue;\n Element classElt = (Element) classNode;\n String elementName = classElt.getAttribute("name").getValue();\n if (elementName.equals("eclipselink.jdbc.url")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setJdbcUrl(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.user")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBUserName(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.password")) {\n String elementValue = classElt.getAttribute("value").getValue();\n-   parameters.setDBPassword(elementValue);\n+   parameters.setDBPassword(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.driver")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBDriverClassName(elementValue);\n }\n }\n return parameters;\n }\n }\n }\n catch (Exception x) {\n x.printStackTrace();\n throw new Error(x);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n StringBuffer sb = new StringBuffer();\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA-512");\n }\n catch (NoSuchAlgorithmException e) {\n-   throw new Exception(e.getMessage());\n+   throw new Exception(e.getMessage());\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new Exception(e.getMessage());\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-216|SpecialSeperatorForDevSet|private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {\n HttpClient client = new DefaultHttpClient();\n HttpGet httpGet = new HttpGet(downloadUrl);\n final File outputFile = new File(destinationFile);\n createParentDirectories(outputFile);\n FileOutputStream outputStream;\n outputStream = new FileOutputStream(outputFile);\n final HttpResponse response = client.execute(httpGet);\n if (isInterrupted()) {\n outputStream.close();\n return;\n }\n final HttpEntity entity = response.getEntity();\n InputStream inputStream = null;\n try {\n if (entity != null) {\n inputStream = entity.getContent();\n CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {\n-   @Override public long getSkipBetweenUpdates() {\n+   @Override public long getSkipBetweenUpdates() {\n return entity.getContentLength() * 2 / PERCENTAGE_BASE;\n }\n @Override public void onUpdate(final long copiedLength) {\n int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());\n handleUpdate(STATUS_DOWNLOADING, percentage);\n }\n }\n;\n copyStreams(inputStream, outputStream, callback);\n }\n }\n finally {\n try {\n outputStream.close();\n if (inputStream != null) {\n inputStream.close();\n }\n }\n catch (IOException e) {\n Log.v(DictionaryForMIDs.LOG_TAG, "Exception while closing stream: " + e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public void testImageInfo() throws MalformedURLException, IOException {\n System.out.println("ImageInfo:");\n long start = Calendar.getInstance().getTimeInMillis();\n for (int i = 0;\n i < images.length;\n i++) {\n String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];\n InputStream istream = (new URL(url)).openStream();\n ImageInfo ii = new ImageInfo();\n-   ii.setInput(istream);\n+   ii.setInput(istream);\n assertTrue("Not a supported image file format.", ii.check());\n int width = ii.getWidth();\n int height = ii.getHeight();\n System.out.println(width + "x" + height);\n }\n long stop = Calendar.getInstance().getTimeInMillis();\n System.out.println("zeit: " + (stop - start));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-217|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n final MessageDigest md = MessageDigest.getInstance("SHA");\n-   md.update(pass.getBytes("UTF-8"));\n+   md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n-   if (outChannel != null) outChannel.close();\n+   if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-218|SpecialSeperatorForDevSet|public String readRemoteFile() throws IOException {\n String response = "";\n boolean eof = false;\n URL url = new URL(StaticData.remoteFile);\n InputStream is = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String s;\n s = br.readLine();\n-   response = s;\n+   response = s;\n while (!eof) {\n try {\n s = br.readLine();\n if (s == null) {\n eof = true;\n br.close();\n }\n else response += s;\n }\n catch (EOFException eo) {\n eof = true;\n }\n catch (IOException e) {\n System.out.println("IO Error : " + e.getMessage());\n }\n }\n return response;\n }\n|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n-   try {\n+   try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-219|SpecialSeperatorForDevSet|public static String uncompress(String readPath, boolean mkdir) throws Exception {\n ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\n BufferedInputStream bis = new BufferedInputStream(arcInputStream);\n File baseDir = new File(readPath).getParentFile();\n String basePath = baseDir.getPath() + "/";\n if (mkdir) {\n String[] schema = readPath.split("/");\n String baseName = schema[schema.length - 1].replaceAll(".zip", "");\n FileUtils.forceMkdir(new File(basePath + baseName));\n basePath = basePath + baseName + "/";\n }\n ArchiveEntry entry;\n while ((entry = arcInputStream.getNextEntry()) != null) {\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(basePath + entry.getName()));\n }\n else {\n String writePath = basePath + entry.getName();\n String dirName = FilenameUtils.getPath(writePath);\n FileUtils.forceMkdir(new File(dirName));\n BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\n int i = 0;\n while ((i = bis.read()) != -1) {\n bos.write(i);\n }\n IOUtils.closeQuietly(bos);\n }\n-   }\n+   }\n IOUtils.closeQuietly(bis);\n return basePath;\n }\n|SpecialSeperatorForDevSet|protected int deleteBitstreamInfo(int id, Connection conn) {\n PreparedStatement stmt = null;\n int numDeleted = 0;\n try {\n stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n stmt.setInt(1, id);\n numDeleted = stmt.executeUpdate();\n if (numDeleted > 1) {\n conn.rollback();\n throw new IllegalStateException("Too many rows deleted! Number of rows deleted: " + numDeleted + " only one row should be deleted for bitstream id " + id);\n }\n }\n catch (SQLException e) {\n LOG.error("Problem deleting bitstream. " + e.getMessage(), e);\n throw new RuntimeException("Problem deleting bitstream. " + e.getMessage(), e);\n }\n finally {\n cleanup(stmt);\n }\n return numDeleted;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-220|SpecialSeperatorForDevSet|boolean checkIfUserExists(String username) throws IOException {\n try {\n URL url = new URL(WS_URL + "/user/" + URLEncoder.encode(username, "UTF-8") + "/profile.xml");\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.connect();\n InputStream is = conn.getInputStream();\n-   is.close();\n+   is.close();\n return true;\n }\n catch (FileNotFoundException e) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n try {\n URL url = _toURL(xml_location);\n if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n else {\n in_stream = url.openStream();\n }\n }\n-   catch (IOException ex) {\n+   catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-221|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);\n if (delegate == null) {\n ActionErrors errors = new ActionErrors();\n errors.add(null, new ActionError("errors.session"));\n saveErrors(request, errors);\n return mapping.findForward("fail");\n }\n AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();\n TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();\n String urlSonido = traAyudaPantalla.getUrlSonido();\n if (urlSonido == null) {\n return null;\n }\n URL url = new URL(urlSonido);\n URLConnection urlConnection = url.openConnection();\n urlConnection.connect();\n String tipoMime = urlConnection.getContentType();\n log.debug("Tipo Mime: " + tipoMime);\n-   Map audioOptions = new HashMap();\n+   Map audioOptions = new HashMap();\n if (tipoMime.indexOf("audio") != -1 || tipoMime.indexOf("asf") != -1 || tipoMime.equals("unknown/unknown")) {\n audioOptions.put("id", "MediaPlayer");\n audioOptions.put("codeBase", "http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112");\n audioOptions.put("classId", "CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95");\n audioOptions.put("mimeType", "application/x-mplayer2");\n audioOptions.put("urlSonido", urlSonido);\n audioOptions.put("pluginSpage", "http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/");\n }\n else if (tipoMime.indexOf("real") != -1) {\n audioOptions.put("id", "RVOCX");\n audioOptions.put("codeBase", "");\n audioOptions.put("classId", "clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA");\n audioOptions.put("mimeType", "audio/x-pn-realaudio-plugin");\n audioOptions.put("urlSonido", urlSonido);\n audioOptions.put("pluginSpage", "");\n }\n request.setAttribute("audioOptions", audioOptions);\n log.debug("entra success");\n return mapping.findForward("success");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-222|SpecialSeperatorForDevSet|private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {\n OutputStreamWriter osr = null;\n try {\n URL url = new URL("http", HOST, FILE);\n-   URLConnection conn = url.openConnection();\n+   URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n osr = new OutputStreamWriter(conn.getOutputStream());\n osr.write(rqlQuery);\n osr.flush();\n return conn.getInputStream();\n }\n catch (IOException ioe) {\n throw new RQLException("IO Exception reading result from server", ioe);\n }\n finally {\n if (osr != null) {\n try {\n osr.close();\n }\n catch (IOException ioe) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n-   pigdata.delete();\n+   pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-223|SpecialSeperatorForDevSet|private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {\n try {\n-   OutputStream outStream = null;\n+   OutputStream outStream = null;\n URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);\n if (url.getProtocol().equals("file")) {\n File file = new File(url.getFile());\n outStream = new FileOutputStream(file);\n }\n else {\n URLConnection connection = url.openConnection();\n connection.setDoOutput(true);\n outStream = connection.getOutputStream();\n }\n OutputStreamWriter writer = new OutputStreamWriter(outStream);\n Enumeration myEnum = profile.keys();\n while (myEnum.hasMoreElements()) {\n String key = myEnum.nextElement().toString();\n if (key != "id") writer.write(key + "=" + profile.getStringValue(key) + System.getProperty("line.separator"));\n }\n writer.flush();\n writer.close();\n }\n catch (Exception e) {\n throw new MM4UCannotStoreUserProfileException(this, "setProfile", e.toString());\n }\n }\n|SpecialSeperatorForDevSet|public void parse() throws ParserConfigurationException, SAXException, IOException {\n DefaultHttpClient httpclient = initialise();\n HttpResponse result = httpclient.execute(new HttpGet(urlString));\n SAXParserFactory spf = SAXParserFactory.newInstance();\n if (spf != null) {\n SAXParser sp = spf.newSAXParser();\n sp.parse(result.getEntity().getContent(), this);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-224|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n-   catch (UnsupportedEncodingException e) {\n+   catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n ps.setString(num++, portalUserBean.getPhone());\n ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n-   dbDyn.commit();\n+   dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-225|SpecialSeperatorForDevSet|public void removeRealm(final List<Integer> realmIds) {\n try {\n connection.setAutoCommit(false);\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("realm.remove"));\n Iterator<Integer> iter = realmIds.iterator();\n int realmId;\n while (iter.hasNext()) {\n realmId = iter.next();\n psImpl.setInt(1, realmId);\n psImpl.executeUpdate();\n cmDB.removeRealm(realmId);\n }\n }\n }\n);\n connection.commit();\n }\n catch (SQLException sqle) {\n log.error(sqle);\n if (connection != null) {\n try {\n-   connection.rollback();\n+   connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n }\n finally {\n if (connection != null) {\n try {\n connection.setAutoCommit(true);\n }\n catch (SQLException ex) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testLoadHttpGzipped() throws Exception {\n String url = HTTP_GZIPPED;\n LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));\n InputStream contentInputStream = loadingInfo.getContentInputStream();\n byte[] actual = IOUtils.toByteArray(contentInputStream);\n byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));\n assertEquals(expected.length, actual.length);\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-226|SpecialSeperatorForDevSet|public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n-   byte[] sha1hash = new byte[40];\n+   byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return SHA1.convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public static AudioInputStream getWavFromURL(String urlstr) {\n URL url;\n AudioInputStream ais = null;\n try {\n url = new URL(urlstr);\n URLConnection c = url.openConnection();\n c.connect();\n InputStream stream = c.getInputStream();\n ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);\n LOG.debug("[getWavFromURL]Getting audio from URL: {\n0}\n");\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return ais;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-227|SpecialSeperatorForDevSet|public void metodo1() {\n int temp;\n boolean flagDesordenado = true;\n while (flagDesordenado) {\n flagDesordenado = false;\n for (int i = 0;\n i < this.tamanoTabla - 1;\n-   i++) {\n+   i++) {\n if (tabla[i] > tabla[i + 1]) {\n flagDesordenado = true;\n temp = tabla[i];\n tabla[i] = tabla[i + 1];\n tabla[i + 1] = temp;\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-228|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n-   File ifp = new File(inFile);\n+   File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n-   zot = new ZipEntry(zit.getName());\n+   zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-228|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n-   ZipEntry zit = null;\n+   ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|private static void copyFiles(String strPath, String dstPath) throws Exception {\n File src = new File(strPath);\n File dest = new File(dstPath);\n if (src.isDirectory()) {\n dest.mkdirs();\n String list[] = src.list();\n for (int i = 0;\n-   i < list.length;\n+   i < list.length;\n i++) {\n String dest1 = dest.getAbsolutePath() + "\\" + list[i];\n String src1 = src.getAbsolutePath() + "\\" + list[i];\n copyFiles(src1, dest1);\n }\n }\n else {\n FileChannel sourceChannel = new FileInputStream(src).getChannel();\n FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n sourceChannel.close();\n targetChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-229|SpecialSeperatorForDevSet|@Override protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\n if ((url == null) || (proxy == null)) {\n throw new IllegalArgumentException(Messages.getString("luni.1B"));\n-   }\n+   }\n return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\n }\n|SpecialSeperatorForDevSet|private void copyJar(File src, File dst) throws IOException {\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(src).getChannel();\n-   dstChannel = new FileOutputStream(dst).getChannel();\n+   dstChannel = new FileOutputStream(dst).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n catch (IOException e) {\n fLog.log(Level.SEVERE, e.getMessage(), e);\n }\n finally {\n srcChannel.close();\n dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-230|SpecialSeperatorForDevSet|public FTPFile[] connect() {\n-   if (ftpe == null) {\n+   if (ftpe == null) {\n ftpe = new FTPEvent(this);\n }\n if (ftp == null) {\n ftp = new FTPClient();\n }\n else if (ftp.isConnected()) {\n path = "";\n try {\n ftp.disconnect();\n }\n catch (IOException e1) {\n log.error("could not disconnect -" + e1.getMessage());\n }\n }\n currentDir = new FTPFile[0];\n log.debug("try to connect");\n try {\n int reply;\n ftp.connect(ftpsite);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n log.error("FTP server refused connection.");\n }\n }\n catch (IOException e) {\n log.error("FTPConnection error: " + e.getMessage());\n if (ftp.isConnected()) {\n try {\n ftp.disconnect();\n }\n catch (IOException f) {\n }\n }\n }\n try {\n if (!ftp.login(user, password)) {\n log.error("could not login with: " + user);\n ftp.logout();\n }\n log.debug("Remote system is " + ftp.getSystemName());\n ftp.enterLocalPassiveMode();\n currentDir = ftp.listFiles();\n }\n catch (FTPConnectionClosedException e) {\n log.error("FTPConnectionClosedException: " + e.getMessage());\n }\n catch (IOException e) {\n log.error("IOException: " + e.getMessage());\n }\n ftpe.setType(FTPEvent.CONNECT);\n fireFTPEvent(ftpe);\n return currentDir;\n }\n|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n-   System.out.println("Add file " + target);\n+   System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-231|SpecialSeperatorForDevSet|public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n try {\n Connection conn = null;\n Statement stmt = null;\n try {\n conn = fido.util.FidoDataSource.getConnection();\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\n AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\n prepTable.deleteLinkType(stmt, name);\n ObjectLinkTable objectLinkTable = new ObjectLinkTable();\n objectLinkTable.deleteLinkType(stmt, name);\n String sql = "delete from ClassLinkTypes where LinkName = '" + name + "'";\n stmt.executeUpdate(sql);\n conn.commit();\n }\n catch (SQLException e) {\n if (conn != null) conn.rollback();\n throw e;\n }\n finally {\n-   if (stmt != null) stmt.close();\n+   if (stmt != null) stmt.close();\n if (conn != null) conn.close();\n }\n }\n catch (SQLException e) {\n throw new FidoDatabaseException(e);\n }\n }\n|SpecialSeperatorForDevSet|-  protected boolean checkLink(URL url) {\n+  protected boolean checkLink(URL url) {\n try {\n URLConnection connection = url.openConnection();\n connection.connect();\n return true;\n }\n catch (IOException e) {\n MsgLog.error("DapParser.checkLink(): IOException: " + e.toString());\n return false;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-232|SpecialSeperatorForDevSet|public static String hashPasswordForOldMD5(String password) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(password.getBytes("UTF-8"));\n byte messageDigest[] = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & messageDigest[i]);\n if (hex.length() == 1) {\n hexString.append('0');\n }\n hexString.append(hex);\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new IllegalStateException(nsae.getMessage());\n }\n catch (UnsupportedEncodingException uee) {\n throw new IllegalStateException(uee.getMessage());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n Document dom = null;\n try {\n DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n f.setNamespaceAware(false);\n f.setCoalescing(true);\n f.setIgnoringComments(true);\n f.setValidating(false);\n DocumentBuilder b = f.newDocumentBuilder();\n dom = b.parse(new InputSource(xmlIn));\n }\n catch (ParserConfigurationException err) {\n throw new IOException(err);\n }\n Element root = dom.getDocumentElement();\n if (root == null) throw new SAXException("Not root in document");\n Attr att = root.getAttributeNode("label");\n if (att == null) root.setAttribute("label", "Wikipedia");\n Menu menu = parseMenu(root);\n menu.id = "menuWikipedia";\n ZipOutputStream zout = new ZipOutputStream(out);\n String content = ResourceUtils.getContent(XUL4Wikipedia.class, "chrome.manifest");\n addEntry(zout, "chrome.manifest", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "install.rdf");\n addEntry(zout, "install.rdf", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "library.js");\n addDir(zout, "chrome/");\n addDir(zout, "chrome/content/");\n addDir(zout, "chrome/skin/");\n String signal = "/*INSERT_CMD_HERE*/";\n int n = content.indexOf(signal);\n if (n == -1) throw new RuntimeException("where is " + signal + " ??");\n ZipEntry entry = new ZipEntry("chrome/content/library.js");\n zout.putNextEntry(entry);\n PrintWriter pout = new PrintWriter(zout);\n pout.write(content.substring(0, n));\n menu.toJS(pout);\n pout.write(content.substring(n + signal.length()));\n-   pout.flush();\n+   pout.flush();\n zout.closeEntry();\n entry = new ZipEntry("chrome/content/menu.xul");\n zout.putNextEntry(entry);\n pout = new PrintWriter(zout);\n pout.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n pout.println("<overlay id=\"xul4wikipedia\" xmlns=\"" + XUL.NS + "\">");\n pout.println("<script src=\"library.js\"/>");\n pout.println("<popup id=\"contentAreaContextMenu\">");\n pout.println("<menuseparator/>");\n menu.toXUL(pout);\n pout.println("</popup>");\n pout.println("</overlay>");\n pout.flush();\n zout.closeEntry();\n InputStream png = XUL4Wikipedia.class.getResourceAsStream("32px-Wikipedia-logo.png");\n if (png == null) throw new IOException("Cannot get icon");\n entry = new ZipEntry("chrome/skin/wikipedia.png");\n zout.putNextEntry(entry);\n IOUtils.copyTo(png, zout);\n zout.closeEntry();\n zout.finish();\n zout.flush();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-233|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n-   index++;\n+   index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|@Test public void test_validate_geo_getEvents() {\n try {\n SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");\n File schemaLocation = new File("tes.xsd");\n Schema schema = factory.newSchema(schemaLocation);\n Validator validator = schema.newValidator();\n URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026");\n InputStream inputStream = url.openStream();\n Source source = new StreamSource(inputStream);\n validator.validate(source);\n }\n catch (IOException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("File not found", true);\n }\n catch (SAXException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("Schema did not validate", true);\n-   }\n+   }\n assertTrue(true);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-234|SpecialSeperatorForDevSet|public static boolean dump(File source, File target) {\n boolean done = false;\n try {\n InputStream is = new BufferedInputStream(new FileInputStream(source));\n OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n while (is.available() > 0) {\n os.write(is.read());\n }\n os.flush();\n-   os.close();\n+   os.close();\n is.close();\n return true;\n }\n catch (IOException e) {\n }\n return done;\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n-   }\n+   }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-235|SpecialSeperatorForDevSet|public static String CheckUrl(String urlvalue) {\n String inputLine = "";\n try {\n URL url = new URL(urlvalue);\n HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n inputLine = in.readLine().toString();\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n return inputLine;\n }\n|SpecialSeperatorForDevSet|public static synchronized String toSHA1(String str) {\n Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");\n try {\n MessageDigest md;\n md = MessageDigest.getInstance(SHA1);\n byte[] sha1hash = new byte[40];\n md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n-   sha1hash = md.digest();\n+   sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n catch (UnsupportedEncodingException ex) {\n ex.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-236|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n-   digest.update(data.getBytes());\n+   digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String linesep = System.getProperty("line.separator");\n FileOutputStream fos = new FileOutputStream(new File("lib-licenses.txt"));\n fos.write(new String("JCP contains the following libraries. Please read this for comments on copyright etc." + linesep + linesep).getBytes());\n fos.write(new String("Chemistry Development Kit, master version as of " + new Date().toString() + " (http://cdk.sf.net)" + linesep).getBytes());\n fos.write(new String("Copyright 1997-2009 The CDK Development Team" + linesep).getBytes());\n fos.write(new String("License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)" + linesep).getBytes());\n fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n fos.write(new String("Source available at: http://sourceforge.net/scm/?type=git&group_id=20024" + linesep + linesep).getBytes());\n File[] files = new File(args[0]).listFiles(new JarFileFilter());\n for (int i = 0;\n i < files.length;\n i++) {\n if (new File(files[i].getPath() + ".meta").exists()) {\n Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + ".meta"));\n Iterator<String> itsect = metaprops.keySet().iterator();\n while (itsect.hasNext()) {\n String section = itsect.next();\n fos.write(new String(metaprops.get(section).get("Library") + " " + metaprops.get(section).get("Version") + " (" + metaprops.get(section).get("Homepage") + ")" + linesep).getBytes());\n fos.write(new String("Copyright " + metaprops.get(section).get("Copyright") + linesep).getBytes());\n fos.write(new String("License: " + metaprops.get(section).get("License") + " (" + metaprops.get(section).get("LicenseURL") + ")" + linesep).getBytes());\n fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n fos.write(new String("Source available at: " + metaprops.get(section).get("SourceCode") + linesep + linesep).getBytes());\n }\n }\n if (new File(files[i].getPath() + ".extra").exists()) {\n fos.write(new String("The author says:" + linesep).getBytes());\n FileInputStream in = new FileInputStream(new File(files[i].getPath() + ".extra"));\n int len;\n byte[] buf = new byte[1024];\n while ((len = in.read(buf)) > 0) {\n fos.write(buf, 0, len);\n }\n }\n fos.write(linesep.getBytes());\n }\n fos.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-237|SpecialSeperatorForDevSet|public boolean crear() {\n int result = 0;\n String sql = "insert into jugador" + "(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)" + "values (?, ?, ?, ?, ?, ?, ?)";\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n populatePreparedStatement(elJugador);\n result = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n-   finally {\n+   finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (result > 0);\n }\n|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-238|SpecialSeperatorForDevSet|-  protected String readUrl(String svnUrl) throws IOException {\n+  protected String readUrl(String svnUrl) throws IOException {\n URL url = new URL(svnUrl);\n URLConnection uc = url.openConnection();\n if (url.getProtocol().equals("https")) {\n String userPassword = user + ":" + password;\n String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());\n uc.setRequestProperty("Authorization", "Basic " + encoding);\n }\n InputStream is = null;\n String in = null;\n try {\n is = uc.getInputStream();\n in = read(is);\n }\n finally {\n try {\n is.close();\n }\n catch (Exception e) {\n }\n }\n return in;\n }\n|SpecialSeperatorForDevSet|@Test public void test02_ok() throws Exception {\n-   DefaultHttpClient client = new DefaultHttpClient();\n+   DefaultHttpClient client = new DefaultHttpClient();\n try {\n HttpPost post = new HttpPost(chartURL);\n List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n nameValuePairs.add(new BasicNameValuePair("ws", "getDomainEvolution"));\n nameValuePairs.add(new BasicNameValuePair("chartTitle", "test"));\n nameValuePairs.add(new BasicNameValuePair("type", "chart"));\n nameValuePairs.add(new BasicNameValuePair("firstDate", "20111124"));\n nameValuePairs.add(new BasicNameValuePair("lastDate", "20111125"));\n nameValuePairs.add(new BasicNameValuePair("wsParams", "type,counting,protocol,unit,proxy,domain,timeScale,period"));\n nameValuePairs.add(new BasicNameValuePair("wsParamsValues", "chart,volume,all,hits,all,google.com,day,360"));\n nameValuePairs.add(new BasicNameValuePair("serieTitle", "serie"));\n post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n HttpResponse response = client.execute(post);\n HttpEntity entity = response.getEntity();\n assertNotNull(entity);\n InputStream instream = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n System.out.println(reader.readLine());\n instream.close();\n assertEquals("error :" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());\n }\n finally {\n client.getConnectionManager().shutdown();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-239|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|private IProject createJavaProject() {\n IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject("DefaultFolderPropertiesTest");\n if (!proj.exists()) {\n try {\n proj.create(null);\n proj.open(null);\n IProjectDescription desc = proj.getDescription();\n desc.setNatureIds(new String[] {\n JavaCore.NATURE_ID }\n);\n proj.setDescription(desc, null);\n IJavaProject javaProject = JavaCore.create(proj);\n javaProject.open(null);\n IFolder srcFolder1 = proj.getFolder(new Path("src"));\n srcFolder1.create(true, true, null);\n IFolder srcFolder2 = proj.getFolder(new Path("custom_src"));\n srcFolder2.create(true, true, null);\n IClasspathEntry[] classpathEntries = new IClasspathEntry[] {\n JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() }\n;\n javaProject.setRawClasspath(classpathEntries, null);\n IFolder binFolder = proj.getFolder(new Path("bin"));\n if (!binFolder.exists()) {\n binFolder.create(true, true, null);\n }\n javaProject.setOutputLocation(binFolder.getFullPath(), null);\n IFolder testFolder = proj.getFolder(new Path("test"));\n testFolder.create(true, true, null);\n IFolder resultFolder = proj.getFolder(new Path("result"));\n resultFolder.create(true, true, null);\n }\n catch (CoreException e) {\n fail(e.getMessage());\n }\n-   }\n+   }\n return proj;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-240|SpecialSeperatorForDevSet|public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {\n getSession();\n final List<NameValuePair> params = new ArrayList<NameValuePair>();\n params.add(new BasicNameValuePair("query", "Queue='" + queueName + "' AND Status='open'"));\n params.add(new BasicNameValuePair("format", "i"));\n params.add(new BasicNameValuePair("orderby", "-id"));\n-   final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8"));\n+   final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8"));\n final List<RTTicket> tickets = new ArrayList<RTTicket>();\n final List<Long> ticketIds = new ArrayList<Long>();\n try {\n final HttpResponse response = getClient().execute(get);\n int responseCode = response.getStatusLine().getStatusCode();\n if (responseCode != HttpStatus.SC_OK) {\n throw new RequestTrackerException("Received a non-200 response code from the server: " + responseCode);\n }\n else {\n InputStreamReader isr = null;\n BufferedReader br = null;\n try {\n if (response.getEntity() == null) return null;\n isr = new InputStreamReader(response.getEntity().getContent());\n br = new BufferedReader(isr);\n String line = null;\n do {\n line = br.readLine();\n if (line != null) {\n if (line.contains("does not exist.")) {\n return null;\n }\n if (line.startsWith("ticket/")) {\n ticketIds.add(Long.parseLong(line.replace("ticket/", "")));\n }\n }\n }\n while (line != null);\n }\n catch (final Exception e) {\n throw new RequestTrackerException("Unable to read ticket IDs from query.", e);\n }\n finally {\n IOUtils.closeQuietly(br);\n IOUtils.closeQuietly(isr);\n }\n }\n }\n catch (final Exception e) {\n LogUtils.errorf(this, e, "An exception occurred while getting tickets for queue " + queueName);\n return null;\n }\n for (final Long id : ticketIds) {\n try {\n tickets.add(getTicket(id, false));\n }\n catch (final RequestTrackerException e) {\n LogUtils.warnf(this, e, "Unable to retrieve ticket.");\n }\n }\n return tickets;\n }\n|SpecialSeperatorForDevSet|private String getPrefsKey(String key) {\n try {\n if (MD5 == null) MD5 = MessageDigest.getInstance("MD5");\n MD5.reset();\n MD5.update(key.getBytes("UTF-8"));\n byte[] resultBytes = MD5.digest();\n return toHexString(resultBytes);\n }\n catch (Exception nsae) {\n return key;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-241|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n-   try {\n+   try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n-   out = new FileOutputStream(dest).getChannel();\n+   out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-241|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n-   }\n+   }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n-  );\n+  );\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-242|SpecialSeperatorForDevSet|public void deleteObject(String id) throws SQLException {\n boolean selfConnection = true;\n Connection conn = null;\n PreparedStatement stmt = null;\n try {\n if (dbConnection == null) {\n DatabaseConn dbConn = new DatabaseConn();\n conn = dbConn.getConnection();\n conn.setAutoCommit(false);\n }\n else {\n conn = dbConnection;\n selfConnection = false;\n }\n stmt = conn.prepareStatement(this.deleteSql);\n stmt.setString(1, id);\n stmt.executeUpdate();\n if (selfConnection) conn.commit();\n }\n catch (Exception e) {\n if (selfConnection && conn != null) conn.rollback();\n throw new SQLException(e.getMessage());\n }\n finally {\n if (stmt != null) {\n stmt.close();\n stmt = null;\n }\n if (selfConnection && conn != null) {\n conn.close();\n conn = null;\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String md5String(String str) {\n try {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] hash = md.digest();\n final char[] hexChars = {\n '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }\n;\n StringBuffer res = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n res.append(hexChars[0x0F & hash[i]]);\n }\n return res.toString();\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-243|SpecialSeperatorForDevSet|@Override public void parse() throws IOException {\n URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));\n URLConnection con = url.openConnection();\n BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));\n String str;\n bStream.readLine();\n while ((str = bStream.readLine()) != null) {\n String[] tokens = str.split("(\\s+)");\n-   String charCode = tokens[0].replaceAll("([0-9+])", "");\n+   String charCode = tokens[0].replaceAll("([0-9+])", "");\n Float value = Float.parseFloat(tokens[2].trim().replace(",", "."));\n CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);\n this.set.add(unit);\n }\n }\n|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n InputStream fis = url.openStream();\n InputStreamReader r = new InputStreamReader(fis, "UTF-8");\n BufferedReader br = new BufferedReader(r);\n String line;\n StringBuilder sb = new StringBuilder();\n while (null != (line = br.readLine())) {\n sb.append(line);\n sb.append("\r\n");\n }\n br.close();\n r.close();\n fis.close();\n final String text = sb.toString();\n SwingUtilities.invokeLater(new Runnable() {\n @Override public void run() {\n MainPanel.this.source.setText(text);\n MainPanel.this.source.setCaretPosition(0);\n }\n-   }\n+   }\n);\n }\n catch (Exception ex) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-244|SpecialSeperatorForDevSet|private String getHash(String string) {\n Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, "HashTime").start();\n MessageDigest md5 = null;\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n md5.reset();\n md5.update(string.getBytes());\n byte[] result = md5.digest();\n-   StringBuffer hexString = new StringBuffer();\n+   StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < result.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & result[i]));\n }\n String str = hexString.toString();\n hashTime.stop();\n return str;\n }\n|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n-   try {\n+   try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-245|SpecialSeperatorForDevSet|-  public static int[] sortAscending(float input[]) {\n+  public static int[] sortAscending(float input[]) {\n int[] order = new int[input.length];\n for (int i = 0;\n i < order.length;\n i++) order[i] = i;\n for (int i = input.length;\n --i >= 0;\n ) {\n for (int j = 0;\n j < i;\n j++) {\n if (input[j] > input[j + 1]) {\n float mem = input[j];\n input[j] = input[j + 1];\n input[j + 1] = mem;\n int id = order[j];\n order[j] = order[j + 1];\n order[j + 1] = id;\n }\n }\n }\n return order;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) {\n try {\n FileChannel inChannel = null, outChannel = null;\n try {\n out.getParentFile().mkdirs();\n inChannel = new FileInputStream(in).getChannel();\n outChannel = new FileOutputStream(out).getChannel();\n outChannel.transferFrom(inChannel, 0, inChannel.size());\n }\n-   finally {\n+   finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n catch (Exception e) {\n ObjectUtils.throwAsError(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-246|SpecialSeperatorForDevSet|public void readScalarpvviewerDocument(URL url) {\n try {\n String xmlData = "";\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = "";\n boolean cont = true;\n while (cont) {\n line = in.readLine();\n if (line == null) {\n break;\n }\n line = line.trim();\n if (line.length() > 0 && line.charAt(0) != '%') {\n xmlData = xmlData + line + System.getProperty("line.separator");\n }\n if (line.length() > 1 && line.charAt(0) == '%' && line.charAt(1) == '=') {\n cont = false;\n }\n }\n XmlDataAdaptor readAdp = null;\n readAdp = XmlDataAdaptor.adaptorForString(xmlData, false);\n if (readAdp != null) {\n XmlDataAdaptor scalarpvviewerData_Adaptor = readAdp.childAdaptor(dataRootName);\n if (scalarpvviewerData_Adaptor != null) {\n cleanUp();\n setTitle(scalarpvviewerData_Adaptor.stringValue("title"));\n XmlDataAdaptor params_font = scalarpvviewerData_Adaptor.childAdaptor("font");\n int font_size = params_font.intValue("size");\n int style = params_font.intValue("style");\n String font_Family = params_font.stringValue("name");\n globalFont = new Font(font_Family, style, font_size);\n fontSize_PrefPanel_Spinner.setValue(new Integer(font_size));\n setFontForAll(globalFont);\n XmlDataAdaptor params_pts = scalarpvviewerData_Adaptor.childAdaptor("Panels_titles");\n viewValuesPanel.setTitle(params_pts.stringValue("values_panel_title"));\n viewChartsPanel.setTitle(params_pts.stringValue("charts_panel_title"));\n XmlDataAdaptor params_data = scalarpvviewerData_Adaptor.childAdaptor("PARAMETERS");\n if (params_data != null) {\n viewValuesPanel.setLastMemorizingTime(params_data.stringValue("lastMemorizingTime"));\n }\n else {\n viewValuesPanel.setLastMemorizingTime("No Info. See time of file modification.");\n }\n XmlDataAdaptor params_uc = scalarpvviewerData_Adaptor.childAdaptor("UpdateController");\n double updateTime = params_uc.doubleValue("updateTime");\n updatingController.setUpdateTime(updateTime);\n double chartUpdateTime = params_uc.doubleValue("ChartUpdateTime");\n viewChartsPanel.setTimeStep(chartUpdateTime);\n viewValuesPanel.listenModeOn(params_uc.booleanValue("listenToEPICS"));\n viewChartsPanel.recordOn(params_uc.booleanValue("recordChartFromEPICS"));\n java.util.Iterator<XmlDataAdaptor> pvIt = scalarpvviewerData_Adaptor.childAdaptorIterator("ScalarPV");\n while (pvIt.hasNext()) {\n XmlDataAdaptor pvDA = pvIt.next();\n String pvName = pvDA.stringValue("pvName");\n double refVal = pvDA.doubleValue("referenceValue");\n double val = 0.;\n if (pvDA.hasAttribute("value")) {\n val = pvDA.doubleValue("value");\n }\n spvs.addScalarPV(pvName, refVal);\n ScalarPV spv = spvs.getScalarPV(spvs.getSize() - 1);\n spv.setValue(val);\n spv.showValueChart(pvDA.booleanValue("showValueChart"));\n spv.showRefChart(pvDA.booleanValue("showRefChart"));\n spv.showDifChart(pvDA.booleanValue("showDifChart"));\n spv.showDif(pvDA.booleanValue("showDif"));\n spv.showValue(pvDA.booleanValue("showValue"));\n spv.showRef(pvDA.booleanValue("showRef"));\n }\n }\n }\n spvs.readChart(in);\n in.close();\n updatingController.setStop(false);\n-   viewValuesPanel.updateGraph();\n+   viewValuesPanel.updateGraph();\n viewChartsPanel.updateGraph();\n }\n catch (IOException exception) {\n messageTextLocal.setText(null);\n messageTextLocal.setText("Fatal error. Something wrong with input file. Stop.");\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File from_file, File to_file) throws IOException {\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_file.getName());\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_file.getName());\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_file.getName());\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_file.getName());\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) try {\n from.close();\n-   }\n+   }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-247|SpecialSeperatorForDevSet|public static String getContent(HttpUriRequest request) throws Exception {\n StringBuffer sb = new StringBuffer();\n HttpClient client = new DefaultHttpClient();\n HttpParams httpParams = client.getParams();\n-   HttpConnectionParams.setConnectionTimeout(httpParams, 30000);\n+   HttpConnectionParams.setConnectionTimeout(httpParams, 30000);\n HttpConnectionParams.setSoTimeout(httpParams, 50000);\n HttpResponse response = client.execute(request);\n HttpEntity entity = response.getEntity();\n if (entity != null) {\n BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), "UTF-8"), 8192);\n String line = null;\n while ((line = reader.readLine()) != null) {\n sb.append(line + "\n");\n }\n reader.close();\n }\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|public void run() {\n BufferedReader reader = null;\n String message = null;\n-   int messageStyle = SWT.ICON_WARNING;\n+   int messageStyle = SWT.ICON_WARNING;\n try {\n URL url = new URL(Version.LATEST_VERSION_URL);\n URLConnection conn = url.openConnection();\n reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String latestVersion = reader.readLine();\n latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);\n if (!Version.getVersion().equals(latestVersion)) {\n message = Labels.getLabel("text.version.old");\n message = message.replaceFirst("%LATEST", latestVersion);\n message = message.replaceFirst("%VERSION", Version.getVersion());\n messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;\n }\n else {\n message = Labels.getLabel("text.version.latest");\n messageStyle = SWT.ICON_INFORMATION;\n }\n }\n catch (Exception e) {\n message = Labels.getLabel("exception.UserErrorException.version.latestFailed");\n Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);\n }\n finally {\n try {\n if (reader != null) reader.close();\n }\n catch (IOException e) {\n }\n final String messageToShow = message;\n final int messageStyleToShow = messageStyle;\n Display.getDefault().asyncExec(new Runnable() {\n public void run() {\n statusBar.setStatusText(null);\n MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);\n messageBox.setText(Version.getFullName());\n messageBox.setMessage(messageToShow);\n if (messageBox.open() == SWT.YES) {\n BrowserLauncher.openURL(Version.DOWNLOAD_URL);\n }\n }\n }\n);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-248|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n-   if (selectedPage == null) {\n+   if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n-   try {\n+   try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-248|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void createTempFile(String resourceName) throws IOException {\n InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\n if (input == null) {\n fail("Couldn't resolve resource '" + resourceName + "'!");\n }\n inputFile = File.createTempFile("Import", "test");\n-   inputFile.delete();\n+   inputFile.delete();\n FileOutputStream output = new FileOutputStream(inputFile);\n IOUtils.copyLarge(input, output);\n IOUtilities.closeQuietly(output);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-249|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n-   outageUpdater.executeUpdate();\n+   outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public String encrypt(String password) throws Exception {\n-   MessageDigest md5 = MessageDigest.getInstance("MD5");\n+   MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n String hashword = hash.toString(16);\n return hashword;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-250|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n-   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n+   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|@Override public File call() throws IOException {\n HttpURLConnection conn = null;\n ReadableByteChannel fileDownloading = null;\n FileChannel fileWriting = null;\n try {\n conn = (HttpURLConnection) url.openConnection();\n if (size == -1) {\n size = conn.getContentLength();\n }\n fileDownloading = Channels.newChannel(conn.getInputStream());\n fileWriting = new FileOutputStream(file).getChannel();\n long left = size;\n long chunkSize = BLOCK_SIZE;\n-   for (long downloaded = 0;\n+   for (long downloaded = 0;\n downloaded < size;\n left = size - downloaded) {\n if (left < BLOCK_SIZE) {\n chunkSize = left;\n }\n fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);\n downloaded += chunkSize;\n setProgress(downloaded);\n }\n }\n finally {\n if (file != null) {\n file.deleteOnExit();\n }\n if (conn != null) {\n conn.disconnect();\n }\n if (fileDownloading != null) {\n try {\n fileDownloading.close();\n }\n catch (IOException ioe) {\n Helper.logger.log(Level.SEVERE, "Не удалось закрыть поток скачивания", ioe);\n }\n }\n if (fileWriting != null) {\n try {\n fileWriting.close();\n }\n catch (IOException ioe) {\n Helper.logger.log(Level.SEVERE, "Не удалось закрыть поток записи в файл", ioe);\n }\n }\n }\n return file;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-251|SpecialSeperatorForDevSet|public void importCSV(InputStream csvfile) throws Exception {\n try {\n String[] qmarks = new String[columns.length];\n for (int i = 0;\n i < qmarks.length;\n i++) {\n qmarks[i] = "?";\n }\n if (cleartable) {\n String delsql = "delete from " + table;\n Statement delstm = conn.createStatement();\n delstm.executeUpdate(delsql);\n }\n String sql = "insert into " + table + " (" + StringUtils.join(columns, ", ") + ") values (" + StringUtils.join(qmarks, ", ") + ")";\n log.debug("SQL: " + sql);\n PreparedStatement stm = conn.prepareStatement(sql);\n int datatypes[] = new int[columns.length];\n for (int i = 0;\n i < columns.length;\n i++) {\n Table tbl = project.getTableByName(table);\n if (tbl == null) throw new OntopiaRuntimeException("Unknown table: " + table);\n Column col = tbl.getColumnByName(columns[i]);\n if (col == null) throw new OntopiaRuntimeException("Unknown table column: " + columns[i]);\n if (col.getType() == null) throw new OntopiaRuntimeException("Column type is null: " + col.getType());\n DataType datatype = project.getDataTypeByName(col.getType(), "generic");\n if (datatype == null) throw new OntopiaRuntimeException("Unknown column type: " + col.getType());\n String dtype = datatype.getType();\n if ("varchar".equals(dtype)) datatypes[i] = Types.VARCHAR;\n else if ("integer".equals(dtype)) datatypes[i] = Types.INTEGER;\n else throw new OntopiaRuntimeException("Unknown datatype: " + dtype);\n }\n LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n for (int i = 0;\n i < ignorelines;\n i++) {\n String line = reader.readLine();\n if (line == null) break;\n }\n log.debug("[" + StringUtils.join(columns, ", ") + "]");\n int lineno = 0;\n while (true) {\n lineno++;\n String line = reader.readLine();\n if (line == null) break;\n try {\n String[] cols = StringUtils.split(line, separator);\n if (cols.length > columns.length && !ignorecolumns) log.debug("Ignoring columns: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n log.debug("CVALUES: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n String dmesg = "(";\n for (int i = 0;\n i < columns.length;\n i++) {\n String col = cols[i];\n if (stripquotes) {\n int len = col.length();\n if (len > 1 && ((col.charAt(0) == '"' && col.charAt(len - 1) == '"') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);\n }\n-   if (col != null && col.equals("")) col = null;\n+   if (col != null && col.equals("")) col = null;\n dmesg = dmesg + col;\n if (i < columns.length - 1) dmesg = dmesg + ", ";\n stm.setObject(i + 1, col, datatypes[i]);\n }\n dmesg = dmesg + ")";\n log.debug(dmesg);\n stm.execute();\n }\n catch (Exception e) {\n conn.rollback();\n throw new OntopiaRuntimeException("Cannot read line " + lineno + ": '" + line + "'", e);\n }\n }\n conn.commit();\n }\n finally {\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|void run(PseudolocalizerArguments arguments) throws IOException {\n List<String> fileNames = arguments.getFileNames();\n PseudolocalizationPipeline pipeline = arguments.getPipeline();\n if (arguments.isInteractive()) {\n runStdin(pipeline);\n return;\n }\n if (fileNames.size() == 0) {\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n return;\n }\n String suffix = arguments.getVariant();\n if (suffix == null) {\n suffix = "_pseudo";\n }\n else {\n suffix = "_" + suffix;\n }\n for (String fileName : fileNames) {\n File file = new File(fileName);\n if (!file.exists()) {\n System.err.println("File " + fileName + " not found");\n continue;\n }\n int lastDot = fileName.lastIndexOf('.');\n String extension;\n String outFileName;\n if (lastDot >= 0) {\n extension = fileName.substring(lastDot + 1);\n outFileName = fileName.substring(0, lastDot) + suffix + "." + extension;\n }\n-   else {\n+   else {\n extension = "";\n outFileName = fileName + suffix;\n }\n System.out.println("Processing " + fileName + " into " + outFileName);\n String fileType = arguments.getType();\n if (fileType == null) {\n fileType = extension;\n }\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n InputStream inputStream = new FileInputStream(file);\n List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n OutputStream outputStream = new FileOutputStream(new File(outFileName));\n writeMessages(msgCat, processedMessages, outputStream);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-252|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n-   FileChannel source = new FileInputStream(in).getChannel();\n+   FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n-   FileChannel destination = new FileOutputStream(out).getChannel();\n+   FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-252|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n-   source.transferTo(0, source.size(), destination);\n+   source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|public static void gzip() throws Exception {\n System.out.println("gzip()");\n GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream("/zip/myzip.gz"));\n byte buffer[] = new byte[BLOCKSIZE];\n File dir = new File("/zip/covers");\n System.out.println("Dir '" + dir.getAbsolutePath() + "' exists: " + dir.exists());\n FileInputStream in = new FileInputStream(dir);\n-   for (int length;\n+   for (int length;\n (length = in.read(buffer, 0, BLOCKSIZE)) != -1;\n ) zipout.write(buffer, 0, length);\n in.close();\n zipout.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-253|SpecialSeperatorForDevSet|public void readUNI(Vector<String> descriptions, String source) {\n InputStream is = null;\n try {\n URL url = new URL(source);\n is = url.openStream();\n Scanner scanner = new Scanner(is);\n scanner.nextLine();\n String line = "";\n String id = "";\n String desc = "";\n while (scanner.hasNextLine()) {\n line = scanner.nextLine();\n Scanner linescanner = new Scanner(line);\n linescanner.useDelimiter("\t");\n id = linescanner.next();\n linescanner.next();\n desc = linescanner.next();\n linescanner.useDelimiter("\n");\n linescanner.next();\n descriptions.add(id + " " + desc);\n }\n-   }\n+   }\n catch (MalformedURLException e) {\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n if (is != null) try {\n is.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n-   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n+   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-254|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n-   response.addHeader(header.getKey(), value);\n+   response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|public static String getHash(String uri) throws NoSuchAlgorithmException {\n MessageDigest mDigest = MessageDigest.getInstance("MD5");\n mDigest.update(uri.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-255|SpecialSeperatorForDevSet|-  public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n+  public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n parseURL = url;\n URLConnection connection = url.openConnection();\n if (charset == null) {\n charset = Charset.forName("UTF-8");\n }\n Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n return internalParse(reader, target);\n }\n|SpecialSeperatorForDevSet|public static boolean doTest(Getter<?> context, Document node) {\n try {\n URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, "url"), context));\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n Assert.isTrue(conn.getResponseCode() < 400);\n conn.disconnect();\n-   return true;\n+   return true;\n }\n catch (Exception e) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-256|SpecialSeperatorForDevSet|public static String toMd5(String str) {\n MessageDigest messageDigest = null;\n try {\n messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.reset();\n messageDigest.update(str.getBytes("UTF-8"));\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("NoSuchAlgorithmException caught!");\n System.exit(-1);\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte[] byteArray = messageDigest.digest();\n StringBuffer md5StrBuff = new StringBuffer();\n for (int i = 0;\n i < byteArray.length;\n i++) {\n-   if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n+   if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n }\n return md5StrBuff.toString();\n }\n|SpecialSeperatorForDevSet|private String getFullScreenUrl() {\n progressDown.setIndeterminate(true);\n System.out.println("Har: " + ytUrl);\n String u = ytUrl;\n URLConnection conn = null;\n String line = null;\n String data = "";\n String fullUrl = "";\n try {\n URL url = new URL(u);\n conn = url.openConnection();\n conn.setDoOutput(true);\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n while ((line = rd.readLine()) != null) {\n if (line.contains("fullscreenUrl")) {\n data = line.trim();\n }\n }\n rd.close();\n System.out.println(data);\n int start = 0;\n String[] lines = data.split("&");\n String[] tmp = null;\n String video_id = null;\n String t = null;\n String title = null;\n for (int i = 0;\n i < lines.length;\n i++) {\n if (lines[i].startsWith("video_id=")) {\n tmp = lines[i].split("=");\n video_id = tmp[1];\n }\n if (lines[i].startsWith("t=")) {\n tmp = lines[i].split("=");\n t = tmp[1];\n }\n if (lines[i].startsWith("title=")) {\n tmp = lines[i].split("=");\n title = tmp[1].substring(0, (tmp[1].length() - 2));\n }\n System.out.println(lines[i]);\n }\n System.out.println("So we got...");\n System.out.println("video_id: " + video_id);\n System.out.println("t: " + t);\n System.out.println("title: " + title);\n ytTitle = title;\n fullUrl = "http://www.youtube.com/get_video.php?video_id=" + video_id + "&t=" + t;\n }\n catch (Exception e) {\n System.err.println("Error: " + e.getLocalizedMessage());\n-   }\n+   }\n progressDown.setIndeterminate(false);\n return fullUrl;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-257|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n-   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n+   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public void googleImageSearch() {\n if (artist.compareToIgnoreCase(previousArtist) != 0) {\n MusicBoxView.googleImageLocation = 0;\n try {\n String u = "http://images.google.com/images?q=" + currentTrack.getArtist() + " - " + currentTrack.getAlbum() + "&sa=N&start=0&ndsp=21";\n if (u.contains(" ")) {\n u = u.replace(" ", "+");\n }\n URL url = new URL(u);\n HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");\n BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n-   String text = "";\n+   String text = "";\n String lin = "";\n while ((lin = readIn.readLine()) != null) {\n text += lin;\n }\n readIn.close();\n if (text.contains("\n")) {\n text = text.replace("\n", "");\n }\n String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");\n for (String s : array) {\n if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;\n")) {\n String s1 = s.substring(0, s.indexOf("&amp;\n"));\n googleImages.add(s1);\n }\n }\n }\n catch (Exception ex4) {\n MusicBoxView.showErrorDialog(ex4);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-258|SpecialSeperatorForDevSet|private void retrieveFile(URL url, RSLink link) {\n link.setStatus(RSLink.STATUS_DOWNLOADING);\n HttpURLConnection httpConn = null;\n DataOutputStream outs = null;\n BufferedInputStream bins = null;\n BufferedOutputStream bouts = null;\n try {\n String postData = URLEncoder.encode("mirror", "UTF-8") + "=" + URLEncoder.encode(url.toString(), "UTF-8");\n httpConn = (HttpURLConnection) url.openConnection();\n httpConn.setRequestMethod("POST");\n httpConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");\n httpConn.setRequestProperty("Content-Length", "" + Integer.toString(postData.getBytes().length));\n httpConn.setRequestProperty("Content-Language", "en-US");\n httpConn.setDoOutput(true);\n httpConn.setDoInput(true);\n outs = new DataOutputStream(httpConn.getOutputStream());\n outs.writeBytes(postData);\n outs.flush();\n Pattern mimePattern = Pattern.compile(".+/html.+");\n Matcher matcher = mimePattern.matcher(httpConn.getContentType());\n if (matcher.find()) {\n log("Can not download, maybe all RS slots are busy!");\n return;\n }\n link.setSize(httpConn.getContentLength());\n bins = new BufferedInputStream(httpConn.getInputStream(), 4096);\n bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);\n link.setStatus(RSLink.STATUS_DOWNLOADING);\n link.setDown(0);\n byte[] byteBuffer = new byte[4096];\n int count;\n while ((count = bins.read(byteBuffer)) != -1) {\n bouts.write(byteBuffer, 0, count);\n link.setDown(link.getDown() + count);\n if (!Main.start.get()) {\n link.setStatus(RSLink.STATUS_NOTHING);\n return;\n }\n }\n link.setStatus(RSLink.STATUS_DONE);\n }\n catch (IOException ex) {\n log("I/O Exception!");\n link.setStatus(RSLink.STATUS_NOTHING);\n }\n finally {\n try {\n if (outs != null) outs.close();\n if (bouts != null) bouts.close();\n if (bins != null) bins.close();\n }\n catch (IOException ex) {\n JOptionPane.showMessageDialog(null, "Can not close some connections:\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);\n-   }\n+   }\n if (httpConn != null) httpConn.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n-   String cmd = this.tmpDir + "/DynusT.exe";\n+   String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-259|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n-   alga.update(str.getBytes());\n+   alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|public static String ReadURL(URL url, boolean textonly) {\n try {\n URLConnection uconn = url.openConnection();\n Object ucont = uconn.getContent();\n if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly);\n else return "" + ucont;\n }\n catch (java.io.IOException e) {\n e.printStackTrace();\n }\n return null;\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-260|SpecialSeperatorForDevSet|public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n if (url == null) throw new IllegalArgumentException("Keystore url may not be null");\n LOG.debug("Initializing key store");\n KeyStore keystore = null;\n if (url.getFile().endsWith(".p12")) keystore = KeyStore.getInstance("pkcs12");\n else keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n keystore.load(url.openStream(), password != null ? password.toCharArray() : null);\n return keystore;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n-   FileChannel out = (new FileOutputStream(target)).getChannel();\n+   FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-261|SpecialSeperatorForDevSet|public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\n super();\n addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent aEvent) {\n System.exit(0);\n }\n }\n);\n Dimension dim = getToolkit().getScreenSize();\n Rectangle abounds = getBounds();\n setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\n setVisible(true);\n URL url = new URL("ftp://cendantstp/");\n char[] password = "spnr".toCharArray();\n PasswordAuthentication passwordAuthentication = new PasswordAuthentication("spnr", password);\n FTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\n JFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\n fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n fileChooser.setMultiSelectionEnabled(true);\n File[] selectedFiles = null;\n if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n selectedFiles = fileChooser.getSelectedFiles();\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n if (selectedFiles[i] instanceof FTPFileFile) {\n FTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\n logger.fine(ftpFile.getName());\n logger.fine(ftpFile.getPath());\n }\n else {\n logger.fine(selectedFiles[i].toString());\n-   logger.fine(selectedFiles[i].getAbsolutePath());\n+   logger.fine(selectedFiles[i].getAbsolutePath());\n }\n }\n }\n remoteFileSystemView.disconnect();\n try {\n if (null != selectedFiles) {\n FTPClient ftpClient = new FTPClient();\n InetAddress inetAddress = InetAddress.getByName(url.getHost());\n ftpClient.connect(inetAddress);\n if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n throw new FTPBrowseException(ftpClient.getReplyString());\n }\n if (null != passwordAuthentication) {\n ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n }\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n FTPFileFile file = (FTPFileFile) selectedFiles[i];\n logger.fine(file.getPath());\n FileOutputStream fos = new FileOutputStream(new File("d:/junk/ftp/test.txt"));\n logger.fine("" + ftpClient.retrieveFile(file.getPath().replaceAll("\\\\", "/"), fos));\n fos.close();\n }\n }\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n System.exit(0);\n }\n|SpecialSeperatorForDevSet|public static String encryptPassword(String plainPassword) {\n StringBuffer sb = new StringBuffer();\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(plainPassword.getBytes());\n byte[] digestBytes = messageDigest.digest();\n String hex = null;\n for (int i = 0;\n i < digestBytes.length;\n i++) {\n hex = Integer.toHexString(0xFF & digestBytes[i]);\n if (hex.length() < 2) sb.append("0");\n sb.append(hex);\n }\n }\n catch (Exception ex) {\n System.out.println(ex.getMessage());\n }\n return new String(sb);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-262|SpecialSeperatorForDevSet|public void hyperlinkUpdate(HyperlinkEvent e) {\n if (e.getEventType() == EventType.ACTIVATED) {\n try {\n-   URL url = e.getURL();\n+   URL url = e.getURL();\n InputStream stream = url.openStream();\n try {\n StringWriter writer = new StringWriter();\n IOUtils.copy(stream, writer, "UTF-8");\n JEditorPane editor = new JEditorPane("text/plain", writer.toString());\n editor.setEditable(false);\n editor.setBackground(Color.WHITE);\n editor.setCaretPosition(0);\n editor.setPreferredSize(new Dimension(600, 400));\n String name = url.toString();\n name = name.substring(name.lastIndexOf('/') + 1);\n JDialog dialog = new JDialog(this, "内容解析: " + name);\n dialog.add(new JScrollPane(editor));\n dialog.pack();\n dialog.setVisible(true);\n }\n finally {\n stream.close();\n }\n }\n catch (IOException exception) {\n exception.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n }\n-   return "";\n+   return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-263|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n-   return;\n+   return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n-   newOutageWriter.close();\n+   newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-263|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void insertService(String table, int type) {\n Connection con = null;\n log.info("");\n log.info("正在生成" + table + "的服务。。。。。。。");\n try {\n con = DODataSource.getDefaultCon();\n con.setAutoCommit(false);\n Statement stmt = con.createStatement();\n Statement stmt2 = con.createStatement();\n String serviceUid = UUIDHex.getInstance().generate();\n DOBO bo = DOBO.getDOBOByName(table);\n List props = new ArrayList();\n StringBuffer mainSql = null;\n String name = "";\n String l10n = "";\n String prefix = table;\n String serviceType = "null";\n Boolean isNew = null;\n switch(type) {\n-   case 1: name = prefix + "_insert";\n+   case 1: name = prefix + "_insert";\n l10n = name;\n props = bo.retrieveProperties();\n mainSql = getInsertSql(props, table);\n serviceType = "8";\n isNew = Boolean.TRUE;\n break;\n case 2: name = prefix + "_update";\n l10n = name;\n props = bo.retrieveProperties();\n mainSql = this.getModiSql(props, table);\n serviceType = "7";\n isNew = Boolean.FALSE;\n break;\n case 3: DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n if (property == null || property.getColName() == null) {\n return;\n }\n name = prefix + "_delete";\n l10n = name;\n props.add(property);\n mainSql = new StringBuffer("delete from ").append(table).append(" where ").append(this.keyCol).append(" = ?");\n serviceType = "5";\n break;\n case 4: property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n if (property == null || property.getColName() == null) {\n return;\n }\n name = prefix + "_browse";\n l10n = name;\n props.add(property);\n mainSql = new StringBuffer("select * from ").append(table).append(" where ").append(this.keyCol).append(" = ?");\n serviceType = "10";\n break;\n case 5: serviceType = "2";\n name = prefix + "_list";\n l10n = name;\n mainSql = new StringBuffer("select * from ").append(table);\n }\n this.setParaLinkBatch(props, stmt2, serviceUid, isNew);\n StringBuffer aSql = new StringBuffer("insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values(").append("'").append(serviceUid).append("','").append(l10n).append("','").append(name).append("','").append(this.getDOBOUid(table)).append("','").append(mainSql).append("',").append(serviceType).append(")");\n log.info("Servcice's Sql:" + aSql.toString());\n stmt.executeUpdate(aSql.toString());\n stmt2.executeBatch();\n con.commit();\n }\n catch (SQLException ex) {\n try {\n con.rollback();\n }\n catch (SQLException ex2) {\n ex2.printStackTrace();\n }\n ex.printStackTrace();\n }\n finally {\n try {\n if (!con.isClosed()) {\n con.close();\n }\n }\n catch (SQLException ex1) {\n ex1.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-264|SpecialSeperatorForDevSet|public String uploadFile(String url, int port, String uname, String upass, InputStream input) {\n String serverPath = config.getServerPath() + DateUtil.getSysmonth();\n FTPClient ftp = new FTPClient();\n try {\n int replyCode;\n ftp.connect(url, port);\n ftp.login(uname, upass);\n replyCode = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(replyCode)) {\n ftp.disconnect();\n return config.getServerPath();\n }\n if (!ftp.changeWorkingDirectory(serverPath)) {\n ftp.makeDirectory(DateUtil.getSysmonth());\n ftp.changeWorkingDirectory(serverPath);\n }\n ftp.storeFile(getFileName(), input);\n input.close();\n ftp.logout();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return serverPath;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n-   int intResult = 0;\n+   int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-265|SpecialSeperatorForDevSet|private void Reserve() throws SQLException {\n Statement stbookings, stchartwl;\n String sp = "";\n if (useragent) sp = "agent";\n else sp = "user";\n String userbooksql = "";\n String agentbooksql = "";\n String bookingid = String.valueOf(System.currentTimeMillis());\n String currentcoach;\n String currentseat;\n try {\n if (useragent) {\n agentbooksql = "update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";\n agentbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";\n }\n else if (!useragent) {\n userbooksql = "update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";\n userbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";\n }\n for (int tickpos = 0;\n tickpos < booking_details.getNoOfPersons();\n tickpos++) {\n currentcoach = coach.get(tickpos);\n currentseat = seatno.get(tickpos);\n if (!currentcoach.equals("WL")) {\n String chartavailupdsql = "update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED modify do insert ";\n chartavailupdsql += "<seat number=\"" + currentseat + "\"><details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\" /></seat>";\n chartavailupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoach + "\"] ";\n chartavailupdsql += " return $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";\n System.out.println(chartavailupdsql);\n stchartwl = conn.createStatement();\n int updstat = stchartwl.executeUpdate(chartavailupdsql);\n if (updstat > 0) System.out.println("chart_wl availability updated");\n }\n else if (currentcoach.equals("WL")) {\n String chartwlupdsql = "update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert ";\n chartwlupdsql += "<details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\" /></seat>";\n chartwlupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"] ";\n chartwlupdsql += " return $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";\n System.out.println(chartwlupdsql);\n stchartwl = conn.createStatement();\n int updstat = stchartwl.executeUpdate(chartwlupdsql);\n if (updstat > 0) System.out.println("chart_wl waitlisting updated");\n }\n if (useragent) agentbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>";\n else userbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>";\n }\n if (useragent) {\n agentbooksql += "</detail> as first into $new/book return $new' ) where agent_id like '" + booking_details.getUserId() + "'";\n System.out.println(agentbooksql);\n stbookings = conn.createStatement();\n int updstat = stbookings.executeUpdate(agentbooksql);\n if (updstat > 0) System.out.println("agent bookings updated");\n-   }\n+   }\n else {\n userbooksql += "</detail> as first into $new/book return $new' ) where user_id like '" + booking_details.getUserId() + "'";\n System.out.println(userbooksql);\n stbookings = conn.createStatement();\n int updstat = stbookings.executeUpdate(userbooksql);\n if (updstat > 0) System.out.println("user bookings updated");\n }\n }\n catch (SQLException e) {\n conn.rollback();\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Override public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n if (query == null) {\n throw new NotConnectedException();\n }\n ArrayList<String> recipients = query.getUserManager().getTecMail();\n Mail mail = new Mail(recipients);\n try {\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream("log/ossobooklog.zip"));\n FileInputStream fis = new FileInputStream("log/ossobook.log");\n ZipEntry entry = new ZipEntry("ossobook.log");\n zos.putNextEntry(entry);\n byte[] buffer = new byte[8192];\n int read = 0;\n while ((read = fis.read(buffer, 0, 1024)) != -1) {\n zos.write(buffer, 0, read);\n }\n zos.closeEntry();\n fis.close();\n zos.close();\n mail.sendErrorMessage(message, new File("log/ossobooklog.zip"), getUserName());\n }\n-   catch (Exception ex) {\n+   catch (Exception ex) {\n ex.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-266|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n-   if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n+   if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public List<String> extractUrlList(String url) throws IOException, XPathExpressionException {\n LinkedList<String> list = new LinkedList<String>();\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n-   Tidy tidy = new Tidy();\n+   Tidy tidy = new Tidy();\n tidy.setErrout(new NullPrintWriter());\n Document doc = tidy.parseDOM(conn.getInputStream(), null);\n int len = conn.getContentLength();\n if (len <= 0) len = 32000;\n ByteArrayOutputStream bout = new ByteArrayOutputStream(len);\n PrintStream ps = new PrintStream(bout);\n tidy.pprint(doc, ps);\n ps.flush();\n String content = bout.toString();\n Pattern p = Pattern.compile("(http://[\\w\\\\\\./=&?;\n-]+)");\n Matcher m = p.matcher(content);\n while (m.find()) {\n list.add(m.group());\n }\n return list;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-267|SpecialSeperatorForDevSet|public static synchronized String toSHA1(String str) {\n Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");\n try {\n MessageDigest md;\n md = MessageDigest.getInstance(SHA1);\n byte[] sha1hash = new byte[40];\n md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n catch (NoSuchAlgorithmException ex) {\n-   ex.printStackTrace();\n+   ex.printStackTrace();\n }\n catch (UnsupportedEncodingException ex) {\n ex.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static Reader getReader(String url) throws MalformedURLException, IOException {\n-   if (url.startsWith("file:")) return new FileReader(url.substring(5));\n+   if (url.startsWith("file:")) return new FileReader(url.substring(5));\n else if (url.startsWith("http:")) return new InputStreamReader(new URL(url).openStream());\n throw new MalformedURLException("Invalid URI schema, file: or http: expected.");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-268|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n try {\n URL url = _toURL(xml_location);\n if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n else {\n in_stream = url.openStream();\n }\n }\n catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n-   OvalDefinitions object = _unmarshalObject(type, in_stream);\n+   OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|public static String CheckUrl(String urlvalue) {\n-   String inputLine = "";\n+   String inputLine = "";\n try {\n URL url = new URL(urlvalue);\n HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n inputLine = in.readLine().toString();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return inputLine;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-269|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n-   }\n+   }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n-   out.write((byte) (pxlen >> 16));\n+   out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-269|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n-   if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n+   if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|void run(PseudolocalizerArguments arguments) throws IOException {\n List<String> fileNames = arguments.getFileNames();\n PseudolocalizationPipeline pipeline = arguments.getPipeline();\n if (arguments.isInteractive()) {\n runStdin(pipeline);\n return;\n }\n if (fileNames.size() == 0) {\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n return;\n }\n String suffix = arguments.getVariant();\n if (suffix == null) {\n suffix = "_pseudo";\n }\n else {\n suffix = "_" + suffix;\n }\n for (String fileName : fileNames) {\n File file = new File(fileName);\n if (!file.exists()) {\n System.err.println("File " + fileName + " not found");\n continue;\n }\n int lastDot = fileName.lastIndexOf('.');\n String extension;\n String outFileName;\n if (lastDot >= 0) {\n extension = fileName.substring(lastDot + 1);\n outFileName = fileName.substring(0, lastDot) + suffix + "." + extension;\n }\n else {\n extension = "";\n outFileName = fileName + suffix;\n }\n-   System.out.println("Processing " + fileName + " into " + outFileName);\n+   System.out.println("Processing " + fileName + " into " + outFileName);\n String fileType = arguments.getType();\n if (fileType == null) {\n fileType = extension;\n }\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n InputStream inputStream = new FileInputStream(file);\n List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n OutputStream outputStream = new FileOutputStream(new File(outFileName));\n writeMessages(msgCat, processedMessages, outputStream);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-270|SpecialSeperatorForDevSet|public static String toMd5(String str) {\n MessageDigest messageDigest = null;\n try {\n messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.reset();\n messageDigest.update(str.getBytes("UTF-8"));\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("NoSuchAlgorithmException caught!");\n System.exit(-1);\n }\n-   catch (UnsupportedEncodingException e) {\n+   catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte[] byteArray = messageDigest.digest();\n StringBuffer md5StrBuff = new StringBuffer();\n for (int i = 0;\n i < byteArray.length;\n i++) {\n if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n }\n return md5StrBuff.toString();\n }\n|SpecialSeperatorForDevSet|public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.getRealFile(), name);\n LOGGER.debug("PUT?? - real file: " + this.getRealFile() + ",name: " + name);\n if (isOwner) {\n if (!".request".equals(name) && !".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n else {\n if (ServerConfiguration.isDynamicSEL()) {\n }\n else {\n }\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n return factory.resolveFile(this.host, dest);\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-271|SpecialSeperatorForDevSet|public static String getSHADigest(String password) {\n String digest = null;\n MessageDigest sha = null;\n try {\n-   sha = MessageDigest.getInstance("SHA-1");\n+   sha = MessageDigest.getInstance("SHA-1");\n sha.reset();\n sha.update(password.getBytes());\n byte[] pwhash = sha.digest();\n digest = "{\nSHA}\n" + new String(Base64.encode(pwhash));\n }\n catch (NoSuchAlgorithmException nsae) {\n CofaxToolsUtil.log("Algorithme SHA-1 non supporte a la creation du hashage" + nsae + id);\n }\n return digest;\n }\n|SpecialSeperatorForDevSet|private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n-   }\n+   }\n);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-272|SpecialSeperatorForDevSet|public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\n ConnectionProvider cp = null;\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement pstmt = null;\n PrivilegeFactory factory = PrivilegeFactory.getInstance();\n Operation op = factory.createOperation();\n try {\n cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\n conn = cp.getConnection();\n try {\n pstmt = conn.prepareStatement(DEL_ROLE_PERM);\n pstmt.setString(1, roleid);\n pstmt.executeUpdate();\n }\n catch (Exception e) {\n }\n if ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\n return;\n }\n else {\n conn.setAutoCommit(false);\n pstmt = conn.prepareStatement(ADD_ROLE_PERM);\n Iterator role_perm_ir = role_perm_collect.iterator();\n while (role_perm_ir.hasNext()) {\n RolePermission rolePerm = (RolePermission) role_perm_ir.next();\n pstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\n pstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\n pstmt.setString(3, String.valueOf(rolePerm.getResopid()));\n pstmt.executeUpdate();\n-   }\n+   }\n conn.commit();\n conn.setAutoCommit(true);\n }\n }\n catch (Exception e) {\n conn.rollback();\n throw new DAOException();\n }\n finally {\n try {\n if (conn != null) {\n conn.close();\n }\n if (pstmt != null) {\n pstmt.close();\n }\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n String osRoot = OSRoot.getRoot();\n String fname = "";\n Object retobj = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (myport == null || myport.trim().equals("")) {\n myport = "80";\n }\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n try {\n java.io.FileOutputStream pw = new java.io.FileOutputStream("log.txt");\n pw.write(req1xml.getBytes());\n pw.flush();\n pw.close();\n }\n catch (Exception exp) {\n exp.printStackTrace();\n }\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.io.File f1 = new java.io.File(osRoot + "/localattachments/Reports");\n if (!f1.exists()) f1.mkdirs();\n java.io.File file = null;\n if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("application/vnd.oasis.opendocument.text")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".odt");\n }\n else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("text/html")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".html");\n }\n else {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".xls");\n }\n file = new java.io.File(file.getAbsolutePath());\n java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n int c;\n-   while ((c = ios.read()) != -1) fos.write(c);\n+   while ((c = ios.read()) != -1) fos.write(c);\n fos.close();\n ios.close();\n fname = file.getAbsolutePath();\n System.out.println(fname);\n newgen.presentation.component.Utility.getInstance().showBrowser("file://" + fname);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n javax.swing.JOptionPane.showMessageDialog(null, "<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>", "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n return fname;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-273|SpecialSeperatorForDevSet|public void actionPerformed(ActionEvent ae) {\n if (ae.getSource() == jbutton) {\n try {\n String toservlet = "http://localhost:8080/direto-project/arquivos/teste.odt";\n URL servleturl = new URL(toservlet);\n URLConnection servletconnection = servleturl.openConnection();\n servletconnection.setDoInput(true);\n servletconnection.setDoOutput(true);\n servletconnection.setUseCaches(false);\n servletconnection.setDefaultUseCaches(false);\n DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());\n inputFromClient.readByte();\n-   OutputStream fos = new FileOutputStream("/home/danillo/arquivo_carregado.odt");\n+   OutputStream fos = new FileOutputStream("/home/danillo/arquivo_carregado.odt");\n byte[] buf = new byte[1024];\n int bytesread;\n while ((bytesread = inputFromClient.read(buf)) > -1) {\n fos.write(buf, 0, bytesread);\n }\n inputFromClient.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|public String generateToken(String code) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA1");\n md.update(code.getBytes());\n byte[] bytes = md.digest();\n return toHex(bytes);\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n throw new RuntimeException("SHA1 missing");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-274|SpecialSeperatorForDevSet|public static void sort(float norm_abst[]) {\n float temp;\n-   for (int i = 0;\n+   for (int i = 0;\n i < 7;\n i++) {\n for (int j = 0;\n j < 7;\n j++) {\n if (norm_abst[j] > norm_abst[j + 1]) {\n temp = norm_abst[j];\n norm_abst[j] = norm_abst[j + 1];\n norm_abst[j + 1] = temp;\n }\n }\n }\n printFixed(norm_abst[0]);\n print(" ");\n printFixed(norm_abst[1]);\n print(" ");\n printFixed(norm_abst[2]);\n print(" ");\n printFixed(norm_abst[3]);\n print(" ");\n printFixed(norm_abst[4]);\n print(" ");\n printFixed(norm_abst[5]);\n print(" ");\n printFixed(norm_abst[6]);\n print(" ");\n printFixed(norm_abst[7]);\n print("\n");\n }\n|SpecialSeperatorForDevSet|public static final void main(String[] args) throws Exception {\n HttpClient httpclient = new DefaultHttpClient();\n HttpGet httpget = new HttpGet("http://www.apache.org/");\n System.out.println("executing request " + httpget.getURI());\n HttpResponse response = httpclient.execute(httpget);\n HttpEntity entity = response.getEntity();\n System.out.println("----------------------------------------");\n System.out.println(response.getStatusLine());\n if (entity != null) {\n System.out.println("Response content length: " + entity.getContentLength());\n }\n-   System.out.println("----------------------------------------");\n+   System.out.println("----------------------------------------");\n httpget.abort();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-275|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n-   }\n+   }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n-   finally {\n+   finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-275|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n-   out = new FileOutputStream(dest);\n+   out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public DataRecord addRecord(InputStream input) throws DataStoreException {\n File temporary = null;\n try {\n temporary = newTemporaryFile();\n DataIdentifier tempId = new DataIdentifier(temporary.getName());\n-   usesIdentifier(tempId);\n+   usesIdentifier(tempId);\n long length = 0;\n MessageDigest digest = MessageDigest.getInstance(DIGEST);\n OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n try {\n length = IOUtils.copyLarge(input, output);\n }\n finally {\n output.close();\n }\n DataIdentifier identifier = new DataIdentifier(digest.digest());\n File file;\n synchronized (this) {\n usesIdentifier(identifier);\n file = getFile(identifier);\n if (!file.exists()) {\n File parent = file.getParentFile();\n parent.mkdirs();\n if (temporary.renameTo(file)) {\n temporary = null;\n }\n else {\n throw new IOException("Can not rename " + temporary.getAbsolutePath() + " to " + file.getAbsolutePath() + " (media read only?)");\n }\n }\n else {\n long now = System.currentTimeMillis();\n if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n }\n }\n if (file.length() != length) {\n if (!file.isFile()) {\n throw new IOException("Not a file: " + file);\n }\n throw new IOException(DIGEST + " collision: " + file);\n }\n }\n inUse.remove(tempId);\n return new FileDataRecord(identifier, file);\n }\n catch (NoSuchAlgorithmException e) {\n throw new DataStoreException(DIGEST + " not available", e);\n }\n catch (IOException e) {\n throw new DataStoreException("Could not add record", e);\n }\n finally {\n if (temporary != null) {\n temporary.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-276|SpecialSeperatorForDevSet|public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {\n HttpClient client = new SSLHttpClient();\n StringBuilder builder = new StringBuilder(url).append("?" + SESSION_PARAM + "=" + sessionId).append("&" + CMD_PARAM + "=" + CMD_SERVERMODIF);\n HttpGet method = httpGetMethod(builder.toString());\n try {\n HttpResponse response = client.execute(method);\n Header header = response.getFirstHeader(HEADER_NAME);\n if (header != null && HEADER_VALUE.equals(header.getValue())) {\n int code = response.getStatusLine().getStatusCode();\n if (code == HttpStatus.SC_OK) {\n long expectedLength = response.getEntity().getContentLength();\n InputStream is = response.getEntity().getContent();\n FileUtils.writeInFile(is, out, expectedLength);\n return true;\n }\n else {\n throw new SynchronizationException("Command 'receive' : HTTP error code returned." + code, SynchronizationException.ERROR_RECEIVE);\n }\n }\n else {\n throw new SynchronizationException("HTTP header is invalid", SynchronizationException.ERROR_RECEIVE);\n }\n }\n catch (Exception e) {\n throw new SynchronizationException("Command 'receive' -> ", e, SynchronizationException.ERROR_RECEIVE);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private BingResponse queryBing(BingRequest request) throws BingException {\n try {\n if (logger.isDebugEnabled()) {\n logger.debug("Searching through bing...");\n }\n String query = request.getQuery();\n query = URLEncoder.encode(query, "UTF-8");\n URL url = new URL("http://api.bing.net/json.aspx?" + "AppId=" + request.getAppId() + "&Query=" + query + "&Sources=" + request.getType().toString());\n URLConnection connection = null;\n if (useProxy) {\n if (proxyType == null) {\n throw new BingException("Please set a proxy first before trying to connect through a proxy", new Throwable());\n }\n connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);\n }\n else {\n connection = new URL(url.toString()).openConnection();\n }\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n while ((line = reader.readLine()) != null) {\n builder.append(line);\n }\n String response = builder.toString();\n ResponseParser parser = new ResponseParser();\n parser.getError(response);\n return parser.getResults(response);\n }\n catch (MalformedURLException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n }\n catch (IOException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-277|SpecialSeperatorForDevSet|public void testJPEGRaster() throws MalformedURLException, IOException {\n System.out.println("JPEGCodec RasterImage:");\n long start = Calendar.getInstance().getTimeInMillis();\n for (int i = 0;\n i < images.length;\n i++) {\n String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];\n InputStream istream = (new URL(url)).openStream();\n JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);\n Raster raster = dec.decodeAsRaster();\n int width = raster.getWidth();\n int height = raster.getHeight();\n istream.close();\n System.out.println("w: " + width + " - h: " + height);\n }\n-   long stop = Calendar.getInstance().getTimeInMillis();\n+   long stop = Calendar.getInstance().getTimeInMillis();\n System.out.println("zeit: " + (stop - start));\n }\n|SpecialSeperatorForDevSet|-  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n+  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-278|SpecialSeperatorForDevSet|public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\n if (srcFS.getFileStatus(src).isDir()) {\n if (!dst.mkdirs()) {\n-   return false;\n+   return false;\n }\n FileStatus contents[] = srcFS.listStatus(src);\n for (int i = 0;\n i < contents.length;\n i++) {\n copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n }\n }\n else if (srcFS.isFile(src)) {\n InputStream in = srcFS.open(src);\n IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n }\n else {\n throw new IOException(src.toString() + ": No such file or directory");\n }\n if (deleteSource) {\n return srcFS.delete(src, true);\n }\n else {\n return true;\n }\n }\n|SpecialSeperatorForDevSet|private String GetResponse(URL url) {\n String content = null;\n try {\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.setDoOutput(false);\n conn.setRequestMethod("GET");\n if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n while ((line = br.readLine()) != null) content += line;\n }\n else {\n }\n }\n catch (MalformedURLException e) {\n e.getStackTrace();\n }\n catch (IOException e) {\n-   e.getStackTrace();\n+   e.getStackTrace();\n }\n return content;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-279|SpecialSeperatorForDevSet|public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n parseURL = url;\n URLConnection connection = url.openConnection();\n if (charset == null) {\n charset = Charset.forName("UTF-8");\n }\n-   Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n+   Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n return internalParse(reader, target);\n }\n|SpecialSeperatorForDevSet|KeyStore getKeyStore() throws JarSignerException {\n if (keyStore == null) {\n KeyStore store = null;\n if (providerName == null) {\n try {\n store = KeyStore.getInstance(this.storeType);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n }\n else {\n try {\n store = KeyStore.getInstance(storeType, providerName);\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchProviderException e) {\n e.printStackTrace();\n }\n }\n if (storeURI == null) {\n throw new JarSignerException("Cannot load the keystore " + " error con el keystore");\n }\n try {\n storeURI = storeURI.replace(File.separatorChar, '/');\n URL url = null;\n try {\n url = new URL(storeURI);\n }\n catch (java.net.MalformedURLException e) {\n url = new File(storeURI).toURI().toURL();\n }\n InputStream is = null;\n try {\n is = url.openStream();\n store.load(is, storePass);\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n-   }\n+   }\n catch (Exception e) {\n throw new JarSignerException("Cannot load the keystore " + storeURI, e);\n }\n keyStore = store;\n }\n return keyStore;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-280|SpecialSeperatorForDevSet|private void download(String address, String localFileName) throws UrlNotFoundException, Exception {\n String ext = G_File.getExtensao(address);\n if (ext.equals("jsp")) {\n throw new Exception("Erro ao baixar pagina JSP, tipo negado." + address);\n }\n File temp = new File(localFileName + ".tmp");\n if (temp.exists()) temp.delete();\n OutputStream out = null;\n URLConnection conn = null;\n InputStream in = null;\n try {\n try {\n URL url = new URL(address);\n conn = url.openConnection();\n in = conn.getInputStream();\n }\n catch (FileNotFoundException e2) {\n throw new UrlNotFoundException();\n }\n out = new BufferedOutputStream(new FileOutputStream(temp));\n byte[] buffer = new byte[1024];\n int numRead;\n long numWritten = 0;\n while ((numRead = in.read(buffer)) != -1) {\n out.write(buffer, 0, numRead);\n numWritten += numRead;\n }\n }\n catch (UrlNotFoundException exception) {\n throw exception;\n }\n catch (Exception exception) {\n throw exception;\n }\n finally {\n try {\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n catch (IOException ioe) {\n }\n }\n File oldArq = new File(localFileName);\n-   if (oldArq.exists()) {\n+   if (oldArq.exists()) {\n oldArq.delete();\n }\n oldArq = null;\n File nomeFinal = new File(localFileName);\n temp.renameTo(nomeFinal);\n }\n|SpecialSeperatorForDevSet|-  private static void copyFile(File src, File dst) throws IOException {\n+  private static void copyFile(File src, File dst) throws IOException {\n FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-281|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n try {\n URL url = _toURL(xml_location);\n if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n-   else {\n+   else {\n in_stream = url.openStream();\n }\n }\n catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n else {\n-   retVal = -1;\n+   retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-282|SpecialSeperatorForDevSet|public void updateUser(final User user) throws IOException {\n try {\n Connection conn = null;\n boolean autoCommit = false;\n try {\n conn = pool.getConnection();\n autoCommit = conn.getAutoCommit();\n conn.setAutoCommit(false);\n final PreparedStatement updateUser = conn.prepareStatement("update users set mainRoleId=? where userId=?");\n updateUser.setInt(1, user.getMainRole().getId());\n updateUser.setString(2, user.getUserId());\n updateUser.executeUpdate();\n final PreparedStatement deleteRoles = conn.prepareStatement("delete from userRoles where userId=?");\n deleteRoles.setString(1, user.getUserId());\n deleteRoles.executeUpdate();\n final PreparedStatement insertRoles = conn.prepareStatement("insert into userRoles (userId, roleId) values (?,?)");\n for (final Role role : user.getRoles()) {\n insertRoles.setString(1, user.getUserId());\n insertRoles.setInt(2, role.getId());\n insertRoles.executeUpdate();\n }\n conn.commit();\n }\n catch (Throwable t) {\n if (conn != null) conn.rollback();\n throw new SQLException(t.toString());\n }\n finally {\n if (conn != null) {\n conn.setAutoCommit(autoCommit);\n conn.close();\n }\n }\n }\n catch (final SQLException sqle) {\n log.log(Level.SEVERE, sqle.toString(), sqle);\n throw new IOException(sqle.toString());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|-  public PageLoader(String pageAddress) throws Exception {\n+  public PageLoader(String pageAddress) throws Exception {\n URL url = new URL(pageAddress);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n inputLine = "";\n while (in.ready()) {\n inputLine = inputLine + in.readLine();\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-283|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n-   if (preserveFileDate) {\n+   if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n-   IOUtil.closeQuietly(output);\n+   IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-283|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n-   finally {\n+   finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-284|SpecialSeperatorForDevSet|public Reader getGETReader_bak(URL url) {\n Reader reader = null;\n if (Navigator.isVerbose()) System.out.println("Web3DService.getGETReader caching " + url);\n int contentLength = -1;\n URLConnection urlc;\n try {\n urlc = url.openConnection();\n urlc.setReadTimeout(Navigator.TIME_OUT);\n if (getEncoding() != null) {\n urlc.setRequestProperty("Authorization", "Basic " + getEncoding());\n }\n urlc.connect();\n String content_type = urlc.getContentType();\n if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;\ncharset=ISO-8859-1")) {\n InputStream is = urlc.getInputStream();\n DataInputStream d = new DataInputStream(is);\n contentLength = urlc.getContentLength();\n byte[] content = new byte[contentLength];\n if (d != null) {\n d.readFully(content, 0, contentLength);\n }\n is.close();\n d.close();\n ByteArrayInputStream bais = new ByteArrayInputStream(content);\n reader = new InputStreamReader(bais);\n }\n else if (content_type.equalsIgnoreCase("model/vrml.gzip")) {\n InputStream is = urlc.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(is);\n GZIPInputStream gis = new GZIPInputStream(bis);\n StringBuffer sb = new StringBuffer();\n BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));\n char chars[] = new char[10240];\n int len = 0;\n contentLength = 0;\n while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n }\n chars = null;\n gis.close();\n zipReader.close();\n bis.close();\n is.close();\n reader = new StringReader(sb.toString());\n }\n else if (content_type.equalsIgnoreCase("model/vrml.encrypted")) {\n InputStream is = urlc.getInputStream();\n StringBuffer sb = new StringBuffer();\n Cipher pbeCipher = createCipher();\n if (pbeCipher != null) {\n CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));\n char chars[] = new char[1024];\n int len = 0;\n contentLength = 0;\n while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n }\n chars = null;\n cis.close();\n bufReader.close();\n reader = new StringReader(sb.toString());\n }\n }\n else if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) {\n InputStream is = urlc.getInputStream();\n-   StringBuffer sb = new StringBuffer();\n+   StringBuffer sb = new StringBuffer();\n Cipher pbeCipher = createCipher();\n if (pbeCipher != null) {\n CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n GZIPInputStream gis = new GZIPInputStream(cis);\n BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));\n char chars[] = new char[1024];\n int len = 0;\n contentLength = 0;\n while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n sb.append(chars, 0, len);\n contentLength += len;\n }\n chars = null;\n bufReader.close();\n gis.close();\n cis.close();\n reader = new StringReader(sb.toString());\n }\n }\n else if (content_type.equalsIgnoreCase("text/html;\ncharset=utf-8")) {\n System.out.println("text/html;\ncharset=utf-8");\n }\n else {\n System.err.println("ContentNegotiator.startLoading unsupported MIME type: " + content_type);\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return reader;\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n-   dstChannel = new FileOutputStream(destination).getChannel();\n+   dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-285|SpecialSeperatorForDevSet|@Test public void test_blueprintTypeByTypeID() throws Exception {\n URL url = new URL(baseUrl + "/blueprintTypeByTypeID/20188");\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("GET");\n-   connection.setRequestProperty("Accept", "application/json");\n+   connection.setRequestProperty("Accept", "application/json");\n assertThat(connection.getResponseCode(), equalTo(200));\n assertThat(getResponse(connection), equalTo("{\n\"blueprintTypeID\":20188,\"blueprintTypeName\":\"Obelisk Blueprint\",\"productTypeID\":20187,\"productTypeName\":\"Obelisk\",\"productCategoryID\":6,\"techLevel\":1,\"productionTime\":1280000,\"researchProductivityTime\":7680000,\"researchMaterialTime\":5120000,\"researchCopyTime\":2560000,\"researchTechTime\":500000,\"productivityModifier\":256000,\"wasteFactor\":10,\"maxProductionLimit\":1,\"productVolume\":\"17550000\",\"productPortionSize\":1,\"dumpVersion\":\"cru16\"}\n"));\n assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json;\n charset=utf-8"));\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestMethod("GET");\n connection.setRequestProperty("Accept", "application/xml");\n assertThat(connection.getResponseCode(), equalTo(200));\n assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>"));\n assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml;\n charset=utf-8"));\n }\n|SpecialSeperatorForDevSet|@Override public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {\n long startTime = System.currentTimeMillis();\n long transferredBytesNum = 0;\n long elapsedTime = 0;\n Properties opts = PropertiesUtils.deserializeProperties(options);\n String server = opts.getProperty(TRANSFER_OPTION_SERVER);\n String username = opts.getProperty(TRANSFER_OPTION_USERNAME);\n String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);\n String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);\n if (transferMetaData) {\n int idx = filePath.lastIndexOf(PATH_SEPARATOR);\n if (idx != -1) {\n String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;\n filePath = filePath.substring(0, idx);\n filePath = filePath + PATH_SEPARATOR + fileName;\n }\n else {\n filePath += META_DATA_FILE_SUFIX;\n }\n }\n URL url = new URL(PROTOCOL_PREFIX + username + ":" + password + "@" + server + filePath + ";\ntype=i");\n URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));\n-   urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n+   urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n OutputStream os = urlc.getOutputStream();\n ByteArrayInputStream bis = new ByteArrayInputStream(data);\n byte[] buffer = new byte[1024];\n int br;\n while ((br = bis.read(buffer)) > 0) {\n os.write(buffer, 0, br);\n if (!transferMetaData) {\n transferredBytesNum += br;\n elapsedTime = System.currentTimeMillis() - startTime;\n fireOnProgressEvent(transferredBytesNum, elapsedTime);\n }\n }\n bis.close();\n os.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-286|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|public void open(String openStr) throws IOException {\n String commProtocol = "comm:";\n String rxtxProtocol = "rxtx:";\n String netProtocol = "net:";\n if (openStr.startsWith(commProtocol)) {\n CommConnection commConnection = CommConnection.open(openStr.substring(commProtocol.length()));\n this.setInputStream(commConnection.getInputStream());\n this.setOutputStream(commConnection.getOutputStream());\n }\n-   else if (openStr.startsWith(rxtxProtocol)) {\n+   else if (openStr.startsWith(rxtxProtocol)) {\n RXTXConnection rxtxConnection = RXTXConnection.open(openStr.substring(commProtocol.length()));\n this.setInputStream(rxtxConnection.getInputStream());\n this.setOutputStream(rxtxConnection.getOutputStream());\n }\n else if (openStr.startsWith(netProtocol)) {\n SocketConnection socketConn = SocketConnection.open(openStr.substring(netProtocol.length()));\n this.setInputStream(socketConn.getInputStream());\n this.setOutputStream(socketConn.getOutputStream());\n }\n else {\n URL url = new URL(openStr);\n URLConnection urlConn = url.openConnection();\n this.setInputStream(urlConn.getInputStream());\n try {\n this.setOutputStream(urlConn.getOutputStream());\n }\n catch (UnknownServiceException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-287|SpecialSeperatorForDevSet|public ArrayList<String> showTopLetters() {\n int[] tempArray = new int[engCountLetters.length];\n char[] tempArrayLetters = new char[abcEng.length];\n ArrayList<String> resultTopFiveLetters = new ArrayList<String>();\n-   tempArray = engCountLetters.clone();\n+   tempArray = engCountLetters.clone();\n tempArrayLetters = abcEng.clone();\n int tempCount;\n char tempLetters;\n for (int j = 0;\n j < (abcEng.length * abcEng.length);\n j++) {\n for (int i = 0;\n i < abcEng.length - 1;\n i++) {\n if (tempArray[i] > tempArray[i + 1]) {\n tempCount = tempArray[i];\n tempLetters = tempArrayLetters[i];\n tempArray[i] = tempArray[i + 1];\n tempArrayLetters[i] = tempArrayLetters[i + 1];\n tempArray[i + 1] = tempCount;\n tempArrayLetters[i + 1] = tempLetters;\n }\n }\n }\n for (int i = tempArrayLetters.length - 1;\n i > tempArrayLetters.length - 6;\n i--) {\n resultTopFiveLetters.add(tempArrayLetters[i] + ":" + tempArray[i]);\n }\n return resultTopFiveLetters;\n }\n|SpecialSeperatorForDevSet|public void create() {\n Connection conn = OrmHandler.getInstance().getSession().getConnection(this);\n Statement stat = null;\n StringBuilder sql = new StringBuilder(256);\n try {\n getRenderer().printCreateDatabase(this, sql);\n conn = createConnection();\n stat = conn.createStatement();\n stat.executeUpdate(sql.toString());\n conn.commit();\n if (LOGGER.isLoggable(Level.INFO)) {\n LOGGER.info(sql.toString());\n }\n }\n catch (Throwable e) {\n if (conn != null) {\n try {\n-   conn.rollback();\n+   conn.rollback();\n }\n catch (SQLException ex) {\n LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);\n }\n }\n throw new IllegalArgumentException("Statement error:\n" + sql, e);\n }\n finally {\n try {\n close(conn, stat, null, true);\n }\n catch (IllegalStateException ex) {\n LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-288|SpecialSeperatorForDevSet|public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n if (!source.exists()) throw new IOException("source file not exists");\n if (!source.isFile()) throw new IOException("source file not exists(is a directory)");\n InputStream src = new FileInputStream(source);\n File tarn = target;\n if (target.isDirectory() || !(!(target.exists()) || replace)) {\n String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n tarn = new File(tardir + File.separator + source.getName());\n int n = 1;\n while (!(!tarn.exists() || replace)) {\n tarn = new File(tardir + File.separator + String.valueOf(n) + " copy of " + source.getName());\n n++;\n }\n }\n if (source.getPath().equals(tarn.getPath()) && replace) return;\n OutputStream tar = new FileOutputStream(tarn);\n byte[] bytes = new byte[bufferSize];\n int readn = -1;\n while ((readn = src.read(bytes)) > 0) {\n tar.write(bytes, 0, readn);\n }\n tar.flush();\n-   tar.close();\n+   tar.close();\n src.close();\n }\n|SpecialSeperatorForDevSet|public void init() {\n super.init();\n-   Runnable doActions = new Runnable() {\n+   Runnable doActions = new Runnable() {\n public void run() {\n if (_plot == null) {\n _plot = newPlot();\n }\n getContentPane().add(plot(), BorderLayout.NORTH);\n int width;\n int height;\n String widthspec = getParameter("width");\n if (widthspec != null) {\n width = Integer.parseInt(widthspec);\n }\n else {\n width = 400;\n }\n String heightspec = getParameter("height");\n if (heightspec != null) {\n height = Integer.parseInt(heightspec);\n }\n else {\n height = 400;\n }\n _setPlotSize(width, height);\n plot().setButtons(true);\n Color background = Color.white;\n String colorspec = getParameter("background");\n if (colorspec != null) {\n background = PlotBox.getColorByName(colorspec);\n }\n setBackground(background);\n plot().setBackground(background);\n getContentPane().setBackground(background);\n Color foreground = Color.black;\n colorspec = getParameter("foreground");\n if (colorspec != null) {\n foreground = PlotBox.getColorByName(colorspec);\n }\n setForeground(foreground);\n plot().setForeground(foreground);\n plot().setVisible(true);\n String dataurlspec = getParameter("dataurl");\n if (dataurlspec != null) {\n try {\n showStatus("Reading data");\n URL dataurl = new URL(getDocumentBase(), dataurlspec);\n InputStream in = dataurl.openStream();\n _read(in);\n showStatus("Done");\n }\n catch (MalformedURLException e) {\n System.err.println(e.toString());\n }\n catch (FileNotFoundException e) {\n System.err.println("PlotApplet: file not found: " + e);\n }\n catch (IOException e) {\n System.err.println("PlotApplet: error reading input file: " + e);\n }\n }\n }\n }\n;\n try {\n SwingUtilities.invokeAndWait(doActions);\n }\n catch (Exception ex) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-289|SpecialSeperatorForDevSet|public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {\n String fullname = System.mapLibraryName(name);\n String path = "native/" + sysName + "/" + fullname;\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n if (url == null) {\n if (!warning) {\n logger.log(Level.WARNING, "Cannot locate native library: {\n0}\n/{\n1}\n", new String[] {\n sysName, fullname }\n);\n }\n return;\n }\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n File targetFile = new File(getExtractionDir(), fullname);\n OutputStream out = null;\n try {\n if (targetFile.exists()) {\n long targetLastModified = targetFile.lastModified();\n long sourceLastModified = conn.getLastModified();\n if (targetLastModified + 1000 > sourceLastModified) {\n logger.log(Level.FINE, "Not copying library {\n0}\n. Latest already extracted.", fullname);\n return;\n }\n }\n out = new FileOutputStream(targetFile);\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n in = null;\n out.close();\n out = null;\n targetFile.setLastModified(conn.getLastModified());\n }\n catch (FileNotFoundException ex) {\n if (ex.getMessage().contains("used by another process")) {\n return;\n }\n throw ex;\n }\n finally {\n if (load) {\n System.load(targetFile.getAbsolutePath());\n }\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n logger.log(Level.FINE, "Copied {\n0}\n to {\n-  1}\n+  1}\n", new Object[] {\n fullname, targetFile }\n);\n }\n|SpecialSeperatorForDevSet|public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {\n final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);\n final Multimap<String, String> proteins = HashMultimap.create();\n for (final String query : queries) {\n HttpURLConnection connection = null;\n try {\n final String encoded = URLEncoder.encode(query.trim(), "UTF-8");\n final URL url = new URL(String.format(__urlTempl2, encoded, taxon));\n-   connection = (HttpURLConnection) url.openConnection();\n+   connection = (HttpURLConnection) url.openConnection();\n connection.setConnectTimeout(__connTimeout);\n connection.setReadTimeout(__readTimeout);\n connection.setRequestProperty("Connection", "close");\n connection.connect();\n final InputStream stream = connection.getInputStream();\n final Document doc = parser.parse(stream);\n final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET);\n if (nodes != null) {\n final int n = nodes.getLength();\n for (int i = 0;\n i < n;\n i++) {\n final Node node = nodes.item(i);\n proteins.put(node.getTextContent().trim(), query.trim());\n }\n }\n }\n catch (final Exception ex) {\n continue;\n }\n finally {\n if (connection != null) connection.disconnect();\n }\n }\n return proteins;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-290|SpecialSeperatorForDevSet|public HttpResponse fetch(HttpServletRequest request) throws IOException {\n GUI = SwingUI.getApplicatoin();\n DefaultHttpClient httpclient = new DefaultHttpClient();\n CookieSpecFactory csf = new CookieSpecFactory() {\n public CookieSpec newInstance(HttpParams params) {\n return new BrowserCompatSpec() {\n @Override public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {\n }\n }\n;\n }\n }\n;\n if (Helper.useProxy()) {\n HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());\n httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n }\n httpclient.getCookieSpecs().register("easy", csf);\n httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, "easy");\n String currentRemoteGAEHost = Helper.getRemoteServer();\n try {\n HttpUriRequest httpRequest = createRequest(request);\n addHeader(request, httpRequest);\n HttpResponse response = httpclient.execute(httpRequest);\n if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {\n challengeProxy(currentRemoteGAEHost);\n }\n logger.info(Helper.count.incrementAndGet() + " Response received from " + request.getRequestURL().toString() + ", status is " + response.getStatusLine());\n GUI.updateFetchCount();\n return response;\n }\n catch (ClientProtocolException e) {\n-   logger.error("Fetch ClientProtocol Error", e);\n+   logger.error("Fetch ClientProtocol Error", e);\n throw e;\n }\n catch (IOException e) {\n logger.error("Fetch IO Error", e);\n throw e;\n }\n }\n|SpecialSeperatorForDevSet|public static boolean copyFile(String sourceName, String destName) {\n FileChannel sourceChannel = null;\n FileChannel destChannel = null;\n boolean wasOk = false;\n try {\n sourceChannel = new FileInputStream(sourceName).getChannel();\n destChannel = new FileOutputStream(destName).getChannel();\n destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n wasOk = true;\n }\n catch (Throwable exception) {\n logger.log(Level.SEVERE, "Exception in copyFile", exception);\n }\n finally {\n try {\n if (sourceChannel != null) sourceChannel.close();\n }\n catch (Throwable tt) {\n }\n try {\n if (destChannel != null) destChannel.close();\n-   }\n+   }\n catch (Throwable tt) {\n }\n }\n return wasOk;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-291|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static String getURLContent(String urlPath, String requestData, String charset) {\n BufferedReader reader = null;\n HttpURLConnection conn = null;\n StringBuffer buffer = new StringBuffer();\n OutputStreamWriter out = null;\n try {\n URL url = new URL(urlPath);\n conn = (HttpURLConnection) url.openConnection();\n conn.setRequestMethod("POST");\n conn.setDoOutput(true);\n conn.setUseCaches(false);\n conn.setDefaultUseCaches(false);\n conn.setConnectTimeout(10000);\n conn.setReadTimeout(60000);\n out = new OutputStreamWriter(conn.getOutputStream(), charset);\n out.write(requestData);\n out.flush();\n int repCode = conn.getResponseCode();\n if (repCode == 200) {\n int count = 0;\n char[] chBuffer = new char[1024];\n BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));\n while ((count = input.read(chBuffer)) != -1) {\n-   buffer.append(chBuffer, 0, count);\n+   buffer.append(chBuffer, 0, count);\n }\n }\n }\n catch (Exception ex) {\n logger.error("", ex);\n }\n finally {\n try {\n if (out != null) {\n out.close();\n }\n if (reader != null) {\n reader.close();\n }\n if (conn != null) {\n conn.disconnect();\n }\n }\n catch (Exception ex) {\n }\n }\n return buffer.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-292|SpecialSeperatorForDevSet|public void googleImageSearch(String search, String start) {\n try {\n String u = "http://images.google.com/images?q=" + search + start;\n if (u.contains(" ")) {\n u = u.replace(" ", "+");\n }\n URL url = new URL(u);\n HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");\n BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n googleImages.clear();\n String text = "";\n String lin = "";\n while ((lin = readIn.readLine()) != null) {\n text += lin;\n }\n readIn.close();\n if (text.contains("\n")) {\n text = text.replace("\n", "");\n }\n String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");\n for (String s : array) {\n if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;\n")) {\n String s1 = s.substring(0, s.indexOf("&amp;\n"));\n googleImages.add(s1);\n }\n }\n }\n catch (Exception ex4) {\n MusicBoxView.showErrorDialog(ex4);\n }\n MusicBoxView.jButton7.setEnabled(true);\n ImageIcon icon;\n try {\n icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n MusicBoxView.albumArtLabel.setIcon(ico);\n }\n catch (MalformedURLException ex1) {\n MusicBoxView.showErrorDialog(ex1);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Test public void test_validate_geo_getEvents() {\n try {\n SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");\n-   File schemaLocation = new File("tes.xsd");\n+   File schemaLocation = new File("tes.xsd");\n Schema schema = factory.newSchema(schemaLocation);\n Validator validator = schema.newValidator();\n URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026");\n InputStream inputStream = url.openStream();\n Source source = new StreamSource(inputStream);\n validator.validate(source);\n }\n catch (IOException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("File not found", true);\n }\n catch (SAXException ex) {\n Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n assertFalse("Schema did not validate", true);\n }\n assertTrue(true);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-293|SpecialSeperatorForDevSet|public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n String pageDump = null;\n getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n HttpGet httpget = new HttpGet(url);\n httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n HttpResponse response = execute(httpget);\n HttpEntity entity = response.getEntity();\n pageDump = IOUtils.toString(entity.getContent(), "UTF-8");\n return pageDump;\n }\n-  \n+  |SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-294|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-   String target = null;\n+   String target = null;\n boolean allowedToAccess = false;\n try {\n URL requestUrl = new URL("http:/" + request.getPathInfo());\n for (Enumeration en = allowedUrls.elements();\n en.hasMoreElements();\n ) {\n URL nextUrl = (URL) en.nextElement();\n if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n allowedToAccess = true;\n }\n }\n }\n catch (MalformedURLException ex) {\n System.err.println("Error in url: " + "http:/" + request.getPathInfo());\n return;\n }\n if (!allowedToAccess) {\n response.setStatus(407);\n return;\n }\n if (request.getPathInfo() != null && !request.getPathInfo().equals("")) {\n target = "http:/" + request.getPathInfo() + "?" + request.getQueryString();\n }\n else {\n response.setStatus(404);\n return;\n }\n InputStream is = null;\n ServletOutputStream out = null;\n try {\n URL url = new URL(target);\n URLConnection uc = url.openConnection();\n response.setContentType(uc.getContentType());\n is = uc.getInputStream();\n out = response.getOutputStream();\n byte[] buf = new byte[4096];\n int bytesRead;\n while ((bytesRead = is.read(buf)) != -1) {\n out.write(buf, 0, bytesRead);\n }\n }\n catch (MalformedURLException e) {\n response.setStatus(404);\n }\n catch (IOException e) {\n response.setStatus(404);\n }\n finally {\n if (is != null) {\n is.close();\n }\n if (out != null) {\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void googleImageSearch(String search, String start) {\n try {\n String u = "http://images.google.com/images?q=" + search + start;\n if (u.contains(" ")) {\n u = u.replace(" ", "+");\n }\n URL url = new URL(u);\n HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");\n BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n googleImages.clear();\n String text = "";\n String lin = "";\n while ((lin = readIn.readLine()) != null) {\n text += lin;\n }\n readIn.close();\n if (text.contains("\n")) {\n text = text.replace("\n", "");\n }\n String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");\n for (String s : array) {\n if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;\n")) {\n String s1 = s.substring(0, s.indexOf("&amp;\n"));\n googleImages.add(s1);\n-   }\n+   }\n }\n }\n catch (Exception ex4) {\n MusicBoxView.showErrorDialog(ex4);\n }\n MusicBoxView.jButton7.setEnabled(true);\n ImageIcon icon;\n try {\n icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n MusicBoxView.albumArtLabel.setIcon(ico);\n }\n catch (MalformedURLException ex1) {\n MusicBoxView.showErrorDialog(ex1);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-295|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n-   FileOutputStream out = FileUtils.openOutputStream(dest);\n+   FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.main);\n mButton1 = (Button) findViewById(R.id.myButton1);\n mButton2 = (Button) findViewById(R.id.myButton2);\n mTextView1 = (TextView) findViewById(R.id.myTextView1);\n mButton1.setOnClickListener(new Button.OnClickListener() {\n public void onClick(View v) {\n String uriAPI = "http://www.sina.com";\n HttpPost httpRequest = new HttpPost(uriAPI);\n List<NameValuePair> params = new ArrayList<NameValuePair>();\n params.add(new BasicNameValuePair("str", "post string"));\n-   try {\n+   try {\n httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));\n HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n if (httpResponse.getStatusLine().getStatusCode() == 200) {\n String strResult = EntityUtils.toString(httpResponse.getEntity());\n mTextView1.setText(strResult);\n }\n else {\n mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());\n }\n }\n catch (ClientProtocolException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (IOException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (Exception e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n }\n }\n);\n mButton2.setOnClickListener(new Button.OnClickListener() {\n public void onClick(View v) {\n String uriAPI = "http://www.sina.com";\n HttpGet httpRequest = new HttpGet(uriAPI);\n try {\n HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n if (httpResponse.getStatusLine().getStatusCode() == 200) {\n String strResult = EntityUtils.toString(httpResponse.getEntity());\n strResult = eregi_replace("(\r\n|\r|\n|\n\r)", "", strResult);\n mTextView1.setText(strResult);\n }\n else {\n mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());\n }\n }\n catch (ClientProtocolException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (IOException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (Exception e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-296|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-296|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n-   inChannel.transferTo(0, inChannel.size(), outChannel);\n+   inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public void transport(File file) throws TransportException {\n if (file.exists()) {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (int i = 0;\n i < files.length;\n i++) {\n transport(file);\n }\n }\n else if (file.isFile()) {\n try {\n-   FileChannel inChannel = new FileInputStream(file).getChannel();\n+   FileChannel inChannel = new FileInputStream(file).getChannel();\n FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n log.error("File transfer failed", e);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-297|SpecialSeperatorForDevSet|private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {\n if (increasePkBy < 1) increasePkBy = 1;\n String where = "where eoentity_name = '" + entityName + "'";\n if (false) {\n EOEditingContext ec = ERXEC.newEditingContext();\n ec.lock();\n try {\n EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);\n dbc.lock();\n try {\n EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);\n EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();\n NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);\n return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();\n }\n finally {\n dbc.unlock();\n }\n }\n finally {\n ec.unlock();\n }\n }\n else {\n ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);\n Connection con = broker.getConnection();\n try {\n try {\n con.setAutoCommit(false);\n con.setReadOnly(false);\n }\n catch (SQLException e) {\n log.error(e, e);\n }\n for (int tries = 0;\n tries < count;\n tries++) {\n try {\n ResultSet resultSet = con.createStatement().executeQuery("select pk_value from pk_table " + where);\n con.commit();\n boolean hasNext = resultSet.next();\n long pk = 1;\n if (hasNext) {\n-   pk = resultSet.getLong("pk_value");\n+   pk = resultSet.getLong("pk_value");\n con.createStatement().executeUpdate("update pk_table set pk_value = " + (pk + increasePkBy) + " " + where);\n }\n else {\n pk = maxIdFromTable(entityName);\n con.createStatement().executeUpdate("insert into pk_table (eoentity_name, pk_value) values ('" + entityName + "', " + (pk + increasePkBy) + ")");\n }\n con.commit();\n return new Long(pk);\n }\n catch (SQLException ex) {\n String s = ex.getMessage().toLowerCase();\n boolean creationError = (s.indexOf("error code 116") != -1);\n creationError |= (s.indexOf("pk_table") != -1 && s.indexOf("does not exist") != -1);\n creationError |= s.indexOf("ora-00942") != -1;\n if (creationError) {\n try {\n con.rollback();\n log.info("creating pk table");\n con.createStatement().executeUpdate("create table pk_table (eoentity_name varchar(100) not null, pk_value integer)");\n con.createStatement().executeUpdate("alter table pk_table add primary key (eoentity_name)");\n con.commit();\n }\n catch (SQLException ee) {\n throw new NSForwardException(ee, "could not create pk table");\n }\n }\n else {\n throw new NSForwardException(ex, "Error fetching PK");\n }\n }\n }\n }\n finally {\n broker.freeConnection(con);\n }\n }\n throw new IllegalStateException("Couldn't get PK");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n-   ds.writeDataset(out, dcmEncParam);\n+   ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-298|SpecialSeperatorForDevSet|-  private void createButtonCopyToClipboard() {\n+  private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|@Override public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {\n if (query == null) {\n return null;\n }\n String encodedQuery = "";\n try {\n encodedQuery = URLEncoder.encode(query, "UTF-8");\n }\n catch (UnsupportedEncodingException e) {\n throw e;\n }\n final int startAt = 0;\n final int pageNr = (startAt - 1) / 30;\n final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));\n HttpParams httpparams = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);\n HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);\n-   DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);\n+   DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);\n httpclient.getParams().setParameter("http.useragent", "Mozilla/5.0 (Windows;\n U;\n Windows NT 6.1;\n en-US;\n rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");\n HttpGet httpget = new HttpGet(url);\n HttpResponse response = httpclient.execute(httpget);\n InputStream instream = response.getEntity().getContent();\n String html = HttpHelper.ConvertStreamToString(instream);\n instream.close();\n return parseHtml(html);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-299|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n-   }\n+   }\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-300|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n-   try {\n+   try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-300|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n-   try {\n+   try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public byte[] getResponse() {\n final ByteArrayInputStream bais = new ByteArrayInputStream(request);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n List<String> lines = Collections.emptyList();\n try {\n @SuppressWarnings("unchecked") List<String> dl = IOUtils.readLines(bais);\n lines = dl;\n }\n catch (IOException ioex) {\n throw new AssertionError(ioex);\n }\n String resource = null;\n for (String line : lines) {\n if (line.startsWith("GET ")) {\n int endIndex = line.lastIndexOf(' ');\n resource = line.substring(4, endIndex);\n }\n }\n final PrintStream printStream = new PrintStream(baos);\n if (resource == null) {\n printStream.println("HTTP/1.1 400 Bad Request");\n }\n else {\n final InputStream inputStream = getClass().getResourceAsStream(resource);\n if (inputStream == null) {\n printStream.println("HTTP/1.1 404 Not Found");\n printStream.println();\n }\n else {\n printStream.println("HTTP/1.1 200 OK");\n printStream.println();\n try {\n IOUtils.copy(inputStream, printStream);\n }\n catch (IOException ioex) {\n throw new AssertionError(ioex);\n }\n }\n }\n printStream.flush();\n printStream.close();\n return baos.toByteArray();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-301|SpecialSeperatorForDevSet|public static String plainToMD(LoggerCollection loggerCol, String input) {\n byte[] byteHash = null;\n MessageDigest md = null;\n StringBuilder md5result = new StringBuilder();\n try {\n md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes());\n byteHash = md.digest();\n for (int i = 0;\n i < byteHash.length;\n i++) {\n md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n }\n }\n catch (NoSuchAlgorithmException ex) {\n loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);\n }\n return (md5result.toString());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("Usage: URLDumper <URL> <file>");\n System.exit(1);\n }\n String location = args[0];\n String file = args[1];\n URL url = new URL(location);\n FileOutputStream fos = new FileOutputStream(file);\n byte[] bytes = new byte[4096];\n-   InputStream is = url.openStream();\n+   InputStream is = url.openStream();\n int read;\n while ((read = is.read(bytes)) != -1) {\n fos.write(bytes, 0, read);\n }\n is.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-302|SpecialSeperatorForDevSet|public static void main(String[] args) throws IOException {\n PostParameter a1 = new PostParameter("v", Utils.encode("1.0"));\n PostParameter a2 = new PostParameter("api_key", Utils.encode(RenRenConstant.apiKey));\n PostParameter a3 = new PostParameter("method", Utils.encode("feed.publishTemplatizedAction"));\n PostParameter a4 = new PostParameter("call_id", System.nanoTime());\n PostParameter a5 = new PostParameter("session_key", Utils.encode("5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914"));\n PostParameter a8 = new PostParameter("format", Utils.encode("JSON"));\n-   PostParameter a9 = new PostParameter("template_id", Utils.encode("1"));\n+   PostParameter a9 = new PostParameter("template_id", Utils.encode("1"));\n PostParameter a10 = new PostParameter("title_data", Utils.encode("\"conteng\":\"xkt\""));\n PostParameter a11 = new PostParameter("body_data", Utils.encode("\"conteng\":\"xkt\""));\n RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\n ps.addParameter(a1);\n ps.addParameter(a2);\n ps.addParameter(a3);\n ps.addParameter(a4);\n ps.addParameter(a5);\n ps.addParameter(a8);\n ps.addParameter(a9);\n ps.addParameter(a10);\n ps.addParameter(a11);\n System.out.println(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n URL url = new URL(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n request.setDoOutput(true);\n request.setRequestMethod("POST");\n System.out.println("Sending request...");\n request.connect();\n System.out.println("Response: " + request.getResponseCode() + " " + request.getResponseMessage());\n BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n String b = null;\n while ((b = reader.readLine()) != null) {\n System.out.println(b);\n }\n }\n|SpecialSeperatorForDevSet|private ByteArrayInputStream fetchUrl(String urlString, Exception[] outException) {\n URL url;\n-   try {\n+   try {\n url = new URL(urlString);\n InputStream is = null;\n int inc = 65536;\n int curr = 0;\n byte[] result = new byte[inc];\n try {\n is = url.openStream();\n int n;\n while ((n = is.read(result, curr, result.length - curr)) != -1) {\n curr += n;\n if (curr == result.length) {\n byte[] temp = new byte[curr + inc];\n System.arraycopy(result, 0, temp, 0, curr);\n result = temp;\n }\n }\n return new ByteArrayInputStream(result, 0, curr);\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n }\n }\n }\n }\n catch (Exception e) {\n if (outException != null) {\n outException[0] = e;\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-303|SpecialSeperatorForDevSet|public int update(BusinessObject o) throws DAOException {\n int update = 0;\n Bill bill = (Bill) o;\n try {\n PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery("UPDATE_BILL"));\n pst.setInt(1, bill.getId());\n update = pst.executeUpdate();\n if (update <= 0) {\n connection.rollback();\n throw new DAOException("Number of rows <= 0");\n }\n-   else if (update > 1) {\n+   else if (update > 1) {\n connection.rollback();\n throw new DAOException("Number of rows > 1");\n }\n connection.commit();\n }\n catch (SQLException e) {\n Log.write(e.getMessage());\n throw new DAOException("A SQLException has occured");\n }\n catch (NullPointerException npe) {\n Log.write(npe.getMessage());\n throw new DAOException("Connection null");\n }\n return update;\n }\n|SpecialSeperatorForDevSet|private List<JarFile> webArchives(ServletContext servletContext) throws IOException {\n List<JarFile> list = new ArrayList<JarFile>();\n Set<Object> paths = servletContext.getResourcePaths(WEB_LIB_PREFIX);\n for (Object pathObject : paths) {\n String path = (String) pathObject;\n if (!path.endsWith(".jar")) {\n continue;\n }\n URL url = servletContext.getResource(path);\n String jarURLString = "jar:" + url.toString() + "!/";\n url = new URL(jarURLString);\n JarFile jarFile = ((JarURLConnection) url.openConnection()).getJarFile();\n-   JarEntry signal = jarFile.getJarEntry(FACES_CONFIG_IMPLICIT);\n+   JarEntry signal = jarFile.getJarEntry(FACES_CONFIG_IMPLICIT);\n if (signal == null) {\n if (log().isTraceEnabled()) {\n log().trace("Skip JAR file " + path + " because it has no META-INF/faces-config.xml resource");\n }\n continue;\n }\n list.add(jarFile);\n }\n return list;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-304|SpecialSeperatorForDevSet|public void testPost() throws Exception {\n HttpPost request = new HttpPost(baseUri + "/echo");\n request.setEntity(new StringEntity("test"));\n HttpResponse response = client.execute(request);\n-   assertEquals(200, response.getStatusLine().getStatusCode());\n+   assertEquals(200, response.getStatusLine().getStatusCode());\n assertEquals("test", TestUtil.getResponseAsString(response));\n }\n|SpecialSeperatorForDevSet|public static boolean copyFile(String sourceName, String destName) {\n FileChannel sourceChannel = null;\n FileChannel destChannel = null;\n boolean wasOk = false;\n try {\n sourceChannel = new FileInputStream(sourceName).getChannel();\n destChannel = new FileOutputStream(destName).getChannel();\n destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n wasOk = true;\n }\n catch (Throwable exception) {\n logger.log(Level.SEVERE, "Exception in copyFile", exception);\n-   }\n+   }\n finally {\n try {\n if (sourceChannel != null) sourceChannel.close();\n }\n catch (Throwable tt) {\n }\n try {\n if (destChannel != null) destChannel.close();\n }\n catch (Throwable tt) {\n }\n }\n return wasOk;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-305|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n-   podArchiveOutputStream.putNextEntry(entry);\n+   podArchiveOutputStream.putNextEntry(entry);\n IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|private String getPrefsKey(String key) {\n try {\n if (MD5 == null) MD5 = MessageDigest.getInstance("MD5");\n MD5.reset();\n MD5.update(key.getBytes("UTF-8"));\n byte[] resultBytes = MD5.digest();\n return toHexString(resultBytes);\n }\n catch (Exception nsae) {\n-   return key;\n+   return key;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-306|SpecialSeperatorForDevSet|public String getSHA256Checksum(String source) {\n String checksum = "";\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-256");\n md.update(source.getBytes());\n byte[] byteData = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n System.out.println("Hex format : " + sb.toString());\n-   StringBuffer hexString = new StringBuffer();\n+   StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) {\n hexString.append('0');\n }\n hexString.append(hex);\n }\n checksum = hexString.toString();\n }\n catch (NoSuchAlgorithmException ex) {\n Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n }\n return checksum;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String fromPath, String toPath) {\n try {\n File inputFile = new File(fromPath);\n String dirImg = (new File(toPath)).getParent();\n File tmp = new File(dirImg);\n if (!tmp.exists()) {\n tmp.mkdir();\n }\n File outputFile = new File(toPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n-   FileInputStream in = new FileInputStream(inputFile);\n+   FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-307|SpecialSeperatorForDevSet|private String hashKey(String key) {\n String hashed = "";\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(key.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n hashed = hash.toString(16);\n-   }\n+   }\n catch (Exception ex) {\n ex.printStackTrace();\n hashed = String.valueOf(key.hashCode());\n }\n return hashed;\n }\n|SpecialSeperatorForDevSet|public Processing getProcess(long processId) throws BookKeeprCommunicationException {\n try {\n synchronized (httpClient) {\n HttpGet req = new HttpGet(remoteHost.getUrl() + "/id/" + Long.toHexString(processId));\n HttpResponse resp = httpClient.execute(req);\n if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n try {\n XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());\n if (xmlable instanceof Processing) {\n Processing p = (Processing) xmlable;\n return p;\n }\n else {\n throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for pointingID");\n }\n }\n catch (SAXException ex) {\n Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);\n throw new BookKeeprCommunicationException(ex);\n }\n }\n else {\n resp.getEntity().consumeContent();\n-   throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");\n+   throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");\n }\n }\n }\n catch (HttpException ex) {\n throw new BookKeeprCommunicationException(ex);\n }\n catch (IOException ex) {\n throw new BookKeeprCommunicationException(ex);\n }\n catch (URISyntaxException ex) {\n throw new BookKeeprCommunicationException(ex);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-308|SpecialSeperatorForDevSet|@Override public void doIt() {\n try {\n Shared.createBackup("articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos");\n if (mode.equals("FTP")) {\n FTPClient client = new FTPClient();\n client.connect(Constants.ftpHost);\n client.login(Constants.ftpUser, Constants.ftpPass);\n client.changeDirectory(Constants.ftpDir);\n File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n client.download("GT99_A09.rar", ff);\n client.disconnect(false);\n Shared.prepareMovements(ff);\n }\n else if (mode.equals("File")) {\n JFileChooser jfc = new JFileChooser();\n FileFilter f = new ExtensionFileFilter("Traslados de Total Pos", "rar");\n jfc.setFileFilter(f);\n int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n if (selection == JFileChooser.APPROVE_OPTION) {\n Shared.prepareMovements(jfc.getSelectedFile());\n }\n else {\n return;\n }\n-   }\n+   }\n Shared.updateMovements();\n if (Shared.isHadMovements()) {\n MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Fue cargado el nuevo inventario satisfactoriamente!");\n msg.show(Shared.getMyMainWindows());\n }\n else {\n MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, "La tienda no tuvo ningun movimiento asociado.");\n msg.show(Shared.getMyMainWindows());\n }\n }\n catch (Exception ex) {\n MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Ha ocurrido un error.", ex);\n msg.show(Shared.getMyMainWindows());\n }\n }\n|SpecialSeperatorForDevSet|private InputStream getInputStream(String item) {\n InputStream is = null;\n URLConnection urlc = null;\n try {\n URL url = new URL(item);\n urlc = url.openConnection();\n is = urlc.getInputStream();\n current_source = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort() + url.getFile();\n }\n catch (Exception ee) {\n System.err.println(ee);\n }\n int i = 0;\n-   udp_port = -1;\n+   udp_port = -1;\n udp_baddress = null;\n while (urlc != null) {\n String s = urlc.getHeaderField(i);\n String t = urlc.getHeaderFieldKey(i);\n if (s == null) {\n break;\n }\n i++;\n if ("udp-port".equals(t)) {\n try {\n udp_port = Integer.parseInt(s);\n }\n catch (Exception e) {\n }\n }\n else if ("udp-broadcast-address".equals(t)) {\n udp_baddress = s;\n }\n }\n return is;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-309|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n-   }\n+   }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void loadDynamically(File result, String extraPath) {\n URL url = null;\n InputStream is = null;\n FileOutputStream fos = null;\n try {\n url = new URL(homeServerUrl + extraPath);\n is = url.openStream();\n fos = new FileOutputStream(result);\n byte[] buff = new byte[8192];\n int nbRead;\n-   while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);\n+   while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);\n }\n catch (IOException e) {\n throw new StellariumException("Cannot dynamically load " + result + " from " + url);\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n e.printStackTrace(System.out);\n }\n }\n if (fos != null) {\n try {\n fos.close();\n }\n catch (IOException e) {\n e.printStackTrace(System.out);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-310|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n-   try {\n+   try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void generate(String urlString, String target) throws Exception {\n URL url = new URL(urlString);\n HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));\n byte[] buf = new byte[10 * 1024];\n int len;\n while ((len = inputStream.read(buf, 0, buf.length)) != -1) {\n outputStream.write(buf, 0, len);\n }\n inputStream.close();\n outputStream.close();\n urlConnection.disconnect();\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-311|SpecialSeperatorForDevSet|public static String hashPasswordForOldMD5(String password) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(password.getBytes("UTF-8"));\n byte messageDigest[] = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & messageDigest[i]);\n if (hex.length() == 1) {\n hexString.append('0');\n }\n hexString.append(hex);\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new IllegalStateException(nsae.getMessage());\n }\n catch (UnsupportedEncodingException uee) {\n-   throw new IllegalStateException(uee.getMessage());\n+   throw new IllegalStateException(uee.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-312|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n try {\n URL url = _toURL(xml_location);\n if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n else {\n in_stream = url.openStream();\n }\n }\n-   catch (IOException ex) {\n+   catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n Connection conn = null;\n PreparedStatement ps = null;\n Date fechaSystem = new Date();\n DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");\n DateFormat hhmmss = new SimpleDateFormat("HHmmss");\n DateFormat sss = new SimpleDateFormat("S");\n String ss = sss.format(fechaSystem);\n if (ss.length() > 2) {\n ss = ss.substring(0, 2);\n }\n boolean visado = false;\n try {\n conn = ToolsBD.getConn();\n conn.setAutoCommit(false);\n String sentenciaSql = "UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?" + ((hayVisadoExtracto) ? ", FZJIEXTR=?" : "") + ((hayVisadoRemitente) ? ", FZJIREMI=?" : "") + " WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?";\n ps = conn.prepareStatement(sentenciaSql);\n ps.setString(1, usuarioVisado);\n ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n int contador = 4;\n if (hayVisadoExtracto) {\n ps.setString(contador++, "X");\n }\n if (hayVisadoRemitente) {\n ps.setString(contador++, "X");\n }\n ps.setInt(contador++, oficina);\n ps.setInt(contador++, numeroRegistro);\n-   ps.setInt(contador++, anoSalida);\n+   ps.setInt(contador++, anoSalida);\n ps.setString(contador++, fechaModificacion);\n ps.setString(contador++, horaModificacion);\n int registrosAfectados = ps.executeUpdate();\n if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n visado = true;\n }\n if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n if (generado) {\n visado = actualizarBZSALIDA(conn);\n }\n String rem = "";\n String com = "";\n if (hayVisadoRemitente) {\n if (!remitente.trim().equals("")) {\n rem = remitente;\n }\n else {\n javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n Object ref = contexto.lookup("es.caib.regweb.ValoresHome");\n ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n Valores valor = home.create();\n rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "");\n valor.remove();\n }\n }\n else {\n if (!altres.trim().equals("")) {\n rem = remitente;\n }\n else {\n javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n Object ref = contexto.lookup("es.caib.regweb.ValoresHome");\n ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n Valores valor = home.create();\n rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "");\n valor.remove();\n }\n }\n if (hayVisadoExtracto) {\n com = extracto;\n }\n else {\n com = comentario;\n }\n try {\n Class t = Class.forName("es.caib.regweb.module.PluginHook");\n Class[] partypes = {\n String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class }\n;\n Object[] params = {\n "V", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma }\n;\n java.lang.reflect.Method metodo = t.getMethod("salida", partypes);\n metodo.invoke(null, params);\n }\n catch (IllegalAccessException iae) {\n }\n catch (IllegalArgumentException iae) {\n }\n catch (InvocationTargetException ite) {\n }\n catch (NullPointerException npe) {\n }\n catch (ExceptionInInitializerError eiie) {\n }\n catch (NoSuchMethodException nsme) {\n }\n catch (SecurityException se) {\n }\n catch (LinkageError le) {\n }\n catch (ClassNotFoundException le) {\n }\n }\n conn.commit();\n int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n String Stringsss = sss.format(fechaSystem);\n switch(Stringsss.length()) {\n case (1): Stringsss = "00" + Stringsss;\n break;\n case (2): Stringsss = "0" + Stringsss;\n break;\n }\n int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n }\n catch (Exception e) {\n System.out.println("Error: " + e.getMessage());\n e.printStackTrace();\n visado = false;\n try {\n if (conn != null) conn.rollback();\n else System.out.println("ERROR: No es pot fer rollback sense connexió!");\n }\n catch (Exception ex) {\n System.out.println("Error: " + e.getMessage());\n ex.printStackTrace();\n }\n }\n finally {\n ToolsBD.closeConn(conn, ps, null);\n }\n return visado;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-313|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n-   }\n+   }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|public final int wordFrequency(String word) {\n String replWebQuery = webQuery.replaceFirst("WORDREPLACE", word);\n try {\n URL url = new URL(replWebQuery);\n String content = url.toString();\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n-   while ((inputLine = in.readLine()) != null) {\n+   while ((inputLine = in.readLine()) != null) {\n if (inputLine.matches(nrResultsPattern)) {\n int fr = matchedLine(inputLine);\n if (fr >= 0) {\n return fr;\n }\n }\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-314|SpecialSeperatorForDevSet|public String kodetu(String testusoila) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n new MezuLeiho("Ez da zifraketa algoritmoa aurkitu", "Ados", "Zifraketa Arazoa", JOptionPane.ERROR_MESSAGE);\n e.printStackTrace();\n }\n try {\n-   md.update(testusoila.getBytes("UTF-8"));\n+   md.update(testusoila.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n new MezuLeiho("Errorea kodetzerakoan", "Ados", "Kodeketa Errorea", JOptionPane.ERROR_MESSAGE);\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\n try {\n con.setAutoCommit(false);\n stmt = con.createStatement();\n Collection boxes = diagramModel.getBoxes();\n BoxModel box;\n String sqlQuery;\n if (foreignKeys) {\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n if (!box.isAbstractDef()) {\n dropForeignKeys(box);\n }\n }\n }\n int counter = 0;\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n if (!box.isAbstractDef()) {\n sqlQuery = sqlDropTable(box);\n System.out.println(sqlQuery);\n try {\n stmt.executeUpdate(sqlQuery);\n counter++;\n-   }\n+   }\n catch (SQLException e) {\n String tableName = box.getName();\n System.out.println("// Problem while dropping table " + tableName + " : " + e.getMessage());\n String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName;\n this.informUser(msg);\n }\n }\n }\n con.commit();\n if (counter > 0) {\n String msg = Para.getPara().getText("schemaDropped") + " -- " + counter + " " + Para.getPara().getText("tables");\n this.informUser(msg);\n }\n else {\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n }\n catch (SQLException e) {\n System.out.println(e.getMessage() + " // Problem with the JDBC schema generation! ");\n try {\n con.rollback();\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection rollback! ");\n }\n }\n finally {\n try {\n con.setAutoCommit(true);\n stmt.close();\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection disconnect! ");\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-315|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n-   catch (IOException ignore) {\n+   catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n {\n Assert.notNull(configuration);\n Assert.notNull(monitor);\n }\n final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "");\n final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n final IFile pom = prj.getFile("pom.xml");\n if (!pom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 root pom.xml available");\n }\n ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n handleRootProfile(doc);\n }\n }\n);\n final IFile bpom = prj.getFile("business/pom.xml");\n if (!bpom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 business pom.xml available");\n }\n ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n try {\n handleBusinessProfile(doc, configuration, prj);\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n);\n final ByteArrayOutputStream output = new ByteArrayOutputStream();\n try {\n final Properties props = new Properties();\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n props.setProperty("hibernate.dialect", support.getDialectClass(dialectName));\n props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver"));\n props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>"));\n props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, ""));\n props.store(output, "hibernate properties for code generation using NexOpen Tools 1.0.0");\n final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties");\n if (!props_file.exists()) {\n props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n }\n else {\n props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n }\n }\n catch (final IOException e) {\n Logger.getLog().error("I/O exception ", e);\n throw new RuntimeException(e);\n }\n finally {\n try {\n output.flush();\n output.close();\n }\n catch (IOException e) {\n }\n }\n if (NexOpenProjectUtils.is04xProject(prj)) {\n final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml");\n if (!appContext.exists()) {\n throw new IllegalStateException("It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project");\n }\n ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n final Element root = doc.getDocumentElement();\n final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean");\n for (final Element bean : beans) {\n final String id = bean.getAttribute("id");\n if ("valueListAdapterResolver".equals(id)) {\n try {\n final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "");\n final String className = new StringBuilder(pkgName).append(".vlh.support.AnnotationValueListAdapterResolver").toString();\n bean.setAttribute("class", className);\n break;\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n }\n }\n);\n }\n {\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n if (support.isReverseEngineeringFileNeeded(dialectName)) {\n try {\n final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName));\n if (!revengFile.exists()) {\n final Bundle bundle = HibernateActivator.getDefault().getBundle();\n final Path src = new Path("resources/" + support.getReversEngineeringFile(dialectName));\n final InputStream in = FileLocator.openStream(bundle, src, false);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(in, baos);\n String str = baos.toString();\n str = str.replace("${\nschema}\n", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n }\n }\n catch (final IOException e) {\n-   if (Logger.getLog().isInfoEnabled()) {\n+   if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n final IResource resource = (IResource) prj.getAdapter(IResource.class);\n final QualifiedName qn = new QualifiedName("org.nexopenframework.ide.eclipse.ui", "default.profile");\n final String profile = resource.getPersistentProperty(qn);\n resource.setPersistentProperty(qn, "reverse-engineering");\n try {\n final InstallProjectAction action = new InstallProjectAction();\n action.scheduleJob(prj, monitor);\n prj.refreshLocal(2, monitor);\n }\n finally {\n prj.setPersistentProperty(qn, profile);\n }\n }\n else {\n Logger.getLog().info("Not a NexOpen project :: " + prj);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-316|SpecialSeperatorForDevSet|-  @Before public void init() throws IOException {\n+  @Before public void init() throws IOException {\n file = new File(LOCATION);\n url = file.toURI().toURL();\n stream = url.openStream();\n byteArray = IOUtils.toByteArray(new FileInputStream(file));\n content = FileUtils.readFileToString(file);\n }\n|SpecialSeperatorForDevSet|public String insertSmsInf(Sms sms) throws Exception {\n String smsId = null;\n Connection conn = null;\n PreparedStatement pstmt = null;\n StringBuffer buffer = new StringBuffer();\n try {\n buffer.append("INSERT INTO COMTNSMS\n");\n buffer.append(" (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n");\n buffer.append(" FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n");\n buffer.append("VALUES\n");\n buffer.append("(?, ?, ?, ?, SYSDATE())");\n conn = SmsBasicDBUtil.getConnection();\n conn.setAutoCommit(false);\n smsId = getNextId(conn);\n pstmt = conn.prepareStatement(buffer.toString());\n int index = 0;\n-   pstmt.setString(++index, smsId);\n+   pstmt.setString(++index, smsId);\n pstmt.setString(++index, sms.getTrnsmitTelno());\n pstmt.setString(++index, sms.getTrnsmitCn());\n pstmt.setString(++index, sms.getFrstRegisterId());\n pstmt.executeUpdate();\n conn.commit();\n return smsId;\n }\n catch (Exception ex) {\n if (conn != null) {\n conn.rollback();\n }\n throw ex;\n }\n finally {\n SmsBasicDBUtil.close(null, pstmt, conn);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-317|SpecialSeperatorForDevSet|public void insertDomain(final List<String> domains) {\n try {\n connection.setAutoCommit(false);\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("domain.add"));\n Iterator<String> iter = domains.iterator();\n String domain;\n while (iter.hasNext()) {\n domain = iter.next();\n psImpl.setString(1, domain);\n psImpl.setString(2, domain.toLowerCase(locale));\n psImpl.executeUpdate();\n }\n }\n }\n);\n connection.commit();\n cmDB.updateDomains(null, null);\n }\n catch (SQLException sqle) {\n log.error(sqle);\n if (connection != null) {\n try {\n connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n }\n-   finally {\n+   finally {\n if (connection != null) {\n try {\n connection.setAutoCommit(true);\n }\n catch (SQLException ex) {\n log.error(ex);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n-   }\n+   }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-318|SpecialSeperatorForDevSet|public static void fileUpload() throws IOException {\n HttpClient httpclient = new DefaultHttpClient();\n httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);\n HttpPost httppost = new HttpPost(postURL);\n File file = new File("d:/hai.html");\n System.out.println(ukeycookie);\n httppost.setHeader("Cookie", ukeycookie + ";\n" + skeycookie + ";\n" + usercookie);\n MultipartEntity mpEntity = new MultipartEntity();\n ContentBody cbFile = new FileBody(file);\n-   mpEntity.addPart("", cbFile);\n+   mpEntity.addPart("", cbFile);\n httppost.setEntity(mpEntity);\n System.out.println("Now uploading your file into mediafire...........................");\n HttpResponse response = httpclient.execute(httppost);\n HttpEntity resEntity = response.getEntity();\n System.out.println(response.getStatusLine());\n if (resEntity != null) {\n System.out.println("Getting upload response key value..........");\n uploadresponsekey = EntityUtils.toString(resEntity);\n getUploadResponseKey();\n System.out.println("upload resoponse key " + uploadresponsekey);\n }\n }\n|SpecialSeperatorForDevSet|private void upgradeSchema() throws IOException {\n Statement stmt = null;\n try {\n int i = getSchema();\n LOG.info("DB is currently at schema " + i);\n if (i < SCHEMA_VERSION) {\n LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n while (i < SCHEMA_VERSION) {\n String qry;\n switch(i) {\n case 1: qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";\n stmt.executeUpdate(qry);\n break;\n-   }\n+   }\n i++;\n }\n conn.commit();\n }\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (SQLException e2) {\n LOG.error(SQL_ERROR, e2);\n }\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error upgrading data store", e);\n }\n finally {\n try {\n if (stmt != null) stmt.close();\n conn.setAutoCommit(true);\n }\n catch (SQLException e) {\n LOG.error(SQL_ERROR, e);\n throw new IOException("Unable to cleanup SQL resources", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-319|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n-   return toHexString(md.digest());\n+   return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|public void actionPerformed(ActionEvent ae) {\n if (ae.getSource() == jbutton) {\n try {\n String toservlet = "http://localhost:8080/direto-project/arquivos/teste.odt";\n URL servleturl = new URL(toservlet);\n URLConnection servletconnection = servleturl.openConnection();\n servletconnection.setDoInput(true);\n servletconnection.setDoOutput(true);\n servletconnection.setUseCaches(false);\n servletconnection.setDefaultUseCaches(false);\n DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());\n inputFromClient.readByte();\n OutputStream fos = new FileOutputStream("/home/danillo/arquivo_carregado.odt");\n byte[] buf = new byte[1024];\n int bytesread;\n while ((bytesread = inputFromClient.read(buf)) > -1) {\n fos.write(buf, 0, bytesread);\n-   }\n+   }\n inputFromClient.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-320|SpecialSeperatorForDevSet|public InputSource resolveEntity(String publicId, String systemId) {\n String resolved = getResolvedEntity(publicId, systemId);\n if (resolved != null) {\n try {\n InputSource iSource = new InputSource(resolved);\n iSource.setPublicId(publicId);\n URL url = new URL(resolved);\n InputStream iStream = url.openStream();\n iSource.setByteStream(iStream);\n return iSource;\n }\n catch (Exception e) {\n-   catalogManager.debug.message(1, "Failed to create InputSource (" + e.toString() + ")", resolved);\n+   catalogManager.debug.message(1, "Failed to create InputSource (" + e.toString() + ")", resolved);\n return null;\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|-  public String new2Password(String passwd) {\n+  public String new2Password(String passwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n String clearPassword = passwd;\n md.update(clearPassword.getBytes());\n byte[] digestedPassword = md.digest();\n return new String(digestedPassword);\n }\n catch (java.security.NoSuchAlgorithmException e) {\n System.out.println("MD5 doesn't exist");\n System.out.println(e.toString());\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-321|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private synchronized void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM non_generic_favs").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n e.printStackTrace(System.out);\n throw new IOException("Error on initial data store read");\n }\n String[] qry = {\n "CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)", "CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n-   try {\n+   try {\n conn.rollback();\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n }\n e2.printStackTrace(new PrintWriter(System.out));\n throw new IOException("Error initializing data store");\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n e4.printStackTrace(System.out);\n throw new IOException("Unable to cleanup data store resources");\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n throw new IOException("Unable to reset data store auto commit");\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-322|SpecialSeperatorForDevSet|private int[] sortRows(int[] rows) {\n for (int i = 0;\n i < rows.length;\n-   i++) {\n+   i++) {\n for (int j = 0;\n j < rows.length - 1;\n j++) {\n if (rows[j] > rows[j + 1]) {\n int temp = rows[j];\n rows[j] = rows[j + 1];\n rows[j + 1] = temp;\n }\n }\n }\n return rows;\n }\n|SpecialSeperatorForDevSet|private void handleURL() throws JspException, IOException {\n Map in_map = prepareInputMap();\n String in_str = JSONTransformer.serialize(in_map);\n byte[] input = in_str.getBytes("UTF-8");\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n conn.setRequestMethod("POST");\n conn.setDoOutput(true);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.connect();\n OutputStream os = conn.getOutputStream();\n os.write(input);\n os.close();\n InputStream is = conn.getInputStream();\n InputStreamReader reader = new InputStreamReader(is, "UTF-8");\n StringBuffer s_buf = new StringBuffer();\n char[] tmp_buf = new char[1024];\n int count;\n-   while ((count = reader.read(tmp_buf)) != -1) {\n+   while ((count = reader.read(tmp_buf)) != -1) {\n if (count == 0) continue;\n s_buf.append(tmp_buf, 0, count);\n }\n reader.close();\n Map out_map = null;\n try {\n out_map = JSONTransformer.parseObject(s_buf.toString());\n }\n catch (ParseException e) {\n returnErrorResult(e.getMessage());\n }\n handleResultMap(out_map);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-323|SpecialSeperatorForDevSet|public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {\n String fullname = System.mapLibraryName(name);\n String path = "native/" + sysName + "/" + fullname;\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n if (url == null) {\n if (!warning) {\n logger.log(Level.WARNING, "Cannot locate native library: {\n0}\n/{\n1}\n", new String[] {\n sysName, fullname }\n);\n }\n return;\n }\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n File targetFile = new File(getExtractionDir(), fullname);\n OutputStream out = null;\n try {\n if (targetFile.exists()) {\n long targetLastModified = targetFile.lastModified();\n long sourceLastModified = conn.getLastModified();\n if (targetLastModified + 1000 > sourceLastModified) {\n logger.log(Level.FINE, "Not copying library {\n0}\n. Latest already extracted.", fullname);\n return;\n }\n }\n out = new FileOutputStream(targetFile);\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n in = null;\n out.close();\n out = null;\n targetFile.setLastModified(conn.getLastModified());\n }\n catch (FileNotFoundException ex) {\n if (ex.getMessage().contains("used by another process")) {\n return;\n }\n-   throw ex;\n+   throw ex;\n }\n finally {\n if (load) {\n System.load(targetFile.getAbsolutePath());\n }\n if (in != null) {\n in.close();\n }\n if (out != null) {\n out.close();\n }\n }\n logger.log(Level.FINE, "Copied {\n0}\n to {\n1}\n", new Object[] {\n fullname, targetFile }\n);\n }\n|SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n-   }\n+   }\n return returnString;\n }\n catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-324|SpecialSeperatorForDevSet|public SRWGuiClient(String initialURL) {\n super("Simple Swing Browser");\n this.initialURL = initialURL;\n addWindowListener(new ExitListener());\n WindowUtilities.setNativeLookAndFeel();\n JPanel topPanel = new JPanel();\n topPanel.setBackground(Color.lightGray);\n homeButton = new JIconButton("home.gif");\n homeButton.addActionListener(this);\n JLabel urlLabel = new JLabel("URL:");\n-   urlField = new JTextField(30);\n+   urlField = new JTextField(30);\n urlField.setText(initialURL);\n urlField.addActionListener(this);\n topPanel.add(homeButton);\n topPanel.add(urlLabel);\n topPanel.add(urlField);\n getContentPane().add(topPanel, BorderLayout.NORTH);\n try {\n URL url = new URL(initialURL);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n boolean xml = true;\n String inputLine;\n StringBuffer content = new StringBuffer(), stylesheet = null;\n Transformer transformer = null;\n inputLine = in.readLine();\n if (inputLine == null) {\n System.out.println("No input read from URL: " + initialURL);\n return;\n }\n if (!inputLine.startsWith("<?xml ")) {\n xml = false;\n content.append(inputLine);\n }\n if (xml) {\n inputLine = in.readLine();\n if (inputLine.startsWith("<?xml-stylesheet ")) {\n int offset = inputLine.indexOf("href=");\n String href = (inputLine.substring(inputLine.indexOf("href=") + 6));\n href = href.substring(0, href.indexOf('"'));\n System.out.println("href=" + href);\n url = new URL(url, href);\n String stylesheetURL = url.toString();\n System.out.println("stylesheet URL=" + url.toString());\n transformer = (Transformer) transformers.get(stylesheetURL);\n if (transformer == null) {\n BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));\n sheetIn.readLine();\n stylesheet = new StringBuffer();\n while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');\n System.out.println(stylesheet.toString());\n TransformerFactory tFactory = TransformerFactory.newInstance();\n StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));\n transformer = tFactory.newTransformer(xslSource);\n transformers.put(stylesheetURL, transformer);\n }\n }\n }\n while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');\n htmlPane = new JEditorPane();\n if (transformer != null) {\n StringReader stringRecordReader = new StringReader(content.toString());\n StringWriter xmlRecordWriter = new StringWriter();\n StreamSource streamXMLRecord = new StreamSource(stringRecordReader);\n transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));\n String html = xmlRecordWriter.toString();\n int i = html.indexOf('>');\n html = "<html>" + html.substring(html.indexOf('>') + 1);\n System.out.println(html);\n htmlPane.setContentType("text/html");\n htmlPane.setText("<html><head><META http-equiv=\"Content-Type\" content=\"text/html;\n charset=UTF-8\"><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \"Guidelines on Subject Access to Individual Works of Fiction , Drama\" (GSAFD)</p><table cellspacing=\"5\" width=\"100%\"><tr><td><h3>Search</h3><p></p></td><td valign=\"top\"><h3>Browse</h3></td></tr></table></body></html>");\n }\n else htmlPane.setText(content.toString());\n htmlPane.setEditable(false);\n htmlPane.addHyperlinkListener(this);\n JScrollPane scrollPane = new JScrollPane(htmlPane);\n getContentPane().add(scrollPane, BorderLayout.CENTER);\n }\n catch (IOException ioe) {\n warnUser("Can't build HTML pane for " + initialURL + ": " + ioe);\n }\n catch (TransformerException e) {\n }\n Dimension screenSize = getToolkit().getScreenSize();\n int width = screenSize.width * 8 / 10;\n int height = screenSize.height * 8 / 10;\n setBounds(width / 8, height / 8, width, height);\n setVisible(true);\n }\n|SpecialSeperatorForDevSet|public Converter(String input, String output) {\n try {\n FileInputStream fis = new FileInputStream(new File(input));\n BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));\n FileOutputStream fos = new FileOutputStream(new File(output));\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));\n int len = 80;\n char buf[] = new char[len];\n int numRead;\n while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n out.close();\n in.close();\n }\n catch (IOException e) {\n-   System.out.println("An I/O Exception Occurred: " + e);\n+   System.out.println("An I/O Exception Occurred: " + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-325|SpecialSeperatorForDevSet|-  private void Connect() throws NpsException {\n+  private void Connect() throws NpsException {\n try {\n client = new FTPClient();\n client.connect(host.hostname, host.remoteport);\n int reply = client.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n client.disconnect();\n client = null;\n com.microfly.util.DefaultLog.error_noexception("FTP Server:" + host.hostname + "refused connection.");\n return;\n }\n client.login(host.uname, host.upasswd);\n client.enterLocalPassiveMode();\n client.setFileType(FTPClient.BINARY_FILE_TYPE);\n client.changeWorkingDirectory(host.remotedir);\n }\n catch (Exception e) {\n com.microfly.util.DefaultLog.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public static String postRequest(String urlString, HashMap data) {\n-   String returnData = "";\n+   String returnData = "";\n try {\n URL url = new URL(urlString);\n URLConnection connection = url.openConnection();\n connection.setDoOutput(true);\n connection.setDoInput(true);\n PrintWriter out = new PrintWriter(connection.getOutputStream());\n Object[] keySet = data.keySet().toArray();\n Object[] values = data.values().toArray();\n for (int count = 0;\n count < keySet.length;\n count++) {\n out.print(URLEncoder.encode((String) keySet[count]) + "=" + URLEncoder.encode((String) values[count]));\n if ((count + 1) < keySet.length) out.print("&");\n }\n out.close();\n BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n returnData += inputLine;\n }\n in.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n returnData = null;\n }\n return (returnData);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-326|SpecialSeperatorForDevSet|public AsciiParser(String systemID) throws GridBagException {\n String id = systemID;\n if (id.endsWith(".xml")) {\n id = StringUtils.replace(id, ".xml", ".gbc");\n }\n ClassLoader loader = this.getClass().getClassLoader();\n URL url = loader.getResource(id);\n if (url == null) {\n throw new GridBagException("Cannot located resource : \"" + systemID + "\".");\n }\n try {\n InputStream inStream = url.openStream();\n constraints = getLines(inStream);\n inStream.close();\n }\n catch (IOException ie1) {\n-   throw new GridBagException("Cannot read from resource " + id);\n+   throw new GridBagException("Cannot read from resource " + id);\n }\n }\n|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n-   IOUtils.closeQuietly(streamToLoad);\n+   IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-327|SpecialSeperatorForDevSet|public String getData(DefaultHttpClient httpclient) {\n try {\n HttpGet get = new HttpGet("http://3dforandroid.appspot.com/api/v1/note");\n get.setHeader("Content-Type", "application/json");\n get.setHeader("Accept", "*/*");\n HttpResponse response = httpclient.execute(get);\n HttpEntity entity = response.getEntity();\n InputStream instream = entity.getContent();\n responseMessage = read(instream);\n if (instream != null) instream.close();\n }\n catch (ClientProtocolException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return responseMessage;\n }\n-  \n+  |SpecialSeperatorForDevSet|protected File getFile() throws IOException {\n File home = new File(System.getProperty("user.dir"));\n String fileName = String.format("%s.txt", getFilePrefix());\n File file = new File(home, fileName);\n if (file.exists()) {\n return file;\n }\n else {\n URL url = LocalNameGenerator.class.getResource("/" + fileName);\n-   if (url == null) {\n+   if (url == null) {\n throw new IllegalStateException(String.format("Cannot find resource at %s", fileName));\n }\n else {\n InputStream in = url.openStream();\n try {\n BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n try {\n IOUtils.copy(in, out);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n return file;\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-328|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n-   i < args.length - 1;\n+   i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n|SpecialSeperatorForDevSet|public static TopicMap getTopicMap(URL url) {\n String baseURI = url.toString();\n InputStream inputStream = null;\n try {\n inputStream = url.openStream();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return getTopicMap(inputStream, baseURI);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-329|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n FTPClient ftp = new FTPClient();\n try {\n ftp.connect("localhost", 21);\n ftp.login("ftpuser", "ftpuser123");\n System.out.println("Current: " + ftp.printWorkingDirectory());\n System.out.println("Dir status: " + ftp.makeDirectory(DIR));\n ftp.changeWorkingDirectory(DIR);\n System.out.println("File status: " + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));\n }\n finally {\n ftp.disconnect();\n }\n }\n catch (Exception e) {\n-   throw new RuntimeException(e);\n+   throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|private void extractZipFile(String filename, JTextPane progressText) throws IOException {\n String destinationname = "";\n byte[] buf = new byte[1024];\n ZipInputStream zipinputstream = null;\n ZipEntry zipentry;\n zipinputstream = new ZipInputStream(new FileInputStream(filename));\n while ((zipentry = zipinputstream.getNextEntry()) != null) {\n String entryName = zipentry.getName();\n if (progressText != null) {\n progressText.setText("extracting " + entryName);\n-   }\n+   }\n int n;\n FileOutputStream fileoutputstream;\n if (zipentry.isDirectory()) {\n (new File(destinationname + entryName)).mkdir();\n continue;\n }\n fileoutputstream = new FileOutputStream(destinationname + entryName);\n while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n fileoutputstream.close();\n zipinputstream.closeEntry();\n }\n if (progressText != null) {\n progressText.setText("Files extracted");\n }\n zipinputstream.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-330|SpecialSeperatorForDevSet|private String cookieString(String url, String ip) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update((url + "&&" + ip + "&&" + salt.toString()).getBytes());\n-   java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\n+   java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\n return hash.toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n filterConfig.getServletContext().log(this.getClass().getName() + " error " + e);\n return null;\n }\n }\n|SpecialSeperatorForDevSet|private void displayDiffResults() throws IOException {\n File outFile = File.createTempFile("diff", ".htm");\n outFile.deleteOnExit();\n FileOutputStream outStream = new FileOutputStream(outFile);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");\n if (addedTable.length() > 0) {\n out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");\n out.write(addedTable.toString());\n out.write("</table><br><br>");\n }\n if (modifiedTable.length() > 0) {\n out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");\n out.write(modifiedTable.toString());\n out.write("</table><br><br>");\n }\n if (deletedTable.length() > 0) {\n out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n out.write(deletedTable.toString());\n-   out.write("</table><br><br>");\n+   out.write("</table><br><br>");\n }\n out.write("<table name=METRICS BORDER>\n");\n if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n out.write("<tr><td>Base:&nbsp;\n</td><td>");\n out.write(Long.toString(base));\n out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n</td><td>");\n out.write(Long.toString(deleted));\n out.write("</td></tr>\n<tr><td>Modified:&nbsp;\n</td><td>");\n out.write(Long.toString(modified));\n out.write("</td></tr>\n<tr><td>Added:&nbsp;\n</td><td>");\n out.write(Long.toString(added));\n out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;\n</td><td>");\n out.write(Long.toString(added + modified));\n out.write("</td></tr>\n");\n }\n out.write("<tr><td>Total:&nbsp;\n</td><td>");\n out.write(Long.toString(total));\n out.write("</td></tr>\n</table></div>");\n redlinesOut.close();\n out.flush();\n InputStream redlines = new FileInputStream(redlinesTempFile);\n byte[] buffer = new byte[4096];\n int bytesRead;\n while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n outStream.write("</BODY></HTML>".getBytes());\n outStream.close();\n Browser.launch(outFile.toURL().toString());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-331|SpecialSeperatorForDevSet|protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n ReplayCharSequence cs = null;\n try {\n cs = curi.getRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.getNonFatalFailures().add(e);\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n try {\n digest = MessageDigest.getInstance(SHA1);\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr != null) {\n s = cs.toString();\n }\n-   else {\n+   else {\n Matcher m = regexpr.matcher(cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n curi.setContentDigest(SHA1, newDigestValue);\n }\n finally {\n if (cs != null) {\n try {\n cs.close();\n }\n catch (IOException ioe) {\n logger.warning(TextUtils.exceptionToString("Failed close of ReplayCharSequence.", ioe));\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n int result = 20;\n if (args.length == 1) {\n-   StringBuffer urlString = new StringBuffer(args[0]);\n+   StringBuffer urlString = new StringBuffer(args[0]);\n if (urlString.lastIndexOf("/") != urlString.length() - 1) {\n urlString.append('/');\n }\n urlString.append("GetConfig.jsp");\n URLConnection conn = new URL(urlString.toString()).openConnection();\n System.out.println(Configuration.readObject(conn.getInputStream()));\n result = 0;\n }\n else {\n System.err.println("usage: GetConfig <URL>");\n }\n System.exit(result);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-332|SpecialSeperatorForDevSet|public boolean crear() {\n-   int result = 0;\n+   int result = 0;\n String sql = "insert into jugador" + "(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)" + "values (?, ?, ?, ?, ?, ?, ?)";\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n populatePreparedStatement(elJugador);\n result = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (result > 0);\n }\n|SpecialSeperatorForDevSet|public void init() throws GateException {\n if (reportFile == null) throw new GateException("No report file set!");\n boolean restarting = false;\n if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\n throw new GateException("Could not create directories for " + reportFile.getAbsolutePath());\n }\n File backupFile = new File(reportFile.getAbsolutePath() + ".bak");\n if (reportFile.exists()) {\n restarting = true;\n logger.info("Existing report file found at \"" + reportFile.getAbsolutePath() + "\", attempting to restart");\n if (!reportFile.renameTo(backupFile)) {\n try {\n byte[] buff = new byte[32 * 1024];\n InputStream in = new BufferedInputStream(new FileInputStream(reportFile));\n try {\n OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\n try {\n int read = in.read(buff);\n while (read != -1) {\n out.write(buff, 0, read);\n read = in.read(buff);\n }\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n catch (IOException e) {\n throw new GateException("Could not restart batch", e);\n }\n }\n }\n try {\n reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\n reportWriter.writeStartDocument();\n reportWriter.writeCharacters("\n");\n reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, "cloudReport");\n reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\n reportWriter.writeCharacters("\n");\n reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, "documents");\n }\n catch (XMLStreamException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n catch (IOException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n if (restarting) {\n try {\n Set<String> completedDocuments = new HashSet<String>();\n logger.debug("Processing existing report file");\n InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\n XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\n try {\n XMLEvent event;\n while (xer.hasNext()) {\n event = xer.nextEvent();\n if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("documents")) {\n break;\n }\n }\n List<XMLEvent> events = new LinkedList<XMLEvent>();\n String currentReturnCode = null;\n String currentDocid = null;\n while (xer.hasNext()) {\n event = xer.nextEvent();\n events.add(event);\n if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("processResult")) {\n currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, "returnCode")).getValue();\n currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, "id")).getValue();\n }\n-   if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals("processResult")) {\n+   if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals("processResult")) {\n if (currentReturnCode.equals("SUCCESS") && currentDocid != null) {\n completedDocuments.add(currentDocid);\n for (XMLEvent evt : events) {\n Tools.writeStaxEvent(evt, reportWriter);\n }\n }\n events.clear();\n currentReturnCode = null;\n currentDocid = null;\n }\n if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals("documents")) {\n break;\n }\n }\n }\n catch (Exception e) {\n logger.debug("Exception while parsing old report file - probably " + "reached the end of old report", e);\n }\n finally {\n xer.close();\n bakIn.close();\n backupFile.delete();\n }\n List<String> unprocessedDocs = new ArrayList<String>();\n unprocessedDocs.addAll(Arrays.asList(documentIDs));\n unprocessedDocs.removeAll(completedDocuments);\n unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n }\n catch (XMLStreamException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n catch (IOException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n }\n else {\n unprocessedDocumentIDs = documentIDs;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-333|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) {\n try {\n if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n-   System.out.println("sourceFile & destinationFile is null");\n+   System.out.println("sourceFile & destinationFile is null");\n System.exit(-1);\n }\n if (sourceFile.isDirectory()) {\n File[] tmp = sourceFile.listFiles();\n File f;\n for (int i = 0;\n i < tmp.length;\n i++) {\n f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n f.getParentFile().mkdirs();\n copy(tmp[i], f);\n }\n }\n else {\n System.out.println("\nCopy from: " + sourceFile + "\n\n to: " + destinationFile);\n FileChannel source = new FileInputStream(sourceFile).getChannel();\n FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public FTPFile[] connect() {\n if (ftpe == null) {\n ftpe = new FTPEvent(this);\n }\n if (ftp == null) {\n ftp = new FTPClient();\n }\n else if (ftp.isConnected()) {\n path = "";\n try {\n ftp.disconnect();\n }\n catch (IOException e1) {\n log.error("could not disconnect -" + e1.getMessage());\n }\n }\n currentDir = new FTPFile[0];\n log.debug("try to connect");\n try {\n int reply;\n ftp.connect(ftpsite);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n log.error("FTP server refused connection.");\n }\n }\n catch (IOException e) {\n log.error("FTPConnection error: " + e.getMessage());\n if (ftp.isConnected()) {\n try {\n ftp.disconnect();\n }\n catch (IOException f) {\n }\n }\n }\n try {\n if (!ftp.login(user, password)) {\n log.error("could not login with: " + user);\n ftp.logout();\n }\n log.debug("Remote system is " + ftp.getSystemName());\n ftp.enterLocalPassiveMode();\n currentDir = ftp.listFiles();\n }\n catch (FTPConnectionClosedException e) {\n log.error("FTPConnectionClosedException: " + e.getMessage());\n-   }\n+   }\n catch (IOException e) {\n log.error("IOException: " + e.getMessage());\n }\n ftpe.setType(FTPEvent.CONNECT);\n fireFTPEvent(ftpe);\n return currentDir;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-334|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n-   dstChannel = null;\n+   dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n-   }\n+   }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-334|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n-   if (portletXml == null) {\n+   if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n-   dstChannel.close();\n+   dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-335|SpecialSeperatorForDevSet|private String readTwitterFead() {\n StringBuilder builder = new StringBuilder();\n HttpClient client = new DefaultHttpClient();\n HttpGet httpGet = new HttpGet("http://twitter.com/statuses/user_timeline/vogella.json");\n try {\n HttpResponse response = client.execute(httpGet);\n StatusLine statusLine = response.getStatusLine();\n int statusCode = statusLine.getStatusCode();\n if (statusCode == 200) {\n HttpEntity entity = response.getEntity();\n InputStream content = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(content));\n String line;\n while ((line = reader.readLine()) != null) {\n-   builder.append(line);\n+   builder.append(line);\n }\n }\n else {\n Log.e(AndroidJsonTestingActivity.class.getName(), "Failed to download file");\n }\n }\n catch (ClientProtocolException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return builder.toString();\n }\n|SpecialSeperatorForDevSet|protected Control createDialogArea(Composite parent) {\n Composite composite = (Composite) super.createDialogArea(parent);\n setTitle(DialogsMessages.getString("LicenseDialog.Caption"));\n setMessage(DialogsMessages.getString("LicenseDialog.Explanation"));\n Composite content = new Composite(composite, SWT.NONE);\n content.setLayoutData(new GridData(GridData.FILL_BOTH));\n final int ncol = 1;\n GridLayout layout = new GridLayout(1, false);\n layout.numColumns = ncol;\n content.setLayout(layout);\n Browser browser = null;\n Text text = null;\n try {\n browser = new Browser(content, SWT.NONE);\n browser.setLayoutData(new GridData(GridData.FILL_BOTH));\n-   }\n+   }\n catch (Throwable t) {\n text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n text.setLayoutData(new GridData(GridData.FILL_BOTH));\n }\n URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? "license.html" : "license.txt");\n InputStream in = null;\n BufferedReader r = null;\n StringBuffer sb = new StringBuffer();\n try {\n in = url.openStream();\n r = new BufferedReader(new InputStreamReader(in, "ISO-8859-1"));\n String line;\n while ((line = r.readLine()) != null) sb.append(line).append("\r\n");\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n if (r != null) {\n try {\n r.close();\n }\n catch (IOException e) {\n }\n }\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException e) {\n }\n }\n }\n if (browser != null) browser.setText(sb.toString());\n else text.setText(sb.toString());\n return composite;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-336|SpecialSeperatorForDevSet|public static String md5(String text) {\n String encrypted = "";\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(text.getBytes());\n encrypted = hex(md.digest());\n }\n-   catch (NoSuchAlgorithmException nsaEx) {\n+   catch (NoSuchAlgorithmException nsaEx) {\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|private void unzip(File filename) throws ZipException, IOException {\n ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n ZipEntry entry = null;\n boolean first_entry = true;\n while ((entry = in.getNextEntry()) != null) {\n if (first_entry) {\n if (!entry.isDirectory()) {\n File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n if (!subdir.exists()) {\n subdir.mkdir();\n dir = subdir;\n }\n }\n first_entry = false;\n }\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n }\n else {\n File outfile = new File(dir + File.separator + entry.getName());\n File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n FileOutputStream fo = new FileOutputStream(outfile);\n BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n int read;\n byte data[] = new byte[BUFFER];\n while ((read = in.read(data, 0, BUFFER)) != -1) {\n read_position++;\n bos.write(data, 0, read);\n-   }\n+   }\n bos.flush();\n bos.close();\n }\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-337|SpecialSeperatorForDevSet|public static String md5String(String str) {\n try {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] hash = md.digest();\n final char[] hexChars = {\n '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }\n;\n StringBuffer res = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n res.append(hexChars[0x0F & hash[i]]);\n }\n-   return res.toString();\n+   return res.toString();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|-  public static String md5String(String str) {\n+  public static String md5String(String str) {\n try {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] hash = md.digest();\n final char[] hexChars = {\n '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }\n;\n StringBuffer res = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n res.append(hexChars[0x0F & hash[i]]);\n }\n return res.toString();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-337|SpecialSeperatorForDevSet|public static String md5String(String str) {\n try {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] hash = md.digest();\n final char[] hexChars = {\n '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }\n;\n StringBuffer res = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n res.append(hexChars[0x0F & hash[i]]);\n }\n return res.toString();\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n final MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n-   catch (final Exception e) {\n+   catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-338|SpecialSeperatorForDevSet|public void removeRealm(final List<Integer> realmIds) {\n try {\n connection.setAutoCommit(false);\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("realm.remove"));\n Iterator<Integer> iter = realmIds.iterator();\n int realmId;\n while (iter.hasNext()) {\n realmId = iter.next();\n psImpl.setInt(1, realmId);\n psImpl.executeUpdate();\n cmDB.removeRealm(realmId);\n }\n }\n }\n);\n connection.commit();\n }\n catch (SQLException sqle) {\n log.error(sqle);\n if (connection != null) {\n try {\n connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n }\n finally {\n if (connection != null) {\n try {\n connection.setAutoCommit(true);\n }\n catch (SQLException ex) {\n }\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public void run() {\n try {\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setRequestMethod("GET");\n con.setDoInput(true);\n byte[] encodedPassword = (username + ":" + password).getBytes();\n BASE64Encoder encoder = new BASE64Encoder();\n con.setRequestProperty("Authorization", "Basic " + encoder.encode(encodedPassword));\n InputStream is = con.getInputStream();\n BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n String line;\n StringBuffer response = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n response.append(line);\n-   response.append('\n');\n+   response.append('\n');\n lastIteraction = System.currentTimeMillis();\n }\n rd.close();\n is.close();\n con.disconnect();\n result = response.toString();\n finish = true;\n }\n catch (Throwable e) {\n this.e = e;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-339|SpecialSeperatorForDevSet|private static void readData() {\n StringTokenizer sTok;\n topSet = new HashSet();\n sTok = new StringTokenizer(tops, ",");\n while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\n leftSet = new HashSet();\n sTok = new StringTokenizer(lefts, ",");\n while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\n rightSet = new HashSet();\n sTok = new StringTokenizer(rights, ",");\n while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\n farRightSet = new HashSet();\n sTok = new StringTokenizer(farrights, ",");\n while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\n vowelSet = new HashSet();\n sTok = new StringTokenizer(vowels, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n vowelSet.add(ntk = sTok.nextToken());\n if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n puncSet = new HashSet();\n sTok = new StringTokenizer(others, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n puncSet.add(ntk = sTok.nextToken());\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n charSet = new HashSet();\n tibSet = new HashSet();\n sTok = new StringTokenizer(tibetanConsonants, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n tibSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n sanskritStackSet = new HashSet();\n sTok = new StringTokenizer(otherConsonants, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n sanskritStackSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n numberSet = new HashSet();\n sTok = new StringTokenizer(numbers, ",");\n while (sTok.hasMoreTokens()) {\n String ntk;\n charSet.add(ntk = sTok.nextToken());\n numberSet.add(ntk);\n validInputSequences.put(ntk, anyOldObjectWillDo);\n }\n charSet.add("Y");\n charSet.add("R");\n charSet.add("W");\n validInputSequences.put("Y", anyOldObjectWillDo);\n validInputSequences.put("R", anyOldObjectWillDo);\n validInputSequences.put("W", anyOldObjectWillDo);\n sTok = null;\n top_vowels = new HashSet();\n top_vowels.add(i_VOWEL);\n top_vowels.add(e_VOWEL);\n top_vowels.add(o_VOWEL);\n top_vowels.add(ai_VOWEL);\n top_vowels.add(au_VOWEL);\n top_vowels.add(reverse_i_VOWEL);\n try {\n URL url = TibetanMachineWeb.class.getResource(fileName);\n if (url == null) {\n System.err.println("Cannot find " + fileName + ";\n aborting.");\n System.exit(1);\n }\n InputStreamReader isr = new InputStreamReader(url.openStream());\n BufferedReader in = new BufferedReader(isr);\n System.out.println("Reading Tibetan Machine Web code table " + fileName);\n String line;\n boolean hashOn = false;\n boolean isTibetan = false;\n boolean isSanskrit = false;\n boolean ignore = false;\n while ((line = in.readLine()) != null) {\n if (line.startsWith("<?")) {\n if (line.equalsIgnoreCase("<?Consonants?>")) {\n isSanskrit = false;\n isTibetan = true;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Numbers?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Vowels?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Other?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n do {\n line = in.readLine();\n }\n while (line.startsWith("//") || line.equals(""));\n }\n else if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Tibetan?>")) {\n isSanskrit = false;\n isTibetan = true;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Numbers?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) {\n isSanskrit = true;\n isTibetan = false;\n hashOn = true;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?ToWylie?>")) {\n isSanskrit = false;\n isTibetan = false;\n hashOn = false;\n ignore = false;\n }\n else if (line.equalsIgnoreCase("<?Ignore?>")) {\n isSanskrit = false;\n ignore = true;\n }\n }\n else if (line.startsWith("//")) {\n ;\n }\n else if (line.equals("")) {\n ;\n }\n else {\n StringTokenizer st = new StringTokenizer(line, DELIMITER, true);\n String wylie = null;\n DuffCode[] duffCodes;\n duffCodes = new DuffCode[11];\n int k = 0;\n StringBuffer escapedToken = new StringBuffer("");\n ThdlDebug.verify(escapedToken.length() == 0);\n while (st.hasMoreTokens()) {\n String val = getEscapedToken(st, escapedToken);\n if (val.equals(DELIMITER) && escapedToken.length() == 0) {\n k++;\n }\n else if (!val.equals("")) {\n if (escapedToken.length() != 0) {\n escapedToken = new StringBuffer("");\n ThdlDebug.verify(escapedToken.length() == 0);\n }\n switch(k) {\n case 0: wylie = val;\n break;\n case 1: duffCodes[TM] = new DuffCode(val, false);\n break;\n case 2: if (!ignore) {\n duffCodes[REDUCED_C] = new DuffCode(val, true);\n }\n break;\n case 3: duffCodes[TMW] = new DuffCode(val, true);\n if (null != duffCodes[TM]) {\n TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n }\n if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error("tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but " + val + " appears two or more times.");\n TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\n if (wylie.toLowerCase().startsWith("\\uf0")) {\n int x = Integer.parseInt(wylie.substring("\\u".length()), 16);\n ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\n NonUnicodeToTMW[x - ''] = new DuffCode[] {\n duffCodes[TMW] }\n;\n }\n break;\n case 4: case 5: case 6: case 7: case 8: case 9: if (!ignore) {\n try {\n duffCodes[k - 1] = new DuffCode(val, true);\n }\n catch (Exception e) {\n System.err.println("Couldn't make a DuffCode out of " + val + ";\n line is " + line + ";\n k is " + k);\n }\n }\n break;\n case 10: if (!val.equals("none")) {\n StringBuffer unicodeBuffer = new StringBuffer();\n StringTokenizer uTok = new StringTokenizer(val, ",");\n while (uTok.hasMoreTokens()) {\n String subval = uTok.nextToken();\n ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\n try {\n int x = Integer.parseInt(subval, 16);\n ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\n unicodeBuffer.append((char) x);\n }\n catch (NumberFormatException e) {\n ThdlDebug.verify(false);\n }\n }\n TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\n char ch;\n if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\n if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {\n throw new Error("tibwn.ini has more than one TMW fellow listed that has the Unicode " + val + ", but it's not on the list of specially handled glyphs");\n }\n UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];\n }\n }\n break;\n case 11: if (!ignore) {\n duffCodes[HALF_C] = new DuffCode(val, true);\n }\n break;\n case 12: if (!ignore) {\n DuffCode binduCode = new DuffCode(val, true);\n binduMap.put(duffCodes[TMW], binduCode);\n }\n break;\n-   case 13: throw new Error("tibwn.ini has only 13 columns, you tried to use a 14th column.");\n+   case 13: throw new Error("tibwn.ini has only 13 columns, you tried to use a 14th column.");\n }\n }\n else {\n if (k == 10) {\n throw new Error("needed none or some unicode;\n line is " + line);\n }\n }\n }\n if (k < 10) {\n throw new Error("needed none or some unicode;\n line is " + line);\n }\n if (!ignore) {\n if (null == wylie) throw new Error(fileName + " has a line ^" + DELIMITER + " which means that no Wylie is assigned. That isn't supported.");\n if (hashOn) {\n tibHash.put(Manipulate.unescape(wylie), duffCodes);\n }\n if (isTibetan) {\n StringBuffer wylieWithoutDashes = new StringBuffer(wylie);\n for (int wl = 0;\n wl < wylieWithoutDashes.length();\n wl++) {\n if (wylieWithoutDashes.charAt(wl) == '-') {\n wylieWithoutDashes.deleteCharAt(wl);\n --wl;\n }\n }\n tibSet.add(wylieWithoutDashes.toString());\n }\n if (isSanskrit) {\n sanskritStackSet.add(wylie);\n }\n if (null == duffCodes[TMW]) throw new Error(fileName + " has a line with wylie " + wylie + " but no TMW;\n that's not allowed");\n int font = duffCodes[TMW].getFontNum();\n int code = duffCodes[TMW].getCharNum() - 32;\n toHashKey[font][code] = Manipulate.unescape(wylie);\n }\n }\n }\n }\n catch (IOException e) {\n System.out.println("file Disappeared");\n ThdlDebug.noteIffyCode();\n }\n }\n|SpecialSeperatorForDevSet|public Bitmap retrieveBitmap(String urlString) {\n Log.d(Constants.LOG_TAG, "making HTTP trip for image:" + urlString);\n Bitmap bitmap = null;\n try {\n URL url = new URL(urlString);\n URLConnection conn = url.openConnection();\n conn.setConnectTimeout(3000);\n-   conn.setReadTimeout(5000);\n+   conn.setReadTimeout(5000);\n bitmap = BitmapFactory.decodeStream(conn.getInputStream());\n }\n catch (MalformedURLException e) {\n Log.e(Constants.LOG_TAG, "Exception loading image, malformed URL", e);\n }\n catch (IOException e) {\n Log.e(Constants.LOG_TAG, "Exception loading image, IO error", e);\n }\n return bitmap;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-340|SpecialSeperatorForDevSet|@Override protected String doInBackground(Void... params) {\n HttpClient httpClient = new DefaultHttpClient();\n HttpContext localContext = new BasicHttpContext();\n HttpPost httpPost = new HttpPost(urlFormated);\n try {\n MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n for (int index = 0;\n index < POSTparamList.size();\n index++) {\n if (POSTparamList.get(index).getName().equalsIgnoreCase("image")) {\n-   entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n+   entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n }\n else {\n entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n }\n }\n httpPost.setEntity(entity);\n HttpResponse response = httpClient.execute(httpPost, localContext);\n return processAnswer(response);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static synchronized BufferedImage loadBufferedJPEGImage(URL url) {\n BufferedImage image = null;\n if (url != null) {\n InputStream in = null;\n try {\n in = url.openStream();\n JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);\n image = decoder.decodeAsBufferedImage();\n }\n catch (Exception e) {\n log.severe("URL: " + url + " - " + e.getMessage());\n image = null;\n }\n finally {\n-   try {\n+   try {\n if (in != null) in.close();\n }\n catch (IOException ioe) {\n log.severe("URL: " + url + " - " + ioe.getMessage());\n }\n }\n if (image != null) {\n log.config("Image type : " + image.getType());\n if (image.getWidth() <= 0 || image.getHeight() <= 0) {\n log.severe("URL: " + url + " =0");\n image = null;\n }\n }\n }\n return image;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-341|SpecialSeperatorForDevSet|public void writeConfiguration(Writer out) throws IOException {\n if (myResource == null) {\n out.append("# Unable to print configuration resource\n");\n }\n else {\n-   URL url = myResource.getUrl();\n+   URL url = myResource.getUrl();\n InputStream in = url.openStream();\n if (in != null) {\n try {\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n else {\n out.append("# Unable to print configuration resource\n");\n }\n }\n }\n|SpecialSeperatorForDevSet|public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n try {\n Connection conn = null;\n Statement stmt = null;\n try {\n conn = fido.util.FidoDataSource.getConnection();\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\n AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\n prepTable.deleteLinkType(stmt, name);\n ObjectLinkTable objectLinkTable = new ObjectLinkTable();\n objectLinkTable.deleteLinkType(stmt, name);\n String sql = "delete from ClassLinkTypes where LinkName = '" + name + "'";\n stmt.executeUpdate(sql);\n conn.commit();\n }\n catch (SQLException e) {\n-   if (conn != null) conn.rollback();\n+   if (conn != null) conn.rollback();\n throw e;\n }\n finally {\n if (stmt != null) stmt.close();\n if (conn != null) conn.close();\n }\n }\n catch (SQLException e) {\n throw new FidoDatabaseException(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-342|SpecialSeperatorForDevSet|@Override public void doIt() {\n try {\n Shared.createBackup("articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos");\n if (mode.equals("FTP")) {\n FTPClient client = new FTPClient();\n client.connect(Constants.ftpHost);\n client.login(Constants.ftpUser, Constants.ftpPass);\n client.changeDirectory(Constants.ftpDir);\n File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n client.download("GT99_A09.rar", ff);\n client.disconnect(false);\n Shared.prepareMovements(ff);\n }\n else if (mode.equals("File")) {\n JFileChooser jfc = new JFileChooser();\n FileFilter f = new ExtensionFileFilter("Traslados de Total Pos", "rar");\n jfc.setFileFilter(f);\n int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n if (selection == JFileChooser.APPROVE_OPTION) {\n Shared.prepareMovements(jfc.getSelectedFile());\n }\n else {\n return;\n }\n }\n Shared.updateMovements();\n if (Shared.isHadMovements()) {\n MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Fue cargado el nuevo inventario satisfactoriamente!");\n msg.show(Shared.getMyMainWindows());\n }\n else {\n MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, "La tienda no tuvo ningun movimiento asociado.");\n msg.show(Shared.getMyMainWindows());\n }\n }\n catch (Exception ex) {\n MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Ha ocurrido un error.", ex);\n msg.show(Shared.getMyMainWindows());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String installOvalDefinitions(final String xml_location) {\n InputStream in_stream = null;\n-   try {\n+   try {\n URL url = _toURL(xml_location);\n if (url == null) {\n in_stream = new FileInputStream(xml_location);\n }\n else {\n in_stream = url.openStream();\n }\n }\n catch (IOException ex) {\n throw new OvalException(ex);\n }\n Class<OvalDefinitions> type = OvalDefinitions.class;\n OvalDefinitions object = _unmarshalObject(type, in_stream);\n String pid = _getDatastore().save(type, object);\n return pid;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-343|SpecialSeperatorForDevSet|public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {\n-   String code = "";\n+   String code = "";\n UserFunction function = null;\n ErrorLogger.debugLine("MFileLoader: loading >" + mFileName + ".m<");\n try {\n URL url = new URL(codeBase, directoryAndFile);\n InputStream in = url.openStream();\n BufferedReader inReader = new BufferedReader(new InputStreamReader(in));\n String line;\n while ((line = inReader.readLine()) != null) {\n code += line + "\n";\n }\n inReader.close();\n }\n catch (Exception e) {\n Errors.throwMathLibException("MFileLoader: m-file exception via web");\n }\n ErrorLogger.debugLine("MFileLoader: code: begin \n" + code + "\ncode end");\n FunctionParser funcParser = new FunctionParser();\n function = funcParser.parseFunction(code);\n function.setName(mFileName);\n ErrorLogger.debugLine("MFileLoader: finished webloading >" + mFileName + ".m<");\n return function;\n }\n|SpecialSeperatorForDevSet|public void Load(String fname) throws Exception {\n File f = null;\n try {\n if ("".equals(fname) || fname == null) throw new Exception();\n System.out.println("Loading mapfile " + fname);\n }\n catch (Exception e) {\n throw new Exception("File not found");\n }\n aType = null;\n fieldtype.clear();\n creatures.clear();\n aElement = new String("");\n-   content = null;\n+   content = null;\n Ax = -1;\n Ay = -1;\n aTemplate = -1;\n SAXParserFactory factory = SAXParserFactory.newInstance();\n data_read = 0;\n URL url = this.game.mainClass.getClassLoader().getResource(fname);\n if (url == null) {\n throw new Exception("Can't load map from : " + fname);\n }\n try {\n SAXParser parser = factory.newSAXParser();\n parser.parse(url.openStream(), this);\n }\n catch (Exception e) {\n System.out.println("Can't open XML : " + e);\n }\n for (int i = 0;\n i < fieldtype.size();\n i++) {\n System.out.println((MapField) fieldtype.get(i));\n }\n game.player.setpos(start_x, start_y);\n System.out.println("Player starting position set");\n start_x = -1;\n start_y = -1;\n System.out.println("Map \"" + fname + "\" loaded");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-344|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n-   md.update(input.getBytes("UTF-8"));\n+   md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-344|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-345|SpecialSeperatorForDevSet|public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {\n HttpClient client = new SSLHttpClient();\n-   StringBuilder builder = new StringBuilder(url).append("?" + SESSION_PARAM + "=" + sessionId).append("&" + CMD_PARAM + "=" + CMD_SERVERMODIF);\n+   StringBuilder builder = new StringBuilder(url).append("?" + SESSION_PARAM + "=" + sessionId).append("&" + CMD_PARAM + "=" + CMD_SERVERMODIF);\n HttpGet method = httpGetMethod(builder.toString());\n try {\n HttpResponse response = client.execute(method);\n Header header = response.getFirstHeader(HEADER_NAME);\n if (header != null && HEADER_VALUE.equals(header.getValue())) {\n int code = response.getStatusLine().getStatusCode();\n if (code == HttpStatus.SC_OK) {\n long expectedLength = response.getEntity().getContentLength();\n InputStream is = response.getEntity().getContent();\n FileUtils.writeInFile(is, out, expectedLength);\n return true;\n }\n else {\n throw new SynchronizationException("Command 'receive' : HTTP error code returned." + code, SynchronizationException.ERROR_RECEIVE);\n }\n }\n else {\n throw new SynchronizationException("HTTP header is invalid", SynchronizationException.ERROR_RECEIVE);\n }\n }\n catch (Exception e) {\n throw new SynchronizationException("Command 'receive' -> ", e, SynchronizationException.ERROR_RECEIVE);\n }\n }\n|SpecialSeperatorForDevSet|public void sendTextFile(String filename) throws IOException {\n Checker.checkEmpty(filename, "filename");\n URL url = _getFile(filename);\n PrintWriter out = getWriter();\n Streams.copy(new InputStreamReader(url.openStream()), out);\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-346|SpecialSeperatorForDevSet|public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {\n try {\n URL url = (getURL() != null) ? new URL(getURL().toExternalForm()) : new URL(((URL) ctxAttrValue).toExternalForm());\n InputStream reader = url.openStream();\n int available = reader.available();\n-   byte contents[] = new byte[available];\n+   byte contents[] = new byte[available];\n reader.read(contents, 0, available);\n reader.close();\n return new String(contents);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n return ex.toString();\n }\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n-   return success;\n+   return success;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-347|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String senha = "";\n String email = request.getParameter("EmailLogin");\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(request.getParameter("SenhaLogin").getBytes(), 0, request.getParameter("SenhaLogin").length());\n senha = new BigInteger(1, messageDigest.digest()).toString(16);\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n if (request.getHeader("REFERER").indexOf("?") != -1) {\n redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "&msg=3";\n }\n if (usuario.getNome() != null) {\n HttpSession session = request.getSession();\n session.setAttribute("usuario", usuario);\n redirect = "index.jsp";\n }\n response.sendRedirect(redirect);\n }\n|SpecialSeperatorForDevSet|public List<String> extractUrlList(String url) throws IOException, XPathExpressionException {\n LinkedList<String> list = new LinkedList<String>();\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n Tidy tidy = new Tidy();\n tidy.setErrout(new NullPrintWriter());\n Document doc = tidy.parseDOM(conn.getInputStream(), null);\n int len = conn.getContentLength();\n if (len <= 0) len = 32000;\n ByteArrayOutputStream bout = new ByteArrayOutputStream(len);\n PrintStream ps = new PrintStream(bout);\n tidy.pprint(doc, ps);\n ps.flush();\n String content = bout.toString();\n Pattern p = Pattern.compile("(http://[\\w\\\\\\./=&?;\n-]+)");\n Matcher m = p.matcher(content);\n while (m.find()) {\n list.add(m.group());\n }\n-   return list;\n+   return list;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-348|SpecialSeperatorForDevSet|@Override public EntrySet read(EntrySet set) throws ReadFailedException {\n if (!SourceCache.contains(url)) {\n SSL.certify(url);\n try {\n super.setParser(Parser.detectParser(url.openStream()));\n final PipedInputStream in = new PipedInputStream();\n final PipedOutputStream forParser = new PipedOutputStream(in);\n new Thread(new Runnable() {\n public void run() {\n try {\n OutputStream out = SourceCache.startCaching(url);\n InputStream is = url.openStream();\n-   byte[] buffer = new byte[100000];\n+   byte[] buffer = new byte[100000];\n while (true) {\n int amountRead = is.read(buffer);\n if (amountRead == -1) {\n break;\n }\n forParser.write(buffer, 0, amountRead);\n out.write(buffer, 0, amountRead);\n }\n forParser.close();\n out.close();\n SourceCache.finish(url);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n).start();\n super.setIos(in);\n }\n catch (Exception e) {\n throw new ReadFailedException(e);\n }\n return super.read(set);\n }\n else {\n try {\n return SourceCache.get(url).read(set);\n }\n catch (IOException e) {\n throw new ReadFailedException(e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void Sample1(String myField, String condition1, String condition2) throws SQLException {\n Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");\n connection.setAutoCommit(false);\n PreparedStatement ps = connection.prepareStatement("UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?");\n ps.setString(1, myField);\n ps.setString(2, condition1);\n ps.setString(3, condition2);\n // If more than 10 entries change, panic and rollback int numChanged = ps.executeUpdate();\n if(numChanged > 10) {\n connection.rollback();\n-   }\n+   }\n else {\n connection.commit();\n }\n ps.close();\n connection.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-349|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n-   LogService logServiceMock = EasyMock.createMock(LogService.class);\n+   LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n-   LogService logServiceMock = EasyMock.createMock(LogService.class);\n+   LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-349|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n-   String password = "123";\n+   String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n-   StringBuffer hexString = new StringBuffer();\n+   StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-350|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n-   }\n+   }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public void getWebByUrl(String strUrl, String charset, String fileIndex) {\n try {\n System.out.println("Getting web by url: " + strUrl);\n addReport("Getting web by url: " + strUrl + "\n");\n URL url = new URL(strUrl);\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n InputStream is = null;\n is = url.openStream();\n String filePath = fPath + "/web" + fileIndex + ".htm";\n PrintWriter pw = null;\n FileOutputStream fos = new FileOutputStream(filePath);\n OutputStreamWriter writer = new OutputStreamWriter(fos);\n pw = new PrintWriter(writer);\n BufferedReader bReader = new BufferedReader(new InputStreamReader(is));\n StringBuffer sb = new StringBuffer();\n String rLine = null;\n String tmp_rLine = null;\n while ((rLine = bReader.readLine()) != null) {\n tmp_rLine = rLine;\n int str_len = tmp_rLine.length();\n if (str_len > 0) {\n sb.append("\n" + tmp_rLine);\n pw.println(tmp_rLine);\n-   pw.flush();\n+   pw.flush();\n if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);\n }\n tmp_rLine = null;\n }\n is.close();\n pw.close();\n System.out.println("Get web successfully! " + strUrl);\n addReport("Get web successfully! " + strUrl + "\n");\n addWebSuccessed();\n }\n catch (Exception e) {\n System.out.println("Get web failed! " + strUrl);\n addReport("Get web failed! " + strUrl + "\n");\n addWebFailed();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-351|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n-   CachingResponseWrapper crw = (CachingResponseWrapper) response;\n+   CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|public static String md5String(String str) {\n try {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] hash = md.digest();\n final char[] hexChars = {\n '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }\n-  ;\n+  ;\n StringBuffer res = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n res.append(hexChars[0x0F & hash[i]]);\n }\n return res.toString();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-352|SpecialSeperatorForDevSet|public static String CheckUrl(String urlvalue) {\n String inputLine = "";\n try {\n URL url = new URL(urlvalue);\n HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-   inputLine = in.readLine().toString();\n+   inputLine = in.readLine().toString();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return inputLine;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n FileOutputStream fos = new FileOutputStream(dest);\n java.nio.channels.FileChannel channelSrc = fis.getChannel();\n java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n-   fos.close();\n+   fos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-353|SpecialSeperatorForDevSet|public static int[] bubbleSort(int... a) {\n boolean swapped;\n do {\n swapped = false;\n for (int i = 0;\n i < a.length - 1;\n i++) {\n if (a[i] > a[i + 1]) {\n int tmp = a[i];\n-   a[i] = a[i + 1];\n+   a[i] = a[i + 1];\n a[i + 1] = tmp;\n swapped = true;\n }\n }\n }\n while (swapped);\n return a;\n }\n|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n-   for (File f : new File(this.modelDir).listFiles()) {\n+   for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-354|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n-   String dirBase = Util.JAVA_DIR + File.separator + packageName;\n+   String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-354|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n-   writer.close();\n+   writer.close();\n reader.close();\n }\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n-   }\n+   }\n return "show";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-355|SpecialSeperatorForDevSet|public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n-   }\n+   }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n }\n|SpecialSeperatorForDevSet|public List load(String sourceType, Object source, String param) throws Exception {\n if (log.isTraceEnabled()) {\n log.trace("load " + source);\n }\n String location = null;\n String type = null;\n Object inputsource = null;\n if (source instanceof DynamicMBean) {\n sourceType = "MbeansDescriptorsDynamicMBeanSource";\n inputsource = source;\n }\n else if (source instanceof URL) {\n URL url = (URL) source;\n location = url.toString();\n type = param;\n inputsource = url.openStream();\n if (sourceType == null) {\n sourceType = sourceTypeFromExt(location);\n }\n }\n else if (source instanceof File) {\n location = ((File) source).getAbsolutePath();\n inputsource = new FileInputStream((File) source);\n type = param;\n if (sourceType == null) {\n sourceType = sourceTypeFromExt(location);\n }\n }\n else if (source instanceof InputStream) {\n type = param;\n inputsource = source;\n }\n else if (source instanceof Class) {\n location = ((Class) source).getName();\n type = param;\n inputsource = source;\n if (sourceType == null) {\n-   sourceType = "MbeansDescriptorsIntrospectionSource";\n+   sourceType = "MbeansDescriptorsIntrospectionSource";\n }\n }\n if (sourceType == null) {\n sourceType = "MbeansDescriptorsDigesterSource";\n }\n ModelerSource ds = getModelerSource(sourceType);\n List mbeans = ds.loadDescriptors(this, location, type, inputsource);\n return mbeans;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-356|SpecialSeperatorForDevSet|public static String getMessageDigest(String[] inputs) {\n if (inputs.length == 0) return null;\n try {\n MessageDigest sha = MessageDigest.getInstance("SHA-1");\n for (String input : inputs) sha.update(input.getBytes());\n byte[] hash = sha.digest();\n String CPass = "";\n int h = 0;\n String s = "";\n for (int i = 0;\n i < 20;\n i++) {\n h = hash[i];\n if (h < 0) h += 256;\n s = Integer.toHexString(h);\n if (s.length() < 2) CPass = CPass.concat("0");\n CPass = CPass.concat(s);\n }\n CPass = CPass.toUpperCase();\n return CPass;\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|private boolean saveNodeMeta(NodeInfo info, int properties) {\n-   boolean rCode = false;\n+   boolean rCode = false;\n String query = mServer + "save.php" + ("?id=" + info.getId());\n try {\n URL url = new URL(query);\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n byte[] body = Helpers.EncodeString(Helpers.ASCII, createURLEncodedPropertyString(info, properties));\n conn.setAllowUserInteraction(false);\n conn.setRequestMethod("POST");\n conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");\n setCredentials(conn);\n conn.setDoOutput(true);\n conn.getOutputStream().write(body);\n rCode = saveNode(info, conn);\n }\n catch (Exception ex) {\n System.out.println("Exception: " + ex.toString());\n }\n return rCode;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-357|SpecialSeperatorForDevSet|public static PersistencyParameters parse(String unitName) {\n URL[] persistenceUnits;\n try {\n persistenceUnits = Classpath.search("META-INF/", "persistence.xml");\n }\n catch (IOException e) {\n throw new Error(e);\n }\n Set classes = new HashSet();\n for (int i = 0;\n i < persistenceUnits.length;\n i++) {\n URL url = persistenceUnits[i];\n try {\n nu.xom.Builder b = new nu.xom.Builder(false);\n-   Document d = b.build(url.openStream());\n+   Document d = b.build(url.openStream());\n Nodes unitNodes = d.getRootElement().query("//p:persistence-unit", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int j = 0;\n j < unitNodes.size();\n j++) {\n Node unitNode = unitNodes.get(j);\n Element unitElt = ((Element) unitNode);\n String uName = unitElt.getAttributeValue("name");\n if (!uName.equals(unitName)) continue;\n {\n PersistencyParameters parameters = new PersistencyParameters();\n Nodes classNodes = unitElt.query("//p:property", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int k = 0;\n k < classNodes.size();\n k++) {\n Node classNode = classNodes.get(k);\n if (!(classNode instanceof Element)) continue;\n Element classElt = (Element) classNode;\n String elementName = classElt.getAttribute("name").getValue();\n if (elementName.equals("eclipselink.jdbc.url")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setJdbcUrl(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.user")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBUserName(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.password")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBPassword(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.driver")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBDriverClassName(elementValue);\n }\n }\n return parameters;\n }\n }\n }\n catch (Exception x) {\n x.printStackTrace();\n throw new Error(x);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public void createVendorSignature() {\n byte b;\n-   try {\n+   try {\n _vendorMessageDigest = MessageDigest.getInstance("MD5");\n _vendorSig = Signature.getInstance("MD5/RSA/PKCS#1");\n _vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n _vendorMessageDigest.update(getBankString().getBytes());\n _vendorMessageDigestBytes = _vendorMessageDigest.digest();\n _vendorSig.update(_vendorMessageDigestBytes);\n _vendorSignatureBytes = _vendorSig.sign();\n }\n catch (Exception e) {\n }\n ;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-358|SpecialSeperatorForDevSet|-  private void copyResource() throws Exception {\n+  private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\n Statement s = null;\n try {\n-   s = con.createStatement();\n+   s = con.createStatement();\n s.executeUpdate(statement);\n con.commit();\n }\n catch (Throwable e) {\n if (do_log) {\n logger.log(Level.INFO, "Update failed. Transaction is rolled back", e);\n }\n con.rollback();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-359|SpecialSeperatorForDevSet|static Matrix readMatrix(String filename, int nrow, int ncol) {\n Matrix cij = new Matrix(nrow, ncol);\n try {\n URL url = filename.getClass().getResource(filename);\n LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));\n for (int i = 0;\n i < nrow;\n i++) for (int j = 0;\n j < ncol;\n j++) cij.set(i, j, Double.parseDouble(lnr.readLine()));\n }\n catch (Exception xc) {\n xc.printStackTrace();\n }\n return cij;\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n-   try {\n+   try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-360|SpecialSeperatorForDevSet|protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {\n HttpPost request = new HttpPost(serviceUri);\n HttpParams params = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());\n HttpConnectionParams.setSoTimeout(params, getSoTimeout());\n HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);\n request.setParams(params);\n request.addHeader("Authorization", "Basic " + Base64Coder.encodeString(serviceUser + ":" + servicePass));\n HttpEntity entity;\n try {\n entity = new JSONEntity(jsonRequest);\n-   }\n+   }\n catch (UnsupportedEncodingException e1) {\n throw new JSONRPCException("Unsupported encoding", e1);\n }\n request.setEntity(entity);\n try {\n long t = System.currentTimeMillis();\n HttpResponse response = httpClient.execute(request);\n t = System.currentTimeMillis() - t;\n Log.d("json-rpc", "Request time :" + t);\n String responseString = EntityUtils.toString(response.getEntity());\n responseString = responseString.trim();\n JSONObject jsonResponse = new JSONObject(responseString);\n if (jsonResponse.has("error")) {\n Object jsonError = jsonResponse.get("error");\n if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get("error"));\n return jsonResponse;\n }\n else {\n return jsonResponse;\n }\n }\n catch (ClientProtocolException e) {\n throw new JSONRPCException("HTTP error", e);\n }\n catch (IOException e) {\n throw new JSONRPCException("IO error", e);\n }\n catch (JSONException e) {\n throw new JSONRPCException("Invalid JSON response", e);\n }\n }\n|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n-   if (con != null) {\n+   if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-361|SpecialSeperatorForDevSet|public void copy(File s, File t) throws IOException {\n FileChannel in = (new FileInputStream(s)).getChannel();\n FileChannel out = (new FileOutputStream(t)).getChannel();\n-   in.transferTo(0, s.length(), out);\n+   in.transferTo(0, s.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|@Override public void respondGet(HttpServletResponse resp) throws IOException {\n setHeaders(resp);\n final OutputStream os;\n if (willDeflate()) {\n resp.setHeader("Content-Encoding", "gzip");\n os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);\n }\n else os = resp.getOutputStream();\n-   transferStreams(url.openStream(), os);\n+   transferStreams(url.openStream(), os);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-362|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n-   assert (file.exists() && file.isFile());\n+   assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n-   }\n+   }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-363|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n-   return s;\n+   return s;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-363|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n final MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-364|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n-   int result = 20;\n+   int result = 20;\n if (args.length == 1) {\n StringBuffer urlString = new StringBuffer(args[0]);\n if (urlString.lastIndexOf("/") != urlString.length() - 1) {\n urlString.append('/');\n }\n urlString.append("GetConfig.jsp");\n URLConnection conn = new URL(urlString.toString()).openConnection();\n System.out.println(Configuration.readObject(conn.getInputStream()));\n result = 0;\n }\n else {\n System.err.println("usage: GetConfig <URL>");\n }\n System.exit(result);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-365|SpecialSeperatorForDevSet|-  protected String downloadURLtoString(URL url) throws IOException {\n+  protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|private VelocityEngine newVelocityEngine() {\n VelocityEngine velocityEngine = null;\n InputStream is = null;\n try {\n URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);\n is = url.openStream();\n Properties props = new Properties();\n props.load(is);\n velocityEngine = new VelocityEngine(props);\n-   velocityEngine.init();\n+   velocityEngine.init();\n }\n catch (Exception e) {\n throw new RuntimeException("can not find velocity props file, file=" + VELOCITY_PROPS_FILE, e);\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n }\n return velocityEngine;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-366|SpecialSeperatorForDevSet|-  private InputStream openStreamRaw(String filename) {\n+  private InputStream openStreamRaw(String filename) {\n InputStream stream = null;\n if (filename == null) return null;\n if (filename.length() == 0) {\n return null;\n }\n try {\n URL url = new URL(filename);\n stream = url.openStream();\n return stream;\n }\n catch (MalformedURLException mfue) {\n }\n catch (FileNotFoundException fnfe) {\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n ClassLoader cl = getClass().getClassLoader();\n stream = cl.getResourceAsStream("data/" + filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n }\n }\n stream = cl.getResourceAsStream(filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n }\n }\n return stream;\n }\n|SpecialSeperatorForDevSet|public void delete(Site site) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preparedStatement = null;\n ResultSet resultSet = null;\n try {\n String chkSql = "select id from t_ip_doc where channel_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n String[] selfDefinePath = getSelfDefinePath(site.getPath(), "1", connection, preparedStatement, resultSet);\n selfDefineDelete(selfDefinePath, connection, preparedStatement);\n preparedStatement = connection.prepareStatement(chkSql);\n-   preparedStatement.setString(1, site.getPath());\n+   preparedStatement.setString(1, site.getPath());\n resultSet = preparedStatement.executeQuery();\n if (resultSet.next()) {\n throw new Exception("ɾ��ʧ�ܣ�" + site.getName() + "���Ѿ����ĵ����ڣ�");\n }\n else {\n String sqlStr = "delete from t_ip_site where site_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n preparedStatement = connection.prepareStatement(sqlStr);\n preparedStatement.setString(1, site.getPath());\n preparedStatement.executeUpdate();\n }\n connection.commit();\n }\n catch (SQLException ex) {\n connection.rollback();\n throw ex;\n }\n finally {\n close(resultSet, null, preparedStatement, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-367|SpecialSeperatorForDevSet|public String sendRequest(java.lang.String servletName, java.lang.String request) {\n String reqxml = "";\n org.jdom.Document retdoc = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n-   System.out.println(serverURL);\n+   System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n java.io.InputStreamReader br = new java.io.InputStreamReader(gip, "UTF-8");\n retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n }\n catch (java.net.ConnectException conexp) {\n javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString("ConnectExceptionMessage"), "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n }\n System.out.println(reqxml);\n return "";\n }\n|SpecialSeperatorForDevSet|private int[] sort(int n) {\n-   int[] mas = new int[n];\n+   int[] mas = new int[n];\n Random rand = new Random();\n for (int i = 0;\n i < n;\n i++) {\n mas[i] = rand.nextInt(10) + 1;\n }\n boolean t = true;\n int tmp = 0;\n while (t) {\n t = false;\n for (int i = 0;\n i < mas.length - 1;\n i++) {\n if (mas[i] > mas[i + 1]) {\n tmp = mas[i];\n mas[i] = mas[i + 1];\n mas[i + 1] = tmp;\n t = true;\n }\n }\n }\n return mas;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-368|SpecialSeperatorForDevSet|public static PersistencyParameters parse(String unitName) {\n URL[] persistenceUnits;\n try {\n persistenceUnits = Classpath.search("META-INF/", "persistence.xml");\n }\n catch (IOException e) {\n throw new Error(e);\n-   }\n+   }\n Set classes = new HashSet();\n for (int i = 0;\n i < persistenceUnits.length;\n i++) {\n URL url = persistenceUnits[i];\n try {\n nu.xom.Builder b = new nu.xom.Builder(false);\n Document d = b.build(url.openStream());\n Nodes unitNodes = d.getRootElement().query("//p:persistence-unit", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int j = 0;\n j < unitNodes.size();\n j++) {\n Node unitNode = unitNodes.get(j);\n Element unitElt = ((Element) unitNode);\n String uName = unitElt.getAttributeValue("name");\n if (!uName.equals(unitName)) continue;\n {\n PersistencyParameters parameters = new PersistencyParameters();\n Nodes classNodes = unitElt.query("//p:property", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int k = 0;\n k < classNodes.size();\n k++) {\n Node classNode = classNodes.get(k);\n if (!(classNode instanceof Element)) continue;\n Element classElt = (Element) classNode;\n String elementName = classElt.getAttribute("name").getValue();\n if (elementName.equals("eclipselink.jdbc.url")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setJdbcUrl(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.user")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBUserName(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.password")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBPassword(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.driver")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBDriverClassName(elementValue);\n }\n }\n return parameters;\n }\n }\n }\n catch (Exception x) {\n x.printStackTrace();\n throw new Error(x);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n-   cacheHashtable.put(remoteName, localName);\n+   cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-369|SpecialSeperatorForDevSet|public void metodo1() {\n int temp;\n boolean flagDesordenado = true;\n while (flagDesordenado) {\n flagDesordenado = false;\n for (int i = 0;\n i < this.tamanoTabla - 1;\n i++) {\n if (tabla[i] > tabla[i + 1]) {\n flagDesordenado = true;\n temp = tabla[i];\n tabla[i] = tabla[i + 1];\n tabla[i + 1] = temp;\n }\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n-   }\n+   }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-370|SpecialSeperatorForDevSet|public static String fromHtml(URL url, String defaultEncoding, boolean overrideEncoding) throws IOException, BadDocumentException {\n URLConnection conn = url.openConnection();\n String contentType = conn.getContentType();\n String encoding = conn.getContentEncoding();\n-   if (encoding == null) {\n+   if (encoding == null) {\n int i = contentType.indexOf("charset");\n if (i >= 0) {\n String s = contentType.substring(i);\n i = s.indexOf('=');\n if (i >= 0) {\n s = contentType.substring(i + 1).trim();\n encoding = s.replace("\'", "").replace("\"", "").trim();\n if (encoding.equals("")) {\n encoding = defaultEncoding;\n }\n }\n }\n else {\n encoding = defaultEncoding;\n }\n }\n String expected = "text/html";\n if (contentType == null) {\n DefaultXMLNoteErrorHandler.warning(null, 90190, "Returned content type for url.openConnection() is null");\n contentType = expected;\n }\n int index = contentType.indexOf(';\n');\n if (index >= 0) {\n contentType = contentType.substring(0, index).trim();\n }\n if (!contentType.equals(expected)) {\n String msg = translator.translate("The content type of url '%s' is not '%s', it is '%s'");\n throw new BadDocumentException(String.format(msg, url.toString(), expected, contentType));\n }\n BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\n return fromHtml(in, encoding);\n }\n|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n-   md.reset();\n+   md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-371|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n-   _e.printStackTrace();\n+   _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n-   }\n+   }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-371|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n-   try {\n+   try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|public void createVendorSignature() {\n byte b;\n try {\n _vendorMessageDigest = MessageDigest.getInstance("MD5");\n _vendorSig = Signature.getInstance("MD5/RSA/PKCS#1");\n _vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n _vendorMessageDigest.update(getBankString().getBytes());\n _vendorMessageDigestBytes = _vendorMessageDigest.digest();\n _vendorSig.update(_vendorMessageDigestBytes);\n _vendorSignatureBytes = _vendorSig.sign();\n-   }\n+   }\n catch (Exception e) {\n }\n ;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-372|SpecialSeperatorForDevSet|public void run() {\n RandomAccessFile file = null;\n InputStream stream = null;\n try {\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("Range", "bytes=" + downloaded + "-");\n connection.connect();\n if (connection.getResponseCode() / 100 != 2) {\n error();\n }\n int contentLength = connection.getContentLength();\n if (contentLength < 1) {\n error();\n }\n if (size == -1) {\n size = contentLength;\n stateChanged();\n }\n file = new RandomAccessFile(destination, "rw");\n file.seek(downloaded);\n stream = connection.getInputStream();\n while (status == DOWNLOADING) {\n byte buffer[];\n if (size - downloaded > MAX_BUFFER_SIZE) {\n buffer = new byte[MAX_BUFFER_SIZE];\n }\n else {\n buffer = new byte[size - downloaded];\n }\n int read = stream.read(buffer);\n if (read == -1) break;\n file.write(buffer, 0, read);\n downloaded += read;\n stateChanged();\n }\n if (status == DOWNLOADING) {\n status = COMPLETE;\n stateChanged();\n }\n }\n catch (Exception e) {\n error();\n }\n finally {\n if (file != null) {\n try {\n file.close();\n }\n catch (Exception e) {\n }\n }\n if (stream != null) {\n try {\n stream.close();\n }\n catch (Exception e) {\n }\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public final String hashPassword(String password) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(password.getBytes());\n byte[] hash = md.digest();\n return "{\nSHA}\n" + byteToString(hash, 60);\n }\n catch (NoSuchAlgorithmException nsae) {\n-   log.error("Error getting password hash - " + nsae.getMessage());\n+   log.error("Error getting password hash - " + nsae.getMessage());\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-373|SpecialSeperatorForDevSet|-  protected void onlyFileCopy(File in, File out) throws IOException {\n+  protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n-   }\n+   }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-374|SpecialSeperatorForDevSet|public static final String calculate(File f) {\n MessageDigest md;\n BufferedReader rd;\n StringBuffer buffer = new StringBuffer("");\n try {\n rd = new BufferedReader(new FileReader(f));\n md = MessageDigest.getInstance("SHA");\n String line = "";\n while ((line = rd.readLine()) != null) buffer.append(line);\n-   md.update(buffer.toString().getBytes());\n+   md.update(buffer.toString().getBytes());\n byte[] digest = md.digest();\n String result = "";\n for (byte b : digest) result += String.format("%h", b & 0xFF);\n return result;\n }\n catch (Exception ex) {\n ex.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|public void seeURLConnection() throws Exception {\n URL url = new URL("http://wantmeet.iptime.org");\n URLConnection uc = url.openConnection();\n BufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n-   String s = null;\n+   String s = null;\n StringBuffer sb = new StringBuffer();\n while ((s = br.readLine()) != null) {\n sb.append(s);\n }\n br.close();\n log.debug("sb=[" + sb.toString() + "]");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-375|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n-   while (read > 0) {\n+   while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n-   while (read > 0) {\n+   while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-375|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n-   InputStream src = new FileInputStream(srcFile);\n+   InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n);\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-376|SpecialSeperatorForDevSet|public static String generateHash(String key) {\n key += "use_your_key_here";\n MessageDigest md;\n try {\n md = java.security.MessageDigest.getInstance("MD5");\n md.reset();\n md.update(key.getBytes());\n byte[] bytes = md.digest();\n StringBuffer buff = new StringBuffer();\n for (int l = 0;\n l < bytes.length;\n l++) {\n String hx = Integer.toHexString(0xFF & bytes[l]);\n if (hx.length() == 1) buff.append("0");\n buff.append(hx);\n }\n return buff.toString().trim();\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|protected void readURL(URL url) {\n InputStream istream = null;\n InputStreamReader isr = null;\n BufferedReader in = null;\n try {\n istream = url.openStream();\n isr = new InputStreamReader(istream);\n in = new BufferedReader(isr);\n String line = in.readLine();\n while (null != line) {\n System.out.println(line);\n line = in.readLine();\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n IOUtilities.close(in);\n IOUtilities.close(isr);\n IOUtilities.close(istream);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-377|SpecialSeperatorForDevSet|public void readUNI(Vector<String> descriptions, String source) {\n InputStream is = null;\n try {\n URL url = new URL(source);\n is = url.openStream();\n Scanner scanner = new Scanner(is);\n-   scanner.nextLine();\n+   scanner.nextLine();\n String line = "";\n String id = "";\n String desc = "";\n while (scanner.hasNextLine()) {\n line = scanner.nextLine();\n Scanner linescanner = new Scanner(line);\n linescanner.useDelimiter("\t");\n id = linescanner.next();\n linescanner.next();\n desc = linescanner.next();\n linescanner.useDelimiter("\n");\n linescanner.next();\n descriptions.add(id + " " + desc);\n }\n }\n catch (MalformedURLException e) {\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n if (is != null) try {\n is.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static String postRequest(String urlString, HashMap data) {\n String returnData = "";\n try {\n URL url = new URL(urlString);\n URLConnection connection = url.openConnection();\n connection.setDoOutput(true);\n connection.setDoInput(true);\n-   PrintWriter out = new PrintWriter(connection.getOutputStream());\n+   PrintWriter out = new PrintWriter(connection.getOutputStream());\n Object[] keySet = data.keySet().toArray();\n Object[] values = data.values().toArray();\n for (int count = 0;\n count < keySet.length;\n count++) {\n out.print(URLEncoder.encode((String) keySet[count]) + "=" + URLEncoder.encode((String) values[count]));\n if ((count + 1) < keySet.length) out.print("&");\n }\n out.close();\n BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n returnData += inputLine;\n }\n in.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n returnData = null;\n }\n return (returnData);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-378|SpecialSeperatorForDevSet|public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n String urlStr = System.getProperty(propertyName);\n if (urlStr == null || urlStr.length() == 0) {\n return null;\n }\n InputStream in = null;\n DOMRetriever xmlDoc = null;\n try {\n URL url = new URL(urlStr);\n xmlDoc = new DOMRetriever(in = url.openStream());\n-   }\n+   }\n catch (MalformedURLException e) {\n throw new RuntimeException(e);\n }\n finally {\n if (in != null) in.close();\n }\n return newInstance(xmlDoc);\n }\n|SpecialSeperatorForDevSet|protected Control createDialogArea(Composite parent) {\n Composite composite = (Composite) super.createDialogArea(parent);\n setTitle(DialogsMessages.getString("LicenseDialog.Caption"));\n setMessage(DialogsMessages.getString("LicenseDialog.Explanation"));\n Composite content = new Composite(composite, SWT.NONE);\n content.setLayoutData(new GridData(GridData.FILL_BOTH));\n final int ncol = 1;\n-   GridLayout layout = new GridLayout(1, false);\n+   GridLayout layout = new GridLayout(1, false);\n layout.numColumns = ncol;\n content.setLayout(layout);\n Browser browser = null;\n Text text = null;\n try {\n browser = new Browser(content, SWT.NONE);\n browser.setLayoutData(new GridData(GridData.FILL_BOTH));\n }\n catch (Throwable t) {\n text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n text.setLayoutData(new GridData(GridData.FILL_BOTH));\n }\n URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? "license.html" : "license.txt");\n InputStream in = null;\n BufferedReader r = null;\n StringBuffer sb = new StringBuffer();\n try {\n in = url.openStream();\n r = new BufferedReader(new InputStreamReader(in, "ISO-8859-1"));\n String line;\n while ((line = r.readLine()) != null) sb.append(line).append("\r\n");\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n if (r != null) {\n try {\n r.close();\n }\n catch (IOException e) {\n }\n }\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException e) {\n }\n }\n }\n if (browser != null) browser.setText(sb.toString());\n else text.setText(sb.toString());\n return composite;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-379|SpecialSeperatorForDevSet|public static String hashPasswordForOldMD5(String password) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(password.getBytes("UTF-8"));\n byte messageDigest[] = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & messageDigest[i]);\n if (hex.length() == 1) {\n hexString.append('0');\n }\n-   hexString.append(hex);\n+   hexString.append(hex);\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new IllegalStateException(nsae.getMessage());\n }\n catch (UnsupportedEncodingException uee) {\n throw new IllegalStateException(uee.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n-   InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n+   InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-380|SpecialSeperatorForDevSet|public String readURL(String urlLocation, ArrayList headers, RenderEngine c) throws Exception {\n URL url = null;\n HttpURLConnection conn = null;\n InputStream istream = null;\n try {\n url = new URL(urlLocation);\n conn = (HttpURLConnection) url.openConnection();\n }\n catch (Exception e) {\n throw new Exception("Soap is unable to retrieve URL for '" + urlLocation + "': " + e.getMessage());\n }\n loadCookies(urlLocation, conn, c);\n if (headers != null) {\n for (int i = 0;\n i < headers.size();\n i++) {\n String header = (String) headers.get(i);\n String key = header.substring(0, header.indexOf(":"));\n String value = header.substring(header.indexOf(":") + 2);\n Debug.log("Adding new request header '" + key + "'='" + value + "'");\n conn.setRequestProperty(key, value);\n }\n }\n Debug.debug("Set to use GET, URL=" + urlLocation);\n try {\n istream = conn.getInputStream();\n }\n catch (Exception e) {\n Debug.debug("Unable to capture input stream: " + e.getMessage());\n throw new Exception("Unable to capture input stream from URL '" + urlLocation + "': " + e.getMessage());\n }\n Debug.debug("'GET' - Got input stream.");\n if (conn.getContentLength() == -1) {\n Debug.debug("Content length = unknown");\n }\n else {\n Debug.debug("Content length = " + conn.getContentLength());\n-   }\n+   }\n byte data[] = null;\n int curPos = 0, contentLength = conn.getContentLength();\n if (conn.getContentLength() == -1) {\n String byteSize = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.tunable']/property[@type='engine.unknowncontentsize']/@value");\n if (byteSize == null) {\n contentLength = 4096;\n }\n else {\n contentLength = Integer.parseInt(byteSize);\n }\n Debug.debug("Content length unknown. Allowing fuzz of " + contentLength + " bytes.");\n }\n data = new byte[contentLength];\n try {\n int dataRead = 0;\n while ((dataRead = istream.read(data, curPos, contentLength - curPos)) != -1) {\n if (dataRead == 0) {\n break;\n }\n curPos += dataRead;\n }\n }\n catch (Exception e) {\n throw new Exception("Soap is unable to read data from HTTP connection: " + e.getMessage());\n }\n try {\n istream.close();\n conn.disconnect();\n }\n catch (MalformedURLException e) {\n throw new Exception("Soap request to site '" + urlLocation + "' is invalid: " + e.getMessage());\n }\n catch (IOException e) {\n throw new Exception("Soap request to site '" + urlLocation + "' failed to connect.");\n }\n String dataOut = new String(data);\n int counter = 0;\n data = null;\n istream = null;\n conn = null;\n url = null;\n return dataOut.trim();\n }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n-   if (inChannel != null) inChannel.close();\n+   if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-381|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = null;\n md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n-   return hash;\n+   return hash;\n }\n|SpecialSeperatorForDevSet|protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\n if (!this.hasError()) {\n try {\n StringWriter xmlSourceWriter = new StringWriter();\n IOUtils.copy(url.openStream(), xmlSourceWriter);\n processSubmittedDoap(xmlSourceWriter.toString());\n }\n catch (FileNotFoundException e) {\n Session.get().error(invalidUrlMsg);\n logger.warn("Error processing URL: " + invalidUrlMsg);\n }\n catch (IOException e) {\n setResponsePage(new ErrorReportPage(new UserReportableException("Unable to add doap using RDF supplied", DoapFormPage.class, e)));\n logger.warn("Error processing URL: " + url + ";\n " + e.getMessage(), e);\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-382|SpecialSeperatorForDevSet|public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\n FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\n ftpClient.connect(ftpserver, ftpport);\n ftpClient.login(username, password);\n return ftpClient;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n-   }\n+   }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-383|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("arguments: sourcefile destfile");\n System.exit(1);\n }\n FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n while (in.read(buffer) != -1) {\n buffer.flip();\n out.write(buffer);\n buffer.clear();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {\n HttpURLConnection urlConn = null;\n try {\n String params = generatorParamString(parameters);\n URL url = new URL(reqUrl);\n urlConn = (HttpURLConnection) url.openConnection();\n urlConn.setRequestMethod("POST");\n urlConn.setConnectTimeout(5000);\n urlConn.setReadTimeout(5000);\n urlConn.setDoOutput(true);\n byte[] b = params.getBytes();\n urlConn.getOutputStream().write(b, 0, b.length);\n urlConn.getOutputStream().flush();\n-   urlConn.getOutputStream().close();\n+   urlConn.getOutputStream().close();\n }\n catch (Exception e) {\n throw new RuntimeException(e.getMessage(), e);\n }\n return urlConn;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-384|SpecialSeperatorForDevSet|private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {\n try {\n OutputStream outStream = null;\n URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);\n if (url.getProtocol().equals("file")) {\n File file = new File(url.getFile());\n outStream = new FileOutputStream(file);\n }\n else {\n URLConnection connection = url.openConnection();\n connection.setDoOutput(true);\n outStream = connection.getOutputStream();\n }\n OutputStreamWriter writer = new OutputStreamWriter(outStream);\n Enumeration myEnum = profile.keys();\n while (myEnum.hasMoreElements()) {\n String key = myEnum.nextElement().toString();\n if (key != "id") writer.write(key + "=" + profile.getStringValue(key) + System.getProperty("line.separator"));\n }\n writer.flush();\n writer.close();\n-   }\n+   }\n catch (Exception e) {\n throw new MM4UCannotStoreUserProfileException(this, "setProfile", e.toString());\n }\n }\n|SpecialSeperatorForDevSet|private Retailer create() throws SQLException, IOException {\n-   Connection conn = null;\n+   Connection conn = null;\n Statement st = null;\n String query = null;\n ResultSet rs = null;\n try {\n conn = dataSource.getConnection();\n st = conn.createStatement();\n query = "insert into " + DB.Tbl.ret + "(" + col.title + "," + col.addDate + "," + col.authorId + ") " + "values('" + title + "',now()," + user.getId() + ")";\n st.executeUpdate(query, new String[] {\n col.id }\n);\n rs = st.getGeneratedKeys();\n if (!rs.next()) {\n throw new SQLException("Не удается получить generated key 'id' в таблице retailers.");\n }\n int genId = rs.getInt(1);\n rs.close();\n saveDescr(genId);\n conn.commit();\n Retailer ret = new Retailer();\n ret.setId(genId);\n ret.setTitle(title);\n ret.setDescr(descr);\n RetailerViewer.getInstance().somethingUpdated();\n return ret;\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (Exception e1) {\n }\n throw e;\n }\n finally {\n try {\n rs.close();\n }\n catch (Exception e) {\n }\n try {\n st.close();\n }\n catch (Exception e) {\n }\n try {\n conn.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-385|SpecialSeperatorForDevSet|public static String getContent(HttpUriRequest request) throws Exception {\n StringBuffer sb = new StringBuffer();\n HttpClient client = new DefaultHttpClient();\n HttpParams httpParams = client.getParams();\n HttpConnectionParams.setConnectionTimeout(httpParams, 30000);\n-   HttpConnectionParams.setSoTimeout(httpParams, 50000);\n+   HttpConnectionParams.setSoTimeout(httpParams, 50000);\n HttpResponse response = client.execute(request);\n HttpEntity entity = response.getEntity();\n if (entity != null) {\n BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), "UTF-8"), 8192);\n String line = null;\n while ((line = reader.readLine()) != null) {\n sb.append(line + "\n");\n }\n reader.close();\n }\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n-   return PodArchiveResolver.withinPodArchive(pod, filename);\n+   return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-386|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n-   }\n+   }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|public static synchronized String toSHA1(String str) {\n Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");\n try {\n MessageDigest md;\n md = MessageDigest.getInstance(SHA1);\n byte[] sha1hash = new byte[40];\n md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n catch (UnsupportedEncodingException ex) {\n ex.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-387|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n-   ip.close();\n+   ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n-   X509Certificate cert = (X509Certificate) it.next();\n+   X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-387|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n-   reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n+   reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n-   finally {\n+   finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-388|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n-   writer.println(in.nextLine());\n+   writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-388|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n-   }\n+   }\n writer.close();\n }\n|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n-   out.close();\n+   out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-389|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n-   jEdit.getProperty("version-check.url"), e.toString() }\n+   jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-390|SpecialSeperatorForDevSet|private String copyImageFile(String urlString, String filePath) {\n-   FileOutputStream destination = null;\n+   FileOutputStream destination = null;\n File destination_file = null;\n String inLine;\n String dest_name = "";\n byte[] buffer;\n int bytes_read;\n int last_offset = 0;\n int offset = 0;\n InputStream imageFile = null;\n try {\n URL url = new URL(urlString);\n imageFile = url.openStream();\n dest_name = url.getFile();\n offset = 0;\n last_offset = 0;\n offset = dest_name.indexOf('/', offset + 1);\n while (offset > -1) {\n last_offset = offset + 1;\n offset = dest_name.indexOf('/', offset + 1);\n }\n dest_name = filePath + File.separator + dest_name.substring(last_offset);\n destination_file = new File(dest_name);\n if (destination_file.exists()) {\n if (destination_file.isFile()) {\n if (!destination_file.canWrite()) {\n System.out.println("FileCopy: destination " + "file is unwriteable: " + dest_name);\n }\n System.out.println("File " + dest_name + " already exists. File will be overwritten.");\n }\n else {\n System.out.println("FileCopy: destination " + "is not a file: " + dest_name);\n }\n }\n else {\n File parentdir = parent(destination_file);\n if (!parentdir.exists()) {\n System.out.println("FileCopy: destination " + "directory doesn't exist: " + dest_name);\n }\n if (!parentdir.canWrite()) {\n System.out.println("FileCopy: destination " + "directory is unwriteable: " + dest_name);\n }\n }\n destination = new FileOutputStream(dest_name);\n buffer = new byte[1024];\n while (true) {\n bytes_read = imageFile.read(buffer);\n if (bytes_read == -1) break;\n destination.write(buffer, 0, bytes_read);\n }\n }\n catch (MalformedURLException ex) {\n System.out.println("Bad URL " + urlString);\n }\n catch (IOException ex) {\n System.out.println(" IO error: " + ex.getMessage());\n }\n finally {\n if (imageFile != null) {\n try {\n imageFile.close();\n }\n catch (IOException e) {\n }\n }\n if (destination != null) {\n try {\n destination.close();\n }\n catch (IOException e) {\n }\n }\n }\n return (dest_name);\n }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n-   }\n+   }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n outputStream.close();\n inputStream.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-391|SpecialSeperatorForDevSet|public static void main(String[] args) {\n FTPClient client = new FTPClient();\n try {\n client.connect("192.168.1.10");\n client.login("a", "123456");\n String[] names = client.listNames();\n for (String name : names) {\n System.out.println("Name = " + name);\n }\n FTPFile[] ftpFiles = client.listFiles();\n-   for (FTPFile ftpFile : ftpFiles) {\n+   for (FTPFile ftpFile : ftpFiles) {\n if (ftpFile.getType() == FTPFile.FILE_TYPE) {\n System.out.println("FTPFile: " + ftpFile.getName() + ";\n " + FileUtils.byteCountToDisplaySize(ftpFile.getSize()));\n }\n }\n client.logout();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n try {\n client.disconnect();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|-  private String hashKey(String key) {\n+  private String hashKey(String key) {\n String hashed = "";\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(key.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n hashed = hash.toString(16);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n hashed = String.valueOf(key.hashCode());\n }\n return hashed;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-392|SpecialSeperatorForDevSet|public static String POST(String url, String[][] props) throws IOException {\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n conn.setRequestMethod("POST");\n for (int i = 0;\n i < props.length;\n ++i) {\n conn.addRequestProperty(props[i][0], props[i][1]);\n-   }\n+   }\n conn.connect();\n try {\n return new String((byte[]) conn.getContent());\n }\n finally {\n conn.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|public static final String calculate(File f) {\n MessageDigest md;\n BufferedReader rd;\n-   StringBuffer buffer = new StringBuffer("");\n+   StringBuffer buffer = new StringBuffer("");\n try {\n rd = new BufferedReader(new FileReader(f));\n md = MessageDigest.getInstance("SHA");\n String line = "";\n while ((line = rd.readLine()) != null) buffer.append(line);\n md.update(buffer.toString().getBytes());\n byte[] digest = md.digest();\n String result = "";\n for (byte b : digest) result += String.format("%h", b & 0xFF);\n return result;\n }\n catch (Exception ex) {\n ex.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-393|SpecialSeperatorForDevSet|static void populateResources() throws BasicException {\n try {\n List<URL> templates = DatabaseValidator.listResources("/net/adrianromero/templates/" + Locale.getDefault().getLanguage());\n if (templates.size() == 0) {\n templates = DatabaseValidator.listResources("/net/adrianromero/templates/en");\n }\n-   for (URL url : templates) {\n+   for (URL url : templates) {\n String fileName = url.getFile();\n fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n if (fileName.endsWith(".xml") || fileName.endsWith(".txt")) {\n Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n InputStream is = url.openStream();\n StringBuffer strBuff = new StringBuffer();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String str;\n while ((str = br.readLine()) != null) {\n strBuff.append(str + "\n");\n }\n templateResource.setText(strBuff.toString());\n templateResource.save();\n }\n }\n }\n catch (MalformedURLException e1) {\n logger.error("Unable to load templates", e1);\n }\n catch (IOException e1) {\n logger.error("Unable to load templates", e1);\n }\n String[][] images = new String[][] {\n {\n "default.user", "yast_sysadmin.png" }\n, {\n "default.product", "colorize.png" }\n, {\n "Window.Logo", "windowlogo.png" }\n, {\n "Image.Backarrow", "3backarrow.png" }\n }\n;\n for (int i = 0;\n i < images.length;\n i++) {\n Image img = new Image();\n img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource("/net/adrianromero/images/" + images[i][1])));\n img.save();\n Property imgProperty = new Property(images[i][0]);\n imgProperty.setValue("" + img.getId());\n imgProperty.save();\n }\n }\n|SpecialSeperatorForDevSet|public HttpResponseExchange execute() throws Exception {\n HttpResponseExchange forwardResponse = null;\n int fetchSizeLimit = Config.getInstance().getFetchLimitSize();\n while (null != lastContentRange) {\n forwardRequest.setBody(new byte[0]);\n-   ContentRangeHeaderValue old = lastContentRange;\n+   ContentRangeHeaderValue old = lastContentRange;\n long sendSize = fetchSizeLimit;\n if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {\n sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);\n }\n if (sendSize <= 0) {\n break;\n }\n lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));\n forwardResponse = syncFetch(forwardRequest);\n if (sendSize < fetchSizeLimit) {\n lastContentRange = null;\n }\n }\n return forwardResponse;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-394|SpecialSeperatorForDevSet|private void redirect(TargetApp app, HttpServletRequest request, HttpServletResponse response) throws IOException {\n URL url = new URL(app.getUrl() + request.getRequestURI());\n s_log.debug("Redirecting to " + url);\n URLConnection urlConnection = url.openConnection();\n Map<String, List<String>> fields = urlConnection.getHeaderFields();\n for (String key : fields.keySet()) {\n StringBuffer values = new StringBuffer();\n boolean comma = false;\n for (String value : fields.get(key)) {\n if (comma) {\n values.append(", ");\n }\n values.append(value);\n comma = true;\n }\n if (key != null) {\n response.setHeader(key, values.toString());\n-   }\n+   }\n else {\n response.setStatus(Integer.parseInt(values.toString().split(" ")[1]));\n }\n }\n InputStream in = urlConnection.getInputStream();\n try {\n ServletOutputStream out = response.getOutputStream();\n byte[] buff = new byte[1024];\n int len;\n while ((len = in.read(buff)) != -1) {\n out.write(buff, 0, len);\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n-   out.close();\n+   out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-395|SpecialSeperatorForDevSet|protected static InputStream loadResource(String resource) throws MissingResourceException {\n Thread thread = Thread.currentThread();\n ClassLoader cLoader = thread.getContextClassLoader();\n URL url = cLoader.getResource(resource);\n if (url == null) {\n throw new MissingResourceException("Unable to find resource '" + resource + "'.", resource, resource);\n }\n try {\n InputStream is = url.openStream();\n return is;\n }\n catch (IOException e) {\n throw new MissingResourceException("Unable to load resource '" + resource + "' (IOException).", resource, resource);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|@Override protected String doInBackground(String... params) {\n try {\n final HttpParams param = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(param, 30000);\n-   HttpConnectionParams.setSoTimeout(param, 30000);\n+   HttpConnectionParams.setSoTimeout(param, 30000);\n DefaultHttpClient client = new DefaultHttpClient(param);\n HttpPost post = new HttpPost("http://www.google.com/loc/json");\n post.setEntity(new StringEntity(params[0]));\n if (DEBUG) Log.d("Location", params[0]);\n HttpResponse resp = client.execute(post);\n if (resp.getStatusLine().getStatusCode() == 200) {\n HttpEntity entity = resp.getEntity();\n String result = EntityUtils.toString(entity);\n return result;\n }\n else {\n if (isFirstLocation) {\n requestGearsLocation(1);\n isFirstLocation = false;\n return RESULT_FIRST_FAILE;\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-396|SpecialSeperatorForDevSet|@Override public void handledRun() throws Throwable {\n try {\n URL url = new URL(ONLINE_CLIENT_DATA + "gamedata.xml");\n BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n int lastversion = 0;\n String readHeader1 = br.readLine();\n String readHeader2 = br.readLine();\n String[] parts = readHeader2.split(" ");\n lastversion = new Integer(parts[1]);\n GameDatabase.loadVersion();\n if (GameDatabase.version < lastversion) {\n Logger.log(LogTypes.LOG, "Downloading new gamedata");\n BufferedOutputStream bo = null;\n File destfile = new File(GameDatabase.dataFilePath);\n if (!destfile.createNewFile()) {\n destfile.delete();\n destfile.createNewFile();\n }\n bo = new BufferedOutputStream(new FileOutputStream(destfile));\n bo.write((readHeader1 + "\n").getBytes());\n-   bo.write((readHeader2 + "\n").getBytes());\n+   bo.write((readHeader2 + "\n").getBytes());\n int readedbyte;\n while ((readedbyte = br.read()) != -1) {\n bo.write(readedbyte);\n }\n bo.flush();\n try {\n br.close();\n bo.close();\n }\n catch (Exception ex) {\n Logger.log(ex);\n }\n }\n }\n catch (java.net.UnknownHostException unknownHost) {\n Logger.log("Sourceforge is down, cannot update gamedata");\n }\n catch (Exception e) {\n JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), "The gamedata is outdated, but Coopnet couldn't update it!", "Gamedata outdated", JOptionPane.INFORMATION_MESSAGE);\n throw e;\n }\n finally {\n GameDatabase.loadVersion();\n GameDatabase.load("", GameDatabase.dataFilePath);\n GameDatabase.detectGames();\n }\n }\n|SpecialSeperatorForDevSet|public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\n try {\n MessageDigest digester = MessageDigest.getInstance(DIGEST);\n SecureRandom random = SecureRandom.getInstance(RANDOM);\n digester.reset();\n for (int i = 0;\n i < ITERATIONS;\n i++) {\n digester.update(salt);\n digester.update(cryptPassword.getBytes("UTF-8"));\n }\n byte[] hash = digester.digest();\n random.setSeed(hash);\n int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n-   generator.init(maxKeySize, random);\n+   generator.init(maxKeySize, random);\n SecretKey key = generator.generateKey();\n Cipher cipher = Cipher.getInstance(CIPHER);\n cipher.init(Cipher.DECRYPT_MODE, key);\n byte[] decoded = cipher.doFinal(encoded);\n return decoded;\n }\n catch (Exception e) {\n StorePlugin.getDefault().log(e);\n }\n return new byte[0];\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-397|SpecialSeperatorForDevSet|public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {\n if (all) {\n StringMaker sm = new StringMaker();\n Enumeration enu = classLoader.getResources(name);\n while (enu.hasMoreElements()) {\n URL url = (URL) enu.nextElement();\n InputStream is = url.openStream();\n String s = read(is);\n if (s != null) {\n sm.append(s);\n sm.append(StringPool.NEW_LINE);\n }\n is.close();\n }\n return sm.toString().trim();\n-   }\n+   }\n else {\n InputStream is = classLoader.getResourceAsStream(name);\n String s = read(is);\n is.close();\n return s;\n }\n }\n|SpecialSeperatorForDevSet|public void run() {\n long time = System.currentTimeMillis();\n logger.info("Version: " + version);\n String hostname = properties.getProperty("mercuriushost");\n String protocol = properties.getProperty("mercuriusprotocol");\n String port = properties.getProperty("mercuriusport");\n String path = properties.getProperty("mercuriuspath");\n String action = properties.getProperty("mercuriusaction");\n logger.info("Getting Timex Data --- " + getTimeDifferent(time));\n String xml = timexfrmk.getUnsynchedSessionsXMLFormat();\n logger.info("Done getting Timex Data --- " + getTimeDifferent(time));\n if (timexfrmk.getSessionCount() > 0) {\n try {\n logger.info("Sending Timex Data to Mercurius --- " + getTimeDifferent(time));\n String data = URLEncoder.encode("action", "UTF-8") + "=" + URLEncoder.encode(action, "UTF-8");\n data += "&" + URLEncoder.encode("data", "UTF-8") + "=" + URLEncoder.encode(xml, "UTF-8");\n if (isAdminFeedKeySet()) {\n data += "&" + URLEncoder.encode("adminfeedkey", "UTF-8") + "=" + URLEncoder.encode(adminfeedkey, "UTF-8");\n logger.debug("Using adminfeedkey to authenticate");\n }\n else {\n Authenticator.setDefault(new CustomAuthenticator(user, password));\n logger.debug("Using user/pwd to authenticate");\n }\n String u = protocol + "://" + hostname + ":" + port + path;\n logger.debug("Posting xml data to: " + u);\n URL url = new URL(u);\n URLConnection conn = url.openConnection();\n conn.setRequestProperty("User-Agent", "TimexMercurius/" + version);\n conn.setDoOutput(true);\n-   OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+   OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(data);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n StringBuffer s = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n s.append(line);\n }\n if (s.length() > 0) {\n logger.debug(s.toString());\n if (s.toString().indexOf("Result:") != -1) {\n logger.info(s.toString().substring(s.toString().indexOf("Result:")));\n if (s.toString().indexOf("Result: Successful") != -1) {\n timexfrmk.updateSessionsStatus();\n }\n }\n else {\n logger.error(s.toString());\n }\n }\n else {\n logger.info("No data returned");\n }\n wr.close();\n rd.close();\n }\n catch (MalformedURLException e) {\n logger.error(e);\n logger.trace(e, e);\n }\n catch (IOException e) {\n logger.error(e);\n logger.trace(e, e);\n }\n catch (Exception e) {\n logger.error(e);\n logger.trace(e, e);\n }\n }\n else {\n logger.info("There is nothing to send. Everything has already been synchronized");\n }\n timexfrmk.close();\n logger.info("Done!!! Total Time: " + getTimeDifferent(time));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-398|SpecialSeperatorForDevSet|public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {\n String digest1 = user + ":" + realm + ":" + password;\n String digest2 = method + ":" + uri;\n try {\n MessageDigest digestOne = MessageDigest.getInstance("md5");\n digestOne.update(digest1.getBytes());\n String hexDigestOne = getHexString(digestOne.digest());\n MessageDigest digestTwo = MessageDigest.getInstance("md5");\n-   digestTwo.update(digest2.getBytes());\n+   digestTwo.update(digest2.getBytes());\n String hexDigestTwo = getHexString(digestTwo.digest());\n String digest3 = hexDigestOne + ":" + nonce + ":" + hexDigestTwo;\n MessageDigest digestThree = MessageDigest.getInstance("md5");\n digestThree.update(digest3.getBytes());\n String hexDigestThree = getHexString(digestThree.digest());\n return hexDigestThree;\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {\n String digest1 = user + ":" + realm + ":" + password;\n String digest2 = method + ":" + uri;\n try {\n MessageDigest digestOne = MessageDigest.getInstance("md5");\n digestOne.update(digest1.getBytes());\n String hexDigestOne = getHexString(digestOne.digest());\n MessageDigest digestTwo = MessageDigest.getInstance("md5");\n digestTwo.update(digest2.getBytes());\n String hexDigestTwo = getHexString(digestTwo.digest());\n String digest3 = hexDigestOne + ":" + nonce + ":" + hexDigestTwo;\n MessageDigest digestThree = MessageDigest.getInstance("md5");\n digestThree.update(digest3.getBytes());\n String hexDigestThree = getHexString(digestThree.digest());\n return hexDigestThree;\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (Exception e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-398|SpecialSeperatorForDevSet|public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {\n String digest1 = user + ":" + realm + ":" + password;\n String digest2 = method + ":" + uri;\n try {\n MessageDigest digestOne = MessageDigest.getInstance("md5");\n digestOne.update(digest1.getBytes());\n String hexDigestOne = getHexString(digestOne.digest());\n MessageDigest digestTwo = MessageDigest.getInstance("md5");\n digestTwo.update(digest2.getBytes());\n String hexDigestTwo = getHexString(digestTwo.digest());\n String digest3 = hexDigestOne + ":" + nonce + ":" + hexDigestTwo;\n MessageDigest digestThree = MessageDigest.getInstance("md5");\n digestThree.update(digest3.getBytes());\n String hexDigestThree = getHexString(digestThree.digest());\n return hexDigestThree;\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n return null;\n }\n|SpecialSeperatorForDevSet|public static String md5(String data) {\n try {\n MessageDigest md = MessageDigest.getInstance(MD);\n-   md.update(data.getBytes(UTF8));\n+   md.update(data.getBytes(UTF8));\n return encodeHex(md.digest());\n }\n catch (Exception e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-399|SpecialSeperatorForDevSet|public static void main(final String args[]) {\n if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) {\n System.out.println("Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>");\n System.out.println(" where the framework is the first element in the class path");\n System.out.println("Options: -d Enables the generation of debug output");\n return;\n }\n boolean debug = args.length == 3;\n File prologFile = new File(debug ? args[1] : args[0]);\n if (!prologFile.isFile()) {\n System.out.println("The given file does not exist.");\n return;\n }\n File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar");\n String source;\n try {\n source = FileUtils.readFileToString(prologFile);\n }\n catch (IOException ex) {\n System.out.println("Error reading file: " + ex.getMessage());\n return;\n }\n Parser myParser = new PrologParserImpl();\n PrologProgram myProgram;\n try {\n myProgram = (PrologProgram) myParser.parse(source);\n }\n catch (Exception ex) {\n System.out.println("Could not parse file: " + ex.getMessage());\n return;\n }\n try {\n FactVisitor myVisitor = new FactVisitor();\n myVisitor.visit(myProgram);\n Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();\n if (adapterLayer.size() == 0) {\n System.out.println("No adapters to generate, " + "did you forget to run the comeback rules?");\n return;\n }\n URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);\n ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));\n AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();\n Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter");\n adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));\n AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType("net/sourceforge/comeback/Adapters"), annotationType);\n GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);\n context.setGenerateDebugOutput(debug);\n Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();\n-   while (iterator.hasNext()) {\n+   while (iterator.hasNext()) {\n TypeGenerationInfo info = iterator.next();\n context.generateAdapter(info);\n }\n ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n ObjectOutputStream out = new ObjectOutputStream(serialized);\n out.writeObject(adapterLayer);\n out.close();\n adapterWriter.writeResource("net/sourceforge/comeback/adapterlayer.ser", serialized.toByteArray());\n String[] sharedClassesPrefixes = new String[2];\n Assembler assembler = new Assembler(adapterWriter);\n PatternClassFilter filter = new PatternClassFilter();\n URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class");\n JarURLConnection connection = (JarURLConnection) url.openConnection();\n sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);\n filter = new PatternClassFilter();\n url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class");\n connection = (JarURLConnection) url.openConnection();\n sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);\n String tmp = debug ? args[2] : args[1];\n adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));\n adapterWriter.close();\n }\n catch (Throwable e) {\n e.printStackTrace();\n return;\n }\n }\n|SpecialSeperatorForDevSet|private void upgradeSchema() throws IOException {\n Statement stmt = null;\n try {\n int i = getSchema();\n LOG.info("DB is currently at schema " + i);\n if (i < SCHEMA_VERSION) {\n LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n while (i < SCHEMA_VERSION) {\n String qry;\n switch(i) {\n case 1: qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";\n stmt.executeUpdate(qry);\n break;\n }\n i++;\n }\n conn.commit();\n }\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (SQLException e2) {\n LOG.error(SQL_ERROR, e2);\n-   }\n+   }\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error upgrading data store", e);\n }\n finally {\n try {\n if (stmt != null) stmt.close();\n conn.setAutoCommit(true);\n }\n catch (SQLException e) {\n LOG.error(SQL_ERROR, e);\n throw new IOException("Unable to cleanup SQL resources", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-400|SpecialSeperatorForDevSet|private InputStream openStreamRaw(String filename) {\n InputStream stream = null;\n if (filename == null) return null;\n if (filename.length() == 0) {\n return null;\n }\n try {\n URL url = new URL(filename);\n stream = url.openStream();\n return stream;\n }\n catch (MalformedURLException mfue) {\n }\n catch (FileNotFoundException fnfe) {\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n ClassLoader cl = getClass().getClassLoader();\n stream = cl.getResourceAsStream("data/" + filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n-   }\n+   }\n }\n stream = cl.getResourceAsStream(filename);\n if (stream != null) {\n String cn = stream.getClass().getName();\n if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {\n return stream;\n }\n }\n return stream;\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n-   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n+   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-401|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testSpeedyShareUpload() throws Exception {\n request.setUrl("http://www.speedyshare.com/upload.php");\n request.setFile("fileup0", file);\n HttpResponse response = httpClient.execute(request);\n assertTrue(response.is2xxSuccess());\n assertTrue(response.getResponseHeaders().size() > 0);\n String body = IOUtils.toString(response.getResponseBody());\n assertTrue(body.contains("Download link"));\n assertTrue(body.contains("Delete password"));\n-   response.close();\n+   response.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-402|SpecialSeperatorForDevSet|protected boolean checkLink(URL url) {\n try {\n URLConnection connection = url.openConnection();\n connection.connect();\n return true;\n }\n catch (IOException e) {\n MsgLog.error("DapParser.checkLink(): IOException: " + e.toString());\n return false;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n int result = 20;\n if (args.length == 1) {\n StringBuffer urlString = new StringBuffer(args[0]);\n if (urlString.lastIndexOf("/") != urlString.length() - 1) {\n urlString.append('/');\n }\n urlString.append("GetConfig.jsp");\n URLConnection conn = new URL(urlString.toString()).openConnection();\n System.out.println(Configuration.readObject(conn.getInputStream()));\n-   result = 0;\n+   result = 0;\n }\n else {\n System.err.println("usage: GetConfig <URL>");\n }\n System.exit(result);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-403|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new Exception(e.getMessage());\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new Exception(e.getMessage());\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n-   return hash;\n+   return hash;\n }\n|SpecialSeperatorForDevSet|public int update(BusinessObject o) throws DAOException {\n int update = 0;\n Contact contact = (Contact) o;\n try {\n PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery("UPDATE_CONTACT"));\n pst.setString(1, contact.getName());\n pst.setString(2, contact.getFirstname());\n pst.setString(3, contact.getPhone());\n pst.setString(4, contact.getEmail());\n if (contact.getAccount() == 0) {\n pst.setNull(5, java.sql.Types.INTEGER);\n }\n else {\n pst.setInt(5, contact.getAccount());\n }\n pst.setBoolean(6, contact.isArchived());\n pst.setInt(7, contact.getId());\n update = pst.executeUpdate();\n if (update <= 0) {\n-   connection.rollback();\n+   connection.rollback();\n throw new DAOException("Number of rows <= 0");\n }\n else if (update > 1) {\n connection.rollback();\n throw new DAOException("Number of rows > 1");\n }\n connection.commit();\n }\n catch (SQLException e) {\n Log.write(e.getMessage());\n throw new DAOException("A SQLException has occured");\n }\n catch (NullPointerException npe) {\n Log.write(npe.getMessage());\n throw new DAOException("Connection null");\n }\n return update;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-404|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n logger.info("copyFile(File src=" + src + ", File dest=" + dest + ", int bufSize=" + bufSize + ", boolean force=" + force + ") - start");\n File f = new File(Configuration.getArchiveDir());\n if (!f.exists()) {\n f.mkdir();\n }\n if (dest.exists()) {\n if (force) {\n dest.delete();\n }\n else {\n throw new IOException("Cannot overwrite existing file: " + dest);\n-   }\n+   }\n }\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) {\n break;\n }\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n }\n logger.debug("copyFile(File, File, int, boolean) - end");\n }\n|SpecialSeperatorForDevSet|public int create(BusinessObject o) throws DAOException {\n int insert = 0;\n int id = 0;\n Item item = (Item) o;\n try {\n PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery("INSERT_ITEM"));\n pst.setString(1, item.getDescription());\n pst.setDouble(2, item.getUnit_price());\n pst.setInt(3, item.getQuantity());\n pst.setDouble(4, item.getVat());\n pst.setInt(5, item.getIdProject());\n pst.setInt(6, item.getIdCurrency());\n insert = pst.executeUpdate();\n if (insert <= 0) {\n connection.rollback();\n throw new DAOException("Number of rows <= 0");\n }\n else if (insert > 1) {\n connection.rollback();\n throw new DAOException("Number of rows > 1");\n }\n Statement st = connection.createStatement();\n-   ResultSet rs = st.executeQuery("select max(id_item) from item");\n+   ResultSet rs = st.executeQuery("select max(id_item) from item");\n rs.next();\n id = rs.getInt(1);\n connection.commit();\n }\n catch (SQLException e) {\n Log.write(e.getMessage());\n throw new DAOException("A SQLException has occured");\n }\n catch (NullPointerException npe) {\n Log.write(npe.getMessage());\n throw new DAOException("Connection null");\n }\n return id;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-405|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n-   }\n+   }\n|SpecialSeperatorForDevSet|public synchronized String encryptPassword(String passwordString) throws Exception {\n-   MessageDigest digest = null;\n+   MessageDigest digest = null;\n digest = MessageDigest.getInstance("SHA");\n digest.update(passwordString.getBytes("UTF-8"));\n byte raw[] = digest.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-406|SpecialSeperatorForDevSet|public static PersistencyParameters parse(String unitName) {\n URL[] persistenceUnits;\n try {\n persistenceUnits = Classpath.search("META-INF/", "persistence.xml");\n }\n catch (IOException e) {\n throw new Error(e);\n }\n Set classes = new HashSet();\n for (int i = 0;\n i < persistenceUnits.length;\n i++) {\n URL url = persistenceUnits[i];\n try {\n nu.xom.Builder b = new nu.xom.Builder(false);\n Document d = b.build(url.openStream());\n Nodes unitNodes = d.getRootElement().query("//p:persistence-unit", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int j = 0;\n j < unitNodes.size();\n j++) {\n Node unitNode = unitNodes.get(j);\n Element unitElt = ((Element) unitNode);\n String uName = unitElt.getAttributeValue("name");\n if (!uName.equals(unitName)) continue;\n {\n PersistencyParameters parameters = new PersistencyParameters();\n Nodes classNodes = unitElt.query("//p:property", new XPathContext("p", "http://java.sun.com/xml/ns/persistence"));\n for (int k = 0;\n k < classNodes.size();\n k++) {\n Node classNode = classNodes.get(k);\n if (!(classNode instanceof Element)) continue;\n Element classElt = (Element) classNode;\n String elementName = classElt.getAttribute("name").getValue();\n-   if (elementName.equals("eclipselink.jdbc.url")) {\n+   if (elementName.equals("eclipselink.jdbc.url")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setJdbcUrl(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.user")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBUserName(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.password")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBPassword(elementValue);\n }\n else if (elementName.equals("eclipselink.jdbc.driver")) {\n String elementValue = classElt.getAttribute("value").getValue();\n parameters.setDBDriverClassName(elementValue);\n }\n }\n return parameters;\n }\n }\n }\n catch (Exception x) {\n x.printStackTrace();\n throw new Error(x);\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-407|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n-   dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n+   dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public PageLoader(String pageAddress) throws Exception {\n URL url = new URL(pageAddress);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n inputLine = "";\n while (in.ready()) {\n-   inputLine = inputLine + in.readLine();\n+   inputLine = inputLine + in.readLine();\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-408|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n-   md.update(input.getBytes("UTF-8"));\n+   md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|public void insertUser(final List<NewUser> newUsers) {\n try {\n connection.setAutoCommit(false);\n final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\n final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();\n final List<String> userDirs = new ArrayList<String>();\n Iterator<NewUser> iter = newUsers.iterator();\n NewUser user;\n Realm realm;\n String username;\n PasswordHasher ph;\n while (iter.hasNext()) {\n user = iter.next();\n username = user.username.toLowerCase(locale);\n ph = PasswordFactory.getInstance().getPasswordHasher();\n pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));\n realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());\n realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm("null"), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, "", user.password)));\n if (user.realms != null) {\n for (String realmName : user.realms) {\n realm = cm.getRealm(realmName);\n realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));\n }\n user.realms = null;\n }\n }\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("user.add"), Statement.RETURN_GENERATED_KEYS);\n Iterator<NewUser> iter = newUsers.iterator();\n NewUser user;\n DomainDb domain = null;\n while (iter.hasNext()) {\n user = iter.next();\n psImpl.setString(1, user.username);\n psImpl.setString(2, user.username.toLowerCase(locale));\n if (domain == null || (domain.getDomainId() != user.domainId)) {\n-   domain = (DomainDb) cmDB.getDomain(user.domainId);\n+   domain = (DomainDb) cmDB.getDomain(user.domainId);\n }\n userDirs.add(user.username + '@' + domain.getDomainName());\n psImpl.setInt(3, user.domainId);\n psImpl.setString(4, pass.get(user.username).password);\n psImpl.setString(5, pass.get(user.username).salt);\n psImpl.executeUpdate();\n rsImpl = psImpl.getGeneratedKeys();\n if (rsImpl.next()) {\n user.userId = rsImpl.getInt(1);\n rsImpl.close();\n }\n else {\n throw new SQLException("Need to have a user id generated.");\n }\n }\n }\n }\n);\n new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n @Override public void executeProcessReturnNull() throws SQLException {\n psImpl = connImpl.prepareStatement(sqlCommands.getProperty("realm.addUser"));\n Iterator<NewUser> iter = newUsers.iterator();\n NewUser user;\n List<RealmWithEncryptedPass> list;\n RealmWithEncryptedPass rwep;\n RealmDb realm;\n while (iter.hasNext()) {\n user = iter.next();\n list = realmPass.get(user.username);\n if (list != null) {\n Iterator<RealmWithEncryptedPass> iter1 = list.iterator();\n while (iter1.hasNext()) {\n rwep = iter1.next();\n realm = (RealmDb) rwep.realm;\n psImpl.setInt(1, realm.getRealmId());\n psImpl.setInt(2, user.userId);\n psImpl.setInt(3, user.domainId);\n psImpl.setString(4, rwep.password);\n psImpl.executeUpdate();\n }\n }\n }\n }\n }\n);\n connection.commit();\n Iterator<String> iterator = userDirs.iterator();\n while (iterator.hasNext()) {\n cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n }\n cm.createDirectories();\n }\n catch (GeneralSecurityException e) {\n log.error(e);\n if (connection != null) {\n try {\n connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n throw new RuntimeException("Error updating Realms. Unable to continue Operation.");\n }\n catch (SQLException sqle) {\n log.error(sqle);\n if (connection != null) {\n try {\n connection.rollback();\n }\n catch (SQLException ex) {\n }\n }\n }\n finally {\n if (connection != null) {\n try {\n connection.setAutoCommit(true);\n }\n catch (SQLException ex) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-409|SpecialSeperatorForDevSet|public void loadExistingAntlibs(ClassLoader classLoader) {\n URL antlibUrl;\n URI antlibUri;\n try {\n Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\n while (resources.hasMoreElements()) {\n URL url = resources.nextElement();\n InputStream stream = url.openStream();\n BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));\n for (String line = reader.readLine();\n line != null;\n line = reader.readLine()) {\n String pkg = line.trim();\n URI uri = URI.create("antlib:" + pkg);\n URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml");\n antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\n try {\n antlibUrl = antlibUri.toURL();\n }\n catch (IllegalArgumentException e) {\n System.err.println("base uri: " + url);\n System.err.println("relativepath: " + resource2antlib);\n System.err.println("target uri: " + antlibUri);\n throw new RuntimeException(antlibUri.toString(), e);\n }\n loadAntLib(antlibUrl, uri);\n }\n reader.close();\n stream.close();\n }\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw new RuntimeException(e);\n }\n catch (URISyntaxException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n-   if (entry.isDirectory()) {\n+   if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n outputStream.close();\n inputStream.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-410|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n-   byte[] buf = new byte[4096];\n+   byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|public static String getMD5Hash(String in) {\n StringBuffer result = new StringBuffer(32);\n-   try {\n+   try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(in.getBytes());\n Formatter f = new Formatter(result);\n for (byte b : md5.digest()) {\n f.format("%02x", b);\n }\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n return result.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-411|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n-   dst.close();\n+   dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-411|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n-   buffer.clear();\n+   buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-412|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n-   hasher.update(title.getBytes());\n+   hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-412|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|-  public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-413|SpecialSeperatorForDevSet|public PageLoader(String pageAddress) throws Exception {\n-   URL url = new URL(pageAddress);\n+   URL url = new URL(pageAddress);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n inputLine = "";\n while (in.ready()) {\n inputLine = inputLine + in.readLine();\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n-   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n+   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-414|SpecialSeperatorForDevSet|private String GetResponse(URL url) {\n String content = null;\n try {\n-   HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+   HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.setDoOutput(false);\n conn.setRequestMethod("GET");\n if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n while ((line = br.readLine()) != null) content += line;\n }\n else {\n }\n }\n catch (MalformedURLException e) {\n e.getStackTrace();\n }\n catch (IOException e) {\n e.getStackTrace();\n }\n return content;\n }\n|SpecialSeperatorForDevSet|public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\n ProjectDeploymentConfiguration config = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n try {\n String query = "INSERT INTO ProjectDeploymentConfigurations" + "(projectID, name, description) VALUES (" + projectID + ", '" + name + "', '" + description + "')";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProjectDeploymentConfigurations WHERE " + " projectID = " + projectID + " AND " + " name = '" + name + "' AND " + " description = '" + description + "'";\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n-   connection.rollback();\n+   connection.rollback();\n String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n }\n config = getProjectDeploymentConfiguration(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n catch (Exception e) {\n }\n String msg = "SQLException in createNewProjectDeploymentConfig";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return config;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-415|SpecialSeperatorForDevSet|public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n if (url == null) throw new IllegalArgumentException("Keystore url may not be null");\n-   LOG.debug("Initializing key store");\n+   LOG.debug("Initializing key store");\n KeyStore keystore = null;\n if (url.getFile().endsWith(".p12")) keystore = KeyStore.getInstance("pkcs12");\n else keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n keystore.load(url.openStream(), password != null ? password.toCharArray() : null);\n return keystore;\n }\n|SpecialSeperatorForDevSet|public PTask stop(PTask task, SyrupConnection con) throws Exception {\n PreparedStatement s = null;\n ResultSet result = null;\n try {\n s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\n s.setString(1, task.key());\n result = s.executeQuery();\n con.commit();\n if (result.next()) {\n String url = result.getString("worker");\n InputStream i = null;\n try {\n Object b = new URL(url).getContent();\n if (b instanceof InputStream) {\n i = (InputStream) b;\n byte[] bb = new byte[256];\n-   int ll = i.read(bb);\n+   int ll = i.read(bb);\n String k = new String(bb, 0, ll);\n if (k.equals(task.key())) {\n return task;\n }\n }\n }\n catch (Exception e) {\n }\n finally {\n if (i != null) {\n i.close();\n }\n }\n PreparedStatement s2 = null;\n s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\n s2.setString(1, task.key());\n s2.executeUpdate();\n task = sqlImpl().queryFunctions().readPTask(task.key(), con);\n sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);\n con.commit();\n }\n }\n finally {\n con.rollback();\n close(result);\n }\n return task;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-416|SpecialSeperatorForDevSet|public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\n URL url = new URL(urlToRetrieve);\n URLConnection uc = url.openConnection();\n InputStream is = uc.getInputStream();\n BufferedReader in = new BufferedReader(new InputStreamReader(is));\n StringBuilder output = new StringBuilder(16384);\n String str;\n boolean first = true;\n while ((str = in.readLine()) != null) {\n if (!first) output.append("\n");\n first = false;\n output.append(str);\n }\n-   in.close();\n+   in.close();\n System.err.println(((HttpURLConnection) uc).getResponseMessage());\n return output.toString();\n }\n|SpecialSeperatorForDevSet|public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\n Transformer oTransformer;\n StreamResult oStreamResult;\n StreamSource oStreamSrcXML;\n StringWriter oStrWritter;\n InputStream oXMLStream = null;\n String sTransformed;\n StringBuffer oPostTransform;\n String sKey;\n String sMedia;\n Object sVal;\n Page oCurrentPage;\n int iCloseHead, iOpenBody, iCloseBody;\n int iReaded;\n char CharBuffer[] = new char[8192];\n String sCharBuffer;\n long lElapsed = 0;\n final String sSep = System.getProperty("file.separator");\n if (DebugFile.trace) {\n lElapsed = System.currentTimeMillis();\n DebugFile.writeln("Begin Pageset.buildSiteForEdit(" + sBasePath + "," + sOutputPath + "," + sCtrlPath + "," + sMenuPath + ")");\n DebugFile.incIdent();\n }\n FileSystem oFS = new FileSystem();\n Vector vPages = pages();\n if (!sBasePath.endsWith(sSep)) sBasePath += sSep;\n String sWebServer = oEnvironmentProps.getProperty("webserver", "");\n if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln("WARNING: webserver property not set at EnvironmentProperties");\n if (!sWebServer.endsWith("/")) sWebServer += "/";\n Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), "containers");\n if (oContainers == null) {\n if (DebugFile.trace) DebugFile.writeln("ERROR: <containers> node not found.");\n throw new DOMException(DOMException.NOT_FOUND_ERR, "<containers> node not found");\n }\n if (DebugFile.trace) DebugFile.writeln("new FileInputStream(" + (sURI.startsWith("file://") ? sURI.substring(7) : sURI) + ")");\n for (int c = 0;\n c < vPages.size();\n c++) {\n oCurrentPage = (Page) vPages.get(c);\n oXMLStream = new FileInputStream(sURI.startsWith("file://") ? sURI.substring(7) : sURI);\n oStreamSrcXML = new StreamSource(oXMLStream);\n oStrWritter = new StringWriter();\n oStreamResult = new StreamResult(oStrWritter);\n try {\n oTransformer = StylesheetCache.newTransformer(sBasePath + "xslt" + sSep + "templates" + sSep + oMSite.name() + sSep + oCurrentPage.template());\n sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\n if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + "=" + sMedia);\n if (null == sMedia) sMedia = "html";\n else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\n if (null == oCurrentPage.getTitle()) throw new NullPointerException("Page " + String.valueOf(c) + " title is null");\n if (DebugFile.trace) DebugFile.writeln("Page.filePath(" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "." + sMedia + ")");\n oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "." + sMedia);\n StylesheetCache.setParameters(oTransformer, oEnvironmentProps);\n StylesheetCache.setParameters(oTransformer, oUserProps);\n oTransformer.setParameter("param_page", ((Page) (vPages.get(c))).getTitle());\n oTransformer.transform(oStreamSrcXML, oStreamResult);\n }\n catch (TransformerConfigurationException e) {\n oLastXcpt = e;\n sMedia = null;\n SourceLocator sl = e.getLocator();\n if (DebugFile.trace) {\n if (sl == null) {\n DebugFile.writeln("ERROR TransformerConfigurationException " + e.getMessage());\n }\n else {\n DebugFile.writeln("ERROR TransformerConfigurationException " + e.getMessage() + " line=" + String.valueOf(sl.getLineNumber()) + " column=" + String.valueOf(sl.getColumnNumber()));\n }\n }\n }\n catch (TransformerException e) {\n oLastXcpt = e;\n sMedia = null;\n if (DebugFile.trace) DebugFile.writeln("ERROR TransformerException " + e.getMessageAndLocation());\n }\n oTransformer = null;\n oStreamResult = null;\n sTransformed = oStrWritter.toString();\n if (DebugFile.trace) DebugFile.writeln("transformation length=" + String.valueOf(sTransformed.length()));\n if (sTransformed.length() > 0) {\n iCloseHead = sTransformed.indexOf("</head");\n if (iCloseHead < 0) iCloseHead = sTransformed.indexOf("</HEAD");\n iOpenBody = sTransformed.indexOf("<body", iCloseHead);\n if (iOpenBody < 0) iOpenBody = sTransformed.indexOf("<BODY", iCloseHead);\n iCloseBody = sTransformed.indexOf(">", iOpenBody + 5);\n for (char s = sTransformed.charAt(iCloseBody + 1);\n s == '\r' || s == '\n' || s == ' ' || s == '\t';\n s = sTransformed.charAt(++iCloseBody)) ;\n oPostTransform = new StringBuffer(sTransformed.length() + 4096);\n oPostTransform.append(sTransformed.substring(0, iCloseHead));\n oPostTransform.append("\n<script language=\"JavaScript\" src=\"" + sMenuPath + "\"></script>");\n oPostTransform.append("\n<script language=\"JavaScript\" src=\"" + sIntegradorPath + "\"></script>\n");\n oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\n oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\n try {\n sCharBuffer = oFS.readfilestr(sCtrlPath, "UTF-8");\n if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + " characters readed");\n }\n catch (com.enterprisedt.net.ftp.FTPException ftpe) {\n throw new IOException(ftpe.getMessage());\n }\n try {\n if (DebugFile.trace) DebugFile.writeln("Gadgets.replace(" + sCtrlPath + ",http://demo.hipergate.com/," + sWebServer + ")");\n Gadgets.replace(sCharBuffer, "http://demo.hipergate.com/", sWebServer);\n }\n catch (org.apache.oro.text.regex.MalformedPatternException e) {\n }\n oPostTransform.append("<!--Begin " + sCtrlPath + "-->\n");\n oPostTransform.append(sCharBuffer);\n sCharBuffer = null;\n oPostTransform.append("\n<!--End " + sCtrlPath + "-->\n");\n oPostTransform.append(sTransformed.substring(iCloseBody));\n }\n else {\n oPostTransform = new StringBuffer("Page " + ((Page) vPages.get(c)).getTitle() + " could not be rendered.");\n if (oLastXcpt != null) oPostTransform.append("<BR>" + oLastXcpt.getMessageAndLocation());\n }\n if (DebugFile.trace) DebugFile.writeln("new FileWriter(" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia + ")");\n if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia, oPostTransform.toString(), "UTF-8");\n else try {\n oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia, Gadgets.replace(oPostTransform.toString(), ":selPageOptions", sSelPageOptions), "UTF-8");\n-   }\n+   }\n catch (Exception e) {\n }\n oPostTransform = null;\n sTransformed = null;\n }\n oXMLStream.close();\n if (DebugFile.trace) {\n DebugFile.writeln("done in " + String.valueOf(System.currentTimeMillis() - lElapsed) + " miliseconds");\n DebugFile.decIdent();\n DebugFile.writeln("End Pageset.buildSiteForEdit()");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-417|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n-   }\n+   }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public List load(String sourceType, Object source, String param) throws Exception {\n if (log.isTraceEnabled()) {\n log.trace("load " + source);\n }\n String location = null;\n String type = null;\n Object inputsource = null;\n if (source instanceof DynamicMBean) {\n sourceType = "MbeansDescriptorsDynamicMBeanSource";\n inputsource = source;\n }\n else if (source instanceof URL) {\n URL url = (URL) source;\n location = url.toString();\n type = param;\n inputsource = url.openStream();\n if (sourceType == null) {\n sourceType = sourceTypeFromExt(location);\n }\n }\n else if (source instanceof File) {\n location = ((File) source).getAbsolutePath();\n inputsource = new FileInputStream((File) source);\n type = param;\n if (sourceType == null) {\n sourceType = sourceTypeFromExt(location);\n }\n }\n else if (source instanceof InputStream) {\n type = param;\n inputsource = source;\n }\n else if (source instanceof Class) {\n location = ((Class) source).getName();\n type = param;\n inputsource = source;\n if (sourceType == null) {\n sourceType = "MbeansDescriptorsIntrospectionSource";\n }\n }\n if (sourceType == null) {\n sourceType = "MbeansDescriptorsDigesterSource";\n-   }\n+   }\n ModelerSource ds = getModelerSource(sourceType);\n List mbeans = ds.loadDescriptors(this, location, type, inputsource);\n return mbeans;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-418|SpecialSeperatorForDevSet|private void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n-   FileChannel outChannel = new FileOutputStream(out).getChannel();\n+   FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public static String SHA(String source) {\n logger.info(source);\n String result = null;\n try {\n-   MessageDigest digest = MessageDigest.getInstance("SHA");\n+   MessageDigest digest = MessageDigest.getInstance("SHA");\n digest.update(source.getBytes());\n byte[] bytes = digest.digest();\n result = EncodeUtils.hexEncode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n logger.info(result);\n return result;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-419|SpecialSeperatorForDevSet|public static void main(String args[]) {\n int[] mas = {\n 3, 5, 6, 9, 1, -3, -4, -88 }\n;\n int sort = 0;\n for (int j = 0;\n j < (mas.length);\n j++) {\n for (int i = 0;\n i < mas.length - 1;\n i++) {\n if (mas[i] > mas[i + 1]) {\n sort = mas[i];\n mas[i] = mas[i + 1];\n mas[i + 1] = sort;\n }\n }\n }\n for (int i = 0;\n i < mas.length;\n i++) {\n System.out.print(" " + mas[i]);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected String doRawRequest(String postData) throws IOException {\n URL url = new URL(SERVICE_URL);\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(postData);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n StringBuffer sb = new StringBuffer();\n String line;\n while ((line = rd.readLine()) != null) {\n sb.append(line);\n }\n wr.close();\n rd.close();\n return sb.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-420|SpecialSeperatorForDevSet|public boolean getContent(String userId, String latestMsgId) {\n try {\n String targetUrl = "http://api.fanfou.com/statuses/user_timeline.xml?id=" + userId + "&since_id=" + latestMsgId;\n URL url = new URL(targetUrl);\n InputStream in = url.openStream();\n ArrayList<MessageObj> list;\n if (in != null) {\n MessageListDOMParser parser = new MessageListDOMParser();\n list = (ArrayList<MessageObj>) parser.parseXML(in);\n TransactionDAO dao = new TransactionDAO();\n dao.insert(list);\n }\n return true;\n }\n catch (Exception e) {\n e.printStackTrace();\n return false;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n-   }\n+   }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-421|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n-   else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n+   else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n-   conexionBD.close(ps);\n+   conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-422|SpecialSeperatorForDevSet|public void execUpdate(String sqlStmts[]) throws SQLException {\n if (conn == null || conn.isClosed()) throw new SQLException("The connection has not been established yet.");\n if (sqlStmts == null || sqlStmts.length == 0) throw new SQLException("SQL-statement is null.");\n conn.setAutoCommit(false);\n try {\n for (int i = 0;\n i < sqlStmts.length;\n i++) {\n stmt = conn.createStatement();\n stmt.executeUpdate(sqlStmts[i]);\n-   logger.debug(sqlStmts[i]);\n+   logger.debug(sqlStmts[i]);\n stmt.close();\n }\n conn.commit();\n }\n catch (SQLException ex) {\n conn.rollback();\n throw ex;\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) {\n try {\n FileChannel inChannel = null, outChannel = null;\n try {\n out.getParentFile().mkdirs();\n inChannel = new FileInputStream(in).getChannel();\n outChannel = new FileOutputStream(out).getChannel();\n outChannel.transferFrom(inChannel, 0, inChannel.size());\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n catch (Exception e) {\n ObjectUtils.throwAsError(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-423|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n-   }\n+   }\n }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n-   GUIUtilities.error(view, "read-error", args);\n+   GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-424|SpecialSeperatorForDevSet|public Wget2(URL url, File f) throws IOException {\n System.out.println("bajando: " + url);\n if (f == null) {\n by = new ByteArrayOutputStream();\n }\n else {\n by = new FileOutputStream(f);\n }\n URLConnection uc = url.openConnection();\n if (uc instanceof HttpURLConnection) {\n leerHttp((HttpURLConnection) uc);\n }\n else {\n-   throw new IOException("solo se pueden descargar url http");\n+   throw new IOException("solo se pueden descargar url http");\n }\n }\n|SpecialSeperatorForDevSet|-  public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n+  public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-425|SpecialSeperatorForDevSet|public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n String urlStr = System.getProperty(propertyName);\n if (urlStr == null || urlStr.length() == 0) {\n return null;\n }\n InputStream in = null;\n DOMRetriever xmlDoc = null;\n try {\n URL url = new URL(urlStr);\n xmlDoc = new DOMRetriever(in = url.openStream());\n }\n catch (MalformedURLException e) {\n throw new RuntimeException(e);\n }\n finally {\n-   if (in != null) in.close();\n+   if (in != null) in.close();\n }\n return newInstance(xmlDoc);\n }\n|SpecialSeperatorForDevSet|public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\n byte[] digest = new byte[0];\n if (!(attribute.getLocalName().equals("xmlns") || attribute.getLocalName().startsWith("xmlns:"))) try {\n MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n md.update((byte) 0);\n md.update((byte) 0);\n md.update((byte) 0);\n md.update((byte) 2);\n md.update(getExpandedName(attribute).getBytes("UnicodeBigUnmarked"));\n md.update((byte) 0);\n md.update((byte) 0);\n md.update(attribute.getAttributeValue().getBytes("UnicodeBigUnmarked"));\n digest = md.digest();\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n throw new OMException(e);\n }\n catch (UnsupportedEncodingException e) {\n throw new OMException(e);\n }\n return digest;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-426|SpecialSeperatorForDevSet|public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {\n Assert.notNull(resourceName, "Resource name must not be null");\n ClassLoader clToUse = classLoader;\n if (clToUse == null) {\n clToUse = ClassUtils.getDefaultClassLoader();\n }\n Properties properties = new Properties();\n Enumeration urls = clToUse.getResources(resourceName);\n while (urls.hasMoreElements()) {\n URL url = (URL) urls.nextElement();\n-   InputStream is = null;\n+   InputStream is = null;\n try {\n URLConnection con = url.openConnection();\n con.setUseCaches(false);\n is = con.getInputStream();\n properties.load(is);\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n }\n return properties;\n }\n|SpecialSeperatorForDevSet|public static synchronized String getMD5_Base64(String input) {\n MessageDigest msgDigest = null;\n try {\n msgDigest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("System doesn't support MD5 algorithm.");\n }\n try {\n msgDigest.update(input.getBytes("UTF-8"));\n }\n catch (java.io.UnsupportedEncodingException ex) {\n throw new IllegalStateException("System doesn't support your EncodingException.");\n-   }\n+   }\n byte[] rawData = msgDigest.digest();\n byte[] encoded = Base64.encode(rawData);\n String retValue = new String(encoded);\n return retValue;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-427|SpecialSeperatorForDevSet|public void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.main);\n mButton1 = (Button) findViewById(R.id.myButton1);\n mButton2 = (Button) findViewById(R.id.myButton2);\n mTextView1 = (TextView) findViewById(R.id.myTextView1);\n mButton1.setOnClickListener(new Button.OnClickListener() {\n public void onClick(View v) {\n String uriAPI = "http://www.sina.com";\n HttpPost httpRequest = new HttpPost(uriAPI);\n List<NameValuePair> params = new ArrayList<NameValuePair>();\n params.add(new BasicNameValuePair("str", "post string"));\n try {\n httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));\n HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n if (httpResponse.getStatusLine().getStatusCode() == 200) {\n String strResult = EntityUtils.toString(httpResponse.getEntity());\n mTextView1.setText(strResult);\n }\n else {\n mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());\n }\n }\n catch (ClientProtocolException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (IOException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (Exception e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n }\n }\n);\n mButton2.setOnClickListener(new Button.OnClickListener() {\n public void onClick(View v) {\n String uriAPI = "http://www.sina.com";\n HttpGet httpRequest = new HttpGet(uriAPI);\n try {\n HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n if (httpResponse.getStatusLine().getStatusCode() == 200) {\n String strResult = EntityUtils.toString(httpResponse.getEntity());\n strResult = eregi_replace("(\r\n|\r|\n|\n\r)", "", strResult);\n mTextView1.setText(strResult);\n }\n else {\n mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());\n }\n }\n catch (ClientProtocolException e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (IOException e) {\n-   mTextView1.setText(e.getMessage().toString());\n+   mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n catch (Exception e) {\n mTextView1.setText(e.getMessage().toString());\n e.printStackTrace();\n }\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|public void load(URL url) throws IOException {\n ResourceLocator locator = null;\n try {\n locator = new RelativeResourceLocator(url);\n }\n catch (URISyntaxException use) {\n throw new IllegalArgumentException("Bad URL: " + use);\n }\n ResourceLocatorTool.addResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);\n InputStream stream = null;\n try {\n stream = url.openStream();\n if (stream == null) {\n throw new IOException("Failed to load materials file '" + url + "'");\n }\n logger.fine("Loading materials from '" + url + "'...");\n load(stream);\n }\n finally {\n-   if (stream != null) stream.close();\n+   if (stream != null) stream.close();\n ResourceLocatorTool.removeResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);\n locator = null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-428|SpecialSeperatorForDevSet|private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {\n String remoteHomeDir = null;\n noRetriesSoFar = 0;\n while (true) {\n try {\n ftpClient.connect(ftpAddress, ftpPort);\n int reply = ftpClient.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftpClient.disconnect();\n throw new IOException();\n }\n if (!ftpClient.login(user, password)) {\n throw new IOException();\n }\n remoteHomeDir = ftpClient.printWorkingDirectory();\n-   msgEntry.setAppContext("logonToServer()");\n+   msgEntry.setAppContext("logonToServer()");\n msgEntry.setMessageText("Logged into FTP server " + ftpAddress + ":" + ftpPort + " as user " + user);\n logger.logProcess(msgEntry);\n break;\n }\n catch (IOException e) {\n logoutAndDisconnect(ftpClient);\n if (noRetriesSoFar++ < noRetries) {\n waitBetweenRetry();\n notifyAndStartWaitingFlag = false;\n }\n else {\n notifyAndStartWaitingFlag = true;\n errEntry.setThrowable(e);\n errEntry.setAppContext("logonToServer()");\n errEntry.setAppMessage("Unable to login after " + (noRetriesSoFar - 1) + " retries. Max Retries.\n" + "Address:" + ftpAddress + "\n" + "User:" + user);\n errEntry.setSubjectSendEmail("Unable to login to " + ftpAddress + " after " + (noRetriesSoFar - 1) + " retries.");\n logger.logError(errEntry);\n break;\n }\n }\n }\n return remoteHomeDir;\n }\n|SpecialSeperatorForDevSet|public void create() {\n Connection conn = OrmHandler.getInstance().getSession().getConnection(this);\n Statement stat = null;\n StringBuilder sql = new StringBuilder(256);\n try {\n getRenderer().printCreateDatabase(this, sql);\n conn = createConnection();\n stat = conn.createStatement();\n stat.executeUpdate(sql.toString());\n conn.commit();\n if (LOGGER.isLoggable(Level.INFO)) {\n LOGGER.info(sql.toString());\n }\n }\n catch (Throwable e) {\n if (conn != null) {\n try {\n conn.rollback();\n }\n catch (SQLException ex) {\n LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);\n }\n }\n throw new IllegalArgumentException("Statement error:\n" + sql, e);\n }\n finally {\n try {\n close(conn, stat, null, true);\n }\n catch (IllegalStateException ex) {\n LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-429|SpecialSeperatorForDevSet|private static String genRandomGUID(boolean secure) {\n String valueBeforeMD5 = "";\n String valueAfterMD5 = "";\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n return valueBeforeMD5;\n }\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n-   sbValueBeforeMD5.append(":");\n+   sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n String strTemp = "";\n for (int i = 0;\n i < array.length;\n i++) {\n strTemp = (Integer.toHexString(array[i] & 0XFF));\n if (strTemp.length() == 1) {\n valueAfterMD5 = valueAfterMD5 + "0" + strTemp;\n }\n else {\n valueAfterMD5 = valueAfterMD5 + strTemp;\n }\n }\n return valueAfterMD5.toUpperCase();\n }\n|SpecialSeperatorForDevSet|public String postURL(String urlLocation, ArrayList headers, String content, HashMap postVariables, RenderEngine c) throws Exception {\n String postContent = null;\n if (postVariables != null) {\n boolean firstElement = true;\n postContent = new String();\n Iterator elements = postVariables.keySet().iterator();\n while (elements.hasNext()) {\n String key = (String) elements.next();\n String val = (String) postVariables.get(key);\n if (firstElement) {\n postContent += Encoder.URLEncode(key) + "=" + Encoder.URLEncode(val);\n firstElement = false;\n }\n else {\n postContent += "&" + Encoder.URLEncode(key) + "=" + Encoder.URLEncode(val);\n }\n }\n elements = null;\n }\n else {\n postContent = content;\n }\n Debug.log("Connecting to URL '" + urlLocation + "', content '" + postContent + "'");\n URL url = null;\n try {\n url = new URL(urlLocation);\n }\n catch (MalformedURLException e) {\n Debug.log("Unable to retrieve URL '" + urlLocation + "': " + e.getMessage());\n return null;\n }\n StringBuffer lines = new StringBuffer();\n HttpURLConnection conn = null;\n boolean contentLengthFound = false;\n try {\n conn = (HttpURLConnection) url.openConnection();\n loadCookies(urlLocation, conn, c);\n if (headers != null) {\n for (int i = 0;\n i < headers.size();\n i++) {\n String header = (String) headers.get(i);\n String key = header.substring(0, header.indexOf(":"));\n String value = header.substring(header.indexOf(":") + 2);\n if (key != null && key.equalsIgnoreCase("content-length")) {\n contentLengthFound = true;\n }\n-   Debug.log("Adding new request header '" + key + "'='" + value + "'");\n+   Debug.log("Adding new request header '" + key + "'='" + value + "'");\n conn.setRequestProperty(key, value);\n }\n }\n if (!contentLengthFound) {\n Debug.log("Adding new request header 'Content-Length'='" + postContent.length() + "'");\n conn.setRequestProperty("Content-Length", Integer.toString(postContent.length()));\n }\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(postContent);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line = null;\n while ((line = rd.readLine()) != null) {\n lines.append(line);\n lines.append("\r\n");\n }\n handleHeaders(urlLocation, conn.getHeaderFields());\n wr.close();\n rd.close();\n wr = null;\n rd = null;\n }\n catch (IOException e) {\n if (conn != null) {\n lines = new StringBuffer();\n try {\n throw new Exception("Server returned error code '" + conn.getResponseCode() + "': " + conn.getResponseMessage());\n }\n catch (IOException ee) {\n throw new Exception("Unable to report error codes: " + ee.getMessage());\n }\n }\n Debug.log("I/O Exception occurred while communicating with endpoint: " + e.getMessage());\n return lines.toString().trim();\n }\n catch (Exception e) {\n }\n url = null;\n conn = null;\n return lines.toString().trim();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-430|SpecialSeperatorForDevSet|-  public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public static boolean loadContentFromURL(String fromURL, String toFile) {\n try {\n URL url = new URL("http://bible-desktop.com/xml" + fromURL);\n File file = new File(toFile);\n URLConnection ucon = url.openConnection();\n InputStream is = ucon.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(is);\n ByteArrayBuffer baf = new ByteArrayBuffer(50);\n int current = 0;\n while ((current = bis.read()) != -1) {\n baf.append((byte) current);\n }\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(baf.toByteArray());\n fos.close();\n }\n catch (IOException e) {\n Log.e(TAG, e);\n-   return false;\n+   return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-431|SpecialSeperatorForDevSet|-  public static HttpResponse createUrlResponse(final URL url, final TcpConnection connection) throws IOException, NullPointerException {\n+  public static HttpResponse createUrlResponse(final URL url, final TcpConnection connection) throws IOException, NullPointerException {\n String fullPath = url.toString();\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n final long length = conn.getContentLength();\n if (connection.isDebugEnabled()) connection.logDebug("Sending " + fullPath + " to " + connection.getRemoteAddress() + " (length: " + length + ").");\n return createInputStreamResponse(in, conn.getContentType(), length, connection);\n }\n|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n-   catch (IOException ioe) {\n+   catch (IOException ioe) {\n ioe.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-432|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|private BingResponse queryBing(BingRequest request) throws BingException {\n try {\n if (logger.isDebugEnabled()) {\n logger.debug("Searching through bing...");\n }\n String query = request.getQuery();\n query = URLEncoder.encode(query, "UTF-8");\n URL url = new URL("http://api.bing.net/json.aspx?" + "AppId=" + request.getAppId() + "&Query=" + query + "&Sources=" + request.getType().toString());\n URLConnection connection = null;\n if (useProxy) {\n if (proxyType == null) {\n throw new BingException("Please set a proxy first before trying to connect through a proxy", new Throwable());\n }\n connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);\n }\n else {\n connection = new URL(url.toString()).openConnection();\n }\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n while ((line = reader.readLine()) != null) {\n-   builder.append(line);\n+   builder.append(line);\n }\n String response = builder.toString();\n ResponseParser parser = new ResponseParser();\n parser.getError(response);\n return parser.getResults(response);\n }\n catch (MalformedURLException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n }\n catch (IOException e) {\n logger.error(e);\n throw new ConnectionException("Could not connect to host", e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-433|SpecialSeperatorForDevSet|-  public static String getMessageDigest(String input) {\n+  public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-433|SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n-   throw new IllegalStateException(e.getMessage());\n+   throw new IllegalStateException(e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|-  static String encrypt(String plaintext) {\n+  static String encrypt(String plaintext) {\n MessageDigest d = null;\n try {\n d = MessageDigest.getInstance("SHA-1");\n d.update(plaintext.getBytes("UTF-8"));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return new String(Base64.encodeBase64(d.digest()));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-434|SpecialSeperatorForDevSet|public static boolean existsURL(String urlStr) {\n try {\n URL url = ProxyURLFactory.createHttpUrl(urlStr);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.connect();\n int responseCode = con.getResponseCode();\n con.disconnect();\n return !(responseCode == HttpURLConnection.HTTP_NOT_FOUND);\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n return false;\n }\n }\n|SpecialSeperatorForDevSet|protected JavaFileObject open(String className) throws IOException {\n JavaFileObject fo = getClassFileObject(className);\n if (fo != null) return fo;\n String cn = className;\n int lastDot;\n while ((lastDot = cn.lastIndexOf(".")) != -1) {\n cn = cn.substring(0, lastDot) + "$" + cn.substring(lastDot + 1);\n fo = getClassFileObject(cn);\n if (fo != null) return fo;\n }\n if (!className.endsWith(".class")) return null;\n if (fileManager instanceof StandardJavaFileManager) {\n StandardJavaFileManager sfm = (StandardJavaFileManager) fileManager;\n fo = sfm.getJavaFileObjects(className).iterator().next();\n if (fo != null && fo.getLastModified() != 0) {\n return fo;\n }\n }\n if (className.matches("^[A-Za-z]+:.*")) {\n try {\n final URI uri = new URI(className);\n final URL url = uri.toURL();\n final URLConnection conn = url.openConnection();\n return new JavaFileObject() {\n public Kind getKind() {\n return JavaFileObject.Kind.CLASS;\n }\n public boolean isNameCompatible(String simpleName, Kind kind) {\n throw new UnsupportedOperationException();\n }\n public NestingKind getNestingKind() {\n throw new UnsupportedOperationException();\n }\n public Modifier getAccessLevel() {\n throw new UnsupportedOperationException();\n }\n public URI toUri() {\n return uri;\n }\n public String getName() {\n return url.toString();\n-   }\n+   }\n public InputStream openInputStream() throws IOException {\n return conn.getInputStream();\n }\n public OutputStream openOutputStream() throws IOException {\n throw new UnsupportedOperationException();\n }\n public Reader openReader(boolean ignoreEncodingErrors) throws IOException {\n throw new UnsupportedOperationException();\n }\n public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n throw new UnsupportedOperationException();\n }\n public Writer openWriter() throws IOException {\n throw new UnsupportedOperationException();\n }\n public long getLastModified() {\n return conn.getLastModified();\n }\n public boolean delete() {\n throw new UnsupportedOperationException();\n }\n }\n;\n }\n catch (URISyntaxException ignore) {\n }\n catch (IOException ignore) {\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-435|SpecialSeperatorForDevSet|@Override public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) {\n Connection conexion = null;\n PreparedStatement select = null;\n PreparedStatement update = null;\n ResultSet rs = null;\n boolean exito = false;\n try {\n conexion = pool.getConnection();\n conexion.setAutoCommit(false);\n select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?");\n update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?");\n String codigoProd;\n int filasAfectadas = 0;\n Iterator<String> iterador = carro.keySet().iterator();\n while (iterador.hasNext()) {\n-   codigoProd = iterador.next();\n+   codigoProd = iterador.next();\n select.setString(1, codigoProd);\n rs = select.executeQuery();\n if (rs.next() == false) {\n Tools.anadirMensaje(request, "No existe el producto con codigo: " + codigoProd + "(producto eliminado de la cesta)");\n iterador.remove();\n conexion.rollback();\n }\n else {\n Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles"));\n select.clearParameters();\n if (carro.get(codigoProd) > prod.getStock()) {\n Tools.anadirMensaje(request, "No hay unidades suficientes de: " + prod.getNombre() + "(producto eliminado de la cesta)");\n iterador.remove();\n conexion.rollback();\n }\n else {\n update.setInt(1, prod.getStock() - carro.get(codigoProd));\n update.setString(2, codigoProd);\n filasAfectadas = update.executeUpdate();\n if (filasAfectadas != 1) {\n Tools.anadirMensaje(request, "Ocurrio un error en el catalogo");\n conexion.rollback();\n }\n update.clearParameters();\n listado.put(prod, carro.get(codigoProd));\n }\n }\n }\n conexion.commit();\n exito = true;\n }\n catch (SQLException ex) {\n logger.log(Level.SEVERE, "Error actualizando unidades de productos en compra", ex);\n try {\n conexion.rollback();\n }\n catch (SQLException ex1) {\n logger.log(Level.SEVERE, "Error haciendo rolback de la transacción que ha dado error en la actualización de unidades por compra", ex1);\n }\n }\n finally {\n cerrarConexionYStatement(conexion, select, update);\n cerrarResultSet(rs);\n }\n return exito;\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("Usage: URLDumper <URL> <file>");\n System.exit(1);\n }\n String location = args[0];\n String file = args[1];\n URL url = new URL(location);\n FileOutputStream fos = new FileOutputStream(file);\n byte[] bytes = new byte[4096];\n InputStream is = url.openStream();\n int read;\n while ((read = is.read(bytes)) != -1) {\n fos.write(bytes, 0, read);\n }\n is.close();\n-   fos.close();\n+   fos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-436|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n-   }\n+   }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n-   PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n+   PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n SecretKey key = keyFactory.generateSecret(keySpec);\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-437|SpecialSeperatorForDevSet|private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n log.println("Concat files into: " + outputFile);\n OutputStream out = new FileOutputStream(absPath + outputFile);\n byte[] buffer = new byte[4096];\n int readBytes;\n for (String file : inputFiles) {\n log.println(" Read: " + file);\n InputStream in = new FileInputStream(absPath + file);\n while ((readBytes = in.read(buffer)) != -1) {\n out.write(buffer, 0, readBytes);\n }\n-   in.close();\n+   in.close();\n }\n out.close();\n if (compress) {\n long normalSize = new File(absPath + outputFile).length();\n ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000");\n builder.directory(new File(absPath));\n Process process = builder.start();\n process.waitFor();\n long minSize = new File(absPath + outputFile).length();\n long diff = normalSize - minSize;\n double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n log.println("Result: " + percentage + " % (" + diffSize + " KB)");\n }\n }\n|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n-   catch (IOException ignore) {\n+   catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-438|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n-   }\n+   }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-438|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n-   }\n+   }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|private String createHTML(PAGE_TYPE requestPage) {\n String result = "<html><head>";\n URL url = getClass().getClassLoader().getResource("org/compiere/images/PAPanel.css");\n InputStreamReader ins;\n try {\n ins = new InputStreamReader(url.openStream());\n BufferedReader bufferedReader = new BufferedReader(ins);\n String cssLine;\n while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + "\n";\n }\n catch (IOException e1) {\n log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n }\n-   switch(requestPage) {\n+   switch(requestPage) {\n case PAGE_LOGO: result += "</head><body class=\"header\">" + "<table width=\"100%\"><tr><td>" + "<img src=\"res:org/compiere/images/logo_ad.png\">" + "</td><td></td><td width=\"290\">" + "</td></tr></table>" + "</body></html>";\n break;\n case PAGE_HOME: result += "</head><body><div class=\"content\">\n";\n queryZoom = null;\n queryZoom = new ArrayList<MQuery>();\n String appendToHome = null;\n String sql = " SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID" + " FROM PA_DASHBOARDCONTENT x" + " LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id" + " WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'" + " ORDER BY LINE";\n PreparedStatement pstmt = null;\n ResultSet rs = null;\n try {\n pstmt = DB.prepareStatement(sql, null);\n pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n rs = pstmt.executeQuery();\n while (rs.next()) {\n appendToHome = rs.getString("HTML");\n if (appendToHome != null) {\n if (rs.getString("DESCRIPTION") != null) result += "<H2>" + rs.getString("DESCRIPTION") + "</H2>\n";\n result += stripHtml(appendToHome, false) + "<br>\n";\n }\n if (rs.getInt("AD_MENU_ID") > 0) {\n result += "<a class=\"hrefNode\" href=\"http:///window/node#" + String.valueOf(rs.getInt("AD_WINDOW_ID") + "\">" + rs.getString("DESCRIPTION") + "</a><br>\n");\n }\n result += "<br>\n";\n if (rs.getInt("PA_GOAL_ID") > 0) result += goalsDetail(rs.getInt("PA_GOAL_ID"));\n }\n }\n catch (SQLException e) {\n log.log(Level.SEVERE, sql, e);\n }\n finally {\n DB.close(rs, pstmt);\n rs = null;\n pstmt = null;\n }\n result += "<br><br><br>\n" + "</div>\n</body>\n</html>\n";\n break;\n default: log.warning("Unknown option - " + requestPage);\n }\n return result;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-439|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n-   }\n+   }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n-   Connection connection = null;\n+   Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-440|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String source, destination;\n if (args[0].toLowerCase().endsWith(".gz")) {\n source = args[0];\n destination = source.substring(0, source.length() - 3);\n }\n else {\n source = args[0] + ".gz";\n destination = args[0];\n }\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new GZIPInputStream(new FileInputStream(source));\n os = new FileOutputStream(destination);\n byte[] buffer = new byte[8192];\n for (int length;\n (length = is.read(buffer)) != -1;\n ) os.write(buffer, 0, length);\n }\n catch (IOException e) {\n System.err.println("Fehler: Kann nicht entpacken " + args[0]);\n }\n finally {\n if (os != null) try {\n os.close();\n }\n catch (IOException e) {\n }\n if (is != null) try {\n is.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String source, destination;\n if (args[0].toLowerCase().endsWith(".gz")) {\n source = args[0];\n destination = source.substring(0, source.length() - 3);\n }\n else {\n-   source = args[0] + ".gz";\n+   source = args[0] + ".gz";\n destination = args[0];\n }\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new GZIPInputStream(new FileInputStream(source));\n os = new FileOutputStream(destination);\n byte[] buffer = new byte[8192];\n for (int length;\n (length = is.read(buffer)) != -1;\n ) os.write(buffer, 0, length);\n }\n catch (IOException e) {\n System.err.println("Fehler: Kann nicht entpacken " + args[0]);\n }\n finally {\n if (os != null) try {\n os.close();\n }\n catch (IOException e) {\n }\n if (is != null) try {\n is.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-440|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String source, destination;\n if (args[0].toLowerCase().endsWith(".gz")) {\n source = args[0];\n destination = source.substring(0, source.length() - 3);\n }\n else {\n source = args[0] + ".gz";\n destination = args[0];\n }\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new GZIPInputStream(new FileInputStream(source));\n os = new FileOutputStream(destination);\n byte[] buffer = new byte[8192];\n for (int length;\n (length = is.read(buffer)) != -1;\n ) os.write(buffer, 0, length);\n }\n catch (IOException e) {\n System.err.println("Fehler: Kann nicht entpacken " + args[0]);\n }\n finally {\n if (os != null) try {\n os.close();\n }\n catch (IOException e) {\n }\n if (is != null) try {\n is.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(String fileFrom, String fileTo) throws IOException {\n FileInputStream inputStream = null;\n FileOutputStream outputStream = null;\n FileChannel inputChannel = null;\n FileChannel outputChannel = null;\n try {\n inputStream = new FileInputStream(fileFrom);\n outputStream = new FileOutputStream(fileTo);\n inputChannel = inputStream.getChannel();\n outputChannel = outputStream.getChannel();\n inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n }\n finally {\n try {\n inputChannel.close();\n }\n finally {\n try {\n outputChannel.close();\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n-   }\n+   }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-441|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n-   sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n+   sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-441|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n-   sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n+   sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n-   java.io.InputStream in = null;\n+   java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-442|SpecialSeperatorForDevSet|public void googleImageSearch(String search, String start) {\n try {\n String u = "http://images.google.com/images?q=" + search + start;\n-   if (u.contains(" ")) {\n+   if (u.contains(" ")) {\n u = u.replace(" ", "+");\n }\n URL url = new URL(u);\n HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");\n BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n googleImages.clear();\n String text = "";\n String lin = "";\n while ((lin = readIn.readLine()) != null) {\n text += lin;\n }\n readIn.close();\n if (text.contains("\n")) {\n text = text.replace("\n", "");\n }\n String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");\n for (String s : array) {\n if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;\n")) {\n String s1 = s.substring(0, s.indexOf("&amp;\n"));\n googleImages.add(s1);\n }\n }\n }\n catch (Exception ex4) {\n MusicBoxView.showErrorDialog(ex4);\n }\n MusicBoxView.jButton7.setEnabled(true);\n ImageIcon icon;\n try {\n icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n MusicBoxView.albumArtLabel.setIcon(ico);\n }\n catch (MalformedURLException ex1) {\n MusicBoxView.showErrorDialog(ex1);\n }\n }\n|SpecialSeperatorForDevSet|private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\n try {\n-   File destFile = new File(destDir, srcFile.getName());\n+   File destFile = new File(destDir, srcFile.getName());\n InputStream in = new FileInputStream(srcFile);\n OutputStream out = new FileOutputStream(destFile);\n int bytesRead;\n while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\n in.close();\n out.close();\n }\n catch (IOException ioe) {\n System.err.println("Couldn't copy file '" + srcFile + "' to directory '" + destDir + "'");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-443|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n-   in.close();\n+   in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n-   if (in != null) {\n+   if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-443|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n-   }\n+   }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-444|SpecialSeperatorForDevSet|public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\n FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\n-   ftpClient.connect(ftpserver, ftpport);\n+   ftpClient.connect(ftpserver, ftpport);\n ftpClient.login(username, password);\n return ftpClient;\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n-   }\n+   }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-445|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n-   finally {\n+   finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|@Override public void run() {\n-   try {\n+   try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-446|SpecialSeperatorForDevSet|private void unzip(File filename) throws ZipException, IOException {\n ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n ZipEntry entry = null;\n boolean first_entry = true;\n while ((entry = in.getNextEntry()) != null) {\n if (first_entry) {\n if (!entry.isDirectory()) {\n File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n if (!subdir.exists()) {\n subdir.mkdir();\n dir = subdir;\n }\n }\n first_entry = false;\n }\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n }\n else {\n File outfile = new File(dir + File.separator + entry.getName());\n File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n FileOutputStream fo = new FileOutputStream(outfile);\n BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n int read;\n byte data[] = new byte[BUFFER];\n while ((read = in.read(data, 0, BUFFER)) != -1) {\n read_position++;\n bos.write(data, 0, read);\n }\n bos.flush();\n-   bos.close();\n+   bos.close();\n }\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|public FileParse(String fileStr, String type) throws MalformedURLException, IOException {\n this.inFile = fileStr;\n this.type = type;\n System.out.println("File str " + fileStr);\n if (fileStr.indexOf("http://") == 0) {\n URL url = new URL(fileStr);\n urlconn = url.openConnection();\n inStream = urlconn.getInputStream();\n bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("File")) {\n File inFile = new File(fileStr);\n size = inFile.length();\n-   inStream = new FileInputStream(inFile);\n+   inStream = new FileInputStream(inFile);\n bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("URL")) {\n URL url = new URL(fileStr);\n urlconn = url.openConnection();\n inStream = urlconn.getInputStream();\n bufReader = new BufferedReader(new InputStreamReader(inStream));\n }\n else if (type.equals("URLZip")) {\n URL url = new URL(fileStr);\n inStream = new GZIPInputStream(url.openStream(), 16384);\n InputStreamReader zis = new InputStreamReader(inStream);\n bufReader = new BufferedReader(zis, 16384);\n }\n else {\n System.out.println("Unknown FileParse inType " + type);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-447|SpecialSeperatorForDevSet|public void testHttpsConnection() throws Throwable {\n setUpStoreProperties();\n try {\n SSLContext ctx = getContext();\n ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n TestHostnameVerifier hnv = new TestHostnameVerifier();\n HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n URL url = new URL("https://localhost:" + ss.getLocalPort());\n HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);\n checkConnectionStateParameters(connection, peerSocket);\n connection.connect();\n }\n finally {\n tearDownStoreProperties();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public void deleteAuthors() throws Exception {\n-   if (proposalIds.equals("") || usrIds.equals("")) throw new Exception("No proposal or author selected.");\n+   if (proposalIds.equals("") || usrIds.equals("")) throw new Exception("No proposal or author selected.");\n String[] pids = proposalIds.split(",");\n String[] uids = usrIds.split(",");\n int pnum = pids.length;\n int unum = uids.length;\n if (pnum == 0 || unum == 0) throw new Exception("No proposal or author selected.");\n int i, j;\n PreparedStatement prepStmt = null;\n try {\n con = database.getConnection();\n con.setAutoCommit(false);\n String pStr = "delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?";\n prepStmt = con.prepareStatement(pStr);\n for (i = 0;\n i < pnum;\n i++) {\n for (j = 0;\n j < unum;\n j++) {\n if (!uids[j].equals(userId)) {\n prepStmt.setString(1, pids[i]);\n prepStmt.setString(2, uids[j]);\n prepStmt.executeUpdate();\n }\n }\n }\n con.commit();\n }\n catch (Exception e) {\n if (!con.isClosed()) {\n con.rollback();\n prepStmt.close();\n con.close();\n }\n throw e;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-448|SpecialSeperatorForDevSet|protected BufferedImage handleFCLAException() {\n-   if (params.uri.startsWith("http://image11.fcla.edu/cgi")) try {\n+   if (params.uri.startsWith("http://image11.fcla.edu/cgi")) try {\n params.uri = params.uri.substring(params.uri.indexOf("q1=") + 3);\n params.uri = params.uri.substring(0, params.uri.indexOf("&"));\n params.uri = "http://image11.fcla.edu/m/map/thumb/" + params.uri.substring(params.uri.length() - 3, params.uri.length() - 2) + "/" + params.uri.substring(params.uri.length() - 2, params.uri.length() - 1) + "/" + params.uri.substring(params.uri.length() - 1, params.uri.length()) + "/" + params.uri + ".jpg";\n URL url = new URL(params.uri);\n URLConnection connection = url.openConnection();\n return processNewUri(connection);\n }\n catch (Exception e) {\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public int updateuser(User u) {\n int i = 0;\n Connection conn = null;\n PreparedStatement pm = null;\n try {\n conn = Pool.getConnection();\n conn.setAutoCommit(false);\n pm = conn.prepareStatement("update user set username=?,passwd=?,existstate=?,management=? where userid=?");\n pm.setString(1, u.getUsername());\n pm.setString(2, u.getPasswd());\n pm.setInt(3, u.getExiststate());\n pm.setInt(4, u.getManagement());\n pm.setString(5, u.getUserid());\n i = pm.executeUpdate();\n conn.commit();\n Pool.close(pm);\n Pool.close(conn);\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n Pool.close(pm);\n Pool.close(conn);\n }\n finally {\n-   Pool.close(pm);\n+   Pool.close(pm);\n Pool.close(conn);\n }\n return i;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-449|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n|SpecialSeperatorForDevSet|protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {\n IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n IFileFormat format = null;\n Object source = null;\n InputStream in = null;\n try {\n IPath path;\n if (input instanceof IStorageEditorInput) {\n IStorage s = ((IStorageEditorInput) input).getStorage();\n in = s.getContents();\n if (s instanceof IFile) {\n IFile file = (IFile) s;\n path = file.getRawLocation();\n if (root.exists(path)) {\n path = root.getLocation().append(path);\n }\n source = path.toFile();\n }\n }\n-   else if (input instanceof IPathEditorInput) {\n+   else if (input instanceof IPathEditorInput) {\n path = ((IPathEditorInput) input).getPath();\n source = path.toFile();\n }\n else if (input instanceof IURIEditorInput) {\n URI uri = ((IURIEditorInput) input).getURI();\n if (URIUtil.isFileURI(uri)) {\n source = URIUtil.toFile(uri);\n }\n else {\n URL url = URIUtil.toURL(uri);\n in = url.openStream();\n }\n }\n if (source == null) {\n if (!in.markSupported()) {\n in = new BufferedInputStream(in);\n }\n in.mark(10);\n source = in;\n }\n IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] {\n ImageCore.VALID_FORMATS }\n);\n if (in != null) {\n in.reset();\n }\n Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);\n if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, "Unsupported file format."));\n ImageInputStream stream = ImageIO.createImageInputStream(source);\n format = (IFileFormat) valid.iterator().next();\n IDocument document = format.decode(stream, monitor);\n setDocument(document);\n }\n catch (IOException e) {\n Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, "IO Error", e);\n throw new CoreException(status);\n }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException e) {\n }\n }\n }\n super.setInput(input);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-450|SpecialSeperatorForDevSet|private InputStream getPageStream(String query) throws MalformedURLException, IOException {\n URL url = new URL(baseUrl + query + "&rhtml=no");\n-   URLConnection connection = url.openConnection();\n+   URLConnection connection = url.openConnection();\n connection.connect();\n InputStream in = connection.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(in);\n return bis;\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-451|SpecialSeperatorForDevSet|private boolean getWave(String url, String Word) {\n try {\n File FF = new File(f.getParent() + "/" + f.getName() + "pron");\n FF.mkdir();\n URL url2 = new URL(url);\n BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\n File Fdel = new File(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n if (!Fdel.exists()) {\n FileOutputStream outstream = new FileOutputStream(f.getParent() + "/" + f.getName() + "pron/" + Word + ".wav");\n BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\n char[] binput = new char[1024];\n int len = stream.read(binput, 0, 1024);\n while (len > 0) {\n bwriter.write(binput, 0, len);\n len = stream.read(binput, 0, 1024);\n }\n bwriter.close();\n-   outstream.close();\n+   outstream.close();\n }\n stream.close();\n }\n catch (Exception e) {\n System.out.println(e.getMessage());\n return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File in, File out) throws IOException {\n+  public static void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-452|SpecialSeperatorForDevSet|public static String checksum(URL url, String algorithm) {\n MessageDigest messageDigest;\n try {\n messageDigest = MessageDigest.getInstance(algorithm);\n }\n catch (Exception ex) {\n throw new RuntimeException("Could not create an instance of MessageDigest", ex);\n }\n-   byte[] bytes = new byte[4 * 1024];\n+   byte[] bytes = new byte[4 * 1024];\n try {\n InputStream in = null;\n try {\n in = url.openStream();\n int nBytesRead = 0;\n while ((nBytesRead = in.read(bytes)) > 0) {\n messageDigest.update(bytes, 0, nBytesRead);\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n catch (Exception e) {\n throw new RuntimeException("Could not read message digest for: " + url.toExternalForm() + " using algorithm: " + algorithm);\n }\n byte[] checksumValue = messageDigest.digest();\n return digestAsString(checksumValue);\n }\n|SpecialSeperatorForDevSet|private int[] sortRows(int[] rows) {\n for (int i = 0;\n i < rows.length;\n-   i++) {\n+   i++) {\n for (int j = 0;\n j < rows.length - 1;\n j++) {\n if (rows[j] > rows[j + 1]) {\n int temp = rows[j];\n rows[j] = rows[j + 1];\n rows[j + 1] = temp;\n }\n }\n }\n return rows;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-453|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n-   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n+   OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n-   assertTrue("Content differs", Arrays.equals(inData, bytes));\n+   assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-453|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   Reader reader = new InputStreamReader(in, "US-ASCII");\n+   Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n catch (IOException e) {\n e.printStackTrace();\n-   IOUtils.closeQuietly(ExternalDecoder.this);\n+   IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-454|SpecialSeperatorForDevSet|public String get(String url) {\n try {\n HttpGet get = new HttpGet(url);\n HttpResponse response = this.getHttpClient().execute(get);\n HttpEntity entity = response.getEntity();\n if (entity == null) {\n throw new RuntimeException("response body was empty");\n }\n return EntityUtils.toString(entity);\n }\n catch (RuntimeException ex) {\n throw ex;\n }\n catch (Exception ex) {\n-   throw new RuntimeException(ex);\n+   throw new RuntimeException(ex);\n }\n }\n|SpecialSeperatorForDevSet|protected JavaFileObject open(String className) throws IOException {\n JavaFileObject fo = getClassFileObject(className);\n if (fo != null) return fo;\n String cn = className;\n int lastDot;\n while ((lastDot = cn.lastIndexOf(".")) != -1) {\n cn = cn.substring(0, lastDot) + "$" + cn.substring(lastDot + 1);\n fo = getClassFileObject(cn);\n if (fo != null) return fo;\n }\n if (!className.endsWith(".class")) return null;\n if (fileManager instanceof StandardJavaFileManager) {\n StandardJavaFileManager sfm = (StandardJavaFileManager) fileManager;\n fo = sfm.getJavaFileObjects(className).iterator().next();\n if (fo != null && fo.getLastModified() != 0) {\n return fo;\n }\n }\n if (className.matches("^[A-Za-z]+:.*")) {\n try {\n final URI uri = new URI(className);\n final URL url = uri.toURL();\n final URLConnection conn = url.openConnection();\n return new JavaFileObject() {\n public Kind getKind() {\n return JavaFileObject.Kind.CLASS;\n }\n public boolean isNameCompatible(String simpleName, Kind kind) {\n throw new UnsupportedOperationException();\n }\n public NestingKind getNestingKind() {\n throw new UnsupportedOperationException();\n }\n public Modifier getAccessLevel() {\n throw new UnsupportedOperationException();\n }\n public URI toUri() {\n return uri;\n }\n public String getName() {\n return url.toString();\n }\n public InputStream openInputStream() throws IOException {\n return conn.getInputStream();\n }\n public OutputStream openOutputStream() throws IOException {\n throw new UnsupportedOperationException();\n }\n public Reader openReader(boolean ignoreEncodingErrors) throws IOException {\n throw new UnsupportedOperationException();\n }\n public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n throw new UnsupportedOperationException();\n }\n public Writer openWriter() throws IOException {\n throw new UnsupportedOperationException();\n }\n public long getLastModified() {\n return conn.getLastModified();\n }\n public boolean delete() {\n throw new UnsupportedOperationException();\n }\n }\n;\n }\n catch (URISyntaxException ignore) {\n }\n-   catch (IOException ignore) {\n+   catch (IOException ignore) {\n }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-455|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n-   URL url = getClass().getResource(propsFile);\n+   URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n ReplayCharSequence cs = null;\n try {\n cs = curi.getRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.getNonFatalFailures().add(e);\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n try {\n digest = MessageDigest.getInstance(SHA1);\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr != null) {\n s = cs.toString();\n }\n else {\n Matcher m = regexpr.matcher(cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n curi.setContentDigest(SHA1, newDigestValue);\n }\n finally {\n if (cs != null) {\n-   try {\n+   try {\n cs.close();\n }\n catch (IOException ioe) {\n logger.warning(TextUtils.exceptionToString("Failed close of ReplayCharSequence.", ioe));\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-456|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String senha = "";\n String email = request.getParameter("EmailLogin");\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(request.getParameter("SenhaLogin").getBytes(), 0, request.getParameter("SenhaLogin").length());\n senha = new BigInteger(1, messageDigest.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n if (request.getHeader("REFERER").indexOf("?") != -1) {\n redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "&msg=3";\n }\n if (usuario.getNome() != null) {\n HttpSession session = request.getSession();\n session.setAttribute("usuario", usuario);\n-   redirect = "index.jsp";\n+   redirect = "index.jsp";\n }\n response.sendRedirect(redirect);\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws IOException {\n PostParameter a1 = new PostParameter("v", Utils.encode("1.0"));\n PostParameter a2 = new PostParameter("api_key", Utils.encode(RenRenConstant.apiKey));\n PostParameter a3 = new PostParameter("method", Utils.encode("feed.publishTemplatizedAction"));\n PostParameter a4 = new PostParameter("call_id", System.nanoTime());\n PostParameter a5 = new PostParameter("session_key", Utils.encode("5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914"));\n PostParameter a8 = new PostParameter("format", Utils.encode("JSON"));\n PostParameter a9 = new PostParameter("template_id", Utils.encode("1"));\n PostParameter a10 = new PostParameter("title_data", Utils.encode("\"conteng\":\"xkt\""));\n-   PostParameter a11 = new PostParameter("body_data", Utils.encode("\"conteng\":\"xkt\""));\n+   PostParameter a11 = new PostParameter("body_data", Utils.encode("\"conteng\":\"xkt\""));\n RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\n ps.addParameter(a1);\n ps.addParameter(a2);\n ps.addParameter(a3);\n ps.addParameter(a4);\n ps.addParameter(a5);\n ps.addParameter(a8);\n ps.addParameter(a9);\n ps.addParameter(a10);\n ps.addParameter(a11);\n System.out.println(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n URL url = new URL(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n request.setDoOutput(true);\n request.setRequestMethod("POST");\n System.out.println("Sending request...");\n request.connect();\n System.out.println("Response: " + request.getResponseCode() + " " + request.getResponseMessage());\n BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n String b = null;\n while ((b = reader.readLine()) != null) {\n System.out.println(b);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-457|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n-   if (srcFile.length() != destFile.length()) {\n+   if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|private static void loadDefaultPreferences() {\n try {\n URL url = ClassLoader.getSystemResource("OpenDarkRoom.defaults.properties");\n preferences.load(url.openStream());\n }\n catch (FileNotFoundException e) {\n log.error("Default preferences file not found");\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-458|SpecialSeperatorForDevSet|@Override protected String doInBackground(Void... params) {\n HttpClient httpClient = new DefaultHttpClient();\n HttpContext localContext = new BasicHttpContext();\n HttpPost httpPost = new HttpPost(urlFormated);\n try {\n MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n for (int index = 0;\n index < POSTparamList.size();\n index++) {\n if (POSTparamList.get(index).getName().equalsIgnoreCase("image")) {\n entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n }\n else {\n entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n }\n }\n httpPost.setEntity(entity);\n HttpResponse response = httpClient.execute(httpPost, localContext);\n return processAnswer(response);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   return null;\n+   return null;\n }\n|SpecialSeperatorForDevSet|@Override public void parse() throws IOException {\n URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));\n URLConnection con = url.openConnection();\n BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));\n String str;\n bStream.readLine();\n while ((str = bStream.readLine()) != null) {\n String[] tokens = str.split("(\\s+)");\n String charCode = tokens[0].replaceAll("([0-9+])", "");\n Float value = Float.parseFloat(tokens[2].trim().replace(",", "."));\n CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);\n this.set.add(unit);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-459|SpecialSeperatorForDevSet|public static int[] sortAscending(float input[]) {\n int[] order = new int[input.length];\n for (int i = 0;\n i < order.length;\n i++) order[i] = i;\n for (int i = input.length;\n --i >= 0;\n ) {\n for (int j = 0;\n j < i;\n j++) {\n if (input[j] > input[j + 1]) {\n float mem = input[j];\n input[j] = input[j + 1];\n input[j + 1] = mem;\n int id = order[j];\n order[j] = order[j + 1];\n order[j + 1] = id;\n }\n }\n-   }\n+   }\n return order;\n }\n|SpecialSeperatorForDevSet|private void Submit2URL(URL url) throws Exception {\n HttpURLConnection urlc = null;\n try {\n urlc = (HttpURLConnection) url.openConnection();\n urlc.setRequestMethod("GET");\n urlc.setDoOutput(true);\n urlc.setDoInput(true);\n urlc.setUseCaches(false);\n urlc.setAllowUserInteraction(false);\n if (urlc.getResponseCode() != 200) {\n InputStream in = null;\n Reader reader = null;\n try {\n in = urlc.getInputStream();\n reader = new InputStreamReader(in, "UTF-8");\n int read = 0;\n char[] buf = new char[1024];\n String error = null;\n while ((read = reader.read(buf)) >= 0) {\n if (error == null) error = new String(buf, 0, read);\n else error += new String(buf, 0, read);\n }\n throw new NpsException(error, ErrorHelper.SYS_UNKOWN);\n }\n finally {\n if (reader != null) try {\n reader.close();\n }\n catch (Exception e1) {\n }\n if (in != null) try {\n in.close();\n }\n catch (Exception e1) {\n-   }\n+   }\n }\n }\n }\n finally {\n if (urlc != null) try {\n urlc.disconnect();\n }\n catch (Exception e1) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-460|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n-   try {\n+   try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void createPartControl(Composite parent) {\n viewer = new ScrollingGraphicalViewer();\n viewer.setRootEditPart(new ScalableRootEditPart());\n viewer.setEditPartFactory(new BlockEditPartFactory());\n viewer.setEditDomain(new EditDomain());\n viewer.createControl(parent);\n viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\n ActionRegistry actionRegistry = new ActionRegistry();\n createActions(actionRegistry);\n ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\n viewer.setContextMenu(cmProvider);\n Block b = new Block();\n b.addChild(new ChartItem());\n viewer.setContents(b);\n System.err.println("!!! " + viewer.getContents().getChildren().get(0));\n viewer.select((EditPart) viewer.getContents().getChildren().get(0));\n PaletteRoot root = new PaletteRoot();\n PaletteGroup toolGroup = new PaletteGroup("Chart Tools");\n List toolList = new ArrayList();\n ToolEntry tool = new SelectionToolEntry();\n toolList.add(tool);\n root.setDefaultEntry(tool);\n tool = new MarqueeToolEntry();\n toolList.add(tool);\n toolGroup.addAll(toolList);\n PaletteGroup templateGroup = new PaletteGroup("Templates");\n List templateList = new ArrayList();\n CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry("Rect", "Rect", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry("Line", "Line", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n templateList.add(entry);\n templateList.add(entry1);\n templateGroup.addAll(templateList);\n List rootList = new ArrayList();\n rootList.add(toolGroup);\n rootList.add(templateGroup);\n root.addAll(rootList);\n final PaletteViewer v = new PaletteViewer();\n v.setPaletteRoot(root);\n-   v.createControl(parent);\n+   v.createControl(parent);\n v.addSelectionChangedListener(new ISelectionChangedListener() {\n public void selectionChanged(SelectionChangedEvent event) {\n System.err.println("selectionChanged " + v.getActiveTool());\n }\n }\n);\n deleteAction.setSelectionProvider(viewer);\n viewer.getEditDomain().setPaletteViewer(v);\n viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n public void selectionChanged(SelectionChangedEvent event) {\n System.err.println(event.getSelection());\n deleteAction.update();\n }\n }\n);\n viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\n public void stackChanged(CommandStackEvent event) {\n undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\n redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-461|SpecialSeperatorForDevSet|public APIResponse delete(String id) throws Exception {\n APIResponse response = new APIResponse();\n connection = (HttpURLConnection) new URL(url + "/api/variable/delete/" + id).openConnection();\n connection.setRequestMethod("DELETE");\n connection.setConnectTimeout(TIMEOUT);\n connection.connect();\n if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n response.setDone(true);\n-   response.setMessage("Variable Deleted!");\n+   response.setMessage("Variable Deleted!");\n }\n else {\n response.setDone(false);\n response.setMessage("Delete Variable Error Code: Http (" + connection.getResponseCode() + ")");\n }\n connection.disconnect();\n return response;\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n-   encoder.transfer(fchannel, 0, 20);\n+   encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-462|SpecialSeperatorForDevSet|public HttpResponseExchange execute() throws Exception {\n HttpResponseExchange forwardResponse = null;\n int fetchSizeLimit = Config.getInstance().getFetchLimitSize();\n while (null != lastContentRange) {\n forwardRequest.setBody(new byte[0]);\n ContentRangeHeaderValue old = lastContentRange;\n long sendSize = fetchSizeLimit;\n if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {\n sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);\n-   }\n+   }\n if (sendSize <= 0) {\n break;\n }\n lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));\n forwardResponse = syncFetch(forwardRequest);\n if (sendSize < fetchSizeLimit) {\n lastContentRange = null;\n }\n }\n return forwardResponse;\n }\n|SpecialSeperatorForDevSet|public void run() {\n long time = System.currentTimeMillis();\n logger.info("Version: " + version);\n String hostname = properties.getProperty("mercuriushost");\n String protocol = properties.getProperty("mercuriusprotocol");\n String port = properties.getProperty("mercuriusport");\n String path = properties.getProperty("mercuriuspath");\n String action = properties.getProperty("mercuriusaction");\n logger.info("Getting Timex Data --- " + getTimeDifferent(time));\n String xml = timexfrmk.getUnsynchedSessionsXMLFormat();\n logger.info("Done getting Timex Data --- " + getTimeDifferent(time));\n if (timexfrmk.getSessionCount() > 0) {\n try {\n logger.info("Sending Timex Data to Mercurius --- " + getTimeDifferent(time));\n String data = URLEncoder.encode("action", "UTF-8") + "=" + URLEncoder.encode(action, "UTF-8");\n data += "&" + URLEncoder.encode("data", "UTF-8") + "=" + URLEncoder.encode(xml, "UTF-8");\n if (isAdminFeedKeySet()) {\n data += "&" + URLEncoder.encode("adminfeedkey", "UTF-8") + "=" + URLEncoder.encode(adminfeedkey, "UTF-8");\n logger.debug("Using adminfeedkey to authenticate");\n }\n else {\n Authenticator.setDefault(new CustomAuthenticator(user, password));\n logger.debug("Using user/pwd to authenticate");\n }\n String u = protocol + "://" + hostname + ":" + port + path;\n logger.debug("Posting xml data to: " + u);\n URL url = new URL(u);\n URLConnection conn = url.openConnection();\n conn.setRequestProperty("User-Agent", "TimexMercurius/" + version);\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(data);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n StringBuffer s = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n s.append(line);\n }\n if (s.length() > 0) {\n logger.debug(s.toString());\n if (s.toString().indexOf("Result:") != -1) {\n logger.info(s.toString().substring(s.toString().indexOf("Result:")));\n if (s.toString().indexOf("Result: Successful") != -1) {\n timexfrmk.updateSessionsStatus();\n }\n }\n else {\n logger.error(s.toString());\n }\n }\n else {\n logger.info("No data returned");\n }\n wr.close();\n rd.close();\n }\n catch (MalformedURLException e) {\n logger.error(e);\n logger.trace(e, e);\n }\n catch (IOException e) {\n logger.error(e);\n-   logger.trace(e, e);\n+   logger.trace(e, e);\n }\n catch (Exception e) {\n logger.error(e);\n logger.trace(e, e);\n }\n }\n else {\n logger.info("There is nothing to send. Everything has already been synchronized");\n }\n timexfrmk.close();\n logger.info("Done!!! Total Time: " + getTimeDifferent(time));\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-463|SpecialSeperatorForDevSet|@Override protected String doInBackground(Void... params) {\n HttpClient httpClient = new DefaultHttpClient();\n HttpContext localContext = new BasicHttpContext();\n HttpPost httpPost = new HttpPost(urlFormated);\n try {\n MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n-   for (int index = 0;\n+   for (int index = 0;\n index < POSTparamList.size();\n index++) {\n if (POSTparamList.get(index).getName().equalsIgnoreCase("image")) {\n entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n }\n else {\n entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n }\n }\n httpPost.setEntity(entity);\n HttpResponse response = httpClient.execute(httpPost, localContext);\n return processAnswer(response);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|@Override public File call() throws IOException {\n HttpURLConnection conn = null;\n ReadableByteChannel fileDownloading = null;\n FileChannel fileWriting = null;\n try {\n conn = (HttpURLConnection) url.openConnection();\n if (size == -1) {\n size = conn.getContentLength();\n }\n fileDownloading = Channels.newChannel(conn.getInputStream());\n fileWriting = new FileOutputStream(file).getChannel();\n long left = size;\n long chunkSize = BLOCK_SIZE;\n for (long downloaded = 0;\n-   downloaded < size;\n+   downloaded < size;\n left = size - downloaded) {\n if (left < BLOCK_SIZE) {\n chunkSize = left;\n }\n fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);\n downloaded += chunkSize;\n setProgress(downloaded);\n }\n }\n finally {\n if (file != null) {\n file.deleteOnExit();\n }\n if (conn != null) {\n conn.disconnect();\n }\n if (fileDownloading != null) {\n try {\n fileDownloading.close();\n }\n catch (IOException ioe) {\n Helper.logger.log(Level.SEVERE, "Не удалось закрыть поток скачивания", ioe);\n }\n }\n if (fileWriting != null) {\n try {\n fileWriting.close();\n }\n catch (IOException ioe) {\n Helper.logger.log(Level.SEVERE, "Не удалось закрыть поток записи в файл", ioe);\n }\n }\n }\n return file;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-464|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n-   File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n+   File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n-   ZipOutputStream zout = new ZipOutputStream(bout);\n+   ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-464|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n-   else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n+   else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n return;\n }\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-465|SpecialSeperatorForDevSet|public void handleHandshake(Packet2Handshake par1Packet2Handshake) {\n boolean flag = true;\n String s = par1Packet2Handshake.username;\n if (s == null || s.trim().length() == 0) {\n flag = false;\n }\n else if (!s.equals("-")) {\n try {\n Long.parseLong(s, 16);\n }\n catch (NumberFormatException numberformatexception) {\n flag = false;\n }\n }\n if (!flag) {\n netManager.networkShutdown("disconnect.genericReason", new Object[] {\n "The server responded with an invalid server key" }\n);\n }\n else if (par1Packet2Handshake.username.equals("-")) {\n addToSendQueue(new Packet1Login(mc.session.username, 29));\n }\n else {\n-   try {\n+   try {\n URL url = new URL((new StringBuilder()).append("http://session.minecraft.net/game/joinserver.jsp?user=").append(mc.session.username).append("&sessionId=").append(mc.session.sessionId).append("&serverId=").append(par1Packet2Handshake.username).toString());\n BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(url.openStream()));\n String s1 = bufferedreader.readLine();\n bufferedreader.close();\n if (s1.equalsIgnoreCase("ok")) {\n addToSendQueue(new Packet1Login(mc.session.username, 29));\n }\n else {\n netManager.networkShutdown("disconnect.loginFailedInfo", new Object[] {\n s1 }\n);\n }\n }\n catch (Exception exception) {\n exception.printStackTrace();\n netManager.networkShutdown("disconnect.genericReason", new Object[] {\n (new StringBuilder()).append("Internal client error: ").append(exception.toString()).toString() }\n);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\n-   InputStream in = downloadData(s3key);\n+   InputStream in = downloadData(s3key);\n if (in == null) {\n throw new IOException("No data found");\n }\n in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\n File temp = File.createTempFile("dirsync", null);\n FileOutputStream fout = new FileOutputStream(temp);\n try {\n IOUtils.copy(in, fout);\n if (target.exists()) {\n target.delete();\n }\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n FileUtils.moveFile(temp, target);\n }\n catch (IOException e) {\n fetchStream(in);\n throw e;\n }\n finally {\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-466|SpecialSeperatorForDevSet|protected static final byte[] digest(String s) {\n byte[] ret = null;\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(s.getBytes());\n ret = md.digest();\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n System.err.println("no message digest algorithm available!");\n System.exit(1);\n }\n return ret;\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n-   }\n+   }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-467|SpecialSeperatorForDevSet|private static Properties loadPropertiesFromClasspath(String path) {\n Enumeration<URL> locations;\n Properties props = new Properties();\n try {\n locations = Thread.currentThread().getContextClassLoader().getResources(path);\n while (locations.hasMoreElements()) {\n URL url = locations.nextElement();\n InputStream in = url.openStream();\n props.load(in);\n in.close();\n logger.config("Load properties from " + url);\n }\n-   }\n+   }\n catch (IOException e) {\n logger.log(Level.SEVERE, "load properties from classpath \"" + path + "\" failed", e);\n }\n return props;\n }\n|SpecialSeperatorForDevSet|public String readURL(String urlLocation, ArrayList headers, RenderEngine c) throws Exception {\n URL url = null;\n HttpURLConnection conn = null;\n InputStream istream = null;\n try {\n url = new URL(urlLocation);\n conn = (HttpURLConnection) url.openConnection();\n }\n catch (Exception e) {\n throw new Exception("Soap is unable to retrieve URL for '" + urlLocation + "': " + e.getMessage());\n }\n loadCookies(urlLocation, conn, c);\n-   if (headers != null) {\n+   if (headers != null) {\n for (int i = 0;\n i < headers.size();\n i++) {\n String header = (String) headers.get(i);\n String key = header.substring(0, header.indexOf(":"));\n String value = header.substring(header.indexOf(":") + 2);\n Debug.log("Adding new request header '" + key + "'='" + value + "'");\n conn.setRequestProperty(key, value);\n }\n }\n Debug.debug("Set to use GET, URL=" + urlLocation);\n try {\n istream = conn.getInputStream();\n }\n catch (Exception e) {\n Debug.debug("Unable to capture input stream: " + e.getMessage());\n throw new Exception("Unable to capture input stream from URL '" + urlLocation + "': " + e.getMessage());\n }\n Debug.debug("'GET' - Got input stream.");\n if (conn.getContentLength() == -1) {\n Debug.debug("Content length = unknown");\n }\n else {\n Debug.debug("Content length = " + conn.getContentLength());\n }\n byte data[] = null;\n int curPos = 0, contentLength = conn.getContentLength();\n if (conn.getContentLength() == -1) {\n String byteSize = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.tunable']/property[@type='engine.unknowncontentsize']/@value");\n if (byteSize == null) {\n contentLength = 4096;\n }\n else {\n contentLength = Integer.parseInt(byteSize);\n }\n Debug.debug("Content length unknown. Allowing fuzz of " + contentLength + " bytes.");\n }\n data = new byte[contentLength];\n try {\n int dataRead = 0;\n while ((dataRead = istream.read(data, curPos, contentLength - curPos)) != -1) {\n if (dataRead == 0) {\n break;\n }\n curPos += dataRead;\n }\n }\n catch (Exception e) {\n throw new Exception("Soap is unable to read data from HTTP connection: " + e.getMessage());\n }\n try {\n istream.close();\n conn.disconnect();\n }\n catch (MalformedURLException e) {\n throw new Exception("Soap request to site '" + urlLocation + "' is invalid: " + e.getMessage());\n }\n catch (IOException e) {\n throw new Exception("Soap request to site '" + urlLocation + "' failed to connect.");\n }\n String dataOut = new String(data);\n int counter = 0;\n data = null;\n istream = null;\n conn = null;\n url = null;\n return dataOut.trim();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-468|SpecialSeperatorForDevSet|public static void main(String args[]) {\n int[] mas = {\n 3, 5, 6, 9, 1, -3, -4, -88 }\n;\n int sort = 0;\n for (int j = 0;\n-   j < (mas.length);\n+   j < (mas.length);\n j++) {\n for (int i = 0;\n i < mas.length - 1;\n i++) {\n if (mas[i] > mas[i + 1]) {\n sort = mas[i];\n mas[i] = mas[i + 1];\n mas[i + 1] = sort;\n }\n }\n }\n for (int i = 0;\n i < mas.length;\n i++) {\n System.out.print(" " + mas[i]);\n }\n }\n|SpecialSeperatorForDevSet|private void load() throws SQLException {\n Connection conn = null;\n Statement stmt = null;\n try {\n conn = FidoDataSource.getConnection();\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n ClearData.clearTables(stmt);\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (100, 'Living Thing')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (300, 'Dog')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (400, 'Sheltie')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (500, 'Eskimo')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (600, 'Person')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (700, 'Collar')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (800, 'Ball')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (401, 'Fido')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (501, 'Samantha')");\n stmt.executeUpdate("insert into Objects (ObjectId, Description) values (801, 'A collar')");\n stmt.executeQuery("select setval('objects_objectid_seq', 1000)");\n stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)");\n stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)");\n stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('color')");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('weight')");\n stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('length')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('green', 'color')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('blue', 'color')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('light', 'weight')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('heavy', 'weight')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('short', 'length')");\n stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('long', 'length')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')");\n stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)");\n stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)");\n stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')");\n stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)");\n-   stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)");\n+   stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)");\n stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')");\n stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{\n+-}\nN[.N]', 'D+', 800, 'number')");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)");\n stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('actor')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('origin')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('destination')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('object')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('instrument')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('beneficiary')");\n stmt.executeUpdate("insert into FrameSlots (SlotName) values ('location')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')");\n stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')");\n stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')");\n stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('the', 1)");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('a', 2)");\n stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('an', 2)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('S', 1)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('D', 10)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)");\n stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)");\n stmt.executeQuery("select setval('instructions_instructionid_seq', 1)");\n int next = 2;\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'throw', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'test', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'actor', 1, 'hasa', '300', '')");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'instrument', 3, null, null, 'blue')");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (1, null, null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'get', null, 0, null, null, null)");\n stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'drop', null, 0, null, null, null)");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 1, " + (next + 0) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 2, " + (next + 1) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 1, " + (next + 1) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 2, " + (next + 0) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 1, " + (next + 2) + ")");\n stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 2, " + (next + 3) + ")");\n stmt.executeQuery("select setval('transactions_transactionid_seq', 1)");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 4) + ", 'throw something')");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 5) + ", 'get something')");\n stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 6) + ", 'drop something')");\n stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'actor', 1, 'hasa', 'object', '', 3)");\n stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'object', 4, '', '', 'heavy', 4)");\n stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', " + (next + 6) + ")");\n stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', " + (next + 5) + ")");\n stmt.executeQuery("select setval('verbtransactions_verbid_seq', 1)");\n stmt.executeUpdate("insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)");\n stmt.executeUpdate("insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)");\n stmt.executeUpdate("update SystemProperties set value = 'Play Data' where name = 'DB Data Version'");\n conn.commit();\n }\n catch (SQLException e) {\n if (conn != null) conn.rollback();\n throw e;\n }\n finally {\n if (stmt != null) stmt.close();\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-469|SpecialSeperatorForDevSet|public void actionPerformed(ActionEvent e) {\n if ("register".equals(e.getActionCommand())) {\n buttonClicked = "register";\n try {\n String data = URLEncoder.encode("ver", "UTF-8") + "=" + URLEncoder.encode(Double.toString(questVer), "UTF-8");\n data += "&" + URLEncoder.encode("name", "UTF-8") + "=" + URLEncoder.encode(name.getText(), "UTF-8");\n-   data += "&" + URLEncoder.encode("os", "UTF-8") + "=" + URLEncoder.encode(os.getText(), "UTF-8");\n+   data += "&" + URLEncoder.encode("os", "UTF-8") + "=" + URLEncoder.encode(os.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("jre", "UTF-8") + "=" + URLEncoder.encode(jre.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("email", "UTF-8") + "=" + URLEncoder.encode(email.getText(), "UTF-8");\n data += "&" + URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode("Qr7SchF", "UTF-8");\n data += "&" + URLEncoder.encode("answers", "UTF-8") + "=" + URLEncoder.encode(Integer.toString(getAnswers()), "UTF-8");\n URL url = new URL("http://ubcdcreator.sourceforge.net/register.php");\n URLConnection conn = url.openConnection();\n conn.setDoInput(true);\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write(data);\n wr.flush();\n BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n while ((line = rd.readLine()) != null) {\n }\n rd.close();\n wr.close();\n }\n catch (Exception ex) {\n }\n setVisible(false);\n }\n else if ("cancel".equals(e.getActionCommand())) {\n buttonClicked = "cancel";\n setVisible(false);\n }\n else if ("never".equals(e.getActionCommand())) {\n buttonClicked = "never";\n setVisible(false);\n }\n }\n|SpecialSeperatorForDevSet|public boolean update(String dbName, Query[] queries) throws ServiceException {\n Connection con = null;\n PreparedStatement pstmt = null;\n-   int rows = 0;\n+   int rows = 0;\n try {\n con = getDbConnection().getConnection(dbName);\n con.setAutoCommit(false);\n for (int i = 0;\n i < queries.length;\n i++) {\n Query query = queries[i];\n System.out.println(query.getSql());\n pstmt = con.prepareStatement(query.getSql());\n addParametersToQuery(query, pstmt);\n rows += pstmt.executeUpdate();\n }\n con.commit();\n return rows > 0;\n }\n catch (DbException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n log.error("[DAOService::update] Execute rollback " + e.getMessage(), e);\n try {\n con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n catch (SQLException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n try {\n con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n finally {\n closeConnection(con, pstmt, null);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-470|SpecialSeperatorForDevSet|public boolean import_hints(String filename) {\n int pieceId;\n int i, col, row;\n int rotation;\n int number;\n boolean byurl = true;\n e2piece temppiece;\n String lineread;\n StringTokenizer tok;\n BufferedReader entree;\n try {\n if (byurl == true) {\n URL url = new URL(baseURL, filename);\n InputStream in = url.openStream();\n entree = new BufferedReader(new InputStreamReader(in));\n }\n else {\n entree = new BufferedReader(new FileReader(filename));\n }\n pieceId = 0;\n lineread = entree.readLine();\n tok = new StringTokenizer(lineread, " ");\n number = Integer.parseInt(tok.nextToken());\n for (i = 0;\n i < number;\n i++) {\n-   lineread = entree.readLine();\n+   lineread = entree.readLine();\n if (lineread == null) {\n break;\n }\n tok = new StringTokenizer(lineread, " ");\n pieceId = Integer.parseInt(tok.nextToken());\n col = Integer.parseInt(tok.nextToken()) - 1;\n row = Integer.parseInt(tok.nextToken()) - 1;\n rotation = Integer.parseInt(tok.nextToken());\n System.out.println("placing hint piece : " + pieceId);\n place_piece_at(pieceId, col, row, 0);\n temppiece = board.get_piece_at(col, row);\n temppiece.reset_rotation();\n temppiece.rotate(rotation);\n temppiece.set_as_hint();\n }\n return true;\n }\n catch (IOException err) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public static String getHash(String uri) throws NoSuchAlgorithmException {\n MessageDigest mDigest = MessageDigest.getInstance("MD5");\n mDigest.update(uri.getBytes());\n byte d[] = mDigest.digest();\n-   StringBuffer hash = new StringBuffer();\n+   StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-471|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n-   MessageDigest md = null;\n+   MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|public void importSequences() {\n names = new ArrayList<String>();\n sequences = new ArrayList<String>();\n try {\n InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();\n ImportHelper helper = new ImportHelper(new InputStreamReader(is));\n int ch = helper.read();\n while (ch != '>') {\n ch = helper.read();\n }\n do {\n String line = helper.readLine();\n StringTokenizer tokenizer = new StringTokenizer(line, " \t");\n String name = tokenizer.nextToken();\n StringBuffer seq = new StringBuffer();\n-   helper.readSequence(seq, ">", Integer.MAX_VALUE, "-", "?", "", null);\n+   helper.readSequence(seq, ">", Integer.MAX_VALUE, "-", "?", "", null);\n ch = helper.getLastDelimiter();\n names.add(name);\n sequences.add(seq.toString());\n }\n while (ch == '>');\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (EOFException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-472|SpecialSeperatorForDevSet|protected static InputStream loadResource(String resource) throws MissingResourceException {\n Thread thread = Thread.currentThread();\n ClassLoader cLoader = thread.getContextClassLoader();\n URL url = cLoader.getResource(resource);\n if (url == null) {\n throw new MissingResourceException("Unable to find resource '" + resource + "'.", resource, resource);\n }\n try {\n InputStream is = url.openStream();\n-   return is;\n+   return is;\n }\n catch (IOException e) {\n throw new MissingResourceException("Unable to load resource '" + resource + "' (IOException).", resource, resource);\n }\n }\n|SpecialSeperatorForDevSet|public void makeRead(String user, long databaseID, long time) throws SQLException {\n String query = "replace into fs.read_post (post, user, read_date) values (?, ?, ?)";\n ensureConnection();\n PreparedStatement statement = m_connection.prepareStatement(query);\n try {\n statement.setLong(1, databaseID);\n statement.setString(2, user);\n statement.setTimestamp(3, new Timestamp(time));\n int count = statement.executeUpdate();\n-   if (0 == count) throw new SQLException("Nothing updated.");\n+   if (0 == count) throw new SQLException("Nothing updated.");\n m_connection.commit();\n }\n catch (SQLException e) {\n m_connection.rollback();\n throw e;\n }\n finally {\n statement.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-473|SpecialSeperatorForDevSet|private void redirect(TargetApp app, HttpServletRequest request, HttpServletResponse response) throws IOException {\n-   URL url = new URL(app.getUrl() + request.getRequestURI());\n+   URL url = new URL(app.getUrl() + request.getRequestURI());\n s_log.debug("Redirecting to " + url);\n URLConnection urlConnection = url.openConnection();\n Map<String, List<String>> fields = urlConnection.getHeaderFields();\n for (String key : fields.keySet()) {\n StringBuffer values = new StringBuffer();\n boolean comma = false;\n for (String value : fields.get(key)) {\n if (comma) {\n values.append(", ");\n }\n values.append(value);\n comma = true;\n }\n if (key != null) {\n response.setHeader(key, values.toString());\n }\n else {\n response.setStatus(Integer.parseInt(values.toString().split(" ")[1]));\n }\n }\n InputStream in = urlConnection.getInputStream();\n try {\n ServletOutputStream out = response.getOutputStream();\n byte[] buff = new byte[1024];\n int len;\n while ((len = in.read(buff)) != -1) {\n out.write(buff, 0, len);\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public boolean update(String dbName, Query[] queries) throws ServiceException {\n Connection con = null;\n PreparedStatement pstmt = null;\n int rows = 0;\n try {\n con = getDbConnection().getConnection(dbName);\n con.setAutoCommit(false);\n for (int i = 0;\n i < queries.length;\n i++) {\n-   Query query = queries[i];\n+   Query query = queries[i];\n System.out.println(query.getSql());\n pstmt = con.prepareStatement(query.getSql());\n addParametersToQuery(query, pstmt);\n rows += pstmt.executeUpdate();\n }\n con.commit();\n return rows > 0;\n }\n catch (DbException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n log.error("[DAOService::update] Execute rollback " + e.getMessage(), e);\n try {\n con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n catch (SQLException e) {\n log.error("[DAOService::update] " + e.getMessage(), e);\n try {\n con.rollback();\n }\n catch (SQLException e1) {\n log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);\n throw new ServiceException(e.getMessage());\n }\n throw new ServiceException(e.getMessage());\n }\n finally {\n closeConnection(con, pstmt, null);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-474|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n InputStream fis = url.openStream();\n InputStreamReader r = new InputStreamReader(fis, "UTF-8");\n BufferedReader br = new BufferedReader(r);\n String line;\n StringBuilder sb = new StringBuilder();\n while (null != (line = br.readLine())) {\n-   sb.append(line);\n+   sb.append(line);\n sb.append("\r\n");\n }\n br.close();\n r.close();\n fis.close();\n final String text = sb.toString();\n SwingUtilities.invokeLater(new Runnable() {\n @Override public void run() {\n MainPanel.this.source.setText(text);\n MainPanel.this.source.setCaretPosition(0);\n }\n }\n);\n }\n catch (Exception ex) {\n }\n }\n|SpecialSeperatorForDevSet|private void loadProperties() {\n if (properties == null) {\n properties = new Properties();\n try {\n URL url = getClass().getResource(propsFile);\n properties.load(url.openStream());\n }\n-   catch (IOException ioe) {\n+   catch (IOException ioe) {\n ioe.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-475|SpecialSeperatorForDevSet|@ActionMethod public void list() throws IOException {\n final URL url = new URL("http://127.0.0.1:" + testPort + "/list?version=1000");\n final HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setRequestProperty(Http11Header.AUTHORIZATION, "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");\n con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, "Basic realm=\"karatasi\"");\n final InputStream in = con.getInputStream();\n final byte[] buf = new byte[4096];\n textArea.setText("");\n for (int bytesRead;\n (bytesRead = in.read(buf)) != -1;\n ) {\n-   textArea.append(new String(buf, 0, bytesRead));\n+   textArea.append(new String(buf, 0, bytesRead));\n }\n }\n|SpecialSeperatorForDevSet|public void testReadPerMemberSixSmall() throws IOException {\n GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n gzin.setEofEachMember(true);\n for (int i = 0;\n i < 3;\n i++) {\n int count2 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 1-byte member count", 1, count2);\n gzin.nextMember();\n int count3 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 5-byte member count", 5, count3);\n gzin.nextMember();\n }\n int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong eof count", 0, countEnd);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-476|SpecialSeperatorForDevSet|public static String getWebPage(URL urlObj) {\n try {\n String content = "";\n-   InputStreamReader is = new InputStreamReader(urlObj.openStream());\n+   InputStreamReader is = new InputStreamReader(urlObj.openStream());\n BufferedReader reader = new BufferedReader(is);\n String line;\n while ((line = reader.readLine()) != null) {\n content += line;\n }\n return content;\n }\n catch (IOException e) {\n throw new Error("The page " + dbg.quote(urlObj.toString()) + "could not be retrieved." + "\nThis is could be caused by a number of things:" + "\n" + "\n - the computer hosting the web page you want is down, or has returned an error" + "\n - your computer does not have Internet access" + "\n - the heat death of the universe has occurred, taking down all web servers with it");\n }\n }\n|SpecialSeperatorForDevSet|public static boolean downloadFile(String url, String destination) throws Exception {\n BufferedInputStream bi = null;\n BufferedOutputStream bo = null;\n File destfile;\n byte BUFFER[] = new byte[100];\n java.net.URL fileurl;\n URLConnection conn;\n fileurl = new java.net.URL(url);\n conn = fileurl.openConnection();\n long fullsize = conn.getContentLength();\n long onepercent = fullsize / 100;\n MessageFrame.setTotalDownloadSize(fullsize);\n bi = new BufferedInputStream(conn.getInputStream());\n destfile = new File(destination);\n if (!destfile.createNewFile()) {\n destfile.delete();\n destfile.createNewFile();\n }\n bo = new BufferedOutputStream(new FileOutputStream(destfile));\n int read = 0;\n int sum = 0;\n long i = 0;\n while ((read = bi.read(BUFFER)) != -1) {\n bo.write(BUFFER, 0, read);\n sum += read;\n i += read;\n if (i > onepercent) {\n i = 0;\n MessageFrame.setDownloadProgress(sum);\n }\n }\n bi.close();\n bo.close();\n MessageFrame.setDownloadProgress(fullsize);\n return true;\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-477|SpecialSeperatorForDevSet|@Test public void testCopy_readerToWriter_nullIn() throws Exception {\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n-   Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n+   Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n try {\n IOUtils.copy((Reader) null, writer);\n fail();\n }\n catch (NullPointerException ex) {\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) {\n int temp;\n int[] a1 = {\n 6, 2, -3, 7, -1, 8, 9, 0 }\n;\n for (int j = 0;\n j < (a1.length * a1.length);\n j++) {\n for (int i = 0;\n-   i < a1.length - 1;\n+   i < a1.length - 1;\n i++) {\n if (a1[i] > a1[i + 1]) {\n temp = a1[i];\n a1[i] = a1[i + 1];\n a1[i + 1] = temp;\n }\n }\n }\n for (int i = 0;\n i < a1.length;\n i++) {\n System.out.print(" " + a1[i]);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-478|SpecialSeperatorForDevSet|public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n Connection conn = null;\n PreparedStatement ps = null;\n Date fechaSystem = new Date();\n DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");\n DateFormat hhmmss = new SimpleDateFormat("HHmmss");\n DateFormat sss = new SimpleDateFormat("S");\n String ss = sss.format(fechaSystem);\n if (ss.length() > 2) {\n ss = ss.substring(0, 2);\n }\n boolean visado = false;\n try {\n conn = ToolsBD.getConn();\n conn.setAutoCommit(false);\n String sentenciaSql = "UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?" + ((hayVisadoExtracto) ? ", FZJIEXTR=?" : "") + ((hayVisadoRemitente) ? ", FZJIREMI=?" : "") + " WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?";\n ps = conn.prepareStatement(sentenciaSql);\n ps.setString(1, usuarioVisado);\n ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n int contador = 4;\n if (hayVisadoExtracto) {\n ps.setString(contador++, "X");\n }\n if (hayVisadoRemitente) {\n ps.setString(contador++, "X");\n }\n ps.setInt(contador++, oficina);\n ps.setInt(contador++, numeroRegistro);\n ps.setInt(contador++, anoSalida);\n ps.setString(contador++, fechaModificacion);\n ps.setString(contador++, horaModificacion);\n int registrosAfectados = ps.executeUpdate();\n if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n visado = true;\n }\n if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n if (generado) {\n visado = actualizarBZSALIDA(conn);\n }\n String rem = "";\n String com = "";\n if (hayVisadoRemitente) {\n if (!remitente.trim().equals("")) {\n rem = remitente;\n }\n else {\n javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n Object ref = contexto.lookup("es.caib.regweb.ValoresHome");\n ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n Valores valor = home.create();\n rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "");\n valor.remove();\n }\n }\n else {\n if (!altres.trim().equals("")) {\n rem = remitente;\n }\n else {\n javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n Object ref = contexto.lookup("es.caib.regweb.ValoresHome");\n ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n Valores valor = home.create();\n rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "");\n valor.remove();\n }\n }\n if (hayVisadoExtracto) {\n com = extracto;\n }\n else {\n com = comentario;\n }\n try {\n Class t = Class.forName("es.caib.regweb.module.PluginHook");\n Class[] partypes = {\n String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class }\n;\n Object[] params = {\n "V", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma }\n;\n java.lang.reflect.Method metodo = t.getMethod("salida", partypes);\n metodo.invoke(null, params);\n }\n catch (IllegalAccessException iae) {\n }\n catch (IllegalArgumentException iae) {\n }\n catch (InvocationTargetException ite) {\n }\n catch (NullPointerException npe) {\n }\n catch (ExceptionInInitializerError eiie) {\n }\n catch (NoSuchMethodException nsme) {\n }\n catch (SecurityException se) {\n }\n catch (LinkageError le) {\n }\n catch (ClassNotFoundException le) {\n }\n }\n conn.commit();\n int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n-   String Stringsss = sss.format(fechaSystem);\n+   String Stringsss = sss.format(fechaSystem);\n switch(Stringsss.length()) {\n case (1): Stringsss = "00" + Stringsss;\n break;\n case (2): Stringsss = "0" + Stringsss;\n break;\n }\n int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n }\n catch (Exception e) {\n System.out.println("Error: " + e.getMessage());\n e.printStackTrace();\n visado = false;\n try {\n if (conn != null) conn.rollback();\n else System.out.println("ERROR: No es pot fer rollback sense connexió!");\n }\n catch (Exception ex) {\n System.out.println("Error: " + e.getMessage());\n ex.printStackTrace();\n }\n }\n finally {\n ToolsBD.closeConn(conn, ps, null);\n }\n return visado;\n }\n|SpecialSeperatorForDevSet|private boolean setPayload() throws IOException {\n-   if (Index < Headers.length) {\n+   if (Index < Headers.length) {\n FileOutputStream fos = new FileOutputStream(Headers[Index], true);\n FileInputStream fis = new FileInputStream(HeadlessData);\n FileChannel fic = fis.getChannel();\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n setDestination(Destinations[Index]);\n setPayload(Headers[Index]);\n Index++;\n return true;\n }\n return false;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-479|SpecialSeperatorForDevSet|private JSONObject executeHttpGet(String uri) throws Exception {\n HttpGet req = new HttpGet(uri);\n HttpClient client = new DefaultHttpClient();\n HttpResponse resLogin = client.execute(req);\n BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));\n StringBuilder sb = new StringBuilder();\n String s = null;\n while ((s = r.readLine()) != null) {\n sb.append(s);\n-   }\n+   }\n return new JSONObject(sb.toString());\n }\n|SpecialSeperatorForDevSet|public static InputStream getResourceAsStreamIfAny(String resPath) {\n URL url = findResource(resPath);\n try {\n return url == null ? null : url.openStream();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n ZMLog.warn(e, " URL open Connection got an exception!");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-480|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n-   long renderStart = System.currentTimeMillis();\n+   long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n-   portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n+   portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-480|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n-   int pageCacheTime = 60000;\n+   int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n-   int grlen = pxlen + 8;\n+   int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-481|SpecialSeperatorForDevSet|public InputStream send(String s, String s1) throws IOException {\n HttpURLConnection httpurlconnection = null;\n DataInputStream datainputstream = null;\n System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");\n URL url = new URL(s1);\n httpurlconnection = (HttpURLConnection) url.openConnection();\n configureURLConnection(httpurlconnection);\n-   DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());\n+   DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());\n dataoutputstream.write(s.getBytes());\n httpurlconnection.connect();\n datainputstream = new DataInputStream(httpurlconnection.getInputStream());\n if (httpurlconnection.getResponseCode() != 200) {\n System.out.println("Invalid Response Code! Code Returned = " + Integer.toString(httpurlconnection.getResponseCode()));\n return null;\n }\n if (!httpurlconnection.getContentType().equalsIgnoreCase("Text/xml")) {\n System.out.println("Invalid Content-Type! Content type of response received = " + httpurlconnection.getContentType());\n return null;\n }\n else {\n return datainputstream;\n }\n }\n|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n+   throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-482|SpecialSeperatorForDevSet|public HttpResponseExchange execute() throws Exception {\n HttpResponseExchange forwardResponse = null;\n int fetchSizeLimit = Config.getInstance().getFetchLimitSize();\n while (null != lastContentRange) {\n forwardRequest.setBody(new byte[0]);\n ContentRangeHeaderValue old = lastContentRange;\n long sendSize = fetchSizeLimit;\n if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {\n sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);\n }\n if (sendSize <= 0) {\n break;\n }\n lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);\n forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));\n forwardResponse = syncFetch(forwardRequest);\n-   if (sendSize < fetchSizeLimit) {\n+   if (sendSize < fetchSizeLimit) {\n lastContentRange = null;\n }\n }\n return forwardResponse;\n }\n|SpecialSeperatorForDevSet|private String retrieveTemplate() throws Exception {\n-   if (cachedTemplate == null) {\n+   if (cachedTemplate == null) {\n final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n final StringBuilder result = new StringBuilder();\n String line;\n while ((line = in.readLine()) != null) {\n result.append(line);\n }\n in.close();\n cachedTemplate = result.toString();\n }\n return cachedTemplate;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-483|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n-   }\n+   }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n parseURL = url;\n URLConnection connection = url.openConnection();\n if (charset == null) {\n-   charset = Charset.forName("UTF-8");\n+   charset = Charset.forName("UTF-8");\n }\n Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n return internalParse(reader, target);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-484|SpecialSeperatorForDevSet|@Override public void run() {\n String key = getKey();\n synchronized (this.lauchedHTTPRequests) {\n if (this.lauchedHTTPRequests.contains(key)) return;\n this.lauchedHTTPRequests.add(key);\n }\n String st = this.dataSource.getTileURL(this.x, this.y, this.z);\n URL url;\n try {\n url = new URL(st);\n }\n catch (MalformedURLException e1) {\n logger.warning("Error in URL: " + st);\n return;\n }\n String geoJSON = "";\n try {\n InputStream is;\n if ("file".equals(url.getProtocol())) is = new FileInputStream(url.getFile());\n else if ("http".equals(url.getProtocol())) is = url.openStream();\n else {\n logger.warning("Impossible to load settings from " + url + ". Unsupported protocol " + url.getProtocol());\n return;\n }\n-   BufferedReader in = new BufferedReader(new InputStreamReader(is));\n+   BufferedReader in = new BufferedReader(new InputStreamReader(is));\n String line;\n while ((line = in.readLine()) != null) geoJSON += line;\n in.close();\n }\n catch (FileNotFoundException e) {\n return;\n }\n catch (IOException e) {\n e.printStackTrace();\n return;\n }\n VectorTile tile = new VectorTile(geoJSON, x, y, z);\n Geometry[] geoms = new Geometry[tile.getPieces().size()];\n int i = 0;\n for (MfGeo geo : tile.getPieces()) {\n if (geo.getGeoType() == GeoType.GEOMETRY) {\n geoms[i++] = ((MfGeometry) geo).getInternalGeometry();\n }\n else if (geo.getGeoType() == GeoType.FEATURE) {\n MfFeature mf = (MfFeature) geo;\n geoms[i++] = mf.getMfGeometry().getInternalGeometry();\n }\n }\n GeometryCollection gc = new GeometryFactory().createGeometryCollection(geoms);\n this.dataSource.getDataLoader().add(new OpenCartoFeature(this.dataSource.getLayer(), new Rep(gc), this.z));\n this.dataSource.getLayer().getDisplayCacheLoader().coin();\n synchronized (this.lauchedHTTPRequests) {\n this.lauchedHTTPRequests.remove(key);\n }\n }\n|SpecialSeperatorForDevSet|public void createPartControl(Composite parent) {\n viewer = new ScrollingGraphicalViewer();\n viewer.setRootEditPart(new ScalableRootEditPart());\n viewer.setEditPartFactory(new BlockEditPartFactory());\n viewer.setEditDomain(new EditDomain());\n viewer.createControl(parent);\n viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\n ActionRegistry actionRegistry = new ActionRegistry();\n createActions(actionRegistry);\n ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\n viewer.setContextMenu(cmProvider);\n Block b = new Block();\n b.addChild(new ChartItem());\n viewer.setContents(b);\n System.err.println("!!! " + viewer.getContents().getChildren().get(0));\n viewer.select((EditPart) viewer.getContents().getChildren().get(0));\n PaletteRoot root = new PaletteRoot();\n PaletteGroup toolGroup = new PaletteGroup("Chart Tools");\n List toolList = new ArrayList();\n ToolEntry tool = new SelectionToolEntry();\n toolList.add(tool);\n root.setDefaultEntry(tool);\n tool = new MarqueeToolEntry();\n toolList.add(tool);\n toolGroup.addAll(toolList);\n PaletteGroup templateGroup = new PaletteGroup("Templates");\n List templateList = new ArrayList();\n CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry("Rect", "Rect", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry("Line", "Line", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n templateList.add(entry);\n templateList.add(entry1);\n templateGroup.addAll(templateList);\n List rootList = new ArrayList();\n rootList.add(toolGroup);\n rootList.add(templateGroup);\n root.addAll(rootList);\n final PaletteViewer v = new PaletteViewer();\n v.setPaletteRoot(root);\n v.createControl(parent);\n v.addSelectionChangedListener(new ISelectionChangedListener() {\n public void selectionChanged(SelectionChangedEvent event) {\n System.err.println("selectionChanged " + v.getActiveTool());\n }\n }\n);\n deleteAction.setSelectionProvider(viewer);\n viewer.getEditDomain().setPaletteViewer(v);\n viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n public void selectionChanged(SelectionChangedEvent event) {\n System.err.println(event.getSelection());\n-   deleteAction.update();\n+   deleteAction.update();\n }\n }\n);\n viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\n public void stackChanged(CommandStackEvent event) {\n undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\n redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-485|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n-   File ofp = new File(outFile);\n+   File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|public static String getFileContentFromPlugin(String path) {\n URL url = getURLFromPlugin(path);\n StringBuffer sb = new StringBuffer();\n try {\n Scanner scanner = new Scanner(url.openStream());\n while (scanner.hasNextLine()) {\n String line = scanner.nextLine();\n sb.append(line + "\n");\n-   }\n+   }\n scanner.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n return "";\n }\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-486|SpecialSeperatorForDevSet|public static byte[] loadURLToBuffer(URL url) throws IOException {\n byte[] buf = new byte[4096];\n byte[] data = null;\n byte[] temp = null;\n int iCount = 0;\n int iTotal = 0;\n BufferedInputStream in = new BufferedInputStream(url.openStream(), 20480);\n while ((iCount = in.read(buf, 0, buf.length)) != -1) {\n if (iTotal == 0) {\n data = new byte[iCount];\n System.arraycopy(buf, 0, data, 0, iCount);\n iTotal = iCount;\n }\n else {\n temp = new byte[iCount + iTotal];\n-   System.arraycopy(data, 0, temp, 0, iTotal);\n+   System.arraycopy(data, 0, temp, 0, iTotal);\n System.arraycopy(buf, 0, temp, iTotal, iCount);\n data = temp;\n iTotal = iTotal + iCount;\n }\n }\n in.close();\n return data;\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-487|SpecialSeperatorForDevSet|public void init() {\n String filename = getParameter("filename");\n if (filename == null) {\n Error("Illegal filename");\n return;\n }\n Dimension dim = DEFAULT_SIZE;\n try {\n int w = Integer.parseInt(getParameter("width"));\n int h = Integer.parseInt(getParameter("height"));\n dim = new Dimension(w, h);\n }\n catch (Exception e) {\n-   }\n+   }\n InputStream in;\n try {\n File ff = new File(filename);\n in = new FileInputStream(ff);\n }\n catch (Exception ignore) {\n try {\n URL url = new URL(filename);\n in = url.openStream();\n }\n catch (Exception e) {\n Error("Graph viewer: Failed to open: " + filename + "\n" + e);\n return;\n }\n }\n getContentPane().add(getWindow(in));\n resize(dim);\n repaint();\n }\n|SpecialSeperatorForDevSet|public static String uncompress(String readPath, boolean mkdir) throws Exception {\n ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\n BufferedInputStream bis = new BufferedInputStream(arcInputStream);\n File baseDir = new File(readPath).getParentFile();\n String basePath = baseDir.getPath() + "/";\n if (mkdir) {\n String[] schema = readPath.split("/");\n String baseName = schema[schema.length - 1].replaceAll(".zip", "");\n FileUtils.forceMkdir(new File(basePath + baseName));\n basePath = basePath + baseName + "/";\n }\n ArchiveEntry entry;\n while ((entry = arcInputStream.getNextEntry()) != null) {\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(basePath + entry.getName()));\n }\n else {\n String writePath = basePath + entry.getName();\n String dirName = FilenameUtils.getPath(writePath);\n FileUtils.forceMkdir(new File(dirName));\n BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\n int i = 0;\n while ((i = bis.read()) != -1) {\n bos.write(i);\n }\n IOUtils.closeQuietly(bos);\n }\n }\n IOUtils.closeQuietly(bis);\n return basePath;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-488|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n-   }\n+   }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n-   }\n+   }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-489|SpecialSeperatorForDevSet|private BufferedImage _getImage(String urlStr) throws IOException {\n URL url = new URL(urlStr);\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.connect();\n-   InputStream in = null;\n+   InputStream in = null;\n try {\n in = conn.getInputStream();\n return ImageIO.read(in);\n }\n finally {\n IOUtilities.close(in);\n }\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n-   final File destination = new File(path, source.getName());\n+   final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-490|SpecialSeperatorForDevSet|public String readRemoteFile() throws IOException {\n String response = "";\n boolean eof = false;\n URL url = new URL(StaticData.remoteFile);\n InputStream is = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String s;\n s = br.readLine();\n response = s;\n while (!eof) {\n try {\n s = br.readLine();\n if (s == null) {\n eof = true;\n br.close();\n }\n else response += s;\n-   }\n+   }\n catch (EOFException eo) {\n eof = true;\n }\n catch (IOException e) {\n System.out.println("IO Error : " + e.getMessage());\n }\n }\n return response;\n }\n|SpecialSeperatorForDevSet|@Primitive public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {\n try {\n final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);\n md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());\n return Value.createFromBlock(Block.createString(md5.digest()));\n }\n-   catch (final NoSuchAlgorithmException nsae) {\n+   catch (final NoSuchAlgorithmException nsae) {\n Fail.invalidArgument("Digest.substring");\n return Value.UNIT;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-491|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n-   String line = reader.readLine();\n+   String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n-   bw.flush();\n+   bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-492|SpecialSeperatorForDevSet|public void testJPEGRaster() throws MalformedURLException, IOException {\n System.out.println("JPEGCodec RasterImage:");\n long start = Calendar.getInstance().getTimeInMillis();\n for (int i = 0;\n i < images.length;\n i++) {\n String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];\n InputStream istream = (new URL(url)).openStream();\n JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);\n Raster raster = dec.decodeAsRaster();\n int width = raster.getWidth();\n int height = raster.getHeight();\n-   istream.close();\n+   istream.close();\n System.out.println("w: " + width + " - h: " + height);\n }\n long stop = Calendar.getInstance().getTimeInMillis();\n System.out.println("zeit: " + (stop - start));\n }\n|SpecialSeperatorForDevSet|private static String encrypt(String algorithm, String password, Long digestSeed) {\n-   try {\n+   try {\n MessageDigest digest = MessageDigest.getInstance(algorithm);\n digest.reset();\n digest.update(password.getBytes("UTF-8"));\n digest.update(digestSeed.toString().getBytes("UTF-8"));\n byte[] messageDigest = digest.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\n hexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException(e);\n }\n catch (UnsupportedEncodingException e) {\n throw new RuntimeException(e);\n }\n catch (NullPointerException e) {\n return new StringBuffer().toString();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-493|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n-   byte[] pd = md.digest();\n+   byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-494|SpecialSeperatorForDevSet|public int scrapeForIsbns(URL url) {\n int matches = 0;\n Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{\n10}\n)");\n Matcher m;\n-   for (int i = 0;\n+   for (int i = 0;\n i < RETRIES;\n i++) {\n try {\n InputStream in = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(in));\n String str;\n while ((str = br.readLine()) != null) {\n m = p.matcher(str);\n while (m.find()) {\n matches++;\n outputIsbns.put(m.group(1));\n logger.debug("Got ISBN: " + m.group(1));\n }\n }\n break;\n }\n catch (ConnectException e) {\n logger.warn("Connection attempt " + i + " failed, trying again. Max retries: " + RETRIES);\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e1) {\n }\n }\n catch (IOException e) {\n logger.error("Error reading URL stream", e);\n }\n catch (InterruptedException e) {\n logger.error("Interrupted while calling put(Object E)", e);\n }\n }\n return matches;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) {\n try {\n FileChannel inChannel = null, outChannel = null;\n try {\n-   out.getParentFile().mkdirs();\n+   out.getParentFile().mkdirs();\n inChannel = new FileInputStream(in).getChannel();\n outChannel = new FileOutputStream(out).getChannel();\n outChannel.transferFrom(inChannel, 0, inChannel.size());\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n catch (Exception e) {\n ObjectUtils.throwAsError(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-495|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n-   finally {\n+   finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n-   IOUtils.copy(in, out);\n+   IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-495|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n-   try {\n+   try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void handle() {\n-   FileChannel srcChannel, destChannel;\n+   FileChannel srcChannel, destChannel;\n String destOutFile = logFile + "." + System.currentTimeMillis();\n String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz";\n if (rotateDest != null) {\n (new File(rotateDest)).mkdirs();\n if (destOutFile.indexOf("/") != -1) {\n destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1);\n }\n if (destOutFileCompressed.indexOf("/") != -1) {\n destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1);\n }\n }\n if (rotateCompress) {\n try {\n GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n FileInputStream in = new FileInputStream(logFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n out.finish();\n out.close();\n buf = null;\n in = null;\n out = null;\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFileCompressed + "'");\n }\n catch (Exception e) {\n Debug.debug("Unable to rotate log file '" + logFile + "': " + e);\n }\n }\n else {\n try {\n srcChannel = new FileInputStream(logFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to read log file '" + logFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel = new FileOutputStream(destOutFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to rotate log file to '" + destOutFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n destChannel.close();\n srcChannel = null;\n destChannel = null;\n }\n catch (IOException e) {\n Debug.debug("Unable to copy data for file rotation: " + e.getMessage());\n return;\n }\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'");\n }\n if (rotateDelete && isFile) {\n try {\n ps.close();\n }\n catch (Exception e) {\n }\n isFile = false;\n ps = null;\n (new File(logFile)).delete();\n reconfigureDebug();\n }\n if (rotateDest != null) {\n long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n long currentTime = System.currentTimeMillis();\n File fileList[] = (new File(rotateDest)).listFiles();\n DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");\n java.util.Date date = new java.util.Date(currentTime);\n String archiveFile = format1.format(date).toString() + ".zip";\n if (rotateArchive != null) {\n archiveFile = rotateArchive + "/" + archiveFile;\n (new File(rotateArchive)).mkdirs();\n }\n Archive archive = new Archive(archiveFile);\n for (int i = 0;\n i < fileList.length;\n i++) {\n String currentFilename = fileList[i].getName();\n long timeDifference = (currentTime - fileList[i].lastModified());\n if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) {\n if (rotateDest != null) {\n currentFilename = rotateDest + "/" + currentFilename;\n }\n if (timeDifference > comparisonTime) {\n archive.addFile(fileList[i].getName(), currentFilename);\n fileList[i].delete();\n }\n }\n }\n archive = null;\n fileList = null;\n format1 = null;\n date = null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-496|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public void postData(String protocol, String host, String form, String data) throws Exception {\n if ((protocol == null) || (protocol.equals(""))) {\n protocol = DEFAULT_PROTOCOL;\n }\n if ((host == null) || (host.equals(""))) {\n host = DEFAULT_HOST;\n }\n if (form == null) {\n form = DEFAULT_FORM;\n }\n if (data == null) {\n throw new IllegalArgumentException("Invalid data");\n }\n URL url = new URL(protocol, host, form);\n URLConnection con = url.openConnection();\n con.setDoOutput(true);\n-   con.setDoInput(true);\n+   con.setDoInput(true);\n con.setUseCaches(false);\n con.setRequestProperty("Content-type", "application/x-www-form-urlencoded");\n con.setRequestProperty("Content-length", String.valueOf(data.length()));\n PrintStream out = new PrintStream(con.getOutputStream(), true);\n out.print(data);\n out.close();\n BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n while (in.readLine() != null) {\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-497|SpecialSeperatorForDevSet|private void Connect() throws NpsException {\n try {\n client = new FTPClient();\n client.connect(host.hostname, host.remoteport);\n-   int reply = client.getReplyCode();\n+   int reply = client.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n client.disconnect();\n client = null;\n com.microfly.util.DefaultLog.error_noexception("FTP Server:" + host.hostname + "refused connection.");\n return;\n }\n client.login(host.uname, host.upasswd);\n client.enterLocalPassiveMode();\n client.setFileType(FTPClient.BINARY_FILE_TYPE);\n client.changeWorkingDirectory(host.remotedir);\n }\n catch (Exception e) {\n com.microfly.util.DefaultLog.error(e);\n }\n }\n|SpecialSeperatorForDevSet|private String hashKey(String key) {\n String hashed = "";\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(key.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n-   hashed = hash.toString(16);\n+   hashed = hash.toString(16);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n hashed = String.valueOf(key.hashCode());\n }\n return hashed;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-498|SpecialSeperatorForDevSet|public void runInternal() {\n connection = null;\n boolean itemsLoadedPartially = false;\n boolean loadNext = false;\n HashSet<String> visited = new HashSet<String>();\n do {\n try {\n setProgressMessage(url.toString(), -1);\n visited.add(url.toString());\n long startTimeStamp = System.currentTimeMillis();\n delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n URLConnection conn = url.openConnection();\n if (conn instanceof HttpsURLConnection) {\n onError("HTTPs is not supported yet");\n return;\n }\n if (!(conn instanceof HttpURLConnection)) {\n onError("Only HTTP supported");\n return;\n }\n connection = (HttpURLConnection) conn;\n connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");\n if (referer != null) connection.setRequestProperty("Referer", referer);\n connection.setInstanceFollowRedirects(true);\n connection.setAllowUserInteraction(false);\n connection.setConnectTimeout(CONNECT_TIMEOUT);\n connection.setReadTimeout(READ_TIMEOUT);\n connection.setDoInput(true);\n String fileName = null;\n String disp = connection.getHeaderField("Content-Disposition");\n if (disp != null) {\n int p = disp.indexOf("filename=");\n if (p > 0) {\n fileName = disp.substring(p + 9);\n }\n }\n int response = -1;\n response = connection.getResponseCode();\n L.d("Response: " + response);\n if (response != 200) {\n onError("Error " + response);\n return;\n }\n String contentType = connection.getContentType();\n String contentEncoding = connection.getContentEncoding();\n int contentLen = connection.getContentLength();\n L.d("Entity content length: " + contentLen);\n L.d("Entity content type: " + contentType);\n-   L.d("Entity content encoding: " + contentEncoding);\n+   L.d("Entity content encoding: " + contentEncoding);\n setProgressMessage(url.toString(), contentLen);\n InputStream is = connection.getInputStream();\n delayedProgress.cancel();\n is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n boolean isZip = contentType != null && contentType.equals("application/zip");\n if (expectedType != null) contentType = expectedType;\n else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n byte[] buf = new byte[contentLen];\n if (is.read(buf) != contentLen) {\n onError("Wrong content length");\n return;\n }\n is.close();\n is = null;\n is = new ByteArrayInputStream(buf);\n if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";\n }\n if (contentType.startsWith("application/atom+xml")) {\n L.d("Parsing feed");\n parseFeed(is);\n itemsLoadedPartially = true;\n if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;\nprofile=opds-catalog")) {\n if (handler.entries.size() < MAX_OPDS_ITEMS) {\n url = new URL(handler.docInfo.nextLink.href);\n loadNext = !visited.contains(url.toString());\n L.d("continue with next part: " + url);\n }\n else {\n L.d("max item count reached: " + handler.entries.size());\n loadNext = false;\n }\n }\n else {\n loadNext = false;\n }\n }\n else {\n if (fileName == null) fileName = defaultFileName;\n L.d("Downloading book: " + contentEncoding);\n downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n if (progressShown) coolReader.getEngine().hideProgress();\n loadNext = false;\n itemsLoadedPartially = false;\n }\n }\n catch (Exception e) {\n L.e("Exception while trying to open URI " + url.toString(), e);\n if (progressShown) coolReader.getEngine().hideProgress();\n onError("Error occured while reading OPDS catalog");\n break;\n }\n finally {\n if (connection != null) try {\n connection.disconnect();\n }\n catch (Exception e) {\n }\n }\n }\n while (loadNext);\n if (progressShown) coolReader.getEngine().hideProgress();\n if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n @Override public void run() {\n L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");\n callback.onFinish(handler.docInfo, handler.entries);\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n-   return convertToHex(sha1hash);\n+   return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-499|SpecialSeperatorForDevSet|@Override protected String doInBackground(String... params) {\n try {\n final HttpParams param = new BasicHttpParams();\n HttpConnectionParams.setConnectionTimeout(param, 30000);\n HttpConnectionParams.setSoTimeout(param, 30000);\n DefaultHttpClient client = new DefaultHttpClient(param);\n HttpPost post = new HttpPost("http://www.google.com/loc/json");\n post.setEntity(new StringEntity(params[0]));\n-   if (DEBUG) Log.d("Location", params[0]);\n+   if (DEBUG) Log.d("Location", params[0]);\n HttpResponse resp = client.execute(post);\n if (resp.getStatusLine().getStatusCode() == 200) {\n HttpEntity entity = resp.getEntity();\n String result = EntityUtils.toString(entity);\n return result;\n }\n else {\n if (isFirstLocation) {\n requestGearsLocation(1);\n isFirstLocation = false;\n return RESULT_FIRST_FAILE;\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private BufferedImage _getImage(String urlStr) throws IOException {\n URL url = new URL(urlStr);\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.connect();\n InputStream in = null;\n try {\n in = conn.getInputStream();\n return ImageIO.read(in);\n }\n finally {\n IOUtilities.close(in);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-500|SpecialSeperatorForDevSet|public static String hashPasswordForOldMD5(String password) {\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(password.getBytes("UTF-8"));\n byte messageDigest[] = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & messageDigest[i]);\n if (hex.length() == 1) {\n hexString.append('0');\n }\n hexString.append(hex);\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new IllegalStateException(nsae.getMessage());\n }\n catch (UnsupportedEncodingException uee) {\n throw new IllegalStateException(uee.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public void execUpdate(String sqlStmts[]) throws SQLException {\n if (conn == null || conn.isClosed()) throw new SQLException("The connection has not been established yet.");\n if (sqlStmts == null || sqlStmts.length == 0) throw new SQLException("SQL-statement is null.");\n conn.setAutoCommit(false);\n try {\n for (int i = 0;\n i < sqlStmts.length;\n i++) {\n stmt = conn.createStatement();\n stmt.executeUpdate(sqlStmts[i]);\n logger.debug(sqlStmts[i]);\n stmt.close();\n }\n conn.commit();\n }\n catch (SQLException ex) {\n conn.rollback();\n throw ex;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-501|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected static final byte[] digest(String s) {\n byte[] ret = null;\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(s.getBytes());\n ret = md.digest();\n }\n catch (NoSuchAlgorithmException e) {\n System.err.println("no message digest algorithm available!");\n System.exit(1);\n }\n return ret;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-502|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n }\n finally {\n if (in != null) {\n-   try {\n+   try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static boolean loadContentFromURL(String fromURL, String toFile) {\n try {\n URL url = new URL("http://bible-desktop.com/xml" + fromURL);\n File file = new File(toFile);\n URLConnection ucon = url.openConnection();\n-   InputStream is = ucon.getInputStream();\n+   InputStream is = ucon.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(is);\n ByteArrayBuffer baf = new ByteArrayBuffer(50);\n int current = 0;\n while ((current = bis.read()) != -1) {\n baf.append((byte) current);\n }\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(baf.toByteArray());\n fos.close();\n }\n catch (IOException e) {\n Log.e(TAG, e);\n return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-503|SpecialSeperatorForDevSet|private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already has an open record ");\n }\n else {\n PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n long outageID = -1;\n ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n if (seqRS.next()) {\n outageID = seqRS.getLong(1);\n }\n seqRS.close();\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement newOutageWriter = null;\n if (log.isDebugEnabled()) log.debug("handleNodeLostService: creating new outage entry...");\n newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n newOutageWriter.setLong(1, outageID);\n newOutageWriter.setLong(2, eventID);\n newOutageWriter.setLong(3, nodeID);\n newOutageWriter.setString(4, ipAddr);\n newOutageWriter.setLong(5, serviceID);\n newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n newOutageWriter.executeUpdate();\n newOutageWriter.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeLostService could not be recorded for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n-   }\n+   }\n }\n catch (SQLException sqle) {\n log.warn("SQL exception while handling \'nodeLostService\'", sqle);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n if (!source.exists()) throw new IOException("source file not exists");\n if (!source.isFile()) throw new IOException("source file not exists(is a directory)");\n InputStream src = new FileInputStream(source);\n File tarn = target;\n if (target.isDirectory() || !(!(target.exists()) || replace)) {\n String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n tarn = new File(tardir + File.separator + source.getName());\n int n = 1;\n while (!(!tarn.exists() || replace)) {\n tarn = new File(tardir + File.separator + String.valueOf(n) + " copy of " + source.getName());\n n++;\n }\n }\n if (source.getPath().equals(tarn.getPath()) && replace) return;\n-   OutputStream tar = new FileOutputStream(tarn);\n+   OutputStream tar = new FileOutputStream(tarn);\n byte[] bytes = new byte[bufferSize];\n int readn = -1;\n while ((readn = src.read(bytes)) > 0) {\n tar.write(bytes, 0, readn);\n }\n tar.flush();\n tar.close();\n src.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-504|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n return file.getAbsolutePath();\n-   }\n+   }\n else {\n return url.toString();\n }\n }\n catch (Throwable t) {\n }\n return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|public static String getMD5(String _pwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(_pwd.getBytes());\n return toHexadecimal(new String(md.digest()).getBytes());\n }\n-   catch (NoSuchAlgorithmException x) {\n+   catch (NoSuchAlgorithmException x) {\n x.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-505|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n-   }\n+   }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|@Override public boolean insert(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {\n filasInsert = 0;\n if (!consulta.contains(";\n")) {\n this.tipoConsulta = new Scanner(consulta);\n if (this.tipoConsulta.hasNext()) {\n execConsulta = this.tipoConsulta.next();\n if (execConsulta.equalsIgnoreCase("insert")) {\n Connection conexion = cx;\n Statement st = null;\n try {\n conexion.setAutoCommit(autocommit);\n if (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {\n conexion.setTransactionIsolation(transactionIsolation);\n }\n else {\n throw new IllegalArgumentException("Valor invalido sobre TransactionIsolation,\n TRANSACTION_NONE no es soportado por MySQL");\n }\n st = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);\n conexion.setReadOnly(false);\n filasInsert = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);\n if (filasInsert > -1) {\n if (autocommit == false) {\n conexion.commit();\n }\n return true;\n }\n else {\n return false;\n }\n }\n catch (MySQLIntegrityConstraintViolationException e) {\n System.out.println("Posible duplicacion de DATOS");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n catch (MySQLNonTransientConnectionException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n catch (MySQLDataException e) {\n System.out.println("Datos incorrectos");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (MySQLSyntaxErrorException e) {\n System.out.println("Error en la sintaxis de la Consulta en MySQL");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (SQLException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n finally {\n try {\n if (st != null) {\n if (!st.isClosed()) {\n st.close();\n }\n }\n if (!conexion.isClosed()) {\n conexion.close();\n-   }\n+   }\n }\n catch (NullPointerException ne) {\n ne.printStackTrace();\n }\n catch (SQLException e) {\n e.printStackTrace();\n }\n }\n }\n else {\n throw new IllegalArgumentException("No es una instruccion Insert");\n }\n }\n else {\n try {\n throw new JMySQLException("Error Grave , notifique al departamento de Soporte Tecnico \n" + email);\n }\n catch (JMySQLException ex) {\n Logger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);\n return false;\n }\n }\n }\n else {\n throw new IllegalArgumentException("No estan permitidas las MultiConsultas en este metodo");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-506|SpecialSeperatorForDevSet|private void downloadFiles() {\n SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {\n Date startDownloadDate;\n @Override public Double doInBackground() {\n startDownloadDate = new Date();\n refreshSpeed = 0;\n lastDate = null;\n try {\n int totalSizeRead = 0;\n int totalNumberRead = 0;\n for (RaphPhotoGalleryPhoto photo : photoList) {\n URL url = new URL(getCodeBase().toString() + photo.getUrl());\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n DataInputStream dis = new DataInputStream(connection.getInputStream());\n FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + "/" + photo.getFileName());\n byte[] b = new byte[65536];\n int sizeRead;\n photo.setProcessedSize(0);\n totalNumberRead++;\n while ((sizeRead = dis.read(b)) > -1) {\n fos.write(b, 0, sizeRead);\n totalSizeRead += sizeRead;\n photo.addToProcessedSize(sizeRead);\n photo.setTotalProcessedSize(totalSizeRead);\n photo.setTotalProcessedNumber(totalNumberRead);\n publish(photo);\n try {\n }\n catch (Exception ignore) {\n }\n }\n fos.close();\n }\n }\n-   catch (MalformedURLException e1) {\n+   catch (MalformedURLException e1) {\n System.err.println("MalformedURLException: " + e1);\n }\n catch (IOException e2) {\n System.err.println("IOException: " + e2);\n }\n long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);\n return new Double(totalSpeed);\n }\n @Override protected void process(List<RaphPhotoGalleryPhoto> list) {\n RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);\n progressBarTotal.setMaximum(photoListTotalSize);\n progressBarTotal.setValue(photo.getTotalProcessedSize());\n setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());\n progressBarCurrent.setMaximum(photo.getFileSize());\n progressBarCurrent.setValue(photo.getProcessedSize());\n progressBarCurrentLabel.setText(photo.getFileName());\n long diffTime = 0;\n if (lastDate == null) lastDate = new Date();\n diffTime = (new Date()).getTime() - lastDate.getTime();\n if (diffTime > 1000) {\n double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);\n if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));\n if (lastSpeed.size() == 10) lastSpeed.removeFirst();\n double speed = 0;\n for (Double d : lastSpeed) {\n speed += d.doubleValue();\n }\n speed = Math.round(speed / lastSpeed.size());\n if (refreshSpeed == 0) {\n long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);\n remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;\n if (remainingTime < 8) refreshSpeed = 0;\n else refreshSpeed = 3;\n }\n else {\n refreshSpeed--;\n remainingTime -= diffTime / 1000.0;\n }\n speedLabel.setText(String.format("%.0f", speed / 1024) + " " + getParameter("i18n_speedUnit") + " : " + String.format("%.0f", remainingTime) + " s");\n lastDate = new Date();\n lastTotalSize = photo.getTotalProcessedSize();\n }\n }\n @Override protected void done() {\n try {\n speedLabel.setText(String.format("%.0f", get().doubleValue() / 1024) + " " + getParameter("i18n_speedUnit"));\n downloadButton.setText(getParameter("i18n_finished"));\n downloadState = 2;\n }\n catch (Exception ignore) {\n }\n }\n }\n;\n downloadFilesWorker.execute();\n }\n|SpecialSeperatorForDevSet|@Test public void testSpeedyShareUpload() throws Exception {\n-   request.setUrl("http://www.speedyshare.com/upload.php");\n+   request.setUrl("http://www.speedyshare.com/upload.php");\n request.setFile("fileup0", file);\n HttpResponse response = httpClient.execute(request);\n assertTrue(response.is2xxSuccess());\n assertTrue(response.getResponseHeaders().size() > 0);\n String body = IOUtils.toString(response.getResponseBody());\n assertTrue(body.contains("Download link"));\n assertTrue(body.contains("Delete password"));\n response.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-507|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n-   log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n+   log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|private void streamContains(String in, InputStream stream) throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-   IOUtils.copy(stream, baos);\n+   IOUtils.copy(stream, baos);\n byte[] bytes = baos.toByteArray();\n String cmp = new String(bytes, "UTF-8");\n assertTrue(cmp.contains(in));\n baos.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-508|SpecialSeperatorForDevSet|-  public boolean referredFilesChanged() throws MalformedURLException, IOException {\n+  public boolean referredFilesChanged() throws MalformedURLException, IOException {\n for (String file : referredFiles) {\n if (FileUtils.isURI(file)) {\n URLConnection url = new URL(file).openConnection();\n if (url.getLastModified() > created) return true;\n }\n else if (FileUtils.isFile(file)) {\n File f = new File(file);\n if (f.lastModified() > created) return true;\n }\n }\n return false;\n }\n|SpecialSeperatorForDevSet|public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-509|SpecialSeperatorForDevSet|public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n Calendar rightNow = Calendar.getInstance();\n String dayNamedFolderName = "" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n String uploadDirRoot = props.getProperty("uploaded.files.root");\n File file = new File(uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName);\n if (!file.exists()) file.mkdirs();\n String extension = FilenameUtils.getExtension(fileName);\n String outFileName;\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, "true"))) {\n outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n }\n else {\n outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n }\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, "true"))) {\n outFileName = outFileName + DOT + extension;\n }\n String outPathAndName = uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName + System.getProperty("file.separator") + props.getProperty("uploaded.files.prefix") + outFileName;\n File uploadedFile = new File(outPathAndName);\n _logger.info("uploadedFile.getAbsolutePath() = {\n}\n", uploadedFile.getAbsolutePath());\n uploadedFile.createNewFile();\n OutputStream outStream = new FileOutputStream(outPathAndName);\n IOUtils.copyLarge(inStream, outStream);\n IOUtils.closeQuietly(inStream);\n outStream.close();\n if (resize) {\n writeResizedImage(outPathAndName, extension, "imgSize_xs");\n writeResizedImage(outPathAndName, extension, "imgSize_s");\n writeResizedImage(outPathAndName, extension, "imgSize_m");\n writeResizedImage(outPathAndName, extension, "imgSize_l");\n writeResizedImage(outPathAndName, extension, "imgSize_xl");\n }\n String retVal = dayNamedFolderName + "/" + props.getProperty("uploaded.files.prefix") + outFileName;\n return retVal;\n }\n-  \n+  |SpecialSeperatorForDevSet|public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n Calendar rightNow = Calendar.getInstance();\n String dayNamedFolderName = "" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n String uploadDirRoot = props.getProperty("uploaded.files.root");\n File file = new File(uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName);\n if (!file.exists()) file.mkdirs();\n String extension = FilenameUtils.getExtension(fileName);\n String outFileName;\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, "true"))) {\n outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n }\n else {\n outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n }\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, "true"))) {\n outFileName = outFileName + DOT + extension;\n }\n String outPathAndName = uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName + System.getProperty("file.separator") + props.getProperty("uploaded.files.prefix") + outFileName;\n File uploadedFile = new File(outPathAndName);\n _logger.info("uploadedFile.getAbsolutePath() = {\n}\n", uploadedFile.getAbsolutePath());\n uploadedFile.createNewFile();\n-   OutputStream outStream = new FileOutputStream(outPathAndName);\n+   OutputStream outStream = new FileOutputStream(outPathAndName);\n IOUtils.copyLarge(inStream, outStream);\n IOUtils.closeQuietly(inStream);\n outStream.close();\n if (resize) {\n writeResizedImage(outPathAndName, extension, "imgSize_xs");\n writeResizedImage(outPathAndName, extension, "imgSize_s");\n writeResizedImage(outPathAndName, extension, "imgSize_m");\n writeResizedImage(outPathAndName, extension, "imgSize_l");\n writeResizedImage(outPathAndName, extension, "imgSize_xl");\n }\n String retVal = dayNamedFolderName + "/" + props.getProperty("uploaded.files.prefix") + outFileName;\n return retVal;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-509|SpecialSeperatorForDevSet|public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n Calendar rightNow = Calendar.getInstance();\n String dayNamedFolderName = "" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n String uploadDirRoot = props.getProperty("uploaded.files.root");\n File file = new File(uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName);\n if (!file.exists()) file.mkdirs();\n String extension = FilenameUtils.getExtension(fileName);\n String outFileName;\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, "true"))) {\n outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n }\n else {\n outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n }\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, "true"))) {\n outFileName = outFileName + DOT + extension;\n }\n String outPathAndName = uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName + System.getProperty("file.separator") + props.getProperty("uploaded.files.prefix") + outFileName;\n File uploadedFile = new File(outPathAndName);\n _logger.info("uploadedFile.getAbsolutePath() = {\n}\n", uploadedFile.getAbsolutePath());\n uploadedFile.createNewFile();\n OutputStream outStream = new FileOutputStream(outPathAndName);\n-   IOUtils.copyLarge(inStream, outStream);\n+   IOUtils.copyLarge(inStream, outStream);\n IOUtils.closeQuietly(inStream);\n outStream.close();\n if (resize) {\n writeResizedImage(outPathAndName, extension, "imgSize_xs");\n writeResizedImage(outPathAndName, extension, "imgSize_s");\n writeResizedImage(outPathAndName, extension, "imgSize_m");\n writeResizedImage(outPathAndName, extension, "imgSize_l");\n writeResizedImage(outPathAndName, extension, "imgSize_xl");\n }\n String retVal = dayNamedFolderName + "/" + props.getProperty("uploaded.files.prefix") + outFileName;\n return retVal;\n }\n|SpecialSeperatorForDevSet|private void copyJar(File src, File dst) throws IOException {\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(src).getChannel();\n dstChannel = new FileOutputStream(dst).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n catch (IOException e) {\n fLog.log(Level.SEVERE, e.getMessage(), e);\n }\n finally {\n srcChannel.close();\n-   dstChannel.close();\n+   dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-510|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n return file.getAbsolutePath();\n }\n else {\n return url.toString();\n }\n }\n catch (Throwable t) {\n }\n-   return Messages.getMessage("happyClientUnknownLocation");\n+   return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-511|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n return file.getAbsolutePath();\n }\n else {\n-   return url.toString();\n+   return url.toString();\n }\n }\n catch (Throwable t) {\n }\n return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|public void init() throws GateException {\n if (reportFile == null) throw new GateException("No report file set!");\n boolean restarting = false;\n if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\n throw new GateException("Could not create directories for " + reportFile.getAbsolutePath());\n }\n File backupFile = new File(reportFile.getAbsolutePath() + ".bak");\n if (reportFile.exists()) {\n restarting = true;\n logger.info("Existing report file found at \"" + reportFile.getAbsolutePath() + "\", attempting to restart");\n if (!reportFile.renameTo(backupFile)) {\n try {\n byte[] buff = new byte[32 * 1024];\n InputStream in = new BufferedInputStream(new FileInputStream(reportFile));\n try {\n OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\n try {\n int read = in.read(buff);\n while (read != -1) {\n out.write(buff, 0, read);\n read = in.read(buff);\n }\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n catch (IOException e) {\n throw new GateException("Could not restart batch", e);\n }\n }\n }\n try {\n reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\n reportWriter.writeStartDocument();\n reportWriter.writeCharacters("\n");\n-   reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n+   reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, "cloudReport");\n reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\n reportWriter.writeCharacters("\n");\n reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, "documents");\n }\n catch (XMLStreamException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n catch (IOException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n if (restarting) {\n try {\n Set<String> completedDocuments = new HashSet<String>();\n logger.debug("Processing existing report file");\n InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\n XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\n try {\n XMLEvent event;\n while (xer.hasNext()) {\n event = xer.nextEvent();\n if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("documents")) {\n break;\n }\n }\n List<XMLEvent> events = new LinkedList<XMLEvent>();\n String currentReturnCode = null;\n String currentDocid = null;\n while (xer.hasNext()) {\n event = xer.nextEvent();\n events.add(event);\n if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("processResult")) {\n currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, "returnCode")).getValue();\n currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, "id")).getValue();\n }\n if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals("processResult")) {\n if (currentReturnCode.equals("SUCCESS") && currentDocid != null) {\n completedDocuments.add(currentDocid);\n for (XMLEvent evt : events) {\n Tools.writeStaxEvent(evt, reportWriter);\n }\n }\n events.clear();\n currentReturnCode = null;\n currentDocid = null;\n }\n if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals("documents")) {\n break;\n }\n }\n }\n catch (Exception e) {\n logger.debug("Exception while parsing old report file - probably " + "reached the end of old report", e);\n }\n finally {\n xer.close();\n bakIn.close();\n backupFile.delete();\n }\n List<String> unprocessedDocs = new ArrayList<String>();\n unprocessedDocs.addAll(Arrays.asList(documentIDs));\n unprocessedDocs.removeAll(completedDocuments);\n unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n }\n catch (XMLStreamException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n catch (IOException e) {\n throw new GateException("Cannot write to the report file!", e);\n }\n }\n else {\n unprocessedDocumentIDs = documentIDs;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-512|SpecialSeperatorForDevSet|private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\n response.setContentType("image/" + type + "");\n Point imgSize = null;\n if (width > 0 || height > 0) {\n imgSize = new Point(width, height);\n }\n if (fmt != null && imageFormats.containsKey(fmt)) {\n imgSize = imageFormats.get(fmt);\n }\n InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\n if (imageInputStream == null) {\n throw new RuntimeException("File " + imageUrl + " does not exist!");\n }\n if (imgSize == null) {\n IOUtils.copy(imageInputStream, response.getOutputStream());\n }\n else {\n byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n-   response.setContentLength(imageBytes.length);\n+   response.setContentLength(imageBytes.length);\n response.getOutputStream().write(imageBytes);\n }\n response.getOutputStream().flush();\n response.getOutputStream().close();\n }\n|SpecialSeperatorForDevSet|-  public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-513|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n-   i++) {\n+   i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n|SpecialSeperatorForDevSet|public Set<String> getAvailableRoles() {\n if (availableRoles == null) {\n-   availableRoles = new HashSet<String>();\n+   availableRoles = new HashSet<String>();\n try {\n Enumeration<URL> resources = org.springframework.util.ClassUtils.getDefaultClassLoader().getResources(ROLE_FILE_LOCATION);\n while (resources.hasMoreElements()) {\n URL url = resources.nextElement();\n InputStream is = null;\n try {\n URLConnection con = url.openConnection();\n con.setUseCaches(false);\n is = con.getInputStream();\n List<String> lines = IOUtils.readLines(is, "ISO-8859-1");\n if (lines != null) {\n for (String line : lines) {\n availableRoles.add(line.trim());\n }\n }\n }\n finally {\n if (is != null) {\n is.close();\n }\n }\n }\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n return availableRoles;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-514|SpecialSeperatorForDevSet|public Configuration(URL url) {\n InputStream in = null;\n try {\n load(in = url.openStream());\n }\n catch (Exception e) {\n throw new RuntimeException("Could not load configuration from " + url, e);\n-   }\n+   }\n finally {\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException ignore) {\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public Wget2(URL url, File f) throws IOException {\n System.out.println("bajando: " + url);\n if (f == null) {\n by = new ByteArrayOutputStream();\n }\n else {\n by = new FileOutputStream(f);\n }\n-   URLConnection uc = url.openConnection();\n+   URLConnection uc = url.openConnection();\n if (uc instanceof HttpURLConnection) {\n leerHttp((HttpURLConnection) uc);\n }\n else {\n throw new IOException("solo se pueden descargar url http");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-515|SpecialSeperatorForDevSet|@Override protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\n if ((url == null) || (proxy == null)) {\n-   throw new IllegalArgumentException(Messages.getString("luni.1B"));\n+   throw new IllegalArgumentException(Messages.getString("luni.1B"));\n }\n return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\n }\n|SpecialSeperatorForDevSet|public void run() {\n if (status == COMPLETE) {\n return;\n }\n waitRandom();\n RandomAccessFile file = null;\n InputStream inputStream = null;\n boolean success = false;\n URL url = null;\n try {\n BeatportAccessor beatportAccessor = new BeatportAccessor();\n if (sessionCookies == null) {\n sessionCookies = beatportAccessor.getSessionCookies(user, password);\n }\n url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));\n log.info("Open (DownloadWorker.run): " + url);\n HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", BeatportAccessor.userAgent);\n connection.setRequestProperty("Cookie", sessionCookies);\n connection.connect();\n if (connection.getResponseCode() / 100 != 2) {\n log.error("Unexpected response from server: " + connection.getResponseCode());\n error();\n return;\n }\n if (connection.getContentType().indexOf("text") >= 0) {\n log.error("Tried to request: " + url.toString());\n log.error("Unexpected file content type from server: " + connection.getContentType());\n log.error("Server replied:\n" + getContentAsString(connection));\n error();\n return;\n }\n int contentLength = connection.getContentLength();\n if (contentLength < 1) {\n log.error("Invalid content length: " + connection.getContentLength());\n error();\n return;\n }\n if (size == -1) {\n size = contentLength;\n stateChanged();\n }\n else if (size != contentLength) {\n changeTotal(0, contentLength - size);\n }\n if (new File(tmpFileName(fileName)).exists()) {\n if (!new File(tmpFileName(fileName)).delete()) {\n throw new Exception("Could not delete file: " + tmpFileName(fileName));\n }\n }\n file = new RandomAccessFile(tmpFileName(fileName), "rw");\n file.seek(downloaded);\n inputStream = connection.getInputStream();\n if (started == 0) {\n started = System.currentTimeMillis();\n time = started;\n }\n statusChangedObserver.statusChanged(status);\n byte buffer[] = new byte[MAX_BUFFER_SIZE];\n-   while (status == DOWNLOADING) {\n+   while (status == DOWNLOADING) {\n if (size - downloaded < MAX_BUFFER_SIZE) {\n buffer = new byte[(int) (size - downloaded)];\n }\n int read = inputStream.read(buffer);\n if (read == -1) break;\n file.write(buffer, 0, read);\n downloaded += read;\n changeTotal(read, 0);\n stateChanged();\n }\n if (status == DOWNLOADING) {\n stopped = System.currentTimeMillis();\n status = COMPLETE;\n }\n statusChangedObserver.statusChanged(status);\n stateChanged();\n success = true;\n }\n catch (Exception e) {\n e.printStackTrace();\n error();\n }\n finally {\n try {\n file.close();\n }\n catch (Exception e) {\n }\n if (success) {\n try {\n if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {\n throw new Exception("Rename Failed");\n }\n }\n catch (Exception e) {\n log.error("Error moving temp file " + tmpFileName(fileName) + " file: " + fileName, e);\n }\n }\n else {\n try {\n new File(tmpFileName(fileName)).delete();\n }\n catch (Exception e) {\n log.error("Error deleting erroneous temp file: " + tmpFileName(fileName), e);\n }\n }\n try {\n inputStream.close();\n }\n catch (Exception e) {\n log.error("Error closing input stream of: " + url + " / " + fileName, e);\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-516|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n-   catch (SQLException e3) {\n+   catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n-   for (int j = 0;\n+   for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-517|SpecialSeperatorForDevSet|private JButton getButtonSonido() {\n if (buttonSonido == null) {\n buttonSonido = new JButton();\n buttonSonido.setText(Messages.getString("gui.AdministracionResorces.15"));\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png")));\n buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n public void actionPerformed(java.awt.event.ActionEvent e) {\n JFileChooser fc = new JFileChooser();\n fc.addChoosableFileFilter(new SoundFilter());\n int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = fc.getSelectedFile();\n String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();\n String rutaRelativa = rutaDatos + "sonidos/" + file.getName();\n try {\n FileInputStream fis = new FileInputStream(file);\n FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n FileChannel canalFuente = fis.getChannel();\n FileChannel canalDestino = fos.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n fis.close();\n fos.close();\n imagen.setSonidoURL(rutaRelativa);\n System.out.println(rutaGlobal + " " + rutaRelativa);\n-   buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png")));\n+   buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png")));\n gui.getAudio().reproduceAudio(imagen);\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n else {\n }\n }\n }\n);\n }\n return buttonSonido;\n }\n|SpecialSeperatorForDevSet|public void register(MinecraftSession session, String username, String verificationKey) {\n if (Configuration.getConfiguration().isVerifyingNames()) {\n long salt = HeartbeatManager.getHeartbeatManager().getSalt();\n String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\n MessageDigest digest;\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException("No MD5 algorithm!");\n }\n digest.update(hash.getBytes());\n if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\n session.getActionSender().sendLoginFailure("Illegal name.");\n return;\n }\n }\n char[] nameChars = username.toCharArray();\n for (char nameChar : nameChars) {\n if (nameChar < ' ' || nameChar > '\177') {\n session.getActionSender().sendLoginFailure("Invalid name!");\n return;\n }\n }\n for (Player p : playerList.getPlayers()) {\n if (p.getName().equalsIgnoreCase(username)) {\n p.getSession().getActionSender().sendLoginFailure("Logged in from another computer.");\n break;\n }\n }\n final Player player = new Player(session, username);\n if (!playerList.add(player)) {\n player.getSession().getActionSender().sendLoginFailure("Too many players online!");\n return;\n }\n session.setPlayer(player);\n final Configuration c = Configuration.getConfiguration();\n session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\n LevelGzipper.getLevelGzipper().gzipLevel(session);\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-518|SpecialSeperatorForDevSet|public void process(String dir) {\n String[] list = new File(dir).list();\n if (list == null) return;\n int n = list.length;\n long[] bubblesort = new long[list.length + 1];\n if (!statustext) {\n IJ.log("Current Directory is: " + dir);\n IJ.log(" ");\n IJ.log("DICOM File Name / " + prefix1 + " / " + prefix2 + " / " + prefix3 + " / " + pick);\n IJ.log(" ");\n }\n for (int i = 0;\n i < n;\n i++) {\n IJ.showStatus(i + "/" + n);\n File f = new File(dir + list[i]);\n if (!f.isDirectory()) {\n ImagePlus img = new Opener().openImage(dir, list[i]);\n if (img != null && img.getStackSize() == 1) {\n if (!scoutengine(img)) return;\n if (!statustext) {\n IJ.log(list[i] + "/" + whichprefix1 + "/" + whichprefix2 + "/" + whichprefix3 + "/" + whichcase);\n }\n int lastDigit = whichcase.length() - 1;\n while (lastDigit > 0) {\n if (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1;\n else break;\n }\n if (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);\n bubblesort[i] = Long.parseLong(whichcase);\n }\n }\n }\n if (statussorta || statussortd || statustext) {\n boolean sorted = false;\n while (!sorted) {\n sorted = true;\n for (int i = 0;\n i < n - 1;\n i++) {\n if (statussorta) {\n if (bubblesort[i] > bubblesort[i + 1]) {\n long temp = bubblesort[i];\n tempp = list[i];\n bubblesort[i] = bubblesort[i + 1];\n list[i] = list[i + 1];\n bubblesort[i + 1] = temp;\n list[i + 1] = tempp;\n sorted = false;\n }\n }\n else {\n if (bubblesort[i] < bubblesort[i + 1]) {\n long temp = bubblesort[i];\n tempp = list[i];\n bubblesort[i] = bubblesort[i + 1];\n list[i] = list[i + 1];\n bubblesort[i + 1] = temp;\n list[i + 1] = tempp;\n sorted = false;\n }\n }\n }\n }\n IJ.log(" ");\n for (int i = 0;\n i < n;\n i++) {\n if (!statustext) {\n IJ.log(list[i] + " / " + bubblesort[i]);\n }\n else {\n IJ.log(dir + list[i]);\n }\n }\n }\n if (open_as_stack || only_images) {\n boolean sorted = false;\n while (!sorted) {\n sorted = true;\n for (int i = 0;\n i < n - 1;\n i++) {\n if (bubblesort[i] > bubblesort[i + 1]) {\n long temp = bubblesort[i];\n tempp = list[i];\n bubblesort[i] = bubblesort[i + 1];\n list[i] = list[i + 1];\n bubblesort[i + 1] = temp;\n list[i + 1] = tempp;\n sorted = false;\n }\n }\n }\n if (only_images) {\n Opener o = new Opener();\n int counter = 0;\n IJ.log(" ");\n for (int i = 0;\n i < n;\n i++) {\n String path = (dir + list[i]);\n if (path == null) break;\n else {\n ImagePlus imp = o.openImage(path);\n counter++;\n if (imp != null) {\n IJ.log(counter + " + " + path);\n imp.show();\n }\n else IJ.log(counter + " - " + path);\n }\n }\n return;\n }\n int width = 0, height = 0, type = 0;\n ImageStack stack = null;\n double min = Double.MAX_VALUE;\n double max = -Double.MAX_VALUE;\n int k = 0;\n try {\n for (int i = 0;\n i < n;\n i++) {\n String path = (dir + list[i]);\n if (path == null) break;\n if (list[i].endsWith(".txt")) continue;\n ImagePlus imp = new Opener().openImage(path);\n if (imp != null && stack == null) {\n width = imp.getWidth();\n height = imp.getHeight();\n type = imp.getType();\n ColorModel cm = imp.getProcessor().getColorModel();\n if (halfSize) stack = new ImageStack(width / 2, height / 2, cm);\n else stack = new ImageStack(width, height, cm);\n }\n if (stack != null) k = stack.getSize() + 1;\n IJ.showStatus(k + "/" + n);\n IJ.showProgress((double) k / n);\n if (imp == null) IJ.log(list[i] + ": unable to open");\n else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + ": wrong dimensions");\n else if (imp.getType() != type) IJ.log(list[i] + ": wrong type");\n else {\n ImageProcessor ip = imp.getProcessor();\n if (grayscale) ip = ip.convertToByte(true);\n if (halfSize) ip = ip.resize(width / 2, height / 2);\n-   if (ip.getMin() < min) min = ip.getMin();\n+   if (ip.getMin() < min) min = ip.getMin();\n if (ip.getMax() > max) max = ip.getMax();\n String label = imp.getTitle();\n String info = (String) imp.getProperty("Info");\n if (info != null) label += "\n" + info;\n stack.addSlice(label, ip);\n }\n System.gc();\n }\n }\n catch (OutOfMemoryError e) {\n IJ.outOfMemory("FolderOpener");\n stack.trim();\n }\n if (stack != null && stack.getSize() > 0) {\n ImagePlus imp2 = new ImagePlus("Stack", stack);\n if (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);\n imp2.show();\n }\n IJ.showProgress(1.0);\n }\n }\n|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n-   IOUtils.copy(createLimitedInputStream(len), sw, null);\n+   IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-519|SpecialSeperatorForDevSet|private InputStream getInputStream(String item) {\n InputStream is = null;\n URLConnection urlc = null;\n try {\n URL url = new URL(item);\n urlc = url.openConnection();\n is = urlc.getInputStream();\n current_source = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort() + url.getFile();\n }\n catch (Exception ee) {\n System.err.println(ee);\n }\n int i = 0;\n udp_port = -1;\n udp_baddress = null;\n while (urlc != null) {\n String s = urlc.getHeaderField(i);\n String t = urlc.getHeaderFieldKey(i);\n if (s == null) {\n break;\n }\n-   i++;\n+   i++;\n if ("udp-port".equals(t)) {\n try {\n udp_port = Integer.parseInt(s);\n }\n catch (Exception e) {\n }\n }\n else if ("udp-broadcast-address".equals(t)) {\n udp_baddress = s;\n }\n }\n return is;\n }\n|SpecialSeperatorForDevSet|public void doUpdateByLoginID() throws Exception {\n if (!isValidate()) {\n throw new CesSystemException("User_session.doUpdateByLoginID(): Illegal data values for update");\n }\n Connection con = null;\n PreparedStatement ps = null;\n String strQuery = "UPDATE " + Common.USER_SESSION_TABLE + " SET " + "session_id = ?, user_id = ?, begin_date = ? , " + "ip_address = ?, mac_no = ? " + "WHERE login_id= ?";\n DBOperation dbo = factory.createDBOperation(POOL_NAME);\n try {\n con = dbo.getConnection();\n con.setAutoCommit(false);\n ps = con.prepareStatement(strQuery);\n ps.setString(1, this.sessionID);\n ps.setInt(2, this.user.getUserID());\n ps.setTimestamp(3, this.beginDate);\n ps.setString(4, this.ipAddress);\n ps.setString(5, this.macNO);\n ps.setString(6, this.loginID);\n int resultCount = ps.executeUpdate();\n if (resultCount != 1) {\n con.rollback();\n throw new CesSystemException("User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! " + "resultCount = " + resultCount);\n }\n con.commit();\n }\n catch (SQLException se) {\n if (con != null) {\n con.rollback();\n }\n throw new CesSystemException("User_session.doUpdateByLoginID(): SQLException while updating user_session;\n " + "session_id = " + this.sessionID + " :\n\t" + se);\n }\n finally {\n con.setAutoCommit(true);\n closePreparedStatement(ps);\n closeConnection(dbo);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-520|SpecialSeperatorForDevSet|private String getEncoding() throws IOException {\n BufferedReader reader = null;\n String encoding = null;\n try {\n URLConnection connection = url.openConnection();\n Map<String, List<String>> header = connection.getHeaderFields();\n for (Map.Entry<String, List<String>> entry : header.entrySet()) {\n if (entry.getKey().toLowerCase().equals("content-type")) {\n String item = entry.getValue().toString().toLowerCase();\n if (item.contains("charset")) {\n encoding = extractEncoding(item);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n }\n reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String line;\n while ((line = reader.readLine()) != null) {\n line = line.toLowerCase();\n if (line.contains("charset") || line.contains("encoding")) {\n encoding = extractEncoding(line);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n return STANDARDENCODING;\n }\n finally {\n if (reader != null) reader.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|-  private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n+  private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n zaos.closeArchiveEntry();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-521|SpecialSeperatorForDevSet|public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n-   logger.debug("md5(String) - start");\n+   logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return returnString;\n }\n catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-522|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n-   catch (java.io.IOException exc) {\n+   catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n boolean update = false;\n try {\n stm = conexion.prepareStatement("update clientes set nombre='" + nombre.toUpperCase().trim() + "' , paterno='" + paterno.toUpperCase().trim() + "' ," + "materno='" + materno.toUpperCase().trim() + "',ocupacion='" + ocupacion.toUpperCase().trim() + "',rfc='" + rfc.trim() + "' where IDcliente ='" + IDcliente + "' ");\n stm.executeUpdate();\n conexion.commit();\n update = true;\n }\n catch (SQLException e) {\n System.out.println("error al actualizar registro en la tabla clientes " + e.getMessage());\n-   try {\n+   try {\n conexion.rollback();\n }\n catch (SQLException ee) {\n System.out.println(ee.getMessage());\n }\n return update = false;\n }\n return update;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-523|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md = null;\n md = MessageDigest.getInstance("SHA");\n-   md.update(plaintext.getBytes("UTF-8"));\n+   md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|public static void main(final String args[]) {\n if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) {\n System.out.println("Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>");\n System.out.println(" where the framework is the first element in the class path");\n System.out.println("Options: -d Enables the generation of debug output");\n return;\n }\n boolean debug = args.length == 3;\n File prologFile = new File(debug ? args[1] : args[0]);\n if (!prologFile.isFile()) {\n System.out.println("The given file does not exist.");\n return;\n }\n File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar");\n String source;\n try {\n source = FileUtils.readFileToString(prologFile);\n }\n catch (IOException ex) {\n System.out.println("Error reading file: " + ex.getMessage());\n return;\n }\n Parser myParser = new PrologParserImpl();\n PrologProgram myProgram;\n try {\n myProgram = (PrologProgram) myParser.parse(source);\n }\n catch (Exception ex) {\n System.out.println("Could not parse file: " + ex.getMessage());\n return;\n }\n try {\n FactVisitor myVisitor = new FactVisitor();\n myVisitor.visit(myProgram);\n Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();\n if (adapterLayer.size() == 0) {\n System.out.println("No adapters to generate, " + "did you forget to run the comeback rules?");\n return;\n }\n URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);\n ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));\n AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();\n Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter");\n adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));\n AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType("net/sourceforge/comeback/Adapters"), annotationType);\n GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);\n context.setGenerateDebugOutput(debug);\n Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();\n while (iterator.hasNext()) {\n TypeGenerationInfo info = iterator.next();\n context.generateAdapter(info);\n }\n ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n ObjectOutputStream out = new ObjectOutputStream(serialized);\n out.writeObject(adapterLayer);\n out.close();\n adapterWriter.writeResource("net/sourceforge/comeback/adapterlayer.ser", serialized.toByteArray());\n String[] sharedClassesPrefixes = new String[2];\n Assembler assembler = new Assembler(adapterWriter);\n-   PatternClassFilter filter = new PatternClassFilter();\n+   PatternClassFilter filter = new PatternClassFilter();\n URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class");\n JarURLConnection connection = (JarURLConnection) url.openConnection();\n sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);\n filter = new PatternClassFilter();\n url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class");\n connection = (JarURLConnection) url.openConnection();\n sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);\n String tmp = debug ? args[2] : args[1];\n adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));\n adapterWriter.close();\n }\n catch (Throwable e) {\n e.printStackTrace();\n return;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-524|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-525|SpecialSeperatorForDevSet|public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\n super();\n addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent aEvent) {\n System.exit(0);\n }\n }\n);\n Dimension dim = getToolkit().getScreenSize();\n Rectangle abounds = getBounds();\n setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\n setVisible(true);\n URL url = new URL("ftp://cendantstp/");\n char[] password = "spnr".toCharArray();\n PasswordAuthentication passwordAuthentication = new PasswordAuthentication("spnr", password);\n FTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\n JFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\n fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n fileChooser.setMultiSelectionEnabled(true);\n File[] selectedFiles = null;\n if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n selectedFiles = fileChooser.getSelectedFiles();\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n if (selectedFiles[i] instanceof FTPFileFile) {\n FTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\n logger.fine(ftpFile.getName());\n logger.fine(ftpFile.getPath());\n }\n else {\n logger.fine(selectedFiles[i].toString());\n logger.fine(selectedFiles[i].getAbsolutePath());\n }\n-   }\n+   }\n }\n remoteFileSystemView.disconnect();\n try {\n if (null != selectedFiles) {\n FTPClient ftpClient = new FTPClient();\n InetAddress inetAddress = InetAddress.getByName(url.getHost());\n ftpClient.connect(inetAddress);\n if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n throw new FTPBrowseException(ftpClient.getReplyString());\n }\n if (null != passwordAuthentication) {\n ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n }\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n FTPFileFile file = (FTPFileFile) selectedFiles[i];\n logger.fine(file.getPath());\n FileOutputStream fos = new FileOutputStream(new File("d:/junk/ftp/test.txt"));\n logger.fine("" + ftpClient.retrieveFile(file.getPath().replaceAll("\\\\", "/"), fos));\n fos.close();\n }\n }\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n System.exit(0);\n }\n|SpecialSeperatorForDevSet|public static synchronized String getMD5_Base64(String input) {\n MessageDigest msgDigest = null;\n try {\n msgDigest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("System doesn't support MD5 algorithm.");\n }\n try {\n msgDigest.update(input.getBytes("UTF-8"));\n }\n catch (java.io.UnsupportedEncodingException ex) {\n throw new IllegalStateException("System doesn't support your EncodingException.");\n }\n byte[] rawData = msgDigest.digest();\n byte[] encoded = Base64.encode(rawData);\n String retValue = new String(encoded);\n return retValue;\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-526|SpecialSeperatorForDevSet|public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {\n try {\n URL url = (getURL() != null) ? new URL(getURL().toExternalForm()) : new URL(((URL) ctxAttrValue).toExternalForm());\n-   InputStream reader = url.openStream();\n+   InputStream reader = url.openStream();\n int available = reader.available();\n byte contents[] = new byte[available];\n reader.read(contents, 0, available);\n reader.close();\n return new String(contents);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n return ex.toString();\n }\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String target = null;\n boolean allowedToAccess = false;\n try {\n URL requestUrl = new URL("http:/" + request.getPathInfo());\n for (Enumeration en = allowedUrls.elements();\n en.hasMoreElements();\n ) {\n URL nextUrl = (URL) en.nextElement();\n if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n allowedToAccess = true;\n }\n }\n }\n catch (MalformedURLException ex) {\n System.err.println("Error in url: " + "http:/" + request.getPathInfo());\n return;\n }\n if (!allowedToAccess) {\n response.setStatus(407);\n return;\n }\n if (request.getPathInfo() != null && !request.getPathInfo().equals("")) {\n target = "http:/" + request.getPathInfo() + "?" + request.getQueryString();\n }\n else {\n response.setStatus(404);\n return;\n }\n InputStream is = null;\n ServletOutputStream out = null;\n try {\n URL url = new URL(target);\n URLConnection uc = url.openConnection();\n response.setContentType(uc.getContentType());\n is = uc.getInputStream();\n out = response.getOutputStream();\n byte[] buf = new byte[4096];\n int bytesRead;\n while ((bytesRead = is.read(buf)) != -1) {\n out.write(buf, 0, bytesRead);\n }\n }\n catch (MalformedURLException e) {\n response.setStatus(404);\n-   }\n+   }\n catch (IOException e) {\n response.setStatus(404);\n }\n finally {\n if (is != null) {\n is.close();\n }\n if (out != null) {\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-527|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String target = null;\n boolean allowedToAccess = false;\n try {\n URL requestUrl = new URL("http:/" + request.getPathInfo());\n for (Enumeration en = allowedUrls.elements();\n en.hasMoreElements();\n ) {\n URL nextUrl = (URL) en.nextElement();\n if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n allowedToAccess = true;\n }\n }\n }\n catch (MalformedURLException ex) {\n System.err.println("Error in url: " + "http:/" + request.getPathInfo());\n return;\n }\n if (!allowedToAccess) {\n response.setStatus(407);\n return;\n }\n if (request.getPathInfo() != null && !request.getPathInfo().equals("")) {\n target = "http:/" + request.getPathInfo() + "?" + request.getQueryString();\n }\n else {\n response.setStatus(404);\n return;\n }\n InputStream is = null;\n ServletOutputStream out = null;\n try {\n URL url = new URL(target);\n URLConnection uc = url.openConnection();\n response.setContentType(uc.getContentType());\n-   is = uc.getInputStream();\n+   is = uc.getInputStream();\n out = response.getOutputStream();\n byte[] buf = new byte[4096];\n int bytesRead;\n while ((bytesRead = is.read(buf)) != -1) {\n out.write(buf, 0, bytesRead);\n }\n }\n catch (MalformedURLException e) {\n response.setStatus(404);\n }\n catch (IOException e) {\n response.setStatus(404);\n }\n finally {\n if (is != null) {\n is.close();\n }\n if (out != null) {\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {\n InputStream inputStream = null;\n try {\n inputStream = url.openStream();\n POIOLE2TextExtractor extractor = createExtractor(inputStream);\n SummaryInformation info = extractor.getSummaryInformation();\n DocumentSummary docSummary = new DocumentSummary();\n docSummary.authors = DocSummaryPOIFSReaderListener.getAuthors(info);\n docSummary.contentReader = new StringReader(extractor.getText());\n docSummary.creationDate = info.getCreateDateTime();\n docSummary.keywords = new ArrayList();\n docSummary.keywords.add(info.getKeywords());\n docSummary.modificationDate = new Date(info.getEditTime());\n docSummary.title = info.getTitle();\n return docSummary;\n }\n catch (IOException e) {\n if (e.getMessage().startsWith("Unable to read entire header")) {\n throw new DocumentHandlerException("Couldn't process document", e);\n }\n else {\n throw e;\n }\n }\n finally {\n if (inputStream != null) {\n inputStream.close();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-528|SpecialSeperatorForDevSet|-  private static void copyFile(String src, String target) throws IOException {\n+  private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n ic.transferTo(0, ic.size(), oc);\n ic.close();\n oc.close();\n }\n|SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n-   ic.transferTo(0, ic.size(), oc);\n+   ic.transferTo(0, ic.size(), oc);\n ic.close();\n oc.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-528|SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n ic.transferTo(0, ic.size(), oc);\n ic.close();\n-   oc.close();\n+   oc.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copyFileByNIO(File in, File out) throws IOException {\n+  public static void copyFileByNIO(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-529|SpecialSeperatorForDevSet|public String getUser() {\n try {\n HttpGet get = new HttpGet("http://api.linkedin.com/v1/people/~");\n consumer.sign(get);\n HttpClient client = new DefaultHttpClient();\n HttpResponse response = client.execute(get);\n if (response != null) {\n int statusCode = response.getStatusLine().getStatusCode();\n if (statusCode != 200) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n StringBuffer sBuf = new StringBuffer();\n String linea;\n BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));\n while ((linea = reader.readLine()) != null) {\n sBuf.append(linea);\n }\n reader.close();\n-   response.getEntity().consumeContent();\n+   response.getEntity().consumeContent();\n get.abort();\n String salida = sBuf.toString();\n String user_firstname = salida.split("</first-name>")[0].split("<first-name>")[1];\n String user_lastname = salida.split("</last-name>")[0].split("<last-name>")[1];\n return user_firstname + " " + user_lastname;\n }\n }\n catch (UnsupportedEncodingException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (IOException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthMessageSignerException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthExpectationFailedException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n catch (OAuthCommunicationException e) {\n this.enviarMensaje("Error: Usuario no autenticado en la red de Linkedin");\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public String sendRequest(java.lang.String servletName, java.lang.String request) {\n String reqxml = "";\n org.jdom.Document retdoc = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n-   }\n+   }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n java.io.InputStreamReader br = new java.io.InputStreamReader(gip, "UTF-8");\n retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n }\n catch (java.net.ConnectException conexp) {\n javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString("ConnectExceptionMessage"), "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n }\n System.out.println(reqxml);\n return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-530|SpecialSeperatorForDevSet|public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\n-   URL url = new URL(urlToRetrieve);\n+   URL url = new URL(urlToRetrieve);\n URLConnection uc = url.openConnection();\n InputStream is = uc.getInputStream();\n BufferedReader in = new BufferedReader(new InputStreamReader(is));\n StringBuilder output = new StringBuilder(16384);\n String str;\n boolean first = true;\n while ((str = in.readLine()) != null) {\n if (!first) output.append("\n");\n first = false;\n output.append(str);\n }\n in.close();\n System.err.println(((HttpURLConnection) uc).getResponseMessage());\n return output.toString();\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-531|SpecialSeperatorForDevSet|private Reader getReader() throws IOException {\n if (data != null) {\n if (url != null) throw new IllegalArgumentException("URL for source data and the data itself must never be specified together.");\n if (charset != null) throw new IllegalArgumentException("Charset has sense only for URL-based data");\n return new StringReader(data);\n }\n-   else if (url != null) {\n+   else if (url != null) {\n InputStream stream = url.openStream();\n if (charset == null) return new InputStreamReader(stream);\n else return new InputStreamReader(stream, charset);\n }\n return null;\n }\n|SpecialSeperatorForDevSet|private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n log.println("Concat files into: " + outputFile);\n OutputStream out = new FileOutputStream(absPath + outputFile);\n byte[] buffer = new byte[4096];\n int readBytes;\n for (String file : inputFiles) {\n log.println(" Read: " + file);\n InputStream in = new FileInputStream(absPath + file);\n while ((readBytes = in.read(buffer)) != -1) {\n out.write(buffer, 0, readBytes);\n }\n in.close();\n }\n-   out.close();\n+   out.close();\n if (compress) {\n long normalSize = new File(absPath + outputFile).length();\n ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000");\n builder.directory(new File(absPath));\n Process process = builder.start();\n process.waitFor();\n long minSize = new File(absPath + outputFile).length();\n long diff = normalSize - minSize;\n double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n log.println("Result: " + percentage + " % (" + diffSize + " KB)");\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-532|SpecialSeperatorForDevSet|public static URLConnection openProxiedConnection(URL url) throws IOException {\n if (proxyHost != null) {\n System.getProperties().put("proxySet", "true");\n System.getProperties().put("proxyHost", proxyHost);\n System.getProperties().put("proxyPort", proxyPort);\n }\n URLConnection cnx = url.openConnection();\n if (proxyUsername != null) {\n cnx.setRequestProperty("Proxy-Authorization", proxyEncodedPassword);\n }\n-   return cnx;\n+   return cnx;\n }\n|SpecialSeperatorForDevSet|public void testPost() throws Exception {\n HttpPost request = new HttpPost(baseUri + "/echo");\n request.setEntity(new StringEntity("test"));\n HttpResponse response = client.execute(request);\n assertEquals(200, response.getStatusLine().getStatusCode());\n assertEquals("test", TestUtil.getResponseAsString(response));\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-533|SpecialSeperatorForDevSet|public static void copyFile(String inFile, String outFile) {\n File in = new File(inFile);\n File out = new File(outFile);\n try {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void testPost() throws Exception {\n HttpPost request = new HttpPost(baseUri + "/echo");\n request.setEntity(new StringEntity("test"));\n HttpResponse response = client.execute(request);\n assertEquals(200, response.getStatusLine().getStatusCode());\n assertEquals("test", TestUtil.getResponseAsString(response));\n-   }\n+   }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-534|SpecialSeperatorForDevSet|public final int wordFrequency(String word) {\n String replWebQuery = webQuery.replaceFirst("WORDREPLACE", word);\n-   try {\n+   try {\n URL url = new URL(replWebQuery);\n String content = url.toString();\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.matches(nrResultsPattern)) {\n int fr = matchedLine(inputLine);\n if (fr >= 0) {\n return fr;\n }\n }\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|public static String encrypt(String text) {\n char[] toEncrypt = text.toCharArray();\n StringBuffer hexString = new StringBuffer();\n try {\n MessageDigest dig = MessageDigest.getInstance("MD5");\n dig.reset();\n String pw = "";\n for (int i = 0;\n i < toEncrypt.length;\n i++) {\n pw += toEncrypt[i];\n }\n dig.update(pw.getBytes());\n byte[] digest = dig.digest();\n int digestLength = digest.length;\n for (int i = 0;\n i < digestLength;\n i++) {\n hexString.append(hexDigit(digest[i]));\n }\n }\n catch (java.security.NoSuchAlgorithmException ae) {\n ae.printStackTrace();\n }\n-   return hexString.toString();\n+   return hexString.toString();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-535|SpecialSeperatorForDevSet|public static final void main(String[] args) throws Exception {\n HttpClient httpclient = new DefaultHttpClient();\n HttpGet httpget = new HttpGet("http://www.apache.org/");\n-   System.out.println("executing request " + httpget.getURI());\n+   System.out.println("executing request " + httpget.getURI());\n HttpResponse response = httpclient.execute(httpget);\n HttpEntity entity = response.getEntity();\n System.out.println("----------------------------------------");\n System.out.println(response.getStatusLine());\n if (entity != null) {\n System.out.println("Response content length: " + entity.getContentLength());\n }\n System.out.println("----------------------------------------");\n httpget.abort();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|0
bigclonebench-test-536|SpecialSeperatorForDevSet|public InputSource resolveEntity(String publicId, String systemId) {\n String resolved = getResolvedEntity(publicId, systemId);\n if (resolved != null) {\n try {\n InputSource iSource = new InputSource(resolved);\n iSource.setPublicId(publicId);\n URL url = new URL(resolved);\n InputStream iStream = url.openStream();\n iSource.setByteStream(iStream);\n return iSource;\n }\n catch (Exception e) {\n catalogManager.debug.message(1, "Failed to create InputSource (" + e.toString() + ")", resolved);\n return null;\n-   }\n+   }\n }\n return null;\n }\n|SpecialSeperatorForDevSet|@Override public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\n final Connection connection = this.getConnection();\n try {\n connection.setAutoCommit(false);\n String queryString = "DELETE " + this.getJvmInvocationsSchemaAndTableName() + " FROM " + this.getJvmInvocationsSchemaAndTableName() + " INNER JOIN " + this.getJvmElementsSchemaAndTableName() + " ON " + this.getJvmElementsSchemaAndTableName() + ".element_id = " + this.getJvmInvocationsSchemaAndTableName() + ".element_id WHERE ";\n if (contextName != null) {\n queryString = queryString + " context_name LIKE ? AND ";\n }\n if (dateFrom != null) {\n queryString = queryString + " start_timestamp >= ? AND ";\n }\n if (dateTo != null) {\n queryString = queryString + " start_timestamp <= ? AND ";\n }\n queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\n final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\n int indexCounter = 1;\n if (contextName != null) {\n preparedStatement.setString(indexCounter, contextName);\n indexCounter = indexCounter + 1;\n }\n-   if (dateFrom != null) {\n+   if (dateFrom != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\n indexCounter = indexCounter + 1;\n }\n if (dateTo != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\n indexCounter = indexCounter + 1;\n }\n preparedStatement.executeUpdate();\n preparedStatement.close();\n connection.commit();\n }\n catch (final SQLException e) {\n try {\n connection.rollback();\n }\n catch (final SQLException ex) {\n JeeObserverServerContext.logger.log(Level.SEVERE, "Transaction rollback error.", ex);\n }\n JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\n throw new DatabaseException("Error deleting JVM statistics.", e);\n }\n finally {\n this.releaseConnection(connection);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-537|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n-   MessageDigest digest = MessageDigest.getInstance("MD5");\n+   MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n }\n return "";\n }\n|SpecialSeperatorForDevSet|public String sendRequest(java.lang.String servletName, java.lang.String request) {\n String reqxml = "";\n org.jdom.Document retdoc = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n-   java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n+   java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n java.io.InputStreamReader br = new java.io.InputStreamReader(gip, "UTF-8");\n retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n }\n catch (java.net.ConnectException conexp) {\n javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString("ConnectExceptionMessage"), "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n }\n System.out.println(reqxml);\n return "";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-538|SpecialSeperatorForDevSet|public String readPage(boolean ignoreComments) throws Exception {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n String html = "";\n if (ignoreComments) {\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.length() > 0) {\n if (inputLine.substring(0, 1).compareTo("#") != 0) {\n html = html + inputLine + "\n";\n }\n }\n }\n-   }\n+   }\n else {\n while ((inputLine = in.readLine()) != null) {\n html = html + inputLine + "\n";\n }\n }\n in.close();\n return html;\n }\n|SpecialSeperatorForDevSet|public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n System.out.println("GestorCliente.elimina()");\n int id = cli.getId();\n String sql;\n Statement stmt = null;\n try {\n gd.begin();\n sql = "DELETE FROM cliente WHERE cod_cliente =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt = gd.getConexion().createStatement();\n stmt.executeUpdate(sql);\n System.out.println("executeUpdate");\n sql = "DELETE FROM persona WHERE id =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt.executeUpdate(sql);\n-   gd.commit();\n+   gd.commit();\n System.out.println("commit");\n stmt.close();\n }\n catch (SQLException e) {\n gd.rollback();\n throw new errorSQL(e.toString());\n }\n catch (errorConexionBD e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n catch (errorSQL e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-539|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n-   pageHTML.append(line);\n+   pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n-   bufferedWriter.write(pageHTML.toString());\n+   bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-539|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n|SpecialSeperatorForDevSet|private String getEncoding() throws IOException {\n BufferedReader reader = null;\n String encoding = null;\n try {\n URLConnection connection = url.openConnection();\n Map<String, List<String>> header = connection.getHeaderFields();\n for (Map.Entry<String, List<String>> entry : header.entrySet()) {\n if (entry.getKey().toLowerCase().equals("content-type")) {\n String item = entry.getValue().toString().toLowerCase();\n if (item.contains("charset")) {\n encoding = extractEncoding(item);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n }\n reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String line;\n while ((line = reader.readLine()) != null) {\n line = line.toLowerCase();\n if (line.contains("charset") || line.contains("encoding")) {\n encoding = extractEncoding(line);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n return STANDARDENCODING;\n-   }\n+   }\n finally {\n if (reader != null) reader.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-540|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n String inFileName = args[0];\n String outFileName = args[1];\n long position = 0L;\n try {\n position = Long.parseLong(args[2]);\n }\n catch (NumberFormatException nfex1) {\n try {\n position = Long.parseLong(args[2], 16);\n }\n catch (NumberFormatException nfex2) {\n System.err.println("Wrong offset");\n System.exit(0);\n }\n }\n if (position < 1L) {\n System.err.println("Wrong offset. Must be more than 0");\n System.exit(0);\n }\n-   System.out.println("Copying input: " + inFileName);\n+   System.out.println("Copying input: " + inFileName);\n System.out.println(" output: " + outFileName);\n System.out.println(" from: " + position);\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n bis.skip(position);\n for (byte[] b = new byte[1];\n bis.read(b) > 0;\n bos.write(b)) ;\n bis.close();\n bos.close();\n }\n|SpecialSeperatorForDevSet|public ArrayList<String> showTopLetters() {\n int[] tempArray = new int[engCountLetters.length];\n char[] tempArrayLetters = new char[abcEng.length];\n ArrayList<String> resultTopFiveLetters = new ArrayList<String>();\n tempArray = engCountLetters.clone();\n tempArrayLetters = abcEng.clone();\n int tempCount;\n char tempLetters;\n for (int j = 0;\n j < (abcEng.length * abcEng.length);\n j++) {\n for (int i = 0;\n i < abcEng.length - 1;\n i++) {\n if (tempArray[i] > tempArray[i + 1]) {\n tempCount = tempArray[i];\n tempLetters = tempArrayLetters[i];\n tempArray[i] = tempArray[i + 1];\n tempArrayLetters[i] = tempArrayLetters[i + 1];\n tempArray[i + 1] = tempCount;\n tempArrayLetters[i + 1] = tempLetters;\n }\n }\n }\n for (int i = tempArrayLetters.length - 1;\n i > tempArrayLetters.length - 6;\n i--) {\n resultTopFiveLetters.add(tempArrayLetters[i] + ":" + tempArray[i]);\n-   }\n+   }\n return resultTopFiveLetters;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-541|SpecialSeperatorForDevSet|-  public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n+  public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n-   closeQuietly(destination);\n+   closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-541|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n-   destination.transferFrom(source, 0, source.size());\n+   destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-542|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n-   FileInputStream fis = new FileInputStream(src);\n+   FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public static String POST(String url, String[][] props) throws IOException {\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n conn.setRequestMethod("POST");\n for (int i = 0;\n-   i < props.length;\n+   i < props.length;\n ++i) {\n conn.addRequestProperty(props[i][0], props[i][1]);\n }\n conn.connect();\n try {\n return new String((byte[]) conn.getContent());\n }\n finally {\n conn.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-543|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n-   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n+   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|private boolean doCSVImport(String tableName, final boolean hasHeader) {\n StringBuffer sql = new StringBuffer();\n sql.append("INSERT INTO ");\n sql.append(tableName + "(");\n for (int i = 0;\n i < colNames.size();\n i++) {\n sql.append("" + colNames.get(i) + ",");\n }\n sql.setLength(sql.length() - 1);\n sql.append(") VALUES( ");\n for (int i = 0;\n i < colNames.size();\n i++) {\n sql.append("?,");\n }\n sql.setLength(sql.length() - 1);\n sql.append(")");\n Connection conn = null;\n int lineNumber = 0;\n int colNumber = 0;\n String line[] = null;\n try {\n conn = DBExplorer.getConnection(false);\n conn.setAutoCommit(false);\n PreparedStatement pstmt = conn.prepareStatement(sql.toString());\n for (;\n lineNumber < csvData.size();\n lineNumber++) {\n if (hasHeader && lineNumber == 0) continue;\n dlg.UpdateProgressBar(lineNumber);\n if (cancel) {\n break;\n }\n line = (String[]) csvData.get(lineNumber);\n pstmt.clearParameters();\n for (colNumber = 0;\n colNumber < colTypes.size();\n colNumber++) {\n if (line[colNumber].equals("") && colNullAllowed.get(colNumber).toString().equals("true")) {\n pstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));\n }\n else {\n pstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));\n }\n }\n pstmt.executeUpdate();\n }\n if (cancel) conn.rollback();\n else conn.commit();\n conn.setAutoCommit(true);\n conn.close();\n conn = null;\n dialog.getDisplay().asyncExec(new Runnable() {\n public void run() {\n if (!cancel) {\n-   dlg.showMessage(title, "Imported " + maxsize + " rows successfully.");\n+   dlg.showMessage(title, "Imported " + maxsize + " rows successfully.");\n statusLabel.setText("Import complete.");\n }\n else {\n dlg.UpdateProgressBar(0);\n statusLabel.setText("Import aborted.");\n }\n }\n }\n);\n return true;\n }\n catch (final Exception e) {\n if (conn != null) try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n dialog.getDisplay().asyncExec(new Runnable() {\n public void run() {\n statusLabel.setText("Import failed");\n dlg.showError(title, e.getMessage());\n dlg.UpdateProgressBar(0);\n }\n }\n);\n return false;\n }\n finally {\n if (conn != null) try {\n conn.close();\n }\n catch (SQLException e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-544|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n-   for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n+   for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n-   logger.debug("[headers]");\n+   logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-544|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n-   }\n+   }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n-   foc.close();\n+   foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-545|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n-   IOUtils.copy(source, podArchiveOutputStream);\n+   IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n-   ++j) {\n+   ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-546|SpecialSeperatorForDevSet|public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n try {\n Connection conn = null;\n Statement stmt = null;\n try {\n conn = fido.util.FidoDataSource.getConnection();\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\n AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\n prepTable.deleteLinkType(stmt, name);\n ObjectLinkTable objectLinkTable = new ObjectLinkTable();\n objectLinkTable.deleteLinkType(stmt, name);\n String sql = "delete from ClassLinkTypes where LinkName = '" + name + "'";\n stmt.executeUpdate(sql);\n conn.commit();\n }\n catch (SQLException e) {\n if (conn != null) conn.rollback();\n throw e;\n }\n finally {\n if (stmt != null) stmt.close();\n if (conn != null) conn.close();\n }\n }\n-   catch (SQLException e) {\n+   catch (SQLException e) {\n throw new FidoDatabaseException(e);\n }\n }\n|SpecialSeperatorForDevSet|-  public final void navigate(final URL url) {\n+  public final void navigate(final URL url) {\n try {\n EncogLogging.log(EncogLogging.LEVEL_INFO, "Navigating to page:" + url);\n final URLConnection connection = url.openConnection();\n final InputStream is = connection.getInputStream();\n navigate(url, is);\n is.close();\n }\n catch (final IOException e) {\n EncogLogging.log(EncogLogging.LEVEL_ERROR, e);\n throw new BrowseError(e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-547|SpecialSeperatorForDevSet|public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n String urlStr = System.getProperty(propertyName);\n if (urlStr == null || urlStr.length() == 0) {\n return null;\n }\n InputStream in = null;\n DOMRetriever xmlDoc = null;\n try {\n-   URL url = new URL(urlStr);\n+   URL url = new URL(urlStr);\n xmlDoc = new DOMRetriever(in = url.openStream());\n }\n catch (MalformedURLException e) {\n throw new RuntimeException(e);\n }\n finally {\n if (in != null) in.close();\n }\n return newInstance(xmlDoc);\n }\n|SpecialSeperatorForDevSet|String getLocation(Class clazz) {\n try {\n java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n String location = url.toString();\n if (location.startsWith("jar")) {\n url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();\n location = url.toString();\n }\n if (location.startsWith("file")) {\n java.io.File file = new java.io.File(url.getFile());\n return file.getAbsolutePath();\n }\n else {\n return url.toString();\n }\n }\n-   catch (Throwable t) {\n+   catch (Throwable t) {\n }\n return Messages.getMessage("happyClientUnknownLocation");\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-548|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n-   outageUpdater.close();\n+   outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String fromPath, String toPath) {\n-   try {\n+   try {\n File inputFile = new File(fromPath);\n String dirImg = (new File(toPath)).getParent();\n File tmp = new File(dirImg);\n if (!tmp.exists()) {\n tmp.mkdir();\n }\n File outputFile = new File(toPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-549|SpecialSeperatorForDevSet|public static String generateStackHashKey() {\n Exception e = null;\n try {\n-   throw new Exception();\n+   throw new Exception();\n }\n catch (Exception ex) {\n e = ex;\n }\n MessageDigest digest;\n try {\n digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(getStackTrace(e).getBytes());\n byte[] hash = digest.digest();\n String rtn = Base64.encode(new String(hash));\n if (keys.contains(rtn)) {\n return generatedIterStackHashKey(rtn);\n }\n keys.add(rtn);\n return rtn;\n }\n catch (NoSuchAlgorithmException ex) {\n throw new RuntimeException(ex);\n }\n }\n|SpecialSeperatorForDevSet|public void run(IAction action) {\n int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();\n Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);\n GraphicalViewer viewer = new ScrollingGraphicalViewer();\n viewer.createControl(shell);\n viewer.setEditDomain(new DefaultEditDomain(null));\n-   viewer.setRootEditPart(new ScalableFreeformRootEditPart());\n+   viewer.setRootEditPart(new ScalableFreeformRootEditPart());\n viewer.setEditPartFactory(new TableEditPartFactory());\n viewer.setContents(getContents());\n viewer.flush();\n int printMode = new PrintModeDialog(shell).open();\n if (printMode == -1) return;\n PrintDialog dialog = new PrintDialog(shell, SWT.NULL);\n PrinterData data = dialog.open();\n if (data != null) {\n PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);\n op.setPrintMode(printMode);\n op.run(selectedFile.getName());\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-550|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n-   ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n+   ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n-   jar.closeEntry();\n+   jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-550|SpecialSeperatorForDevSet|private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n File oldlog = null;\n try {\n boolean oldClassCopied = false;\n File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION);\n if (upgrade) {\n-   File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n+   File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer);\n if (destPath.equals(lastVerPath)) {\n File bkdir = new File(destPath.getAbsolutePath() + ".bak");\n if (!destPath.renameTo(bkdir)) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n lastVerPath = bkdir;\n }\n else {\n oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai");\n }\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n }\n else {\n if ((!destPath.exists()) && (!destPath.mkdirs())) {\n throw new IOException(VAGlobals.i18n("Setup_NotCreateDirectory") + " " + destPath);\n }\n }\n dirty_ = true;\n File[] ls = destPath.listFiles();\n for (int i = 0;\n i < ls.length;\n i++) {\n if (!oldClassCopied) ls[i].delete();\n else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")) ls[i].delete();\n }\n byte[] buf = new byte[0];\n int read = 0;\n if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n if (outClassFile.exists() && !outClassFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()));\n }\n final FileOutputStream out = new FileOutputStream(outClassFile);\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (installClassOffset_ > 0) {\n in.skip(installClassOffset_);\n }\n buf = new byte[0];\n if (installClassSize_ < 0) buf = new byte[(int) jarOffset_];\n else buf = new byte[(int) installClassSize_];\n read = in.read(buf, 0, buf.length);\n out.write(buf, 0, read);\n out.close();\n in.close();\n }\n final FileInputStream in = new FileInputStream(fileWithArchive_);\n if (jarOffset_ > 0) {\n in.skip(jarOffset_);\n }\n JarInputStream jar = new JarInputStream(in);\n final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar");\n if (outJarFile.exists() && !outJarFile.delete()) {\n ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()));\n }\n JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n ZipEntry entry = jar.getNextEntry();\n final int bufSize = 32768;\n buf = new byte[bufSize];\n while (entry != null) {\n String entryName = entry.getName();\n if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) {\n }\n else if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class");\n VAGlobals.copyStream(jar, out, buf);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (out != null) out.close();\n }\n }\n else if (!entryName.endsWith(".zip")) {\n if (VAGlobals.DEBUG) VAGlobals.printDebug("jar entry name " + entryName);\n ZipEntry outEntry = new ZipEntry(entryName);\n CRC32 crc = new CRC32();\n outJar.putNextEntry(outEntry);\n int size = 0;\n while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n size += read;\n if (read == 0) {\n Thread.yield();\n }\n else {\n outJar.write(buf, 0, read);\n crc.update(buf, 0, read);\n }\n }\n outEntry.setSize(size);\n outEntry.setCrc(crc.getValue());\n outJar.flush();\n outJar.closeEntry();\n }\n jar.closeEntry();\n entry = jar.getNextEntry();\n }\n InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties");\n Properties prop = new Properties();\n try {\n prop.load(pin);\n }\n catch (IOException exc) {\n }\n if (language == null) language = "default";\n prop.setProperty("vainstall.destination.language", language);\n ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties");\n CRC32 crc = new CRC32();\n outEntry.setCrc(crc.getValue());\n outEntry.setSize(prop.size());\n outJar.putNextEntry(outEntry);\n prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION);\n outEntry.setCrc(crc.getValue());\n outJar.closeEntry();\n jar.close();\n outJar.close();\n in.close();\n }\n catch (IOException e) {\n String message = e.getLocalizedMessage();\n message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts");\n e.printStackTrace();\n exitOnError(new IOException(message));\n }\n return oldlog;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-551|SpecialSeperatorForDevSet|public static void main(String[] args) {\n if (args.length != 1) {\n System.out.println("Usage: GZip source");\n return;\n }\n String zipname = args[0] + ".gz";\n GZIPOutputStream zipout;\n try {\n FileOutputStream out = new FileOutputStream(zipname);\n zipout = new GZIPOutputStream(out);\n }\n catch (IOException e) {\n System.out.println("Couldn't create " + zipname + ".");\n return;\n }\n byte[] buffer = new byte[sChunk];\n try {\n FileInputStream in = new FileInputStream(args[0]);\n int length;\n while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n in.close();\n }\n catch (IOException e) {\n System.out.println("Couldn't compress " + args[0] + ".");\n }\n try {\n zipout.close();\n }\n catch (IOException e) {\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void run() {\n Log.d(LOG_TAG, "Fetching " + url);\n WebDbAdapter dbHelper = new WebDbAdapter(mContext);\n dbHelper.open();\n boolean errorOccurred = true;\n int notifyId = 0;\n String host = AppUtils.getHostFromUrl(url);\n try {\n if (host == null) {\n Log.d(LOG_TAG, "Bad url " + url);\n errorOccurred = true;\n }\n else {\n notifyId = showNotification("Fetching " + host, "Fetching " + host, android.R.drawable.stat_sys_download, 0);\n SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));\n Log.d(LOG_TAG, "Using user agent=" + userAgent);\n AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);\n URI uri = new URI(url);\n URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);\n norm = norm.normalize();\n HttpUriRequest get = new HttpGet(norm);\n HttpResponse response = ahc.execute(get);\n if (response.getStatusLine().getStatusCode() == 200) {\n HttpEntity entity = response.getEntity();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n entity.writeTo(baos);\n String data = baos.toString();\n for (int i = 0;\n i < undesirables.length;\n i++) {\n Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n data = data.replaceAll(p.pattern(), "");\n }\n-   long sysMillis = System.currentTimeMillis();\n+   long sysMillis = System.currentTimeMillis();\n String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));\n FileOutputStream strm = new FileOutputStream(newFileName);\n Log.d(LOG_TAG, "Writing to " + newFileName + " for url " + url);\n String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);\n jsData = jsData.replaceAll("@css_file", RETAIN_COLORS_CSS);\n strm.write(jsData.getBytes());\n strm.write(data.getBytes());\n strm.write(jsData.getBytes());\n strm.flush();\n strm.close();\n String entryName = getTitle(newFileName, url);\n long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);\n postToast("Downloaded \"" + entryName + "\"");\n errorOccurred = false;\n if (deleteRowId != 0) {\n Log.d(LOG_TAG, "Deleting rowId=" + deleteRowId);\n dbHelper.deleteEntry(deleteRowId);\n if (url == null) postToast("Item Deleted");\n mContext.startActivity(new Intent(mContext, RetainActivity.class));\n }\n else {\n showNotification("Download Complete", entryName, android.R.drawable.stat_sys_download_done, newRowId);\n }\n }\n else {\n Log.e(LOG_TAG, "Response code=" + String.valueOf(response.getStatusLine().getStatusCode()));\n }\n }\n }\n catch (IOException ioe) {\n Log.e(LOG_TAG, "RETAIN IOException: " + ioe.getMessage());\n }\n catch (URISyntaxException u) {\n Log.e(LOG_TAG, "RETAIN URISyntaxException: " + u.getMessage());\n }\n catch (OutOfMemoryError oome) {\n Log.e(LOG_TAG, "RETAIN OutOfMemoryError: " + oome.getMessage());\n }\n catch (Exception e) {\n Log.e(LOG_TAG, "RETAIN Exception: " + e.getMessage());\n }\n hideNotification(notifyId);\n if (errorOccurred && host != null) {\n showNotification("Error Downloading", host, android.R.drawable.stat_notify_error, 0);\n postToast("Error fetching " + host);\n }\n dbHelper.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-552|SpecialSeperatorForDevSet|public static byte[] getJarEntry(String jarName, String entry, int port) {\n byte[] b = null;\n try {\n String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName());\n String protocol = "http://";\n int x = codebase.indexOf(protocol) + protocol.length();\n String s2 = codebase.substring(x);\n int x2 = s2.indexOf('/');\n String downloadHost = s2.substring(0, x2);\n if (downloadHost.indexOf(':') == -1) {\n downloadHost += ":" + port;\n }\n URL url = new URL("jar:http://" + downloadHost + "/" + jarName + "!/" + entry);\n JarURLConnection jurl = (JarURLConnection) url.openConnection();\n JarEntry je = jurl.getJarEntry();\n-   InputStream is = jurl.getInputStream();\n+   InputStream is = jurl.getInputStream();\n BufferedInputStream bis = new BufferedInputStream(is);\n int size = (int) je.getSize();\n b = new byte[size];\n int rb = 0;\n int chunk = 0;\n while ((size - rb) > 0) {\n chunk = bis.read(b, rb, size - rb);\n if (chunk == -1) {\n break;\n }\n rb += chunk;\n }\n bis.close();\n is.close();\n bis = null;\n is = null;\n url = null;\n jurl = null;\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n return null;\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n return b;\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n-   fc.read(buff);\n+   fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-553|SpecialSeperatorForDevSet|@Override public InputStream getResourceByClassName(String className) {\n URL url = resourceFetcher.getResource("/fisce_scripts/" + className + ".class");\n if (url == null) {\n return null;\n }\n-   else {\n+   else {\n try {\n return url.openStream();\n }\n catch (IOException e) {\n return null;\n }\n }\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) {\n sb.append('0');\n }\n sb.append(Integer.toHexString(b));\n-   }\n+   }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-554|SpecialSeperatorForDevSet|private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n-   encryptedPassword.append('0');\n+   encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n-   i++) {\n+   i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-554|SpecialSeperatorForDevSet|private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n-   return encryptedPassword.toString();\n+   return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n-   _e.printStackTrace();\n+   _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-555|SpecialSeperatorForDevSet|private static String encrypt(String password, String encryptType) {\n try {\n MessageDigest md = MessageDigest.getInstance(encryptType);\n md.update(password.getBytes());\n byte[] hash = md.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n if ((0xff & hash[i]) < 0x10) {\n hexString.append("0" + Integer.toHexString((0xFF & hash[i])));\n }\n else {\n hexString.append(Integer.toHexString(0xFF & hash[i]));\n }\n }\n password = hexString.toString();\n }\n catch (NoSuchAlgorithmException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return password.toUpperCase();\n }\n|SpecialSeperatorForDevSet|public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\n ConnectionProvider cp = null;\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement pstmt = null;\n PrivilegeFactory factory = PrivilegeFactory.getInstance();\n Operation op = factory.createOperation();\n try {\n cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\n conn = cp.getConnection();\n try {\n pstmt = conn.prepareStatement(DEL_ROLE_PERM);\n pstmt.setString(1, roleid);\n pstmt.executeUpdate();\n-   }\n+   }\n catch (Exception e) {\n }\n if ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\n return;\n }\n else {\n conn.setAutoCommit(false);\n pstmt = conn.prepareStatement(ADD_ROLE_PERM);\n Iterator role_perm_ir = role_perm_collect.iterator();\n while (role_perm_ir.hasNext()) {\n RolePermission rolePerm = (RolePermission) role_perm_ir.next();\n pstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\n pstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\n pstmt.setString(3, String.valueOf(rolePerm.getResopid()));\n pstmt.executeUpdate();\n }\n conn.commit();\n conn.setAutoCommit(true);\n }\n }\n catch (Exception e) {\n conn.rollback();\n throw new DAOException();\n }\n finally {\n try {\n if (conn != null) {\n conn.close();\n }\n if (pstmt != null) {\n pstmt.close();\n }\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-556|SpecialSeperatorForDevSet|public static boolean existsURL(String urlStr) {\n try {\n URL url = ProxyURLFactory.createHttpUrl(urlStr);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.connect();\n int responseCode = con.getResponseCode();\n con.disconnect();\n return !(responseCode == HttpURLConnection.HTTP_NOT_FOUND);\n }\n catch (IOException e) {\n e.printStackTrace();\n return false;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws IOException {\n String urltext = "http://www.vogella.de";\n URL url = new URL(urltext);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n System.out.println(inputLine);\n-   }\n+   }\n in.close();\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-557|SpecialSeperatorForDevSet|public void getHttpURL() throws Exception {\n boolean display = true;\n boolean allHeaders = false;\n String url = null;\n url = "http://localhost/cubigraf2";\n-   url = "http://www.accenture.com/NR/rdonlyres/971C4EEE-24E2-4BAA-8C7B-D5A5133D5968/0/en_sprout.jpg";\n+   url = "http://www.accenture.com/NR/rdonlyres/971C4EEE-24E2-4BAA-8C7B-D5A5133D5968/0/en_sprout.jpg";\n url = "http://www.uni.pt/img/home-direito.gif";\n url = "http://www.google.com";\n URLConnection uc = new URL(url).openConnection();\n println("HEADERS:");\n if (allHeaders) {\n Iterator<Map.Entry<String, List<String>>> itHeaders = uc.getHeaderFields().entrySet().iterator();\n while (itHeaders.hasNext()) {\n Map.Entry<String, List<String>> e = itHeaders.next();\n Iterator<?> itValues = e.getValue().iterator();\n while (itValues.hasNext()) {\n println(e.getKey() + ": " + itValues.next());\n }\n }\n }\n else {\n showObjectProperty(uc, "getContentEncoding");\n showObjectProperty(uc, "getContentLength");\n showObjectProperty(uc, "getContentType");\n showObjectProperty(uc, "getDate", FORMAT.TIMESTAMP);\n showObjectProperty(uc, "getExpiration", FORMAT.TIMESTAMP);\n showObjectProperty(uc, "getLastModified", FORMAT.TIMESTAMP);\n }\n ExtendedInputStream in = new ExtendedInputStream(uc.getInputStream(), url.toString());\n if (display) {\n println("BODY:");\n ExtendedReader reader = new ExtendedReader(in);\n for (String s = reader.readLine();\n s != null;\n s = reader.readLine()) {\n println(s);\n }\n }\n else {\n println("(BODY saved to a file)");\n String contentType = uc.getContentType();\n StringBuilder filename = new StringBuilder("C:\\Documents and Settings\\Carlos_da_S_Pereira\\Desktop\\JAVA_NET_TESTS");\n filename.append(".");\n filename.append(contentType.substring(contentType.indexOf("/") + 1));\n File file = new File(filename.toString());\n ExtendedOutputStream out = new ExtendedOutputStream(new FileOutputStream(file), file.getAbsolutePath());\n Streams.copy(in, out);\n out.close();\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n-   out.write(PXDATA_TAG);\n+   out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-558|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n-   InputStream map;\n+   InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n-   InputStream map;\n+   InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-558|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n-   }\n+   }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n-   out.flush();\n+   out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-559|SpecialSeperatorForDevSet|public boolean referredFilesChanged() throws MalformedURLException, IOException {\n for (String file : referredFiles) {\n if (FileUtils.isURI(file)) {\n URLConnection url = new URL(file).openConnection();\n if (url.getLastModified() > created) return true;\n }\n else if (FileUtils.isFile(file)) {\n File f = new File(file);\n if (f.lastModified() > created) return true;\n }\n-   }\n+   }\n return false;\n }\n|SpecialSeperatorForDevSet|public void createTempFile(String resourceName) throws IOException {\n InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\n if (input == null) {\n fail("Couldn't resolve resource '" + resourceName + "'!");\n }\n inputFile = File.createTempFile("Import", "test");\n-   inputFile.delete();\n+   inputFile.delete();\n FileOutputStream output = new FileOutputStream(inputFile);\n IOUtils.copyLarge(input, output);\n IOUtilities.closeQuietly(output);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-560|SpecialSeperatorForDevSet|@Override public void doIt() {\n try {\n Shared.createBackup("articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos");\n if (mode.equals("FTP")) {\n FTPClient client = new FTPClient();\n client.connect(Constants.ftpHost);\n client.login(Constants.ftpUser, Constants.ftpPass);\n client.changeDirectory(Constants.ftpDir);\n File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n client.download("GT99_A09.rar", ff);\n client.disconnect(false);\n Shared.prepareMovements(ff);\n }\n else if (mode.equals("File")) {\n JFileChooser jfc = new JFileChooser();\n FileFilter f = new ExtensionFileFilter("Traslados de Total Pos", "rar");\n jfc.setFileFilter(f);\n int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n if (selection == JFileChooser.APPROVE_OPTION) {\n Shared.prepareMovements(jfc.getSelectedFile());\n }\n else {\n return;\n }\n }\n Shared.updateMovements();\n if (Shared.isHadMovements()) {\n MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Fue cargado el nuevo inventario satisfactoriamente!");\n msg.show(Shared.getMyMainWindows());\n }\n else {\n MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, "La tienda no tuvo ningun movimiento asociado.");\n-   msg.show(Shared.getMyMainWindows());\n+   msg.show(Shared.getMyMainWindows());\n }\n }\n catch (Exception ex) {\n MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Ha ocurrido un error.", ex);\n msg.show(Shared.getMyMainWindows());\n }\n }\n|SpecialSeperatorForDevSet|protected String getRequestContent(String urlText) throws Exception {\n URL url = new URL(urlText);\n-   HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\n+   HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\n urlcon.connect();\n BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\n String line = reader.readLine();\n reader.close();\n urlcon.disconnect();\n return line;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-561|SpecialSeperatorForDevSet|public void executeUpdateTransaction(List queries) throws SQLException {\n assert connection != null;\n boolean autoCommit = connection.getAutoCommit();\n connection.setAutoCommit(false);\n try {\n Iterator iterator = queries.iterator();\n while (iterator.hasNext()) {\n String query = (String) iterator.next();\n Statement statement = connection.createStatement();\n statement.executeUpdate(query);\n-   }\n+   }\n connection.commit();\n connection.setAutoCommit(autoCommit);\n }\n catch (SQLException e) {\n connection.rollback();\n throw new SQLException(e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n-   byte[] sha1hash = new byte[40];\n+   byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-562|SpecialSeperatorForDevSet|public Vector parse(String link) {\n addMessage("Parsing: " + link);\n links.removeAllElements();\n URLConnection conn = null;\n Reader rd = null;\n EditorKit kit = new HTMLEditorKit();\n Document doc = kit.createDefaultDocument();\n doc.putProperty("IgnoreCharsetDirective", Boolean.TRUE);\n URL url = null;\n try {\n url = new URL(link);\n }\n catch (MalformedURLException err) {\n System.out.println("Malformed URL");\n return links;\n }\n try {\n conn = new URL(link).openConnection();\n rd = new InputStreamReader(conn.getInputStream());\n }\n catch (Exception err) {\n err.printStackTrace();\n return links;\n }\n try {\n kit.read(rd, doc, 0);\n ElementIterator it = new ElementIterator(doc);\n javax.swing.text.Element elem;\n while ((elem = it.next()) != null) {\n SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\n if (s != null) {\n if (s.toString().indexOf("script") >= 0) continue;\n String lnk = "";\n try {\n lnk = s.getAttribute(HTML.Attribute.HREF).toString();\n }\n catch (Exception err) {\n continue;\n }\n int j = 0;\n if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);\n URL urlLink = new URL(url, lnk);\n if (!url.getHost().equals(urlLink.getHost())) continue;\n String str = urlLink.toString();\n if (!str.startsWith("http")) continue;\n if (str.endsWith(".pdf")) {\n continue;\n }\n for (int i = 0;\n i < leaveSuffix.length;\n i++) {\n if ((str.endsWith(leaveSuffix[i]))) continue;\n }\n boolean skip = false;\n for (int i = 0;\n i < suffix.length;\n i++) {\n if ((str.endsWith(suffix[i]))) skip = true;\n }\n if (!skip) {\n try {\n conn = urlLink.openConnection();\n }\n catch (Exception err) {\n }\n String contentType = null;\n if (contentType == null) contentType = conn.getContentType();\n if (contentType.equals("application/pdf")) {\n continue;\n }\n else if (!contentType.equals("text/html")) {\n continue;\n-   }\n+   }\n }\n if (!links.contains(urlLink.toString())) {\n links.addElement(urlLink.toString());\n }\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return links;\n }\n|SpecialSeperatorForDevSet|public synchronized String encryptPassword(String passwordString) throws Exception {\n-   MessageDigest digest = null;\n+   MessageDigest digest = null;\n digest = MessageDigest.getInstance("SHA");\n digest.update(passwordString.getBytes("UTF-8"));\n byte raw[] = digest.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-563|SpecialSeperatorForDevSet|public static void main(String args[]) {\n int[] mas = {\n 3, 5, 6, 9, 1, -3, -4, -88 }\n;\n int sort = 0;\n for (int j = 0;\n j < (mas.length);\n j++) {\n for (int i = 0;\n i < mas.length - 1;\n i++) {\n if (mas[i] > mas[i + 1]) {\n sort = mas[i];\n mas[i] = mas[i + 1];\n mas[i + 1] = sort;\n }\n }\n }\n for (int i = 0;\n i < mas.length;\n i++) {\n System.out.print(" " + mas[i]);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws IOException {\n PostParameter a1 = new PostParameter("v", Utils.encode("1.0"));\n PostParameter a2 = new PostParameter("api_key", Utils.encode(RenRenConstant.apiKey));\n PostParameter a3 = new PostParameter("method", Utils.encode("feed.publishTemplatizedAction"));\n PostParameter a4 = new PostParameter("call_id", System.nanoTime());\n PostParameter a5 = new PostParameter("session_key", Utils.encode("5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914"));\n PostParameter a8 = new PostParameter("format", Utils.encode("JSON"));\n PostParameter a9 = new PostParameter("template_id", Utils.encode("1"));\n PostParameter a10 = new PostParameter("title_data", Utils.encode("\"conteng\":\"xkt\""));\n PostParameter a11 = new PostParameter("body_data", Utils.encode("\"conteng\":\"xkt\""));\n RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\n ps.addParameter(a1);\n ps.addParameter(a2);\n ps.addParameter(a3);\n ps.addParameter(a4);\n-   ps.addParameter(a5);\n+   ps.addParameter(a5);\n ps.addParameter(a8);\n ps.addParameter(a9);\n ps.addParameter(a10);\n ps.addParameter(a11);\n System.out.println(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n URL url = new URL(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n request.setDoOutput(true);\n request.setRequestMethod("POST");\n System.out.println("Sending request...");\n request.connect();\n System.out.println("Response: " + request.getResponseCode() + " " + request.getResponseMessage());\n BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n String b = null;\n while ((b = reader.readLine()) != null) {\n System.out.println(b);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-564|SpecialSeperatorForDevSet|@Override public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n if (query == null) {\n throw new NotConnectedException();\n }\n ArrayList<String> recipients = query.getUserManager().getTecMail();\n Mail mail = new Mail(recipients);\n try {\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream("log/ossobooklog.zip"));\n FileInputStream fis = new FileInputStream("log/ossobook.log");\n ZipEntry entry = new ZipEntry("ossobook.log");\n zos.putNextEntry(entry);\n byte[] buffer = new byte[8192];\n int read = 0;\n-   while ((read = fis.read(buffer, 0, 1024)) != -1) {\n+   while ((read = fis.read(buffer, 0, 1024)) != -1) {\n zos.write(buffer, 0, read);\n }\n zos.closeEntry();\n fis.close();\n zos.close();\n mail.sendErrorMessage(message, new File("log/ossobooklog.zip"), getUserName());\n }\n catch (Exception ex) {\n ex.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static String POST(String url, String[][] props) throws IOException {\n HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n conn.setRequestMethod("POST");\n for (int i = 0;\n i < props.length;\n ++i) {\n conn.addRequestProperty(props[i][0], props[i][1]);\n-   }\n+   }\n conn.connect();\n try {\n return new String((byte[]) conn.getContent());\n }\n finally {\n conn.disconnect();\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-565|SpecialSeperatorForDevSet|private String GetResponse(URL url) {\n String content = null;\n try {\n HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n conn.setDoOutput(false);\n conn.setRequestMethod("GET");\n if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n String line;\n while ((line = br.readLine()) != null) content += line;\n }\n else {\n }\n }\n catch (MalformedURLException e) {\n e.getStackTrace();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.getStackTrace();\n }\n return content;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n if (from.isDirectory()) {\n if (!to.exists()) {\n to.mkdir();\n }\n File[] children = from.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".") || children[i].getName().equals("..")) {\n continue;\n }\n if (children[i].isDirectory()) {\n File f = new File(to, children[i].getName());\n copyFile(children[i], f);\n }\n else {\n copyFile(children[i], to);\n }\n }\n }\n else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n if (to.isDirectory()) {\n-   to = new File(to, from.getName());\n+   to = new File(to, from.getName());\n }\n FileInputStream in = new FileInputStream(from);\n FileOutputStream out = new FileOutputStream(to);\n byte[] buf = new byte[32678];\n int read;\n while ((read = in.read(buf)) > -1) {\n out.write(buf, 0, read);\n }\n closeStream(in);\n closeStream(out);\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-566|SpecialSeperatorForDevSet|@Test public void testLoadHttpGzipped() throws Exception {\n String url = HTTP_GZIPPED;\n LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));\n InputStream contentInputStream = loadingInfo.getContentInputStream();\n byte[] actual = IOUtils.toByteArray(contentInputStream);\n byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));\n assertEquals(expected.length, actual.length);\n }\n-  \n+  |SpecialSeperatorForDevSet|public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.getRealFile(), name);\n LOGGER.debug("PUT?? - real file: " + this.getRealFile() + ",name: " + name);\n if (isOwner) {\n if (!".request".equals(name) && !".tokens".equals(name)) {\n-   FileOutputStream out = null;\n+   FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n else {\n if (ServerConfiguration.isDynamicSEL()) {\n }\n else {\n }\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n return factory.resolveFile(this.host, dest);\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-567|SpecialSeperatorForDevSet|public static boolean downloadFile(String from, String to, ProgressMonitor pm) {\n try {\n FileOutputStream out = new FileOutputStream(to);\n URL url = new URL(from);\n URLConnection conn = url.openConnection();\n InputStream in = conn.getInputStream();\n byte[] buffer = new byte[1024];\n int read = 0;\n while ((read = in.read(buffer)) != -1) {\n out.write(buffer, 0, read);\n if (pm != null) pm.addToProgress(read);\n }\n out.close();\n in.close();\n }\n catch (Exception e) {\n Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));\n return false;\n }\n-   return true;\n+   return true;\n }\n|SpecialSeperatorForDevSet|public static String ReadURL(URL url, boolean textonly) {\n try {\n URLConnection uconn = url.openConnection();\n Object ucont = uconn.getContent();\n-   if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly);\n+   if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly);\n else return "" + ucont;\n }\n catch (java.io.IOException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-568|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n-   switch(i) {\n+   switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n-   IOUtils.closeQuietly(fos);\n+   IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-569|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static String hash(String value) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(value.getBytes("iso-8859-1"), 0, value.length());\n md5hash = md.digest();\n return Hex.encodeHexString(md5hash);\n }\n catch (Exception e) {\n e.printStackTrace();\n-   return null;\n+   return null;\n }\n }\n|SpecialSeperatorForDevSet|0
bigclonebench-test-570|SpecialSeperatorForDevSet|-  public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n+  public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n-   return PodArchiveResolver.withinPodArchive(pod, filename);\n+   return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-570|SpecialSeperatorForDevSet|public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n-   ZipEntry entry = new ZipEntry(filename);\n+   ZipEntry entry = new ZipEntry(filename);\n podArchiveOutputStream.putNextEntry(entry);\n IOUtils.copy(source, podArchiveOutputStream);\n podArchiveOutputStream.closeEntry();\n return PodArchiveResolver.withinPodArchive(pod, filename);\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n-   dest.close();\n+   dest.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-571|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n-   throw new FaultException("System error copying stream", e);\n+   throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n-   IOUtils.closeQuietly(source);\n+   IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-571|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n-   throw new FaultException("System error copying stream", e);\n+   throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n-   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n+   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-572|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n-   File mySrcF = FileUtil.toFile(mySrc);\n+   File mySrcF = FileUtil.toFile(mySrc);\n File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n-   }\n+   }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-572|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n-   return null;\n+   return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n-   in = new Base64InputStream(in);\n+   in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-573|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n-   InputStream in = new FileInputStream(new File(src));\n+   InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n-   int len;\n+   int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-573|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n-   while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n+   while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n-   if (in != null) in.close();\n+   if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-574|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n-   fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n+   fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-574|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n-   buff.flip();\n+   buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToWriter_nullIn() throws Exception {\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n try {\n-   IOUtils.copy((Reader) null, writer);\n+   IOUtils.copy((Reader) null, writer);\n fail();\n }\n catch (NullPointerException ex) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-575|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("arguments: sourcefile destfile");\n System.exit(1);\n }\n FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n while (in.read(buffer) != -1) {\n buffer.flip();\n out.write(buffer);\n buffer.clear();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("arguments: sourcefile destfile");\n System.exit(1);\n }\n FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n while (in.read(buffer) != -1) {\n buffer.flip();\n-   out.write(buffer);\n+   out.write(buffer);\n buffer.clear();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-575|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("arguments: sourcefile destfile");\n-   System.exit(1);\n+   System.exit(1);\n }\n FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n while (in.read(buffer) != -1) {\n buffer.flip();\n out.write(buffer);\n buffer.clear();\n }\n }\n|SpecialSeperatorForDevSet|public static boolean copyTextFile(File src, File dst) {\n try {\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));\n byte[] buf = new byte[1024];\n int readsize = 0;\n while ((readsize = bis.read(buf)) != -1) {\n bos.write(buf, 0, readsize);\n }\n bos.flush();\n bos.close();\n bis.close();\n }\n catch (IOException e) {\n ServerConsoleServlet.printSystemLog(e.toString() + " " + e.getMessage(), ServerConsoleServlet.LOG_ERROR);\n return false;\n }\n return true;\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-576|SpecialSeperatorForDevSet|public static final String encryptPassword(String loginName, String password) {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(loginName.toUpperCase().getBytes("UTF-8"));\n md5.update(password.getBytes("UTF-8"));\n byte[] ba = md5.digest();\n return byte2hex(ba);\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n return password;\n }\n }\n|SpecialSeperatorForDevSet|public static final String encryptPassword(String loginName, String password) {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(loginName.toUpperCase().getBytes("UTF-8"));\n-   md5.update(password.getBytes("UTF-8"));\n+   md5.update(password.getBytes("UTF-8"));\n byte[] ba = md5.digest();\n return byte2hex(ba);\n }\n catch (Exception e) {\n return password;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-576|SpecialSeperatorForDevSet|public static final String encryptPassword(String loginName, String password) {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(loginName.toUpperCase().getBytes("UTF-8"));\n md5.update(password.getBytes("UTF-8"));\n byte[] ba = md5.digest();\n return byte2hex(ba);\n }\n catch (Exception e) {\n return password;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n-   MessageDigest md;\n+   MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-577|SpecialSeperatorForDevSet|-  static void copyFile(File in, File out) throws IOException {\n+  static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n-   source.close();\n+   source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-577|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n-   source.transferTo(0, source.size(), destination);\n+   source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n-   }\n+   }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-578|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n-   }\n+   }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-578|SpecialSeperatorForDevSet|-  public synchronized String encrypt(String plaintext) {\n+  public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n-   i < pd.length;\n+   i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-579|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   pdWriter.writePixelData();\n+   pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n-   ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n+   ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-579|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n-   System.out.println("done!");\n+   System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n FileOutputStream fos = new FileOutputStream(dest);\n java.nio.channels.FileChannel channelSrc = fis.getChannel();\n-   java.nio.channels.FileChannel channelDest = fos.getChannel();\n+   java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-580|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n-   InputStream is = null;\n+   InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n-   if (os != null) {\n+   if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-580|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n-   try {\n+   try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n FileOutputStream fos = new FileOutputStream(dest);\n java.nio.channels.FileChannel channelSrc = fis.getChannel();\n-   java.nio.channels.FileChannel channelDest = fos.getChannel();\n+   java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-581|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n-   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n+   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n-   content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n+   content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-581|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n-   content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n+   content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|public static boolean copyFile(String sourceName, String destName) {\n FileChannel sourceChannel = null;\n-   FileChannel destChannel = null;\n+   FileChannel destChannel = null;\n boolean wasOk = false;\n try {\n sourceChannel = new FileInputStream(sourceName).getChannel();\n destChannel = new FileOutputStream(destName).getChannel();\n destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n wasOk = true;\n }\n catch (Throwable exception) {\n logger.log(Level.SEVERE, "Exception in copyFile", exception);\n }\n finally {\n try {\n if (sourceChannel != null) sourceChannel.close();\n }\n catch (Throwable tt) {\n }\n try {\n if (destChannel != null) destChannel.close();\n }\n catch (Throwable tt) {\n }\n }\n return wasOk;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-582|SpecialSeperatorForDevSet|public void handle() {\n FileChannel srcChannel, destChannel;\n String destOutFile = logFile + "." + System.currentTimeMillis();\n String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz";\n if (rotateDest != null) {\n (new File(rotateDest)).mkdirs();\n if (destOutFile.indexOf("/") != -1) {\n destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1);\n }\n if (destOutFileCompressed.indexOf("/") != -1) {\n destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1);\n }\n }\n if (rotateCompress) {\n try {\n GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n FileInputStream in = new FileInputStream(logFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n out.finish();\n out.close();\n buf = null;\n in = null;\n out = null;\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFileCompressed + "'");\n }\n catch (Exception e) {\n Debug.debug("Unable to rotate log file '" + logFile + "': " + e);\n }\n }\n else {\n try {\n srcChannel = new FileInputStream(logFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to read log file '" + logFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel = new FileOutputStream(destOutFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to rotate log file to '" + destOutFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n destChannel.close();\n srcChannel = null;\n destChannel = null;\n }\n catch (IOException e) {\n Debug.debug("Unable to copy data for file rotation: " + e.getMessage());\n-   return;\n+   return;\n }\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'");\n }\n if (rotateDelete && isFile) {\n try {\n ps.close();\n }\n catch (Exception e) {\n }\n isFile = false;\n ps = null;\n (new File(logFile)).delete();\n reconfigureDebug();\n }\n if (rotateDest != null) {\n long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n long currentTime = System.currentTimeMillis();\n File fileList[] = (new File(rotateDest)).listFiles();\n DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");\n java.util.Date date = new java.util.Date(currentTime);\n String archiveFile = format1.format(date).toString() + ".zip";\n if (rotateArchive != null) {\n archiveFile = rotateArchive + "/" + archiveFile;\n (new File(rotateArchive)).mkdirs();\n }\n Archive archive = new Archive(archiveFile);\n for (int i = 0;\n i < fileList.length;\n i++) {\n String currentFilename = fileList[i].getName();\n long timeDifference = (currentTime - fileList[i].lastModified());\n if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) {\n if (rotateDest != null) {\n currentFilename = rotateDest + "/" + currentFilename;\n }\n if (timeDifference > comparisonTime) {\n archive.addFile(fileList[i].getName(), currentFilename);\n fileList[i].delete();\n }\n }\n }\n archive = null;\n fileList = null;\n format1 = null;\n date = null;\n }\n }\n|SpecialSeperatorForDevSet|public void handle() {\n FileChannel srcChannel, destChannel;\n String destOutFile = logFile + "." + System.currentTimeMillis();\n String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz";\n if (rotateDest != null) {\n (new File(rotateDest)).mkdirs();\n if (destOutFile.indexOf("/") != -1) {\n destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1);\n }\n if (destOutFileCompressed.indexOf("/") != -1) {\n destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1);\n }\n }\n if (rotateCompress) {\n try {\n GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n FileInputStream in = new FileInputStream(logFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n out.finish();\n out.close();\n buf = null;\n in = null;\n out = null;\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFileCompressed + "'");\n }\n catch (Exception e) {\n Debug.debug("Unable to rotate log file '" + logFile + "': " + e);\n }\n }\n else {\n try {\n srcChannel = new FileInputStream(logFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to read log file '" + logFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel = new FileOutputStream(destOutFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to rotate log file to '" + destOutFile + "': " + e.getMessage());\n return;\n }\n try {\n-   destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n+   destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n destChannel.close();\n srcChannel = null;\n destChannel = null;\n }\n catch (IOException e) {\n Debug.debug("Unable to copy data for file rotation: " + e.getMessage());\n return;\n }\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'");\n }\n if (rotateDelete && isFile) {\n try {\n ps.close();\n }\n catch (Exception e) {\n }\n isFile = false;\n ps = null;\n (new File(logFile)).delete();\n reconfigureDebug();\n }\n if (rotateDest != null) {\n long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n long currentTime = System.currentTimeMillis();\n File fileList[] = (new File(rotateDest)).listFiles();\n DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");\n java.util.Date date = new java.util.Date(currentTime);\n String archiveFile = format1.format(date).toString() + ".zip";\n if (rotateArchive != null) {\n archiveFile = rotateArchive + "/" + archiveFile;\n (new File(rotateArchive)).mkdirs();\n }\n Archive archive = new Archive(archiveFile);\n for (int i = 0;\n i < fileList.length;\n i++) {\n String currentFilename = fileList[i].getName();\n long timeDifference = (currentTime - fileList[i].lastModified());\n if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) {\n if (rotateDest != null) {\n currentFilename = rotateDest + "/" + currentFilename;\n }\n if (timeDifference > comparisonTime) {\n archive.addFile(fileList[i].getName(), currentFilename);\n fileList[i].delete();\n }\n }\n }\n archive = null;\n fileList = null;\n format1 = null;\n date = null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-582|SpecialSeperatorForDevSet|public void handle() {\n FileChannel srcChannel, destChannel;\n String destOutFile = logFile + "." + System.currentTimeMillis();\n String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz";\n if (rotateDest != null) {\n (new File(rotateDest)).mkdirs();\n if (destOutFile.indexOf("/") != -1) {\n destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1);\n }\n if (destOutFileCompressed.indexOf("/") != -1) {\n destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1);\n }\n }\n if (rotateCompress) {\n try {\n GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n FileInputStream in = new FileInputStream(logFile);\n byte buf[] = new byte[1024];\n int len;\n-   while ((len = in.read(buf)) > 0) {\n+   while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n out.finish();\n out.close();\n buf = null;\n in = null;\n out = null;\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFileCompressed + "'");\n }\n catch (Exception e) {\n Debug.debug("Unable to rotate log file '" + logFile + "': " + e);\n }\n }\n else {\n try {\n srcChannel = new FileInputStream(logFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to read log file '" + logFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel = new FileOutputStream(destOutFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to rotate log file to '" + destOutFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n destChannel.close();\n srcChannel = null;\n destChannel = null;\n }\n catch (IOException e) {\n Debug.debug("Unable to copy data for file rotation: " + e.getMessage());\n return;\n }\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'");\n }\n if (rotateDelete && isFile) {\n try {\n ps.close();\n }\n catch (Exception e) {\n }\n isFile = false;\n ps = null;\n (new File(logFile)).delete();\n reconfigureDebug();\n }\n if (rotateDest != null) {\n long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n long currentTime = System.currentTimeMillis();\n File fileList[] = (new File(rotateDest)).listFiles();\n DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");\n java.util.Date date = new java.util.Date(currentTime);\n String archiveFile = format1.format(date).toString() + ".zip";\n if (rotateArchive != null) {\n archiveFile = rotateArchive + "/" + archiveFile;\n (new File(rotateArchive)).mkdirs();\n }\n Archive archive = new Archive(archiveFile);\n for (int i = 0;\n i < fileList.length;\n i++) {\n String currentFilename = fileList[i].getName();\n long timeDifference = (currentTime - fileList[i].lastModified());\n if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) {\n if (rotateDest != null) {\n currentFilename = rotateDest + "/" + currentFilename;\n }\n if (timeDifference > comparisonTime) {\n archive.addFile(fileList[i].getName(), currentFilename);\n fileList[i].delete();\n }\n }\n }\n archive = null;\n fileList = null;\n format1 = null;\n date = null;\n }\n }\n|SpecialSeperatorForDevSet|private static void setup() throws Exception {\n String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar");\n if (!jarFile.exists()) jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar");\n File f = File.createTempFile("tempabca", "bdfafad");\n f.delete();\n f.mkdir();\n String parent = f.getAbsolutePath() + "/";\n byte[] buf = new byte[1024];\n ZipInputStream zipinputstream = null;\n ZipEntry zipentry;\n-   zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n+   zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n zipentry = zipinputstream.getNextEntry();\n while (zipentry != null) {\n String entryName = zipentry.getName();\n if (entryName.startsWith("native")) {\n int n;\n FileOutputStream fileoutputstream;\n File newFile = new File(parent + entryName);\n if (zipentry.isDirectory()) {\n newFile.mkdirs();\n zipentry = zipinputstream.getNextEntry();\n continue;\n }\n fileoutputstream = new FileOutputStream(newFile);\n while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n fileoutputstream.close();\n zipinputstream.closeEntry();\n }\n zipentry = zipinputstream.getNextEntry();\n }\n zipinputstream.close();\n String arch = "";\n boolean x64 = false;\n for (String key : keys) {\n String property = System.getProperty(key);\n if (property != null) {\n x64 = (property.indexOf("64") >= 0);\n }\n }\n if (JPTrayIcon.isUnix()) {\n if (x64) arch = "linux-amd64";\n else arch = "linux-x86";\n }\n if (JPTrayIcon.isWindows()) {\n System.out.println("Arch: " + System.getProperty("sun.arch.data.model"));\n if (x64 && !System.getProperty("sun.arch.data.model").equals("32")) arch = "win64-amd64";\n else arch = "win32-x86";\n }\n if (JPTrayIcon.isMac()) arch = "macosx-universal";\n System.out.println("Using native/" + arch + "/");\n addLibraryPath(parent + "native/" + arch + "/");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-583|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n fis.close();\n-   fos.close();\n+   fos.close();\n return true;\n }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n fis.close();\n fos.close();\n return true;\n }\n catch (FileNotFoundException e) {\n-   }\n+   }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-583|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n-   fis.close();\n+   fis.close();\n fos.close();\n return true;\n }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n-   success = true;\n+   success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-584|SpecialSeperatorForDevSet|public static void copyFile(String inFile, String outFile) {\n File in = new File(inFile);\n File out = new File(outFile);\n try {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String inFile, String outFile) {\n File in = new File(inFile);\n File out = new File(outFile);\n try {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-584|SpecialSeperatorForDevSet|public static void copyFile(String inFile, String outFile) {\n File in = new File(inFile);\n File out = new File(outFile);\n try {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|@Test public void testLoadSource() throws IOException {\n ArticleMetadata metadata = new ArticleMetadata();\n-   metadata.setId("http://arxiv.org/abs/math/0205003v1");\n+   metadata.setId("http://arxiv.org/abs/math/0205003v1");\n InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n Assert.assertNotNull(inputStream);\n StringWriter writer = new StringWriter();\n IOUtils.copy(inputStream, writer, "utf8");\n String contents = writer.toString();\n Assert.assertTrue(contents.contains("A strengthening of the Nyman"));\n inputStream.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-585|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n-   FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n+   FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|-  public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n+  public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-585|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n-   }\n+   }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n-   FileChannel source = null;\n+   FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-586|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n-   fis.close();\n+   fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n-   byte buffer[] = new byte[1000];\n+   byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-586|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-587|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n-   out.close();\n+   out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n-   out.flush();\n+   out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-587|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n-   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n+   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n-   try {\n+   try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-588|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n-   }\n+   }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n-   if (TextUtils.isEmpty(plainText)) {\n+   if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-588|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n-   return hash.toString();\n+   return hash.toString();\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (Exception e) {\n }\n-   try {\n+   try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (Exception e) {\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-589|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n-   try {\n+   try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n-   try {\n+   try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-589|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n-   java.io.OutputStream out = null;\n+   java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n-   final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+   final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-590|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-   try {\n+   try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-590|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n-   }\n+   }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n-   while ((read = in.read(buffer)) >= 0) {\n+   while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-591|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n-   ) {\n+   ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n-   if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n+   if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-591|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n-   jarOut.finish();\n+   jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n-   File file = new File(path);\n+   File file = new File(path);\n if (file.exists()) {\n FileInputStream in = new FileInputStream(file);\n IOUtils.copyLarge(in, response.getOutputStream());\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-592|SpecialSeperatorForDevSet|@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n InputStream is = null;\n InputStream page = null;\n OutputStream os = null;\n String rootUrl = null;\n try {\n boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n if (!isMultipart) {\n request.setAttribute("error", "Form isn't a multipart form");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n-   rd.forward(request, response);\n+   rd.forward(request, response);\n }\n ServletFileUpload upload = new ServletFileUpload();\n String webUrl = null;\n FileItemIterator iter = upload.getItemIterator(request);\n while (iter.hasNext()) {\n FileItemStream item = iter.next();\n String name = item.getFieldName();\n if (name.equals("webpage")) {\n is = item.openStream();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n else if (name.equals("weburl")) {\n InputStream wpIs = null;\n try {\n webUrl = Streams.asString(item.openStream());\n URL u = new URL(webUrl);\n wpIs = new BufferedInputStream(u.openStream());\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(wpIs, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n finally {\n IOUtils.closeQuietly(wpIs);\n }\n }\n else if (name.equals("rooturl")) {\n rootUrl = Streams.asString(item.openStream());\n }\n }\n if (page == null) {\n request.setAttribute("error", "Form doesn't have an html file");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n os = new BufferedOutputStream(response.getOutputStream());\n os.write(delegate.getMailer());\n os.flush();\n }\n catch (Exception e) {\n streamException(request, response, e);\n }\n finally {\n IOUtils.closeQuietly(page);\n IOUtils.closeQuietly(is);\n IOUtils.closeQuietly(os);\n }\n }\n|SpecialSeperatorForDevSet|@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n InputStream is = null;\n InputStream page = null;\n-   OutputStream os = null;\n+   OutputStream os = null;\n String rootUrl = null;\n try {\n boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n if (!isMultipart) {\n request.setAttribute("error", "Form isn't a multipart form");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ServletFileUpload upload = new ServletFileUpload();\n String webUrl = null;\n FileItemIterator iter = upload.getItemIterator(request);\n while (iter.hasNext()) {\n FileItemStream item = iter.next();\n String name = item.getFieldName();\n if (name.equals("webpage")) {\n is = item.openStream();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n else if (name.equals("weburl")) {\n InputStream wpIs = null;\n try {\n webUrl = Streams.asString(item.openStream());\n URL u = new URL(webUrl);\n wpIs = new BufferedInputStream(u.openStream());\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(wpIs, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n finally {\n IOUtils.closeQuietly(wpIs);\n }\n }\n else if (name.equals("rooturl")) {\n rootUrl = Streams.asString(item.openStream());\n }\n }\n if (page == null) {\n request.setAttribute("error", "Form doesn't have an html file");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n os = new BufferedOutputStream(response.getOutputStream());\n os.write(delegate.getMailer());\n os.flush();\n }\n catch (Exception e) {\n streamException(request, response, e);\n }\n finally {\n IOUtils.closeQuietly(page);\n IOUtils.closeQuietly(is);\n IOUtils.closeQuietly(os);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-592|SpecialSeperatorForDevSet|@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n InputStream is = null;\n InputStream page = null;\n OutputStream os = null;\n String rootUrl = null;\n try {\n boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n if (!isMultipart) {\n request.setAttribute("error", "Form isn't a multipart form");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ServletFileUpload upload = new ServletFileUpload();\n String webUrl = null;\n FileItemIterator iter = upload.getItemIterator(request);\n while (iter.hasNext()) {\n FileItemStream item = iter.next();\n String name = item.getFieldName();\n if (name.equals("webpage")) {\n is = item.openStream();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n else if (name.equals("weburl")) {\n InputStream wpIs = null;\n try {\n webUrl = Streams.asString(item.openStream());\n URL u = new URL(webUrl);\n wpIs = new BufferedInputStream(u.openStream());\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(wpIs, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n-   }\n+   }\n finally {\n IOUtils.closeQuietly(wpIs);\n }\n }\n else if (name.equals("rooturl")) {\n rootUrl = Streams.asString(item.openStream());\n }\n }\n if (page == null) {\n request.setAttribute("error", "Form doesn't have an html file");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n os = new BufferedOutputStream(response.getOutputStream());\n os.write(delegate.getMailer());\n os.flush();\n }\n catch (Exception e) {\n streamException(request, response, e);\n }\n finally {\n IOUtils.closeQuietly(page);\n IOUtils.closeQuietly(is);\n IOUtils.closeQuietly(os);\n }\n }\n|SpecialSeperatorForDevSet|-  private void createButtonCopyToClipboard() {\n+  private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-593|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n-   }\n+   }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-593|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n-   if (!destFile.exists()) {\n+   if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.getRealFile(), name);\n LOGGER.debug("PUT?? - real file: " + this.getRealFile() + ",name: " + name);\n if (isOwner) {\n if (!".request".equals(name) && !".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n else {\n if (ServerConfiguration.isDynamicSEL()) {\n }\n else {\n }\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n-   IOUtils.closeQuietly(out);\n+   IOUtils.closeQuietly(out);\n }\n }\n return factory.resolveFile(this.host, dest);\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-594|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n-   File fInput = new File(args[i]);\n+   File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n-   PrintWriter writer = new PrintWriter(fnOut);\n+   PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n writer.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-594|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n }\n-   writer.close();\n+   writer.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File source, File destination) throws IOException {\n+  public static void copyFile(File source, File destination) throws IOException {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(destination).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-595|SpecialSeperatorForDevSet|private String createHTML(PAGE_TYPE requestPage) {\n String result = "<html><head>";\n URL url = getClass().getClassLoader().getResource("org/compiere/images/PAPanel.css");\n InputStreamReader ins;\n try {\n ins = new InputStreamReader(url.openStream());\n BufferedReader bufferedReader = new BufferedReader(ins);\n String cssLine;\n while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + "\n";\n }\n catch (IOException e1) {\n log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n }\n switch(requestPage) {\n case PAGE_LOGO: result += "</head><body class=\"header\">" + "<table width=\"100%\"><tr><td>" + "<img src=\"res:org/compiere/images/logo_ad.png\">" + "</td><td></td><td width=\"290\">" + "</td></tr></table>" + "</body></html>";\n break;\n case PAGE_HOME: result += "</head><body><div class=\"content\">\n";\n queryZoom = null;\n queryZoom = new ArrayList<MQuery>();\n String appendToHome = null;\n String sql = " SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID" + " FROM PA_DASHBOARDCONTENT x" + " LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id" + " WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'" + " ORDER BY LINE";\n PreparedStatement pstmt = null;\n ResultSet rs = null;\n try {\n-   pstmt = DB.prepareStatement(sql, null);\n+   pstmt = DB.prepareStatement(sql, null);\n pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n rs = pstmt.executeQuery();\n while (rs.next()) {\n appendToHome = rs.getString("HTML");\n if (appendToHome != null) {\n if (rs.getString("DESCRIPTION") != null) result += "<H2>" + rs.getString("DESCRIPTION") + "</H2>\n";\n result += stripHtml(appendToHome, false) + "<br>\n";\n }\n if (rs.getInt("AD_MENU_ID") > 0) {\n result += "<a class=\"hrefNode\" href=\"http:///window/node#" + String.valueOf(rs.getInt("AD_WINDOW_ID") + "\">" + rs.getString("DESCRIPTION") + "</a><br>\n");\n }\n result += "<br>\n";\n if (rs.getInt("PA_GOAL_ID") > 0) result += goalsDetail(rs.getInt("PA_GOAL_ID"));\n }\n }\n catch (SQLException e) {\n log.log(Level.SEVERE, sql, e);\n }\n finally {\n DB.close(rs, pstmt);\n rs = null;\n pstmt = null;\n }\n result += "<br><br><br>\n" + "</div>\n</body>\n</html>\n";\n break;\n default: log.warning("Unknown option - " + requestPage);\n }\n return result;\n }\n|SpecialSeperatorForDevSet|private String createHTML(PAGE_TYPE requestPage) {\n String result = "<html><head>";\n URL url = getClass().getClassLoader().getResource("org/compiere/images/PAPanel.css");\n InputStreamReader ins;\n try {\n ins = new InputStreamReader(url.openStream());\n BufferedReader bufferedReader = new BufferedReader(ins);\n String cssLine;\n while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + "\n";\n }\n catch (IOException e1) {\n log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n }\n switch(requestPage) {\n case PAGE_LOGO: result += "</head><body class=\"header\">" + "<table width=\"100%\"><tr><td>" + "<img src=\"res:org/compiere/images/logo_ad.png\">" + "</td><td></td><td width=\"290\">" + "</td></tr></table>" + "</body></html>";\n break;\n case PAGE_HOME: result += "</head><body><div class=\"content\">\n";\n queryZoom = null;\n queryZoom = new ArrayList<MQuery>();\n String appendToHome = null;\n String sql = " SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID" + " FROM PA_DASHBOARDCONTENT x" + " LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id" + " WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'" + " ORDER BY LINE";\n PreparedStatement pstmt = null;\n ResultSet rs = null;\n try {\n pstmt = DB.prepareStatement(sql, null);\n pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n rs = pstmt.executeQuery();\n while (rs.next()) {\n appendToHome = rs.getString("HTML");\n if (appendToHome != null) {\n if (rs.getString("DESCRIPTION") != null) result += "<H2>" + rs.getString("DESCRIPTION") + "</H2>\n";\n result += stripHtml(appendToHome, false) + "<br>\n";\n }\n if (rs.getInt("AD_MENU_ID") > 0) {\n result += "<a class=\"hrefNode\" href=\"http:///window/node#" + String.valueOf(rs.getInt("AD_WINDOW_ID") + "\">" + rs.getString("DESCRIPTION") + "</a><br>\n");\n }\n result += "<br>\n";\n if (rs.getInt("PA_GOAL_ID") > 0) result += goalsDetail(rs.getInt("PA_GOAL_ID"));\n }\n }\n catch (SQLException e) {\n log.log(Level.SEVERE, sql, e);\n }\n finally {\n DB.close(rs, pstmt);\n rs = null;\n pstmt = null;\n }\n result += "<br><br><br>\n" + "</div>\n</body>\n</html>\n";\n break;\n default: log.warning("Unknown option - " + requestPage);\n-   }\n+   }\n return result;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-595|SpecialSeperatorForDevSet|private String createHTML(PAGE_TYPE requestPage) {\n String result = "<html><head>";\n URL url = getClass().getClassLoader().getResource("org/compiere/images/PAPanel.css");\n InputStreamReader ins;\n try {\n ins = new InputStreamReader(url.openStream());\n BufferedReader bufferedReader = new BufferedReader(ins);\n String cssLine;\n while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + "\n";\n }\n catch (IOException e1) {\n log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n }\n switch(requestPage) {\n case PAGE_LOGO: result += "</head><body class=\"header\">" + "<table width=\"100%\"><tr><td>" + "<img src=\"res:org/compiere/images/logo_ad.png\">" + "</td><td></td><td width=\"290\">" + "</td></tr></table>" + "</body></html>";\n break;\n case PAGE_HOME: result += "</head><body><div class=\"content\">\n";\n queryZoom = null;\n queryZoom = new ArrayList<MQuery>();\n String appendToHome = null;\n String sql = " SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID" + " FROM PA_DASHBOARDCONTENT x" + " LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id" + " WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'" + " ORDER BY LINE";\n PreparedStatement pstmt = null;\n ResultSet rs = null;\n try {\n pstmt = DB.prepareStatement(sql, null);\n pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n rs = pstmt.executeQuery();\n while (rs.next()) {\n appendToHome = rs.getString("HTML");\n if (appendToHome != null) {\n if (rs.getString("DESCRIPTION") != null) result += "<H2>" + rs.getString("DESCRIPTION") + "</H2>\n";\n result += stripHtml(appendToHome, false) + "<br>\n";\n }\n if (rs.getInt("AD_MENU_ID") > 0) {\n result += "<a class=\"hrefNode\" href=\"http:///window/node#" + String.valueOf(rs.getInt("AD_WINDOW_ID") + "\">" + rs.getString("DESCRIPTION") + "</a><br>\n");\n }\n result += "<br>\n";\n if (rs.getInt("PA_GOAL_ID") > 0) result += goalsDetail(rs.getInt("PA_GOAL_ID"));\n }\n }\n catch (SQLException e) {\n log.log(Level.SEVERE, sql, e);\n-   }\n+   }\n finally {\n DB.close(rs, pstmt);\n rs = null;\n pstmt = null;\n }\n result += "<br><br><br>\n" + "</div>\n</body>\n</html>\n";\n break;\n default: log.warning("Unknown option - " + requestPage);\n }\n return result;\n }\n|SpecialSeperatorForDevSet|protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n try {\n URL url = new URL(apiUrl);\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n }\n if (ApplicationConstants.READ_TIMEOUT > -1) {\n request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n }\n for (String headerName : requestHeaders.keySet()) {\n request.setRequestProperty(headerName, requestHeaders.get(headerName));\n }\n request.setRequestMethod("POST");\n request.setDoOutput(true);\n PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n out.print(getParametersString(parameters));\n out.flush();\n out.close();\n request.connect();\n if (request.getResponseCode() != expected) {\n throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n }\n else {\n return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n }\n }\n catch (IOException e) {\n-   throw new BingMapsException(e);\n+   throw new BingMapsException(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-596|SpecialSeperatorForDevSet|public static int save(byte[] bytes, File outputFile) throws IOException {\n InputStream in = new ByteArrayInputStream(bytes);\n outputFile.getParentFile().mkdirs();\n OutputStream out = new FileOutputStream(outputFile);\n try {\n return IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n try {\n out.close();\n }\n catch (IOException ioe) {\n-   ioe.getMessage();\n+   ioe.getMessage();\n }\n try {\n in.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static int save(byte[] bytes, File outputFile) throws IOException {\n-   InputStream in = new ByteArrayInputStream(bytes);\n+   InputStream in = new ByteArrayInputStream(bytes);\n outputFile.getParentFile().mkdirs();\n OutputStream out = new FileOutputStream(outputFile);\n try {\n return IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n try {\n out.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n }\n try {\n in.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-596|SpecialSeperatorForDevSet|public static int save(byte[] bytes, File outputFile) throws IOException {\n InputStream in = new ByteArrayInputStream(bytes);\n outputFile.getParentFile().mkdirs();\n OutputStream out = new FileOutputStream(outputFile);\n try {\n return IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n try {\n out.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n }\n try {\n in.close();\n }\n catch (IOException ioe) {\n-   ioe.getMessage();\n+   ioe.getMessage();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n);\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-597|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n-   InputStream in = null;\n+   InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n-   finally {\n+   finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-597|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n-   tmpFile.delete();\n+   tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|void run(PseudolocalizerArguments arguments) throws IOException {\n List<String> fileNames = arguments.getFileNames();\n PseudolocalizationPipeline pipeline = arguments.getPipeline();\n if (arguments.isInteractive()) {\n runStdin(pipeline);\n return;\n }\n if (fileNames.size() == 0) {\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n-   writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n+   writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n return;\n }\n String suffix = arguments.getVariant();\n if (suffix == null) {\n suffix = "_pseudo";\n }\n else {\n suffix = "_" + suffix;\n }\n for (String fileName : fileNames) {\n File file = new File(fileName);\n if (!file.exists()) {\n System.err.println("File " + fileName + " not found");\n continue;\n }\n int lastDot = fileName.lastIndexOf('.');\n String extension;\n String outFileName;\n if (lastDot >= 0) {\n extension = fileName.substring(lastDot + 1);\n outFileName = fileName.substring(0, lastDot) + suffix + "." + extension;\n }\n else {\n extension = "";\n outFileName = fileName + suffix;\n }\n System.out.println("Processing " + fileName + " into " + outFileName);\n String fileType = arguments.getType();\n if (fileType == null) {\n fileType = extension;\n }\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n InputStream inputStream = new FileInputStream(file);\n List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n OutputStream outputStream = new FileOutputStream(new File(outFileName));\n writeMessages(msgCat, processedMessages, outputStream);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-598|SpecialSeperatorForDevSet|-  public void createFile(File src, String filename) throws IOException {\n+  public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n-   try {\n+   try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-598|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n-   catch (ResourceManagerException e) {\n+   catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n-   FileOutputStream fos;\n+   FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-599|SpecialSeperatorForDevSet|-  public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n+  public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(string.getBytes());\n byte byteData[] = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) hexString.append('0');\n hexString.append(hex);\n }\n return hexString.toString();\n }\n|SpecialSeperatorForDevSet|public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(string.getBytes());\n byte byteData[] = md.digest();\n-   StringBuffer sb = new StringBuffer();\n+   StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) hexString.append('0');\n hexString.append(hex);\n }\n return hexString.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-599|SpecialSeperatorForDevSet|public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(string.getBytes());\n byte byteData[] = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) hexString.append('0');\n hexString.append(hex);\n }\n-   return hexString.toString();\n+   return hexString.toString();\n }\n|SpecialSeperatorForDevSet|@Digester(forField = "password") public static String encriptPassword(String passwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(passwd.getBytes());\n BigInteger hash = new BigInteger(1, md.digest());\n return hash.toString(16);\n-   }\n+   }\n catch (Exception e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-600|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n-   byte[] buffer = new byte[65536];\n+   byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n-   out.write(buffer, 0, read);\n+   out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-600|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n-   }\n+   }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String linesep = System.getProperty("line.separator");\n FileOutputStream fos = new FileOutputStream(new File("lib-licenses.txt"));\n fos.write(new String("JCP contains the following libraries. Please read this for comments on copyright etc." + linesep + linesep).getBytes());\n fos.write(new String("Chemistry Development Kit, master version as of " + new Date().toString() + " (http://cdk.sf.net)" + linesep).getBytes());\n fos.write(new String("Copyright 1997-2009 The CDK Development Team" + linesep).getBytes());\n fos.write(new String("License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)" + linesep).getBytes());\n fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n fos.write(new String("Source available at: http://sourceforge.net/scm/?type=git&group_id=20024" + linesep + linesep).getBytes());\n File[] files = new File(args[0]).listFiles(new JarFileFilter());\n for (int i = 0;\n i < files.length;\n i++) {\n if (new File(files[i].getPath() + ".meta").exists()) {\n Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + ".meta"));\n Iterator<String> itsect = metaprops.keySet().iterator();\n while (itsect.hasNext()) {\n String section = itsect.next();\n fos.write(new String(metaprops.get(section).get("Library") + " " + metaprops.get(section).get("Version") + " (" + metaprops.get(section).get("Homepage") + ")" + linesep).getBytes());\n fos.write(new String("Copyright " + metaprops.get(section).get("Copyright") + linesep).getBytes());\n fos.write(new String("License: " + metaprops.get(section).get("License") + " (" + metaprops.get(section).get("LicenseURL") + ")" + linesep).getBytes());\n fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n fos.write(new String("Source available at: " + metaprops.get(section).get("SourceCode") + linesep + linesep).getBytes());\n }\n-   }\n+   }\n if (new File(files[i].getPath() + ".extra").exists()) {\n fos.write(new String("The author says:" + linesep).getBytes());\n FileInputStream in = new FileInputStream(new File(files[i].getPath() + ".extra"));\n int len;\n byte[] buf = new byte[1024];\n while ((len = in.read(buf)) > 0) {\n fos.write(buf, 0, len);\n }\n }\n fos.write(linesep.getBytes());\n }\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-601|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n-   File file = new File(path);\n+   File file = new File(path);\n if (file.exists()) {\n FileInputStream in = new FileInputStream(file);\n IOUtils.copyLarge(in, response.getOutputStream());\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n File file = new File(path);\n if (file.exists()) {\n FileInputStream in = new FileInputStream(file);\n IOUtils.copyLarge(in, response.getOutputStream());\n-   in.close();\n+   in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-601|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n-   String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n+   String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n File file = new File(path);\n if (file.exists()) {\n FileInputStream in = new FileInputStream(file);\n IOUtils.copyLarge(in, response.getOutputStream());\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFileByNIO(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n-   sourceChannel.close();\n+   sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-602|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n-   while ((line = bin.readLine()) != null) {\n+   while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n-   jEdit.getProperty("version-check.url"), e.toString() }\n+   jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-602|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n-   else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n+   else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|private String postXml(String url, String soapAction, String xml) {\n try {\n URLConnection conn = new URL(url).openConnection();\n if (conn instanceof HttpURLConnection) {\n HttpURLConnection hConn = (HttpURLConnection) conn;\n hConn.setRequestMethod("POST");\n }\n conn.setConnectTimeout(this.connectionTimeout);\n conn.setReadTimeout(this.connectionTimeout);\n conn.setRequestProperty("Content-Type", "text/xml;\n charset=utf-8");\n conn.setRequestProperty("Accept", "application/soap+xml, text/*");\n if (soapAction != null) {\n conn.setRequestProperty("SOAPAction", soapAction);\n }\n conn.setDoOutput(true);\n OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n out.write(xml);\n out.close();\n BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n StringBuilder buf = new StringBuilder();\n String str;\n while ((str = resp.readLine()) != null) {\n buf.append(str);\n }\n return buf.toString();\n }\n catch (IOException e) {\n throw new RuntimeException(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-603|SpecialSeperatorForDevSet|-  private String encryptPassword(String password) throws NoSuchAlgorithmException {\n+  private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n-   return encryptedPassword.toString();\n+   return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-603|SpecialSeperatorForDevSet|private String encryptPassword(String password) throws NoSuchAlgorithmException {\n StringBuffer encryptedPassword = new StringBuffer();\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(password.getBytes());\n byte digest[] = md5.digest();\n for (int i = 0;\n i < digest.length;\n-   i++) {\n+   i++) {\n String hex = Integer.toHexString(0xFF & digest[i]);\n if (hex.length() == 1) {\n encryptedPassword.append('0');\n }\n encryptedPassword.append(hex);\n }\n return encryptedPassword.toString();\n }\n|SpecialSeperatorForDevSet|public static String md5(String data) {\n try {\n-   MessageDigest md = MessageDigest.getInstance(MD);\n+   MessageDigest md = MessageDigest.getInstance(MD);\n md.update(data.getBytes(UTF8));\n return encodeHex(md.digest());\n }\n catch (Exception e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-604|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n-   PdfPKCS7 pk = af.verifySignature(name);\n+   PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n-   PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n+   PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-604|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n-   }\n+   }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n log.println("Concat files into: " + outputFile);\n OutputStream out = new FileOutputStream(absPath + outputFile);\n-   byte[] buffer = new byte[4096];\n+   byte[] buffer = new byte[4096];\n int readBytes;\n for (String file : inputFiles) {\n log.println(" Read: " + file);\n InputStream in = new FileInputStream(absPath + file);\n while ((readBytes = in.read(buffer)) != -1) {\n out.write(buffer, 0, readBytes);\n }\n in.close();\n }\n out.close();\n if (compress) {\n long normalSize = new File(absPath + outputFile).length();\n ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000");\n builder.directory(new File(absPath));\n Process process = builder.start();\n process.waitFor();\n long minSize = new File(absPath + outputFile).length();\n long diff = normalSize - minSize;\n double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n log.println("Result: " + percentage + " % (" + diffSize + " KB)");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-605|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n-   FileWriter out = null;\n+   FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n-   FileWriter out = null;\n+   FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-605|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n-   while ((c = in.read()) != -1) out.write(c);\n+   while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n for (int i = 0;\n i < list.size();\n i++) {\n long langId = ((Language) list.get(i)).getId();\n try {\n-   String filePath = getGlobalVariablesPath() + "cms_language_" + langId + ".properties";\n+   String filePath = getGlobalVariablesPath() + "cms_language_" + langId + ".properties";\n boolean copy = false;\n File from = new java.io.File(filePath);\n if (!from.exists()) {\n from.createNewFile();\n copy = true;\n }\n String tmpFilePath = getTemporyDirPath() + "cms_language_" + langId + "_properties.tmp";\n File to = new java.io.File(tmpFilePath);\n if (!to.exists()) {\n to.createNewFile();\n copy = true;\n }\n if (copy) {\n FileChannel srcChannel = new FileInputStream(from).getChannel();\n FileChannel dstChannel = new FileOutputStream(to).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n }\n catch (IOException e) {\n Logger.error(this, "_checkLanguagesFiles:Property File Copy Failed " + e, e);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-606|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n-   Email email = null;\n+   Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n-   }\n+   }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-606|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n-   }\n+   }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File srcFile, File destFile) throws IOException {\n+  public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-607|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n-   FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n+   FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-607|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n-   ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+   ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-608|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n-   catch (Exception exc) {\n+   catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-608|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n-   exc.printStackTrace();\n+   exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static void extractFile(String input, String output) throws ZipException, IOException {\n FileReader reader = new FileReader(input);\n InputStream in = reader.getInputStream();\n OutputStream out = new FileOutputStream(new File(output));\n byte[] buf = new byte[512];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n reader.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-609|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n-   this.isImage = ImageUtils.isImage(name);\n+   this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-609|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n-   }\n+   }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n JarEntry entry = entries.nextElement();\n String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n-   }\n+   }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-610|SpecialSeperatorForDevSet|private void upgradeSchema() throws IOException {\n Statement stmt = null;\n try {\n int i = getSchema();\n LOG.info("DB is currently at schema " + i);\n if (i < SCHEMA_VERSION) {\n LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n while (i < SCHEMA_VERSION) {\n String qry;\n switch(i) {\n case 1: qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";\n stmt.executeUpdate(qry);\n break;\n }\n i++;\n }\n conn.commit();\n }\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (SQLException e2) {\n LOG.error(SQL_ERROR, e2);\n }\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error upgrading data store", e);\n-   }\n+   }\n finally {\n try {\n if (stmt != null) stmt.close();\n conn.setAutoCommit(true);\n }\n catch (SQLException e) {\n LOG.error(SQL_ERROR, e);\n throw new IOException("Unable to cleanup SQL resources", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void upgradeSchema() throws IOException {\n Statement stmt = null;\n try {\n int i = getSchema();\n LOG.info("DB is currently at schema " + i);\n if (i < SCHEMA_VERSION) {\n LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n while (i < SCHEMA_VERSION) {\n String qry;\n switch(i) {\n case 1: qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";\n stmt.executeUpdate(qry);\n break;\n }\n i++;\n }\n conn.commit();\n }\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (SQLException e2) {\n LOG.error(SQL_ERROR, e2);\n }\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error upgrading data store", e);\n }\n finally {\n try {\n if (stmt != null) stmt.close();\n conn.setAutoCommit(true);\n }\n catch (SQLException e) {\n LOG.error(SQL_ERROR, e);\n throw new IOException("Unable to cleanup SQL resources", e);\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-610|SpecialSeperatorForDevSet|private void upgradeSchema() throws IOException {\n Statement stmt = null;\n try {\n int i = getSchema();\n LOG.info("DB is currently at schema " + i);\n if (i < SCHEMA_VERSION) {\n LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n while (i < SCHEMA_VERSION) {\n String qry;\n switch(i) {\n case 1: qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";\n stmt.executeUpdate(qry);\n break;\n }\n i++;\n-   }\n+   }\n conn.commit();\n }\n }\n catch (SQLException e) {\n try {\n conn.rollback();\n }\n catch (SQLException e2) {\n LOG.error(SQL_ERROR, e2);\n }\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error upgrading data store", e);\n }\n finally {\n try {\n if (stmt != null) stmt.close();\n conn.setAutoCommit(true);\n }\n catch (SQLException e) {\n LOG.error(SQL_ERROR, e);\n throw new IOException("Unable to cleanup SQL resources", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|@Override public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\n final Connection connection = this.getConnection();\n try {\n connection.setAutoCommit(false);\n String queryString = "DELETE " + this.getJvmInvocationsSchemaAndTableName() + " FROM " + this.getJvmInvocationsSchemaAndTableName() + " INNER JOIN " + this.getJvmElementsSchemaAndTableName() + " ON " + this.getJvmElementsSchemaAndTableName() + ".element_id = " + this.getJvmInvocationsSchemaAndTableName() + ".element_id WHERE ";\n if (contextName != null) {\n queryString = queryString + " context_name LIKE ? AND ";\n }\n if (dateFrom != null) {\n queryString = queryString + " start_timestamp >= ? AND ";\n }\n if (dateTo != null) {\n-   queryString = queryString + " start_timestamp <= ? AND ";\n+   queryString = queryString + " start_timestamp <= ? AND ";\n }\n queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\n final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\n int indexCounter = 1;\n if (contextName != null) {\n preparedStatement.setString(indexCounter, contextName);\n indexCounter = indexCounter + 1;\n }\n if (dateFrom != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\n indexCounter = indexCounter + 1;\n }\n if (dateTo != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\n indexCounter = indexCounter + 1;\n }\n preparedStatement.executeUpdate();\n preparedStatement.close();\n connection.commit();\n }\n catch (final SQLException e) {\n try {\n connection.rollback();\n }\n catch (final SQLException ex) {\n JeeObserverServerContext.logger.log(Level.SEVERE, "Transaction rollback error.", ex);\n }\n JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\n throw new DatabaseException("Error deleting JVM statistics.", e);\n }\n finally {\n this.releaseConnection(connection);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-611|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n-   InputStream input;\n+   InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n-   InputStream input;\n+   InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-611|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n-   }\n+   }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n-   while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n+   while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-612|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n-   user.setUsername(username);\n+   user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n-   EasyMock.verify(logServiceMock, dbServiceMock);\n+   EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-612|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n-   md5.update(password.getBytes());\n+   md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public String new2Password(String passwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n String clearPassword = passwd;\n md.update(clearPassword.getBytes());\n byte[] digestedPassword = md.digest();\n return new String(digestedPassword);\n }\n catch (java.security.NoSuchAlgorithmException e) {\n System.out.println("MD5 doesn't exist");\n System.out.println(e.toString());\n return null;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-613|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n-   int pxlen = p.getReadLength();\n+   int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n-   }\n+   }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-613|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n-   return;\n+   return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|private void displayDiffResults() throws IOException {\n File outFile = File.createTempFile("diff", ".htm");\n outFile.deleteOnExit();\n FileOutputStream outStream = new FileOutputStream(outFile);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");\n if (addedTable.length() > 0) {\n out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");\n out.write(addedTable.toString());\n out.write("</table><br><br>");\n }\n if (modifiedTable.length() > 0) {\n out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");\n out.write(modifiedTable.toString());\n out.write("</table><br><br>");\n }\n if (deletedTable.length() > 0) {\n out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n-   out.write(deletedTable.toString());\n+   out.write(deletedTable.toString());\n out.write("</table><br><br>");\n }\n out.write("<table name=METRICS BORDER>\n");\n if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n out.write("<tr><td>Base:&nbsp;\n</td><td>");\n out.write(Long.toString(base));\n out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n</td><td>");\n out.write(Long.toString(deleted));\n out.write("</td></tr>\n<tr><td>Modified:&nbsp;\n</td><td>");\n out.write(Long.toString(modified));\n out.write("</td></tr>\n<tr><td>Added:&nbsp;\n</td><td>");\n out.write(Long.toString(added));\n out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;\n</td><td>");\n out.write(Long.toString(added + modified));\n out.write("</td></tr>\n");\n }\n out.write("<tr><td>Total:&nbsp;\n</td><td>");\n out.write(Long.toString(total));\n out.write("</td></tr>\n</table></div>");\n redlinesOut.close();\n out.flush();\n InputStream redlines = new FileInputStream(redlinesTempFile);\n byte[] buffer = new byte[4096];\n int bytesRead;\n while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n outStream.write("</BODY></HTML>".getBytes());\n outStream.close();\n Browser.launch(outFile.toURL().toString());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-614|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n-   if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n+   if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-614|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n-   if (parent == null) parent = System.getProperty("user.dir");\n+   if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n from = new FileInputStream(source).getChannel();\n to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n finally {\n if (from != null) {\n from.close();\n }\n if (to != null) {\n to.close();\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-615|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n-   return sw.toString();\n+   return sw.toString();\n }\n|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n-   return StringUtils.EMPTY;\n+   return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-615|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n-   IOUtils.copy(createLimitedInputStream(len), sw, null);\n+   IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n-   out = new TitleCaseFilter(out);\n+   out = new TitleCaseFilter(out);\n String line;\n while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-616|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n-   int no = 0;\n+   int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n-   if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n+   if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-616|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n-   finally {\n+   finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-617|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n-   MessageDigest md = MessageDigest.getInstance("SHA");\n+   MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n-   return (new BASE64Encoder()).encode(raw);\n+   return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-617|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private static final String hash(String input, String algorithm) {\n try {\n MessageDigest dig = MessageDigest.getInstance(algorithm);\n dig.update(input.getBytes());\n StringBuffer result = new StringBuffer();\n byte[] digest = dig.digest();\n-   String[] hex = {\n+   String[] hex = {\n "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" }\n;\n for (int i = 0;\n i < digest.length;\n i++) {\n int u = digest[i];\n u &= 0x000000FF;\n int highCount = u / 16;\n int lowCount = u - (highCount * 16);\n result.append(hex[highCount]);\n result.append(hex[lowCount]);\n }\n return result.toString();\n }\n catch (NoSuchAlgorithmException e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-618|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n-   System.out.println("Error:" + e);\n+   System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n-   sbValueBeforeMD5.append(Long.toString(rand));\n+   sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-618|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n-   sbValueBeforeMD5.append(s_id);\n+   sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n-   sbValueBeforeMD5.append(":");\n+   sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-619|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n-   String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n+   String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n-   FileChannel dst = new FileOutputStream(desti32).getChannel();\n+   FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-619|SpecialSeperatorForDevSet|private void copyIconFiles(UmlClass clazz) {\n if (clazz.hasAnnotation("icon16")) {\n String i16 = clazz.annotationValue("icon16");\n String fileType = ".png";\n if (i16.endsWith(".jpg")) fileType = ".jpg";\n if (i16.endsWith(".gif")) fileType = ".gif";\n String desti16 = output_dir + "/../resources/images/" + clazz.getName() + "16" + fileType;\n try {\n FileChannel src = new FileInputStream(i16).getChannel();\n FileChannel dst = new FileOutputStream(desti16).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n if (clazz.hasAnnotation("icon32")) {\n-   String i32 = clazz.annotationValue("icon32");\n+   String i32 = clazz.annotationValue("icon32");\n String fileType = ".png";\n if (i32.endsWith(".jpg")) fileType = ".jpg";\n if (i32.endsWith(".gif")) fileType = ".gif";\n String desti32 = output_dir + "/../resources/images/" + clazz.getName() + "32" + fileType;\n try {\n FileChannel src = new FileInputStream(i32).getChannel();\n FileChannel dst = new FileOutputStream(desti32).getChannel();\n dst.transferFrom(src, 0, src.size());\n src.close();\n dst.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n try {\n inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inputChannel != null) inputChannel.close();\n if (outputChannel != null) outputChannel.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-620|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n assert (from != null);\n assert (to != null);\n if (!to.exists()) {\n File parentDir = to.getParentFile();\n if (!parentDir.exists()) parentDir.mkdirs();\n to.createNewFile();\n }\n-   FileInputStream in = null;\n+   FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n try {\n out = new FileOutputStream(to);\n FileChannel ic = in.getChannel();\n try {\n FileChannel oc = out.getChannel();\n try {\n oc.transferFrom(ic, 0, from.length());\n }\n finally {\n if (oc != null) {\n oc.close();\n }\n }\n }\n finally {\n if (ic != null) {\n ic.close();\n }\n }\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n assert (from != null);\n assert (to != null);\n if (!to.exists()) {\n File parentDir = to.getParentFile();\n if (!parentDir.exists()) parentDir.mkdirs();\n to.createNewFile();\n }\n FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n try {\n out = new FileOutputStream(to);\n FileChannel ic = in.getChannel();\n try {\n FileChannel oc = out.getChannel();\n try {\n oc.transferFrom(ic, 0, from.length());\n }\n finally {\n if (oc != null) {\n oc.close();\n }\n }\n }\n finally {\n if (ic != null) {\n ic.close();\n }\n }\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n-   finally {\n+   finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-620|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n assert (from != null);\n assert (to != null);\n-   if (!to.exists()) {\n+   if (!to.exists()) {\n File parentDir = to.getParentFile();\n if (!parentDir.exists()) parentDir.mkdirs();\n to.createNewFile();\n }\n FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n try {\n out = new FileOutputStream(to);\n FileChannel ic = in.getChannel();\n try {\n FileChannel oc = out.getChannel();\n try {\n oc.transferFrom(ic, 0, from.length());\n }\n finally {\n if (oc != null) {\n oc.close();\n }\n }\n }\n finally {\n if (ic != null) {\n ic.close();\n }\n }\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n-   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n+   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-621|SpecialSeperatorForDevSet|@Override public String getMessageDigest() throws SarasvatiLoadException {\n if (messageDigest == null) {\n Collections.sort(nodes);\n Collections.sort(externals);\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA1");\n digest.update(name.getBytes());\n for (XmlNode node : nodes) {\n node.addToDigest(digest);\n }\n for (XmlExternal external : externals) {\n external.addToDigest(digest);\n-   }\n+   }\n messageDigest = SvUtil.getHexString(digest.digest());\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new SarasvatiException("Unable to load SHA1 algorithm", nsae);\n }\n }\n return messageDigest;\n }\n|SpecialSeperatorForDevSet|@Override public String getMessageDigest() throws SarasvatiLoadException {\n if (messageDigest == null) {\n Collections.sort(nodes);\n Collections.sort(externals);\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA1");\n digest.update(name.getBytes());\n for (XmlNode node : nodes) {\n node.addToDigest(digest);\n }\n for (XmlExternal external : externals) {\n external.addToDigest(digest);\n }\n messageDigest = SvUtil.getHexString(digest.digest());\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new SarasvatiException("Unable to load SHA1 algorithm", nsae);\n }\n-   }\n+   }\n return messageDigest;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-621|SpecialSeperatorForDevSet|-  @Override public String getMessageDigest() throws SarasvatiLoadException {\n+  @Override public String getMessageDigest() throws SarasvatiLoadException {\n if (messageDigest == null) {\n Collections.sort(nodes);\n Collections.sort(externals);\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA1");\n digest.update(name.getBytes());\n for (XmlNode node : nodes) {\n node.addToDigest(digest);\n }\n for (XmlExternal external : externals) {\n external.addToDigest(digest);\n }\n messageDigest = SvUtil.getHexString(digest.digest());\n }\n catch (NoSuchAlgorithmException nsae) {\n throw new SarasvatiException("Unable to load SHA1 algorithm", nsae);\n }\n }\n return messageDigest;\n }\n|SpecialSeperatorForDevSet|private String md5(String uri) throws ConnoteaRuntimeException {\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(uri.getBytes());\n-   byte[] bytes = messageDigest.digest();\n+   byte[] bytes = messageDigest.digest();\n StringBuffer stringBuffer = new StringBuffer();\n for (byte b : bytes) {\n String hex = Integer.toHexString(0xff & b);\n if (hex.length() == 1) {\n stringBuffer.append('0');\n }\n stringBuffer.append(hex);\n }\n return stringBuffer.toString();\n }\n catch (NoSuchAlgorithmException e) {\n throw new ConnoteaRuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-622|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n-   }\n+   }\n return "";\n }\n|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n }\n-   return "";\n+   return "";\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-622|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n-   MessageDigest digest = MessageDigest.getInstance("MD5");\n+   MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n }\n return "";\n }\n|SpecialSeperatorForDevSet|public static synchronized String getMD5_Base64(String input) {\n MessageDigest msgDigest = null;\n try {\n msgDigest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("System doesn't support MD5 algorithm.");\n }\n try {\n msgDigest.update(input.getBytes("UTF-8"));\n }\n-   catch (java.io.UnsupportedEncodingException ex) {\n+   catch (java.io.UnsupportedEncodingException ex) {\n throw new IllegalStateException("System doesn't support your EncodingException.");\n }\n byte[] rawData = msgDigest.digest();\n byte[] encoded = Base64.encode(rawData);\n String retValue = new String(encoded);\n return retValue;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-623|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n-   BufferedReader br = new BufferedReader(isr);\n+   BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-623|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n-   logError(ioEx);\n+   logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n-   if (line.startsWith(".version")) version = line.substring(8).trim();\n+   if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-624|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n-   @Override public void run() {\n+   @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n-   close();\n+   close();\n }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-624|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|private void streamContains(String in, InputStream stream) throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(stream, baos);\n-   byte[] bytes = baos.toByteArray();\n+   byte[] bytes = baos.toByteArray();\n String cmp = new String(bytes, "UTF-8");\n assertTrue(cmp.contains(in));\n baos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-625|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n-   }\n+   }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n-   urlConnection.setIfModifiedSince(cacheFile.lastModified());\n+   urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-625|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n-   BufferedInputStream in = null;\n+   BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {\n FileReader reader = null;\n Writer writer = null;\n try {\n reader = new FileReader(sourceFile);\n logger.info("Using source file: " + trimPath(userDir, sourceFile));\n if (!destinationFile.getParentFile().exists()) {\n createDirectory(destinationFile.getParentFile());\n }\n writer = new FileWriter(destinationFile);\n logger.info("Destination file: " + trimPath(userDir, destinationFile));\n execute(reader, writer, conversionType, java2HtmlConfig);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n if (writer != null) {\n try {\n writer.close();\n writer = null;\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (reader != null) {\n try {\n reader.close();\n reader = null;\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-626|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n-   }\n+   }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n-   try {\n+   try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-626|SpecialSeperatorForDevSet|public static void copyFile(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n finally {\n if (source != null) {\n source.close();\n }\n-   if (destination != null) {\n+   if (destination != null) {\n destination.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws Exception {\n FileChannel sourceChannel = null;\n-   FileChannel destinationChannel = null;\n+   FileChannel destinationChannel = null;\n try {\n sourceChannel = new FileInputStream(in).getChannel();\n destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n }\n finally {\n if (sourceChannel != null) sourceChannel.close();\n if (destinationChannel != null) destinationChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-627|SpecialSeperatorForDevSet|public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n if (!targetDirectory.exists()) {\n if (!targetDirectory.mkdirs()) throw new Exception("Could not create target directory " + targetDirectory.getAbsolutePath());\n }\n if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n FileInputStream fis = new FileInputStream(this);\n FileChannel fci = fis.getChannel();\n FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + "_0" + ".fasta"));\n FileChannel fco = fos.getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(64000);\n while (fci.read(buffer) > 0) {\n buffer.flip();\n fco.write(buffer);\n buffer.clear();\n }\n fci.close();\n fco.close();\n return (long) 1;\n }\n else {\n long currentBasesCount = 0;\n long currentEntriesCount = 0;\n int targetCount = 0;\n FileChannel fastaChannel = new FileInputStream(this).getChannel();\n int totalSeqCount = 0;\n long totalResiduesCount = 0;\n try {\n long prevTime = System.currentTimeMillis();\n long fastaFileSize = this.length();\n long fastaFileReadOffset = 0L;\n long partitionStartOffset = 0L;\n final int bufferSize = 1024 * 1024;\n ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n for (;\n fastaFileReadOffset < fastaFileSize;\n ) {\n long nBytes = fastaChannel.read(fastaBuffer);\n-   if (nBytes <= 0) {\n+   if (nBytes <= 0) {\n fastaBuffer.limit(0);\n break;\n }\n else {\n fastaBuffer.flip();\n fastaFileReadOffset += nBytes;\n }\n for (;\n ;\n ) {\n if (!fastaBuffer.hasRemaining()) {\n fastaBuffer.clear();\n break;\n }\n int b = fastaBuffer.get();\n if (b == '\r') {\n }\n else if (b == '\n') {\n if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n }\n }\n else if (b == '>') {\n if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n fastaBuffer.position(fastaBuffer.position() - 1);\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileReadOffset - fastaBuffer.remaining()) + " and was created in " + (currentTime - prevTime) + " ms");\n prevTime = currentTime;\n long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n partitionStartOffset += nBytes;\n currentBasesCount = 0;\n currentEntriesCount = 0;\n fastaReadState = FASTAFileTokenizer.UNKNOWN;\n }\n else {\n fastaReadState = FASTAFileTokenizer.DEFLINE;\n currentEntriesCount++;\n }\n totalSeqCount++;\n }\n }\n else {\n if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n totalResiduesCount++;\n currentBasesCount++;\n }\n }\n }\n }\n if (partitionStartOffset < fastaFileSize) {\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileSize) + " and was created in " + (currentTime - prevTime) + " ms");\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n }\n if (size.isUnknown()) {\n size.setBases(totalResiduesCount);\n size.setEntries(totalSeqCount);\n }\n }\n finally {\n fastaChannel.close();\n }\n return (long) targetCount;\n }\n }\n|SpecialSeperatorForDevSet|public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n if (!targetDirectory.exists()) {\n if (!targetDirectory.mkdirs()) throw new Exception("Could not create target directory " + targetDirectory.getAbsolutePath());\n }\n if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n FileInputStream fis = new FileInputStream(this);\n FileChannel fci = fis.getChannel();\n FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + "_0" + ".fasta"));\n FileChannel fco = fos.getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(64000);\n while (fci.read(buffer) > 0) {\n buffer.flip();\n fco.write(buffer);\n buffer.clear();\n }\n fci.close();\n fco.close();\n return (long) 1;\n }\n else {\n long currentBasesCount = 0;\n long currentEntriesCount = 0;\n int targetCount = 0;\n FileChannel fastaChannel = new FileInputStream(this).getChannel();\n int totalSeqCount = 0;\n long totalResiduesCount = 0;\n try {\n long prevTime = System.currentTimeMillis();\n long fastaFileSize = this.length();\n long fastaFileReadOffset = 0L;\n long partitionStartOffset = 0L;\n final int bufferSize = 1024 * 1024;\n ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n for (;\n fastaFileReadOffset < fastaFileSize;\n ) {\n long nBytes = fastaChannel.read(fastaBuffer);\n if (nBytes <= 0) {\n fastaBuffer.limit(0);\n break;\n }\n else {\n fastaBuffer.flip();\n fastaFileReadOffset += nBytes;\n-   }\n+   }\n for (;\n ;\n ) {\n if (!fastaBuffer.hasRemaining()) {\n fastaBuffer.clear();\n break;\n }\n int b = fastaBuffer.get();\n if (b == '\r') {\n }\n else if (b == '\n') {\n if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n }\n }\n else if (b == '>') {\n if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n fastaBuffer.position(fastaBuffer.position() - 1);\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileReadOffset - fastaBuffer.remaining()) + " and was created in " + (currentTime - prevTime) + " ms");\n prevTime = currentTime;\n long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n partitionStartOffset += nBytes;\n currentBasesCount = 0;\n currentEntriesCount = 0;\n fastaReadState = FASTAFileTokenizer.UNKNOWN;\n }\n else {\n fastaReadState = FASTAFileTokenizer.DEFLINE;\n currentEntriesCount++;\n }\n totalSeqCount++;\n }\n }\n else {\n if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n totalResiduesCount++;\n currentBasesCount++;\n }\n }\n }\n }\n if (partitionStartOffset < fastaFileSize) {\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileSize) + " and was created in " + (currentTime - prevTime) + " ms");\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n }\n if (size.isUnknown()) {\n size.setBases(totalResiduesCount);\n size.setEntries(totalSeqCount);\n }\n }\n finally {\n fastaChannel.close();\n }\n return (long) targetCount;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-627|SpecialSeperatorForDevSet|public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n if (!targetDirectory.exists()) {\n if (!targetDirectory.mkdirs()) throw new Exception("Could not create target directory " + targetDirectory.getAbsolutePath());\n }\n if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n FileInputStream fis = new FileInputStream(this);\n FileChannel fci = fis.getChannel();\n FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + "_0" + ".fasta"));\n FileChannel fco = fos.getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(64000);\n while (fci.read(buffer) > 0) {\n buffer.flip();\n fco.write(buffer);\n buffer.clear();\n }\n fci.close();\n fco.close();\n return (long) 1;\n }\n else {\n long currentBasesCount = 0;\n long currentEntriesCount = 0;\n int targetCount = 0;\n FileChannel fastaChannel = new FileInputStream(this).getChannel();\n int totalSeqCount = 0;\n long totalResiduesCount = 0;\n try {\n long prevTime = System.currentTimeMillis();\n long fastaFileSize = this.length();\n long fastaFileReadOffset = 0L;\n long partitionStartOffset = 0L;\n final int bufferSize = 1024 * 1024;\n ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n for (;\n fastaFileReadOffset < fastaFileSize;\n ) {\n long nBytes = fastaChannel.read(fastaBuffer);\n if (nBytes <= 0) {\n fastaBuffer.limit(0);\n break;\n }\n else {\n fastaBuffer.flip();\n fastaFileReadOffset += nBytes;\n }\n for (;\n ;\n ) {\n if (!fastaBuffer.hasRemaining()) {\n fastaBuffer.clear();\n break;\n }\n int b = fastaBuffer.get();\n if (b == '\r') {\n }\n else if (b == '\n') {\n if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n }\n }\n else if (b == '>') {\n if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n }\n if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n fastaBuffer.position(fastaBuffer.position() - 1);\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileReadOffset - fastaBuffer.remaining()) + " and was created in " + (currentTime - prevTime) + " ms");\n prevTime = currentTime;\n long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n partitionStartOffset += nBytes;\n currentBasesCount = 0;\n currentEntriesCount = 0;\n fastaReadState = FASTAFileTokenizer.UNKNOWN;\n }\n else {\n fastaReadState = FASTAFileTokenizer.DEFLINE;\n currentEntriesCount++;\n }\n totalSeqCount++;\n }\n }\n else {\n if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n totalResiduesCount++;\n currentBasesCount++;\n }\n }\n }\n }\n if (partitionStartOffset < fastaFileSize) {\n long currentTime = System.currentTimeMillis();\n System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileSize) + " and was created in " + (currentTime - prevTime) + " ms");\n FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel();\n fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n partitionChannel.force(true);\n partitionChannel.close();\n targetCount++;\n }\n if (size.isUnknown()) {\n-   size.setBases(totalResiduesCount);\n+   size.setBases(totalResiduesCount);\n size.setEntries(totalSeqCount);\n }\n }\n finally {\n fastaChannel.close();\n }\n return (long) targetCount;\n }\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n-   }\n+   }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-628|SpecialSeperatorForDevSet|public void run() {\n-   try {\n+   try {\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setRequestMethod("GET");\n con.setDoInput(true);\n byte[] encodedPassword = (username + ":" + password).getBytes();\n BASE64Encoder encoder = new BASE64Encoder();\n con.setRequestProperty("Authorization", "Basic " + encoder.encode(encodedPassword));\n InputStream is = con.getInputStream();\n BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n String line;\n StringBuffer response = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n response.append(line);\n response.append('\n');\n lastIteraction = System.currentTimeMillis();\n }\n rd.close();\n is.close();\n con.disconnect();\n result = response.toString();\n finish = true;\n }\n catch (Throwable e) {\n this.e = e;\n }\n }\n|SpecialSeperatorForDevSet|public void run() {\n try {\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setRequestMethod("GET");\n con.setDoInput(true);\n byte[] encodedPassword = (username + ":" + password).getBytes();\n BASE64Encoder encoder = new BASE64Encoder();\n con.setRequestProperty("Authorization", "Basic " + encoder.encode(encodedPassword));\n InputStream is = con.getInputStream();\n BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n String line;\n StringBuffer response = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n response.append(line);\n response.append('\n');\n lastIteraction = System.currentTimeMillis();\n }\n rd.close();\n is.close();\n con.disconnect();\n result = response.toString();\n finish = true;\n }\n catch (Throwable e) {\n this.e = e;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-628|SpecialSeperatorForDevSet|public void run() {\n try {\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n con.setRequestMethod("GET");\n con.setDoInput(true);\n-   byte[] encodedPassword = (username + ":" + password).getBytes();\n+   byte[] encodedPassword = (username + ":" + password).getBytes();\n BASE64Encoder encoder = new BASE64Encoder();\n con.setRequestProperty("Authorization", "Basic " + encoder.encode(encodedPassword));\n InputStream is = con.getInputStream();\n BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n String line;\n StringBuffer response = new StringBuffer();\n while ((line = rd.readLine()) != null) {\n response.append(line);\n response.append('\n');\n lastIteraction = System.currentTimeMillis();\n }\n rd.close();\n is.close();\n con.disconnect();\n result = response.toString();\n finish = true;\n }\n catch (Throwable e) {\n this.e = e;\n }\n }\n|SpecialSeperatorForDevSet|public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n String osRoot = OSRoot.getRoot();\n String fname = "";\n Object retobj = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (myport == null || myport.trim().equals("")) {\n myport = "80";\n }\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n try {\n java.io.FileOutputStream pw = new java.io.FileOutputStream("log.txt");\n pw.write(req1xml.getBytes());\n pw.flush();\n pw.close();\n }\n catch (Exception exp) {\n exp.printStackTrace();\n }\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.io.File f1 = new java.io.File(osRoot + "/localattachments/Reports");\n if (!f1.exists()) f1.mkdirs();\n java.io.File file = null;\n if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("application/vnd.oasis.opendocument.text")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".odt");\n }\n else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("text/html")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".html");\n }\n else {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".xls");\n }\n file = new java.io.File(file.getAbsolutePath());\n java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n int c;\n while ((c = ios.read()) != -1) fos.write(c);\n fos.close();\n ios.close();\n fname = file.getAbsolutePath();\n System.out.println(fname);\n newgen.presentation.component.Utility.getInstance().showBrowser("file://" + fname);\n-   }\n+   }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n javax.swing.JOptionPane.showMessageDialog(null, "<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>", "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n return fname;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-629|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n-   fis.close();\n+   fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|-  private void moveFile(File orig, File target) throws IOException {\n+  private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-629|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n-  \n+  |SpecialSeperatorForDevSet|private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n-   File dest = new File(destName);\n+   File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-630|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n-   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n+   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|-  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n+  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-630|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   pdWriter.writePixelData();\n+   pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static File copyFile(File fileToCopy, File copiedFile) {\n BufferedInputStream in = null;\n BufferedOutputStream outWriter = null;\n if (!copiedFile.exists()) {\n try {\n copiedFile.createNewFile();\n }\n catch (IOException e1) {\n e1.printStackTrace();\n return null;\n }\n }\n try {\n in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n int c;\n while ((c = in.read()) != -1) outWriter.write(c);\n in.close();\n outWriter.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n return null;\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n return copiedFile;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-631|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n-   }\n+   }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-631|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n-   }\n+   }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFileByNIO(File in, File out) throws IOException {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n-   FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n+   FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-632|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n-   new File(path + "/" + relPath).mkdirs();\n+   new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n JarEntry entry = entries.nextElement();\n String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n-   JarEntry entry = entries.nextElement();\n+   JarEntry entry = entries.nextElement();\n String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-632|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n JarEntry entry = entries.nextElement();\n String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-633|SpecialSeperatorForDevSet|public void createTempFile(String resourceName) throws IOException {\n InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\n if (input == null) {\n fail("Couldn't resolve resource '" + resourceName + "'!");\n }\n inputFile = File.createTempFile("Import", "test");\n inputFile.delete();\n FileOutputStream output = new FileOutputStream(inputFile);\n IOUtils.copyLarge(input, output);\n IOUtilities.closeQuietly(output);\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void createTempFile(String resourceName) throws IOException {\n InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\n if (input == null) {\n fail("Couldn't resolve resource '" + resourceName + "'!");\n }\n inputFile = File.createTempFile("Import", "test");\n inputFile.delete();\n FileOutputStream output = new FileOutputStream(inputFile);\n IOUtils.copyLarge(input, output);\n-   IOUtilities.closeQuietly(output);\n+   IOUtilities.closeQuietly(output);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-633|SpecialSeperatorForDevSet|public void createTempFile(String resourceName) throws IOException {\n InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\n-   if (input == null) {\n+   if (input == null) {\n fail("Couldn't resolve resource '" + resourceName + "'!");\n }\n inputFile = File.createTempFile("Import", "test");\n inputFile.delete();\n FileOutputStream output = new FileOutputStream(inputFile);\n IOUtils.copyLarge(input, output);\n IOUtilities.closeQuietly(output);\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n-   srcChannel = new FileInputStream(source).getChannel();\n+   srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-634|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n-   throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n+   throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-634|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n-   }\n+   }\n catch (UnsupportedEncodingException ex) {\n throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|-  public static final synchronized String hash(String data) {\n+  public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-635|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n-   IOUtil.closeQuietly(input);\n+   IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-635|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n-   ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n+   ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-636|SpecialSeperatorForDevSet|public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n-   }\n+   }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n-   return invoke(invocation, retryTimes);\n+   return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-636|SpecialSeperatorForDevSet|public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n-   BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n+   BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|private void startScript(wabclient.Attributes prop) throws SAXException {\n dialog.beginScript();\n String url = prop.getValue("src");\n if (url.length() > 0) {\n try {\n BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n String buffer;\n while (true) {\n buffer = r.readLine();\n if (buffer == null) break;\n dialog.script += buffer + "\n";\n }\n r.close();\n dialog.endScript();\n }\n catch (IOException ioe) {\n-   System.err.println("[IOError] " + ioe.getMessage());\n+   System.err.println("[IOError] " + ioe.getMessage());\n System.exit(0);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-637|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n-   this.bufferedImage = imaging.read(isAux);\n+   this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n-   if (this.isImage) {\n+   if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-637|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n-   }\n+   }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n-   LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n+   LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-638|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n SecretKey key = keyFactory.generateSecret(keySpec);\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n SecretKey key = keyFactory.generateSecret(keySpec);\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n-   byte[] salt = new byte[8];\n+   byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-638|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n-   SecretKey key = keyFactory.generateSecret(keySpec);\n+   SecretKey key = keyFactory.generateSecret(keySpec);\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n|SpecialSeperatorForDevSet|public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\n try {\n MessageDigest digester = MessageDigest.getInstance(DIGEST);\n SecureRandom random = SecureRandom.getInstance(RANDOM);\n digester.reset();\n for (int i = 0;\n i < ITERATIONS;\n i++) {\n-   digester.update(salt);\n+   digester.update(salt);\n digester.update(cryptPassword.getBytes("UTF-8"));\n }\n byte[] hash = digester.digest();\n random.setSeed(hash);\n int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n generator.init(maxKeySize, random);\n SecretKey key = generator.generateKey();\n Cipher cipher = Cipher.getInstance(CIPHER);\n cipher.init(Cipher.DECRYPT_MODE, key);\n byte[] decoded = cipher.doFinal(encoded);\n return decoded;\n }\n catch (Exception e) {\n StorePlugin.getDefault().log(e);\n }\n return new byte[0];\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-639|SpecialSeperatorForDevSet|static void populateResources() throws BasicException {\n try {\n List<URL> templates = DatabaseValidator.listResources("/net/adrianromero/templates/" + Locale.getDefault().getLanguage());\n if (templates.size() == 0) {\n templates = DatabaseValidator.listResources("/net/adrianromero/templates/en");\n }\n for (URL url : templates) {\n String fileName = url.getFile();\n fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n if (fileName.endsWith(".xml") || fileName.endsWith(".txt")) {\n Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n InputStream is = url.openStream();\n StringBuffer strBuff = new StringBuffer();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n-   String str;\n+   String str;\n while ((str = br.readLine()) != null) {\n strBuff.append(str + "\n");\n }\n templateResource.setText(strBuff.toString());\n templateResource.save();\n }\n }\n }\n catch (MalformedURLException e1) {\n logger.error("Unable to load templates", e1);\n }\n catch (IOException e1) {\n logger.error("Unable to load templates", e1);\n }\n String[][] images = new String[][] {\n {\n "default.user", "yast_sysadmin.png" }\n, {\n "default.product", "colorize.png" }\n, {\n "Window.Logo", "windowlogo.png" }\n, {\n "Image.Backarrow", "3backarrow.png" }\n }\n;\n for (int i = 0;\n i < images.length;\n i++) {\n Image img = new Image();\n img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource("/net/adrianromero/images/" + images[i][1])));\n img.save();\n Property imgProperty = new Property(images[i][0]);\n imgProperty.setValue("" + img.getId());\n imgProperty.save();\n }\n }\n|SpecialSeperatorForDevSet|static void populateResources() throws BasicException {\n try {\n List<URL> templates = DatabaseValidator.listResources("/net/adrianromero/templates/" + Locale.getDefault().getLanguage());\n if (templates.size() == 0) {\n templates = DatabaseValidator.listResources("/net/adrianromero/templates/en");\n }\n for (URL url : templates) {\n String fileName = url.getFile();\n fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n if (fileName.endsWith(".xml") || fileName.endsWith(".txt")) {\n Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n InputStream is = url.openStream();\n StringBuffer strBuff = new StringBuffer();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String str;\n while ((str = br.readLine()) != null) {\n strBuff.append(str + "\n");\n }\n templateResource.setText(strBuff.toString());\n templateResource.save();\n }\n }\n }\n catch (MalformedURLException e1) {\n logger.error("Unable to load templates", e1);\n }\n catch (IOException e1) {\n logger.error("Unable to load templates", e1);\n }\n String[][] images = new String[][] {\n {\n "default.user", "yast_sysadmin.png" }\n, {\n "default.product", "colorize.png" }\n, {\n "Window.Logo", "windowlogo.png" }\n, {\n "Image.Backarrow", "3backarrow.png" }\n }\n;\n for (int i = 0;\n i < images.length;\n i++) {\n Image img = new Image();\n img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource("/net/adrianromero/images/" + images[i][1])));\n img.save();\n-   Property imgProperty = new Property(images[i][0]);\n+   Property imgProperty = new Property(images[i][0]);\n imgProperty.setValue("" + img.getId());\n imgProperty.save();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-639|SpecialSeperatorForDevSet|static void populateResources() throws BasicException {\n try {\n List<URL> templates = DatabaseValidator.listResources("/net/adrianromero/templates/" + Locale.getDefault().getLanguage());\n if (templates.size() == 0) {\n templates = DatabaseValidator.listResources("/net/adrianromero/templates/en");\n }\n for (URL url : templates) {\n String fileName = url.getFile();\n fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n if (fileName.endsWith(".xml") || fileName.endsWith(".txt")) {\n Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n-   InputStream is = url.openStream();\n+   InputStream is = url.openStream();\n StringBuffer strBuff = new StringBuffer();\n BufferedReader br = new BufferedReader(new InputStreamReader(is));\n String str;\n while ((str = br.readLine()) != null) {\n strBuff.append(str + "\n");\n }\n templateResource.setText(strBuff.toString());\n templateResource.save();\n }\n }\n }\n catch (MalformedURLException e1) {\n logger.error("Unable to load templates", e1);\n }\n catch (IOException e1) {\n logger.error("Unable to load templates", e1);\n }\n String[][] images = new String[][] {\n {\n "default.user", "yast_sysadmin.png" }\n, {\n "default.product", "colorize.png" }\n, {\n "Window.Logo", "windowlogo.png" }\n, {\n "Image.Backarrow", "3backarrow.png" }\n }\n;\n for (int i = 0;\n i < images.length;\n i++) {\n Image img = new Image();\n img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource("/net/adrianromero/images/" + images[i][1])));\n img.save();\n Property imgProperty = new Property(images[i][0]);\n imgProperty.setValue("" + img.getId());\n imgProperty.save();\n }\n }\n|SpecialSeperatorForDevSet|public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n retryTimes--;\n try {\n String url = getServiceUrl() + "/" + invocation.getMethod().getName();\n HttpPost postMethod = new HttpPost(url);\n if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n StatusLine sl = rsp.getStatusLine();\n if (sl.getStatusCode() >= 300) {\n throw new RuntimeException("Did not receive successful HTTP response: status code = " + sl.getStatusCode() + ", status message = [" + sl.getReasonPhrase() + "]");\n }\n HttpEntity entity = rsp.getEntity();\n StringBuilder sb = new StringBuilder();\n InputStream is = entity.getContent();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"));\n String line;\n while ((line = reader.readLine()) != null) sb.append(line).append("\n");\n reader.close();\n is.close();\n String responseBody = null;\n if (sb.length() > 0) {\n sb.deleteCharAt(sb.length() - 1);\n responseBody = sb.toString();\n }\n Type t = invocation.getMethod().getGenericReturnType();\n if (t.equals(Void.class) || responseBody == null) return null;\n return JsonUtils.fromJson(responseBody, t);\n }\n catch (ConnectTimeoutException e) {\n if (retryTimes < 0) throw e;\n-   if (urlFromDiscovery) {\n+   if (urlFromDiscovery) {\n String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n if (!serviceUrl.equals(getServiceUrl())) {\n setServiceUrl(serviceUrl);\n log.info("relocate service url:" + serviceUrl);\n }\n }\n return invoke(invocation, retryTimes);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-640|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n-   catch (final Exception e) {\n+   catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-640|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n-   catch (final Exception e) {\n+   catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n-   input = zipFile.getInputStream(entry);\n+   input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-641|SpecialSeperatorForDevSet|-  public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("UTF-8"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n-   md = MessageDigest.getInstance("SHA-1");\n+   md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("UTF-8"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-641|SpecialSeperatorForDevSet|public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("UTF-8"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String getUniqueKey() {\n String digest = "";\n try {\n final MessageDigest md = MessageDigest.getInstance("MD5");\n final String timeVal = "" + (System.currentTimeMillis() + 1);\n String localHost = "";\n try {\n-   localHost = InetAddress.getLocalHost().toString();\n+   localHost = InetAddress.getLocalHost().toString();\n }\n catch (UnknownHostException e) {\n println("Warn: getUniqueKey(), Error trying to get localhost" + e.getMessage());\n }\n final String randVal = "" + new Random().nextInt();\n final String val = timeVal + localHost + randVal;\n md.reset();\n md.update(val.getBytes());\n digest = toHexString(md.digest());\n }\n catch (NoSuchAlgorithmException e) {\n println("Warn: getUniqueKey() " + e);\n }\n return digest;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-642|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n-   i++) {\n+   i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-642|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n InputStream is = ffConfigurable.getInputConfigStream();\n try {\n OutputStream os = new FileOutputStream(file);\n IOUtils.copy(is, os);\n }\n catch (Exception e) {\n throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-643|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n-   digest.update(data.getBytes("utf-8"));\n+   digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n-   if (digest == null) {\n+   if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-643|SpecialSeperatorForDevSet|-  public static final synchronized String hash(String data) {\n+  public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n-   MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n+   MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-644|SpecialSeperatorForDevSet|private static void copyFiles(String strPath, String dstPath) throws Exception {\n File src = new File(strPath);\n-   File dest = new File(dstPath);\n+   File dest = new File(dstPath);\n if (src.isDirectory()) {\n dest.mkdirs();\n String list[] = src.list();\n for (int i = 0;\n i < list.length;\n i++) {\n String dest1 = dest.getAbsolutePath() + "\\" + list[i];\n String src1 = src.getAbsolutePath() + "\\" + list[i];\n copyFiles(src1, dest1);\n }\n }\n else {\n FileChannel sourceChannel = new FileInputStream(src).getChannel();\n FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n sourceChannel.close();\n targetChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|private static void copyFiles(String strPath, String dstPath) throws Exception {\n File src = new File(strPath);\n File dest = new File(dstPath);\n-   if (src.isDirectory()) {\n+   if (src.isDirectory()) {\n dest.mkdirs();\n String list[] = src.list();\n for (int i = 0;\n i < list.length;\n i++) {\n String dest1 = dest.getAbsolutePath() + "\\" + list[i];\n String src1 = src.getAbsolutePath() + "\\" + list[i];\n copyFiles(src1, dest1);\n }\n }\n else {\n FileChannel sourceChannel = new FileInputStream(src).getChannel();\n FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n sourceChannel.close();\n targetChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-644|SpecialSeperatorForDevSet|private static void copyFiles(String strPath, String dstPath) throws Exception {\n File src = new File(strPath);\n File dest = new File(dstPath);\n if (src.isDirectory()) {\n dest.mkdirs();\n String list[] = src.list();\n for (int i = 0;\n i < list.length;\n-   i++) {\n+   i++) {\n String dest1 = dest.getAbsolutePath() + "\\" + list[i];\n String src1 = src.getAbsolutePath() + "\\" + list[i];\n copyFiles(src1, dest1);\n }\n }\n else {\n FileChannel sourceChannel = new FileInputStream(src).getChannel();\n FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n sourceChannel.close();\n targetChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-645|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n-   if (!ignoreDependencies) expandSet(allEntries);\n+   if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n-   jarOut.close();\n+   jarOut.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-645|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n-   if (includeJars != null) {\n+   if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-646|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n-   md = MessageDigest.getInstance("SHA-1");\n+   md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n-   return convertToHex(sha1hash);\n+   return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-646|SpecialSeperatorForDevSet|-  public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n-   user.setUsername(username);\n+   user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-647|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n-   catch (MalformedURLException e) {\n+   catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n-   response.addHeader("Content-Encoding", con.getContentEncoding());\n+   response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-647|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n-   con.setRequestProperty(txt, request.getHeader(txt));\n+   con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void handler(Map<String, String> result, TargetPage target) {\n try {\n URL url = new URL(target.getUrl());\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n while ((line = reader.readLine()) != null) {\n for (Map.Entry<String, String> entry : result.entrySet()) {\n if (line.indexOf(target.getInclude()) != -1) {\n int fromIndex = line.indexOf(target.getFromStr());\n String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n entry.setValue(r);\n line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n }\n }\n }\n reader.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-648|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n-   FileChannel outChannel = new FileOutputStream(out).getChannel();\n+   FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n-   if (outChannel != null) outChannel.close();\n+   if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-648|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n-   FileChannel outChannel = new FileOutputStream(out).getChannel();\n+   FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n-   if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n+   if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-649|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n-   }\n+   }\n|SpecialSeperatorForDevSet|-  public static byte[] getMD5(String source) {\n+  public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-649|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n-   digest = MessageDigest.getInstance("MD5");\n+   digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-650|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n-   i--) {\n+   i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n-   i < d.length;\n+   i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-650|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n-   try {\n+   try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("At RandomGUID !!!", e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n-   logger.error("At RandomGUID !!!", e);\n+   logger.error("At RandomGUID !!!", e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-651|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String linesep = System.getProperty("line.separator");\n FileOutputStream fos = new FileOutputStream(new File("lib-licenses.txt"));\n fos.write(new String("JCP contains the following libraries. Please read this for comments on copyright etc." + linesep + linesep).getBytes());\n fos.write(new String("Chemistry Development Kit, master version as of " + new Date().toString() + " (http://cdk.sf.net)" + linesep).getBytes());\n fos.write(new String("Copyright 1997-2009 The CDK Development Team" + linesep).getBytes());\n fos.write(new String("License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)" + linesep).getBytes());\n-   fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n+   fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n fos.write(new String("Source available at: http://sourceforge.net/scm/?type=git&group_id=20024" + linesep + linesep).getBytes());\n File[] files = new File(args[0]).listFiles(new JarFileFilter());\n for (int i = 0;\n i < files.length;\n i++) {\n if (new File(files[i].getPath() + ".meta").exists()) {\n Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + ".meta"));\n Iterator<String> itsect = metaprops.keySet().iterator();\n while (itsect.hasNext()) {\n String section = itsect.next();\n fos.write(new String(metaprops.get(section).get("Library") + " " + metaprops.get(section).get("Version") + " (" + metaprops.get(section).get("Homepage") + ")" + linesep).getBytes());\n fos.write(new String("Copyright " + metaprops.get(section).get("Copyright") + linesep).getBytes());\n fos.write(new String("License: " + metaprops.get(section).get("License") + " (" + metaprops.get(section).get("LicenseURL") + ")" + linesep).getBytes());\n fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n fos.write(new String("Source available at: " + metaprops.get(section).get("SourceCode") + linesep + linesep).getBytes());\n }\n }\n if (new File(files[i].getPath() + ".extra").exists()) {\n fos.write(new String("The author says:" + linesep).getBytes());\n FileInputStream in = new FileInputStream(new File(files[i].getPath() + ".extra"));\n int len;\n byte[] buf = new byte[1024];\n while ((len = in.read(buf)) > 0) {\n fos.write(buf, 0, len);\n }\n }\n fos.write(linesep.getBytes());\n }\n fos.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String linesep = System.getProperty("line.separator");\n FileOutputStream fos = new FileOutputStream(new File("lib-licenses.txt"));\n fos.write(new String("JCP contains the following libraries. Please read this for comments on copyright etc." + linesep + linesep).getBytes());\n fos.write(new String("Chemistry Development Kit, master version as of " + new Date().toString() + " (http://cdk.sf.net)" + linesep).getBytes());\n fos.write(new String("Copyright 1997-2009 The CDK Development Team" + linesep).getBytes());\n fos.write(new String("License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)" + linesep).getBytes());\n fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n fos.write(new String("Source available at: http://sourceforge.net/scm/?type=git&group_id=20024" + linesep + linesep).getBytes());\n File[] files = new File(args[0]).listFiles(new JarFileFilter());\n for (int i = 0;\n i < files.length;\n i++) {\n if (new File(files[i].getPath() + ".meta").exists()) {\n Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + ".meta"));\n Iterator<String> itsect = metaprops.keySet().iterator();\n while (itsect.hasNext()) {\n String section = itsect.next();\n fos.write(new String(metaprops.get(section).get("Library") + " " + metaprops.get(section).get("Version") + " (" + metaprops.get(section).get("Homepage") + ")" + linesep).getBytes());\n fos.write(new String("Copyright " + metaprops.get(section).get("Copyright") + linesep).getBytes());\n fos.write(new String("License: " + metaprops.get(section).get("License") + " (" + metaprops.get(section).get("LicenseURL") + ")" + linesep).getBytes());\n-   fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n+   fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n fos.write(new String("Source available at: " + metaprops.get(section).get("SourceCode") + linesep + linesep).getBytes());\n }\n }\n if (new File(files[i].getPath() + ".extra").exists()) {\n fos.write(new String("The author says:" + linesep).getBytes());\n FileInputStream in = new FileInputStream(new File(files[i].getPath() + ".extra"));\n int len;\n byte[] buf = new byte[1024];\n while ((len = in.read(buf)) > 0) {\n fos.write(buf, 0, len);\n }\n }\n fos.write(linesep.getBytes());\n }\n fos.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-651|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n String linesep = System.getProperty("line.separator");\n FileOutputStream fos = new FileOutputStream(new File("lib-licenses.txt"));\n fos.write(new String("JCP contains the following libraries. Please read this for comments on copyright etc." + linesep + linesep).getBytes());\n fos.write(new String("Chemistry Development Kit, master version as of " + new Date().toString() + " (http://cdk.sf.net)" + linesep).getBytes());\n fos.write(new String("Copyright 1997-2009 The CDK Development Team" + linesep).getBytes());\n fos.write(new String("License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)" + linesep).getBytes());\n fos.write(new String("Download: https://sourceforge.net/projects/cdk/files/" + linesep).getBytes());\n fos.write(new String("Source available at: http://sourceforge.net/scm/?type=git&group_id=20024" + linesep + linesep).getBytes());\n File[] files = new File(args[0]).listFiles(new JarFileFilter());\n for (int i = 0;\n i < files.length;\n i++) {\n if (new File(files[i].getPath() + ".meta").exists()) {\n Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + ".meta"));\n Iterator<String> itsect = metaprops.keySet().iterator();\n while (itsect.hasNext()) {\n String section = itsect.next();\n fos.write(new String(metaprops.get(section).get("Library") + " " + metaprops.get(section).get("Version") + " (" + metaprops.get(section).get("Homepage") + ")" + linesep).getBytes());\n fos.write(new String("Copyright " + metaprops.get(section).get("Copyright") + linesep).getBytes());\n fos.write(new String("License: " + metaprops.get(section).get("License") + " (" + metaprops.get(section).get("LicenseURL") + ")" + linesep).getBytes());\n fos.write(new String("Download: " + metaprops.get(section).get("Download") + linesep).getBytes());\n fos.write(new String("Source available at: " + metaprops.get(section).get("SourceCode") + linesep + linesep).getBytes());\n }\n }\n if (new File(files[i].getPath() + ".extra").exists()) {\n fos.write(new String("The author says:" + linesep).getBytes());\n FileInputStream in = new FileInputStream(new File(files[i].getPath() + ".extra"));\n int len;\n byte[] buf = new byte[1024];\n while ((len = in.read(buf)) > 0) {\n fos.write(buf, 0, len);\n }\n }\n fos.write(linesep.getBytes());\n }\n fos.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n if (from.isDirectory()) {\n if (!to.exists()) {\n to.mkdir();\n }\n File[] children = from.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".") || children[i].getName().equals("..")) {\n continue;\n }\n if (children[i].isDirectory()) {\n File f = new File(to, children[i].getName());\n copyFile(children[i], f);\n }\n-   else {\n+   else {\n copyFile(children[i], to);\n }\n }\n }\n else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n if (to.isDirectory()) {\n to = new File(to, from.getName());\n }\n FileInputStream in = new FileInputStream(from);\n FileOutputStream out = new FileOutputStream(to);\n byte[] buf = new byte[32678];\n int read;\n while ((read = in.read(buf)) > -1) {\n out.write(buf, 0, read);\n }\n closeStream(in);\n closeStream(out);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-652|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n-   is.close();\n+   is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-652|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n-   }\n+   }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) {\n try {\n FileChannel inChannel = null, outChannel = null;\n try {\n out.getParentFile().mkdirs();\n inChannel = new FileInputStream(in).getChannel();\n outChannel = new FileOutputStream(out).getChannel();\n outChannel.transferFrom(inChannel, 0, inChannel.size());\n }\n-   finally {\n+   finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n catch (Exception e) {\n ObjectUtils.throwAsError(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-653|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n-   Dataset ds = DcmObjectFactory.getInstance().newDataset();\n+   Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n-   Dataset ds = DcmObjectFactory.getInstance().newDataset();\n+   Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-653|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n-   out.close();\n+   out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n-   int extractLineEvery = new Integer(args[1]).intValue();\n+   int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-654|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String senha = "";\n String email = request.getParameter("EmailLogin");\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(request.getParameter("SenhaLogin").getBytes(), 0, request.getParameter("SenhaLogin").length());\n senha = new BigInteger(1, messageDigest.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n-   String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n+   String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n if (request.getHeader("REFERER").indexOf("?") != -1) {\n redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "&msg=3";\n }\n if (usuario.getNome() != null) {\n HttpSession session = request.getSession();\n session.setAttribute("usuario", usuario);\n redirect = "index.jsp";\n }\n response.sendRedirect(redirect);\n }\n|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String senha = "";\n String email = request.getParameter("EmailLogin");\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(request.getParameter("SenhaLogin").getBytes(), 0, request.getParameter("SenhaLogin").length());\n senha = new BigInteger(1, messageDigest.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n if (request.getHeader("REFERER").indexOf("?") != -1) {\n redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "&msg=3";\n }\n if (usuario.getNome() != null) {\n HttpSession session = request.getSession();\n session.setAttribute("usuario", usuario);\n redirect = "index.jsp";\n }\n-   response.sendRedirect(redirect);\n+   response.sendRedirect(redirect);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-654|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-   String senha = "";\n+   String senha = "";\n String email = request.getParameter("EmailLogin");\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(request.getParameter("SenhaLogin").getBytes(), 0, request.getParameter("SenhaLogin").length());\n senha = new BigInteger(1, messageDigest.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n String redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "?&msg=3";\n if (request.getHeader("REFERER").indexOf("?") != -1) {\n redirect = request.getHeader("REFERER").replace("?msg=3", "").replace("&msg=3", "") + "&msg=3";\n }\n if (usuario.getNome() != null) {\n HttpSession session = request.getSession();\n session.setAttribute("usuario", usuario);\n redirect = "index.jsp";\n }\n response.sendRedirect(redirect);\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-655|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n-   byte[] digest = md5.digest();\n+   byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n-   byte[] digest = md5.digest();\n+   byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-655|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n-   runTimeEx.initCause(ex);\n+   runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|-  public static byte[] getSystemStateHash() {\n+  public static byte[] getSystemStateHash() {\n MessageDigest sha1;\n try {\n sha1 = MessageDigest.getInstance("SHA1");\n }\n catch (Exception e) {\n throw new Error("Error in RandomSeed, no sha1 hash");\n }\n sha1.update((byte) System.currentTimeMillis());\n sha1.update((byte) Runtime.getRuntime().totalMemory());\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update(stackDump(new Throwable()));\n try {\n Properties props = System.getProperties();\n Enumeration names = props.propertyNames();\n while (names.hasMoreElements()) {\n String name = (String) names.nextElement();\n sha1.update(name.getBytes());\n sha1.update(props.getProperty(name).getBytes());\n }\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n try {\n sha1.update(InetAddress.getLocalHost().toString().getBytes());\n }\n catch (Throwable t) {\n sha1.update(stackDump(t));\n }\n sha1.update((byte) System.currentTimeMillis());\n Runtime.getRuntime().gc();\n sha1.update((byte) Runtime.getRuntime().freeMemory());\n sha1.update((byte) System.currentTimeMillis());\n return sha1.digest();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-656|SpecialSeperatorForDevSet|private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n Document dom = null;\n try {\n DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n f.setNamespaceAware(false);\n f.setCoalescing(true);\n f.setIgnoringComments(true);\n f.setValidating(false);\n DocumentBuilder b = f.newDocumentBuilder();\n dom = b.parse(new InputSource(xmlIn));\n }\n catch (ParserConfigurationException err) {\n throw new IOException(err);\n }\n Element root = dom.getDocumentElement();\n if (root == null) throw new SAXException("Not root in document");\n Attr att = root.getAttributeNode("label");\n if (att == null) root.setAttribute("label", "Wikipedia");\n Menu menu = parseMenu(root);\n menu.id = "menuWikipedia";\n ZipOutputStream zout = new ZipOutputStream(out);\n String content = ResourceUtils.getContent(XUL4Wikipedia.class, "chrome.manifest");\n addEntry(zout, "chrome.manifest", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "install.rdf");\n addEntry(zout, "install.rdf", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "library.js");\n addDir(zout, "chrome/");\n addDir(zout, "chrome/content/");\n addDir(zout, "chrome/skin/");\n String signal = "/*INSERT_CMD_HERE*/";\n int n = content.indexOf(signal);\n if (n == -1) throw new RuntimeException("where is " + signal + " ??");\n ZipEntry entry = new ZipEntry("chrome/content/library.js");\n zout.putNextEntry(entry);\n PrintWriter pout = new PrintWriter(zout);\n pout.write(content.substring(0, n));\n menu.toJS(pout);\n pout.write(content.substring(n + signal.length()));\n pout.flush();\n zout.closeEntry();\n entry = new ZipEntry("chrome/content/menu.xul");\n zout.putNextEntry(entry);\n pout = new PrintWriter(zout);\n-   pout.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n+   pout.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n pout.println("<overlay id=\"xul4wikipedia\" xmlns=\"" + XUL.NS + "\">");\n pout.println("<script src=\"library.js\"/>");\n pout.println("<popup id=\"contentAreaContextMenu\">");\n pout.println("<menuseparator/>");\n menu.toXUL(pout);\n pout.println("</popup>");\n pout.println("</overlay>");\n pout.flush();\n zout.closeEntry();\n InputStream png = XUL4Wikipedia.class.getResourceAsStream("32px-Wikipedia-logo.png");\n if (png == null) throw new IOException("Cannot get icon");\n entry = new ZipEntry("chrome/skin/wikipedia.png");\n zout.putNextEntry(entry);\n IOUtils.copyTo(png, zout);\n zout.closeEntry();\n zout.finish();\n zout.flush();\n }\n|SpecialSeperatorForDevSet|private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n Document dom = null;\n try {\n DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n f.setNamespaceAware(false);\n f.setCoalescing(true);\n f.setIgnoringComments(true);\n f.setValidating(false);\n DocumentBuilder b = f.newDocumentBuilder();\n dom = b.parse(new InputSource(xmlIn));\n }\n catch (ParserConfigurationException err) {\n throw new IOException(err);\n }\n Element root = dom.getDocumentElement();\n if (root == null) throw new SAXException("Not root in document");\n Attr att = root.getAttributeNode("label");\n if (att == null) root.setAttribute("label", "Wikipedia");\n Menu menu = parseMenu(root);\n menu.id = "menuWikipedia";\n ZipOutputStream zout = new ZipOutputStream(out);\n String content = ResourceUtils.getContent(XUL4Wikipedia.class, "chrome.manifest");\n addEntry(zout, "chrome.manifest", content);\n-   content = ResourceUtils.getContent(XUL4Wikipedia.class, "install.rdf");\n+   content = ResourceUtils.getContent(XUL4Wikipedia.class, "install.rdf");\n addEntry(zout, "install.rdf", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "library.js");\n addDir(zout, "chrome/");\n addDir(zout, "chrome/content/");\n addDir(zout, "chrome/skin/");\n String signal = "/*INSERT_CMD_HERE*/";\n int n = content.indexOf(signal);\n if (n == -1) throw new RuntimeException("where is " + signal + " ??");\n ZipEntry entry = new ZipEntry("chrome/content/library.js");\n zout.putNextEntry(entry);\n PrintWriter pout = new PrintWriter(zout);\n pout.write(content.substring(0, n));\n menu.toJS(pout);\n pout.write(content.substring(n + signal.length()));\n pout.flush();\n zout.closeEntry();\n entry = new ZipEntry("chrome/content/menu.xul");\n zout.putNextEntry(entry);\n pout = new PrintWriter(zout);\n pout.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n pout.println("<overlay id=\"xul4wikipedia\" xmlns=\"" + XUL.NS + "\">");\n pout.println("<script src=\"library.js\"/>");\n pout.println("<popup id=\"contentAreaContextMenu\">");\n pout.println("<menuseparator/>");\n menu.toXUL(pout);\n pout.println("</popup>");\n pout.println("</overlay>");\n pout.flush();\n zout.closeEntry();\n InputStream png = XUL4Wikipedia.class.getResourceAsStream("32px-Wikipedia-logo.png");\n if (png == null) throw new IOException("Cannot get icon");\n entry = new ZipEntry("chrome/skin/wikipedia.png");\n zout.putNextEntry(entry);\n IOUtils.copyTo(png, zout);\n zout.closeEntry();\n zout.finish();\n zout.flush();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-656|SpecialSeperatorForDevSet|private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n Document dom = null;\n try {\n DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n f.setNamespaceAware(false);\n f.setCoalescing(true);\n f.setIgnoringComments(true);\n f.setValidating(false);\n DocumentBuilder b = f.newDocumentBuilder();\n dom = b.parse(new InputSource(xmlIn));\n }\n catch (ParserConfigurationException err) {\n throw new IOException(err);\n }\n Element root = dom.getDocumentElement();\n if (root == null) throw new SAXException("Not root in document");\n Attr att = root.getAttributeNode("label");\n if (att == null) root.setAttribute("label", "Wikipedia");\n Menu menu = parseMenu(root);\n menu.id = "menuWikipedia";\n ZipOutputStream zout = new ZipOutputStream(out);\n String content = ResourceUtils.getContent(XUL4Wikipedia.class, "chrome.manifest");\n addEntry(zout, "chrome.manifest", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "install.rdf");\n addEntry(zout, "install.rdf", content);\n content = ResourceUtils.getContent(XUL4Wikipedia.class, "library.js");\n addDir(zout, "chrome/");\n addDir(zout, "chrome/content/");\n addDir(zout, "chrome/skin/");\n String signal = "/*INSERT_CMD_HERE*/";\n int n = content.indexOf(signal);\n if (n == -1) throw new RuntimeException("where is " + signal + " ??");\n ZipEntry entry = new ZipEntry("chrome/content/library.js");\n zout.putNextEntry(entry);\n PrintWriter pout = new PrintWriter(zout);\n pout.write(content.substring(0, n));\n-   menu.toJS(pout);\n+   menu.toJS(pout);\n pout.write(content.substring(n + signal.length()));\n pout.flush();\n zout.closeEntry();\n entry = new ZipEntry("chrome/content/menu.xul");\n zout.putNextEntry(entry);\n pout = new PrintWriter(zout);\n pout.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");\n pout.println("<overlay id=\"xul4wikipedia\" xmlns=\"" + XUL.NS + "\">");\n pout.println("<script src=\"library.js\"/>");\n pout.println("<popup id=\"contentAreaContextMenu\">");\n pout.println("<menuseparator/>");\n menu.toXUL(pout);\n pout.println("</popup>");\n pout.println("</overlay>");\n pout.flush();\n zout.closeEntry();\n InputStream png = XUL4Wikipedia.class.getResourceAsStream("32px-Wikipedia-logo.png");\n if (png == null) throw new IOException("Cannot get icon");\n entry = new ZipEntry("chrome/skin/wikipedia.png");\n zout.putNextEntry(entry);\n IOUtils.copyTo(png, zout);\n zout.closeEntry();\n zout.finish();\n zout.flush();\n }\n|SpecialSeperatorForDevSet|private void forBundle(BundleManipulator manip) {\n ByteArrayOutputStream bout = null;\n try {\n bout = new ByteArrayOutputStream();\n ZipOutputStream zout = new ZipOutputStream(bout);\n Bundle bundle = getBundle();\n Enumeration<URL> files = bundle.findEntries("/", "*.vm", false);\n if (files != null) {\n while (files.hasMoreElements()) {\n URL url = files.nextElement();\n String name = url.getFile();\n if (name.startsWith("/")) {\n name = name.substring(1);\n }\n if (manip.includeEntry(name)) {\n zout.putNextEntry(new ZipEntry(name));\n IOUtils.copy(url.openStream(), zout);\n-   }\n+   }\n }\n }\n manip.finish(bundle, zout);\n Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream());\n zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));\n mf.write(zout);\n zout.close();\n File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar");\n FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n }\n else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n }\n pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n tmpFile.delete();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n IOUtils.closeQuietly(bout);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-657|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n-   StreamUtil.tryCloseStream(targetOutputTar);\n+   StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n-   try {\n+   try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-657|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n-   TarEntry tarAdd = new TarEntry(file);\n+   TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|public void copyLogic() {\n if (getState() == States.Idle) {\n setState(States.Synchronizing);\n try {\n FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty("binPath") + name + ".class")).getChannel();\n FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty("agentFileLocation") + name + ".class")).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n setState(States.Idle);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-658|SpecialSeperatorForDevSet|public static void copy(File srcPath, File dstPath) throws IOException {\n if (srcPath.isDirectory()) {\n if (!dstPath.exists()) {\n boolean result = dstPath.mkdir();\n if (!result) throw new IOException("Unable to create directoy: " + dstPath);\n }\n String[] files = srcPath.list();\n for (String file : files) {\n copy(new File(srcPath, file), new File(dstPath, file));\n }\n }\n else {\n if (srcPath.exists()) {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(srcPath).getChannel();\n out = new FileOutputStream(dstPath).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n-   finally {\n+   finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File srcPath, File dstPath) throws IOException {\n if (srcPath.isDirectory()) {\n if (!dstPath.exists()) {\n boolean result = dstPath.mkdir();\n if (!result) throw new IOException("Unable to create directoy: " + dstPath);\n }\n String[] files = srcPath.list();\n for (String file : files) {\n-   copy(new File(srcPath, file), new File(dstPath, file));\n+   copy(new File(srcPath, file), new File(dstPath, file));\n }\n }\n else {\n if (srcPath.exists()) {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(srcPath).getChannel();\n out = new FileOutputStream(dstPath).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-658|SpecialSeperatorForDevSet|public static void copy(File srcPath, File dstPath) throws IOException {\n if (srcPath.isDirectory()) {\n if (!dstPath.exists()) {\n boolean result = dstPath.mkdir();\n if (!result) throw new IOException("Unable to create directoy: " + dstPath);\n }\n String[] files = srcPath.list();\n for (String file : files) {\n copy(new File(srcPath, file), new File(dstPath, file));\n }\n }\n else {\n if (srcPath.exists()) {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(srcPath).getChannel();\n out = new FileOutputStream(dstPath).getChannel();\n-   long size = in.size();\n+   long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n-   }\n+   }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-659|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n-   }\n+   }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-659|SpecialSeperatorForDevSet|private void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM overrides").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n LOG.fatal(SQL_ERROR, e);\n throw new IOException("Error on initial data store read", e);\n }\n String[] qry = {\n "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n-   conn.commit();\n+   conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n }\n LOG.fatal(SQL_ERROR, e2);\n throw new IOException("Error initializing data store", e2);\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n LOG.fatal(SQL_ERROR, e4);\n throw new IOException("Unable to cleanup data store resources", e4);\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n LOG.fatal(SQL_ERROR, e3);\n throw new IOException("Unable to reset data store auto commit", e3);\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\n try {\n con.setAutoCommit(false);\n stmt = con.createStatement();\n Collection boxes = diagramModel.getBoxes();\n BoxModel box;\n String sqlQuery;\n if (foreignKeys) {\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n if (!box.isAbstractDef()) {\n dropForeignKeys(box);\n }\n }\n }\n int counter = 0;\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n-   if (!box.isAbstractDef()) {\n+   if (!box.isAbstractDef()) {\n sqlQuery = sqlDropTable(box);\n System.out.println(sqlQuery);\n try {\n stmt.executeUpdate(sqlQuery);\n counter++;\n }\n catch (SQLException e) {\n String tableName = box.getName();\n System.out.println("// Problem while dropping table " + tableName + " : " + e.getMessage());\n String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName;\n this.informUser(msg);\n }\n }\n }\n con.commit();\n if (counter > 0) {\n String msg = Para.getPara().getText("schemaDropped") + " -- " + counter + " " + Para.getPara().getText("tables");\n this.informUser(msg);\n }\n else {\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n }\n catch (SQLException e) {\n System.out.println(e.getMessage() + " // Problem with the JDBC schema generation! ");\n try {\n con.rollback();\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection rollback! ");\n }\n }\n finally {\n try {\n con.setAutoCommit(true);\n stmt.close();\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection disconnect! ");\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-660|SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n-   byte[] hash = digest.digest();\n+   byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-660|SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n-   digest.update(user.getPassword().getBytes("UTF-8"));\n+   digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-661|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n-  \n+  |SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n-   try {\n+   try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-661|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n-   IOUtils.closeQuietly(bos);\n+   IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|protected boolean copyFile(File sourceFile, File destinationFile) {\n try {\n-   FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n+   FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-662|SpecialSeperatorForDevSet|private static String genRandomGUID(boolean secure) {\n String valueBeforeMD5 = "";\n String valueAfterMD5 = "";\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n return valueBeforeMD5;\n }\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n String strTemp = "";\n for (int i = 0;\n-   i < array.length;\n+   i < array.length;\n i++) {\n strTemp = (Integer.toHexString(array[i] & 0XFF));\n if (strTemp.length() == 1) {\n valueAfterMD5 = valueAfterMD5 + "0" + strTemp;\n }\n else {\n valueAfterMD5 = valueAfterMD5 + strTemp;\n }\n }\n return valueAfterMD5.toUpperCase();\n }\n|SpecialSeperatorForDevSet|private static String genRandomGUID(boolean secure) {\n String valueBeforeMD5 = "";\n String valueAfterMD5 = "";\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n return valueBeforeMD5;\n }\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n String strTemp = "";\n for (int i = 0;\n i < array.length;\n i++) {\n strTemp = (Integer.toHexString(array[i] & 0XFF));\n if (strTemp.length() == 1) {\n valueAfterMD5 = valueAfterMD5 + "0" + strTemp;\n }\n else {\n valueAfterMD5 = valueAfterMD5 + strTemp;\n }\n }\n return valueAfterMD5.toUpperCase();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-662|SpecialSeperatorForDevSet|private static String genRandomGUID(boolean secure) {\n String valueBeforeMD5 = "";\n String valueAfterMD5 = "";\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n return valueBeforeMD5;\n }\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n-   sbValueBeforeMD5.append(":");\n+   sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n String strTemp = "";\n for (int i = 0;\n i < array.length;\n i++) {\n strTemp = (Integer.toHexString(array[i] & 0XFF));\n if (strTemp.length() == 1) {\n valueAfterMD5 = valueAfterMD5 + "0" + strTemp;\n }\n else {\n valueAfterMD5 = valueAfterMD5 + strTemp;\n }\n }\n return valueAfterMD5.toUpperCase();\n }\n|SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n-   }\n+   }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-663|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n-   }\n+   }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n-   }\n+   }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-663|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n-   if (m_initialOutBuffer != null) {\n+   if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|public static void copy(File in, File out) throws IOException {\n if (in.exists() && in != null && out != null) {\n if (!out.exists()) {\n if (in.isDirectory()) {\n out.mkdirs();\n }\n else {\n out.createNewFile();\n }\n }\n String source = in.isDirectory() ? "directory" : "file";\n String target = out.isDirectory() ? "directory" : "file";\n if (!source.equals(target)) {\n throw new IOException("Can't duplicate " + source + " as " + target);\n }\n else {\n if (source.equals("directory")) {\n File[] files = in.listFiles();\n for (File file : files) {\n copy(file, new File(out, file.getName()));\n }\n-   }\n+   }\n else {\n FileChannel inCh = new FileInputStream(in).getChannel();\n FileChannel outCh = new FileOutputStream(out).getChannel();\n inCh.transferTo(0, inCh.size(), outCh);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-664|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n-   boolean first = true;\n+   boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n-   reader.close();\n+   reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-664|SpecialSeperatorForDevSet|@SuppressWarnings({\n "ResultOfMethodCallIgnored" }\n) public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n File dir = File.createTempFile("javascript", "" + System.currentTimeMillis());\n StringBuilder name = new StringBuilder();\n try {\n if (dir.delete() && dir.mkdirs()) {\n File minDir = new File(dir, "min");\n minDir.mkdir();\n File combineFile = new File(minDir, "script.js");\n File concatFile = new File(minDir, "concat.js");\n Writer combineWriter = new FileWriter(combineFile);\n Writer concatWriter = new FileWriter(concatFile);\n final List<Boolean> fails = new LinkedList<Boolean>();\n boolean first = true;\n for (Node link : linkJs) {\n String path = ((Element) link).getAttribute("src");\n URL url = new URL(buildUrl(base, path));\n InputStream inputStream = url.openStream();\n File jsFile = new File(dir, fileName(url));\n FileOutputStream outputStream = new FileOutputStream(jsFile);\n IOUtils.copy(inputStream, outputStream);\n outputStream.close();\n inputStream.close();\n if (!first) {\n combineWriter.write("\n;\n\n");\n concatWriter.write("\n;\n\n");\n }\n else {\n first = false;\n }\n if (Configuration.jsMinification()) {\n Reader reader = new FileReader(jsFile);\n try {\n JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n @Override public void warning(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public void error(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n }\n @Override public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n fails.add(true);\n return null;\n }\n }\n);\n jsCompressor.compress(combineWriter, 0, false, false, true, true);\n }\n catch (Exception e) {\n fails.add(true);\n }\n reader.close();\n }\n Reader reader = new FileReader(jsFile);\n IOUtils.copy(reader, concatWriter);\n reader.close();\n String fileName = jsFile.getName();\n int pos = fileName.lastIndexOf('.');\n if (pos >= 0) {\n fileName = fileName.substring(0, pos);\n }\n name.append(fileName).append(",");\n }\n combineWriter.close();\n concatWriter.close();\n FileReader reader;\n if (fails.size() == 0 && Configuration.jsMinification()) {\n reader = new FileReader(combineFile);\n }\n else {\n reader = new FileReader(concatFile);\n }\n name.append(hashCode(IOUtils.toString(reader))).append(".js");\n reader.close();\n File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n if (!targetFile.exists()) {\n targetFile.getParentFile().mkdirs();\n if (fails.size() == 0 && Configuration.jsMinification()) {\n FileUtils.copyFile(combineFile, targetFile);\n }\n else {\n FileUtils.copyFile(concatFile, targetFile);\n }\n newFiles.add(targetFile);\n logger.info("Combined several js files into the single " + targetFile + " [size=" + targetFile.length() + "].");\n }\n }\n }\n finally {\n FileUtils.deleteQuietly(dir);\n }\n if (name.length() != 0) {\n Element element = (Element) linkJs.get(0);\n element.setAttribute("src", Configuration.getJsUrlPrefix() + name.toString());\n return element;\n }\n else {\n return null;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n-   throw wce;\n+   throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-665|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n-   final String reference = "test";\n+   final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-665|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n-   final StringWriter destination1 = new StringWriter();\n+   final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|public int run(String[] args) throws Exception {\n if (args.length < 2) {\n System.err.println("Download dir local");\n return 1;\n }\n OutputStream out = new FileOutputStream(args[1]);\n Path srcDir = new Path(args[0]);\n Configuration conf = new Configuration();\n FileSystem srcFS = FileSystem.get(conf);\n if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n System.err.println(args[0] + " is not a directory.");\n return 1;\n }\n try {\n FileStatus contents[] = srcFS.listStatus(srcDir);\n for (int i = 0;\n i < contents.length;\n i++) {\n if (contents[i].isFile()) {\n System.err.println(contents[i].getPath());\n InputStream in = srcFS.open(contents[i].getPath());\n try {\n IOUtils.copyBytes(in, out, conf, false);\n-   }\n+   }\n finally {\n in.close();\n }\n }\n }\n }\n finally {\n out.close();\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-666|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n-   assertEquals("stuff;\n+   assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n-   wrtout.close();\n+   wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-666|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n-   File tmpFile = File.createTempFile("testFile", "txt");\n+   File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public static int save(byte[] bytes, File outputFile) throws IOException {\n InputStream in = new ByteArrayInputStream(bytes);\n outputFile.getParentFile().mkdirs();\n OutputStream out = new FileOutputStream(outputFile);\n try {\n return IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n try {\n out.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n }\n try {\n in.close();\n }\n catch (IOException ioe) {\n ioe.getMessage();\n-   }\n+   }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-667|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n-   log.warn("SQL exception during rollback, reason", sqle);\n+   log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n-   try {\n+   try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-667|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n-   }\n+   }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n-   catch (SQLException ex) {\n+   catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-668|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n-   int grlen = pxlen + 8;\n+   int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n-   InputStream in = new BufferedInputStream(new FileInputStream(src));\n+   InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-668|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n-   b3 = in.read();\n+   b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n try {\n CmdLineParser cmdLineParser = new CmdLineParser();\n Option formatOption = cmdLineParser.addStringOption('f', "format");\n Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset");\n Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset");\n cmdLineParser.parse(args);\n String format = (String) cmdLineParser.getOptionValue(formatOption);\n String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\n if (outputEncoding == null || outputEncoding.trim().equals("")) {\n outputEncoding = "utf-8";\n System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.");\n }\n String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\n if (inputEncoding == null || outputEncoding.trim().equals("")) {\n inputEncoding = "utf-8";\n System.out.println("Defaulting to input charset utf-8 as argument -i is missing or not valid.");\n }\n String[] remainingArgs = cmdLineParser.getRemainingArgs();\n if (remainingArgs.length != 2) {\n printUsage("Input and output file are not specified correctly. ");\n }\n File inputFile = new File(remainingArgs[0]);\n if (!inputFile.exists()) {\n printUsage("Input file " + remainingArgs[0] + " does not exist. ");\n }\n-   if (format == null || format.trim().equals("")) {\n+   if (format == null || format.trim().equals("")) {\n format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n }\n File outputFile = new File(remainingArgs[1]);\n if (!outputFile.exists()) {\n outputFile.createNewFile();\n }\n System.out.println("format detected: " + format);\n if ("html".equals(format)) {\n Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\n OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\n char[] buffer = new char[1024];\n int read;\n do {\n read = reader.read(buffer);\n if (read > 0) {\n out.write(buffer, 0, read);\n }\n }\n while (read != -1);\n out.flush();\n out.close();\n }\n else {\n printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed");\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n printUsage(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-669|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n-   if (f.exists()) {\n+   if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-669|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n-   in = new StraightStreamReader(new FileInputStream(f));\n+   in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToWriter_nullIn() throws Exception {\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n try {\n IOUtils.copy((Reader) null, writer);\n fail();\n }\n catch (NullPointerException ex) {\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-670|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n-   BufferedReader reader = new BufferedReader(isr);\n+   BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n }\n-   catch (SecurityException ex) {\n+   catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-670|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n-   }\n+   }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws IOException {\n PostParameter a1 = new PostParameter("v", Utils.encode("1.0"));\n PostParameter a2 = new PostParameter("api_key", Utils.encode(RenRenConstant.apiKey));\n PostParameter a3 = new PostParameter("method", Utils.encode("feed.publishTemplatizedAction"));\n PostParameter a4 = new PostParameter("call_id", System.nanoTime());\n PostParameter a5 = new PostParameter("session_key", Utils.encode("5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914"));\n PostParameter a8 = new PostParameter("format", Utils.encode("JSON"));\n PostParameter a9 = new PostParameter("template_id", Utils.encode("1"));\n PostParameter a10 = new PostParameter("title_data", Utils.encode("\"conteng\":\"xkt\""));\n PostParameter a11 = new PostParameter("body_data", Utils.encode("\"conteng\":\"xkt\""));\n RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\n-   ps.addParameter(a1);\n+   ps.addParameter(a1);\n ps.addParameter(a2);\n ps.addParameter(a3);\n ps.addParameter(a4);\n ps.addParameter(a5);\n ps.addParameter(a8);\n ps.addParameter(a9);\n ps.addParameter(a10);\n ps.addParameter(a11);\n System.out.println(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n URL url = new URL(RenRenConstant.apiUrl + "?" + ps.generateUrl());\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n request.setDoOutput(true);\n request.setRequestMethod("POST");\n System.out.println("Sending request...");\n request.connect();\n System.out.println("Response: " + request.getResponseCode() + " " + request.getResponseMessage());\n BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n String b = null;\n while ((b = reader.readLine()) != null) {\n System.out.println(b);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-671|SpecialSeperatorForDevSet|-  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n+  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-671|SpecialSeperatorForDevSet|-  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n+  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|-  public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-672|SpecialSeperatorForDevSet|public static String getMD5(String _pwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(_pwd.getBytes());\n return toHexadecimal(new String(md.digest()).getBytes());\n }\n catch (NoSuchAlgorithmException x) {\n-   x.printStackTrace();\n+   x.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|public static String getMD5(String _pwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(_pwd.getBytes());\n return toHexadecimal(new String(md.digest()).getBytes());\n-   }\n+   }\n catch (NoSuchAlgorithmException x) {\n x.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-672|SpecialSeperatorForDevSet|public static String getMD5(String _pwd) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(_pwd.getBytes());\n return toHexadecimal(new String(md.digest()).getBytes());\n }\n-   catch (NoSuchAlgorithmException x) {\n+   catch (NoSuchAlgorithmException x) {\n x.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|private static String encrypt(String algorithm, String password, Long digestSeed) {\n try {\n MessageDigest digest = MessageDigest.getInstance(algorithm);\n digest.reset();\n digest.update(password.getBytes("UTF-8"));\n digest.update(digestSeed.toString().getBytes("UTF-8"));\n byte[] messageDigest = digest.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\n hexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException(e);\n }\n catch (UnsupportedEncodingException e) {\n throw new RuntimeException(e);\n }\n catch (NullPointerException e) {\n return new StringBuffer().toString();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-673|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n final byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n-   out.write(buffer, 0, read);\n+   out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n out.close();\n }\n catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n final byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n-   out.close();\n+   out.close();\n }\n catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-673|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n-   final byte[] buffer = new byte[65536];\n+   final byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n out.close();\n }\n catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n-   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n+   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-674|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n-   }\n+   }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n-   }\n+   }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-674|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n-   }\n+   }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n-   this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n+   this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-675|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n-   try {\n+   try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n-   catch (final IOException e) {\n+   catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-675|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n-   ZipOutputStream zos = null;\n+   ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n-   ZipInputStream zipin = null;\n+   ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-676|SpecialSeperatorForDevSet|int doOne(int bid, int tid, int aid, int delta) {\n int aBalance = 0;\n if (Conn == null) {\n bench.incrementFailedTransactionCount();\n return 0;\n }\n try {\n if (Benchmark.prepared_stmt) {\n pstmt1.setInt(1, delta);\n pstmt1.setInt(2, aid);\n pstmt1.executeUpdate();\n pstmt1.clearWarnings();\n pstmt2.setInt(1, aid);\n ResultSet RS = pstmt2.executeQuery();\n pstmt2.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n pstmt3.setInt(1, delta);\n pstmt3.setInt(2, tid);\n pstmt3.executeUpdate();\n pstmt3.clearWarnings();\n pstmt4.setInt(1, delta);\n pstmt4.setInt(2, bid);\n pstmt4.executeUpdate();\n pstmt4.clearWarnings();\n pstmt5.setInt(1, tid);\n pstmt5.setInt(2, bid);\n pstmt5.setInt(3, aid);\n pstmt5.setInt(4, delta);\n pstmt5.executeUpdate();\n pstmt5.clearWarnings();\n }\n else {\n Statement Stmt = Conn.createStatement();\n String Query = "UPDATE accounts";\n Query += " SET Abalance = Abalance + " + delta;\n Query += " WHERE Aid = " + aid;\n int res = Stmt.executeUpdate(Query);\n-   Stmt.clearWarnings();\n+   Stmt.clearWarnings();\n Query = "SELECT Abalance";\n Query += " FROM accounts";\n Query += " WHERE Aid = " + aid;\n ResultSet RS = Stmt.executeQuery(Query);\n Stmt.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n Query = "UPDATE tellers";\n Query += " SET Tbalance = Tbalance + " + delta;\n Query += " WHERE Tid = " + tid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "UPDATE branches";\n Query += " SET Bbalance = Bbalance + " + delta;\n Query += " WHERE Bid = " + bid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "INSERT INTO history(Tid, Bid, Aid, delta)";\n Query += " VALUES (";\n Query += tid + ",";\n Query += bid + ",";\n Query += aid + ",";\n Query += delta + ")";\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Stmt.close();\n }\n if (Benchmark.transactions) {\n Conn.commit();\n }\n return aBalance;\n }\n catch (java.lang.Exception e) {\n if (Benchmark.verbose) {\n System.out.println("Transaction failed: " + e.getMessage());\n e.printStackTrace();\n }\n bench.incrementFailedTransactionCount();\n if (Benchmark.transactions) {\n try {\n Conn.rollback();\n }\n catch (SQLException e1) {\n }\n }\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|int doOne(int bid, int tid, int aid, int delta) {\n int aBalance = 0;\n if (Conn == null) {\n bench.incrementFailedTransactionCount();\n return 0;\n }\n try {\n if (Benchmark.prepared_stmt) {\n pstmt1.setInt(1, delta);\n pstmt1.setInt(2, aid);\n pstmt1.executeUpdate();\n pstmt1.clearWarnings();\n pstmt2.setInt(1, aid);\n ResultSet RS = pstmt2.executeQuery();\n pstmt2.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n pstmt3.setInt(1, delta);\n pstmt3.setInt(2, tid);\n pstmt3.executeUpdate();\n pstmt3.clearWarnings();\n pstmt4.setInt(1, delta);\n pstmt4.setInt(2, bid);\n pstmt4.executeUpdate();\n pstmt4.clearWarnings();\n pstmt5.setInt(1, tid);\n pstmt5.setInt(2, bid);\n pstmt5.setInt(3, aid);\n pstmt5.setInt(4, delta);\n pstmt5.executeUpdate();\n pstmt5.clearWarnings();\n }\n else {\n Statement Stmt = Conn.createStatement();\n String Query = "UPDATE accounts";\n Query += " SET Abalance = Abalance + " + delta;\n Query += " WHERE Aid = " + aid;\n int res = Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "SELECT Abalance";\n Query += " FROM accounts";\n Query += " WHERE Aid = " + aid;\n ResultSet RS = Stmt.executeQuery(Query);\n Stmt.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n Query = "UPDATE tellers";\n Query += " SET Tbalance = Tbalance + " + delta;\n Query += " WHERE Tid = " + tid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "UPDATE branches";\n Query += " SET Bbalance = Bbalance + " + delta;\n Query += " WHERE Bid = " + bid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "INSERT INTO history(Tid, Bid, Aid, delta)";\n Query += " VALUES (";\n Query += tid + ",";\n Query += bid + ",";\n Query += aid + ",";\n Query += delta + ")";\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Stmt.close();\n }\n if (Benchmark.transactions) {\n Conn.commit();\n }\n return aBalance;\n }\n catch (java.lang.Exception e) {\n if (Benchmark.verbose) {\n System.out.println("Transaction failed: " + e.getMessage());\n e.printStackTrace();\n }\n bench.incrementFailedTransactionCount();\n if (Benchmark.transactions) {\n try {\n Conn.rollback();\n }\n catch (SQLException e1) {\n-   }\n+   }\n }\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-676|SpecialSeperatorForDevSet|int doOne(int bid, int tid, int aid, int delta) {\n int aBalance = 0;\n if (Conn == null) {\n bench.incrementFailedTransactionCount();\n return 0;\n }\n try {\n if (Benchmark.prepared_stmt) {\n pstmt1.setInt(1, delta);\n pstmt1.setInt(2, aid);\n pstmt1.executeUpdate();\n pstmt1.clearWarnings();\n pstmt2.setInt(1, aid);\n-   ResultSet RS = pstmt2.executeQuery();\n+   ResultSet RS = pstmt2.executeQuery();\n pstmt2.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n pstmt3.setInt(1, delta);\n pstmt3.setInt(2, tid);\n pstmt3.executeUpdate();\n pstmt3.clearWarnings();\n pstmt4.setInt(1, delta);\n pstmt4.setInt(2, bid);\n pstmt4.executeUpdate();\n pstmt4.clearWarnings();\n pstmt5.setInt(1, tid);\n pstmt5.setInt(2, bid);\n pstmt5.setInt(3, aid);\n pstmt5.setInt(4, delta);\n pstmt5.executeUpdate();\n pstmt5.clearWarnings();\n }\n else {\n Statement Stmt = Conn.createStatement();\n String Query = "UPDATE accounts";\n Query += " SET Abalance = Abalance + " + delta;\n Query += " WHERE Aid = " + aid;\n int res = Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "SELECT Abalance";\n Query += " FROM accounts";\n Query += " WHERE Aid = " + aid;\n ResultSet RS = Stmt.executeQuery(Query);\n Stmt.clearWarnings();\n while (RS.next()) {\n aBalance = RS.getInt(1);\n }\n Query = "UPDATE tellers";\n Query += " SET Tbalance = Tbalance + " + delta;\n Query += " WHERE Tid = " + tid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "UPDATE branches";\n Query += " SET Bbalance = Bbalance + " + delta;\n Query += " WHERE Bid = " + bid;\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Query = "INSERT INTO history(Tid, Bid, Aid, delta)";\n Query += " VALUES (";\n Query += tid + ",";\n Query += bid + ",";\n Query += aid + ",";\n Query += delta + ")";\n Stmt.executeUpdate(Query);\n Stmt.clearWarnings();\n Stmt.close();\n }\n if (Benchmark.transactions) {\n Conn.commit();\n }\n return aBalance;\n }\n catch (java.lang.Exception e) {\n if (Benchmark.verbose) {\n System.out.println("Transaction failed: " + e.getMessage());\n e.printStackTrace();\n }\n bench.incrementFailedTransactionCount();\n if (Benchmark.transactions) {\n try {\n Conn.rollback();\n }\n catch (SQLException e1) {\n }\n }\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|@Override public boolean insert(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {\n filasInsert = 0;\n if (!consulta.contains(";\n")) {\n this.tipoConsulta = new Scanner(consulta);\n if (this.tipoConsulta.hasNext()) {\n execConsulta = this.tipoConsulta.next();\n if (execConsulta.equalsIgnoreCase("insert")) {\n Connection conexion = cx;\n Statement st = null;\n try {\n conexion.setAutoCommit(autocommit);\n if (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {\n conexion.setTransactionIsolation(transactionIsolation);\n }\n else {\n throw new IllegalArgumentException("Valor invalido sobre TransactionIsolation,\n TRANSACTION_NONE no es soportado por MySQL");\n }\n st = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);\n conexion.setReadOnly(false);\n filasInsert = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);\n if (filasInsert > -1) {\n if (autocommit == false) {\n conexion.commit();\n }\n return true;\n }\n else {\n return false;\n }\n }\n catch (MySQLIntegrityConstraintViolationException e) {\n System.out.println("Posible duplicacion de DATOS");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n catch (MySQLNonTransientConnectionException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n-   }\n+   }\n e.printStackTrace();\n return false;\n }\n catch (MySQLDataException e) {\n System.out.println("Datos incorrectos");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (MySQLSyntaxErrorException e) {\n System.out.println("Error en la sintaxis de la Consulta en MySQL");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (SQLException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n finally {\n try {\n if (st != null) {\n if (!st.isClosed()) {\n st.close();\n }\n }\n if (!conexion.isClosed()) {\n conexion.close();\n }\n }\n catch (NullPointerException ne) {\n ne.printStackTrace();\n }\n catch (SQLException e) {\n e.printStackTrace();\n }\n }\n }\n else {\n throw new IllegalArgumentException("No es una instruccion Insert");\n }\n }\n else {\n try {\n throw new JMySQLException("Error Grave , notifique al departamento de Soporte Tecnico \n" + email);\n }\n catch (JMySQLException ex) {\n Logger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);\n return false;\n }\n }\n }\n else {\n throw new IllegalArgumentException("No estan permitidas las MultiConsultas en este metodo");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-677|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n-   dcmParser.setDcmHandler(ds.getDcmHandler());\n+   dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   System.out.println("reading " + inFile + "...");\n+   System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-677|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   pdWriter.writePixelData();\n+   pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-678|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n-   hash = (new BASE64Encoder()).encode(raw);\n+   hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n-   String hash = null;\n+   String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-678|SpecialSeperatorForDevSet|public synchronized String encrypt(String plainText) {\n String hash = null;\n try {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n throw new NoSuchAlgorithmException();\n }\n try {\n if (plainText != null) md.update(plainText.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new UnsupportedEncodingException();\n }\n byte raw[] = md.digest();\n hash = (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n MessageLog.writeErrorMessage(e, this);\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n MessageLog.writeErrorMessage(e, this);\n }\n return Util.stripChars(hash);\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n-   valueBeforeMD5 = sbValueBeforeMD5.toString();\n+   valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-679|SpecialSeperatorForDevSet|private void doFinishLoadAttachment(long attachmentId) {\n if (attachmentId != mLoadAttachmentId) {\n return;\n }\n Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n if (mLoadAttachmentSave) {\n try {\n File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n InputStream in = getContentResolver().openInputStream(contentUri);\n OutputStream out = new FileOutputStream(file);\n IOUtils.copy(in, out);\n out.flush();\n out.close();\n in.close();\n-   Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n+   Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n new MediaScannerNotifier(this, file, mHandler);\n }\n catch (IOException ioe) {\n Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n }\n }\n else {\n try {\n Intent intent = new Intent(Intent.ACTION_VIEW);\n intent.setData(contentUri);\n intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n startActivity(intent);\n }\n catch (ActivityNotFoundException e) {\n mHandler.attachmentViewError();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void doFinishLoadAttachment(long attachmentId) {\n if (attachmentId != mLoadAttachmentId) {\n return;\n }\n Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n if (mLoadAttachmentSave) {\n try {\n File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n InputStream in = getContentResolver().openInputStream(contentUri);\n OutputStream out = new FileOutputStream(file);\n IOUtils.copy(in, out);\n-   out.flush();\n+   out.flush();\n out.close();\n in.close();\n Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n new MediaScannerNotifier(this, file, mHandler);\n }\n catch (IOException ioe) {\n Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n }\n }\n else {\n try {\n Intent intent = new Intent(Intent.ACTION_VIEW);\n intent.setData(contentUri);\n intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n startActivity(intent);\n }\n catch (ActivityNotFoundException e) {\n mHandler.attachmentViewError();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-679|SpecialSeperatorForDevSet|private void doFinishLoadAttachment(long attachmentId) {\n if (attachmentId != mLoadAttachmentId) {\n return;\n }\n Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n if (mLoadAttachmentSave) {\n try {\n File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n InputStream in = getContentResolver().openInputStream(contentUri);\n OutputStream out = new FileOutputStream(file);\n IOUtils.copy(in, out);\n out.flush();\n out.close();\n in.close();\n Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n new MediaScannerNotifier(this, file, mHandler);\n }\n catch (IOException ioe) {\n Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n }\n }\n else {\n try {\n Intent intent = new Intent(Intent.ACTION_VIEW);\n intent.setData(contentUri);\n intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n startActivity(intent);\n-   }\n+   }\n catch (ActivityNotFoundException e) {\n mHandler.attachmentViewError();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n-   out.close();\n+   out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-680|SpecialSeperatorForDevSet|private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n File f = new File(path);\n String entryName = base + f.getName();\n FileInputStream goIn = new FileInputStream(f);\n TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n taro.putArchiveEntry(tarEntry);\n if (f.isFile()) {\n IOUtils.copy(goIn, taro);\n taro.closeArchiveEntry();\n }\n else {\n taro.closeArchiveEntry();\n-   File[] children = f.listFiles();\n+   File[] children = f.listFiles();\n if (children != null) {\n for (File child : children) {\n addFileToTarGz(taro, child.getAbsolutePath(), entryName + "/");\n }\n }\n }\n taro.close();\n goIn.close();\n }\n|SpecialSeperatorForDevSet|private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n File f = new File(path);\n String entryName = base + f.getName();\n-   FileInputStream goIn = new FileInputStream(f);\n+   FileInputStream goIn = new FileInputStream(f);\n TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n taro.putArchiveEntry(tarEntry);\n if (f.isFile()) {\n IOUtils.copy(goIn, taro);\n taro.closeArchiveEntry();\n }\n else {\n taro.closeArchiveEntry();\n File[] children = f.listFiles();\n if (children != null) {\n for (File child : children) {\n addFileToTarGz(taro, child.getAbsolutePath(), entryName + "/");\n }\n }\n }\n taro.close();\n goIn.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-680|SpecialSeperatorForDevSet|private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n File f = new File(path);\n String entryName = base + f.getName();\n FileInputStream goIn = new FileInputStream(f);\n TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n taro.putArchiveEntry(tarEntry);\n if (f.isFile()) {\n IOUtils.copy(goIn, taro);\n taro.closeArchiveEntry();\n }\n else {\n taro.closeArchiveEntry();\n File[] children = f.listFiles();\n if (children != null) {\n for (File child : children) {\n addFileToTarGz(taro, child.getAbsolutePath(), entryName + "/");\n }\n }\n }\n taro.close();\n-   goIn.close();\n+   goIn.close();\n }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n-   }\n+   }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-681|SpecialSeperatorForDevSet|public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n File in = null;\n String dest = output;\n if (input.equals(STDIN)) {\n-   try {\n+   try {\n in = File.createTempFile("tmp", ".jp2");\n input = in.getAbsolutePath();\n in.deleteOnExit();\n IOUtils.copyFile(new File(STDIN), in);\n }\n catch (IOException e) {\n logger.error("Unable to process image from " + STDIN + ": " + e.getMessage());\n throw new DjatokaException(e);\n }\n }\n BufferedImage bi = extractImpl.process(input, params);\n if (bi != null) {\n if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n if (params.getTransform() != null) bi = params.getTransform().run(bi);\n try {\n BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n w.write(bi, os);\n os.close();\n }\n catch (FileNotFoundException e) {\n logger.error("Requested file was not found: " + dest);\n throw new DjatokaException(e);\n }\n catch (IOException e) {\n logger.error("Error attempting to close: " + dest);\n throw new DjatokaException(e);\n }\n }\n if (in != null) in.delete();\n }\n|SpecialSeperatorForDevSet|public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n File in = null;\n String dest = output;\n if (input.equals(STDIN)) {\n try {\n in = File.createTempFile("tmp", ".jp2");\n input = in.getAbsolutePath();\n in.deleteOnExit();\n IOUtils.copyFile(new File(STDIN), in);\n }\n catch (IOException e) {\n logger.error("Unable to process image from " + STDIN + ": " + e.getMessage());\n throw new DjatokaException(e);\n }\n }\n BufferedImage bi = extractImpl.process(input, params);\n-   if (bi != null) {\n+   if (bi != null) {\n if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n if (params.getTransform() != null) bi = params.getTransform().run(bi);\n try {\n BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n w.write(bi, os);\n os.close();\n }\n catch (FileNotFoundException e) {\n logger.error("Requested file was not found: " + dest);\n throw new DjatokaException(e);\n }\n catch (IOException e) {\n logger.error("Error attempting to close: " + dest);\n throw new DjatokaException(e);\n }\n }\n if (in != null) in.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-681|SpecialSeperatorForDevSet|public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n File in = null;\n-   String dest = output;\n+   String dest = output;\n if (input.equals(STDIN)) {\n try {\n in = File.createTempFile("tmp", ".jp2");\n input = in.getAbsolutePath();\n in.deleteOnExit();\n IOUtils.copyFile(new File(STDIN), in);\n }\n catch (IOException e) {\n logger.error("Unable to process image from " + STDIN + ": " + e.getMessage());\n throw new DjatokaException(e);\n }\n }\n BufferedImage bi = extractImpl.process(input, params);\n if (bi != null) {\n if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n if (params.getTransform() != null) bi = params.getTransform().run(bi);\n try {\n BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n w.write(bi, os);\n os.close();\n }\n catch (FileNotFoundException e) {\n logger.error("Requested file was not found: " + dest);\n throw new DjatokaException(e);\n }\n catch (IOException e) {\n logger.error("Error attempting to close: " + dest);\n throw new DjatokaException(e);\n }\n }\n if (in != null) in.delete();\n }\n|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n-   JarFile jar = new JarFile(jarPath);\n+   JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n JarEntry entry = entries.nextElement();\n String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-682|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-682|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n-   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n+   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|public DataSet parse() throws SnifflibDatatypeException {\n NumberFormat numformat = NumberFormat.getInstance();\n if (this.headers.size() != this.types.size()) {\n throw new SnifflibDatatypeException("Different number of headers (" + this.headers.size() + ") and types(" + this.types.size() + ").");\n }\n DataSet out = null;\n if (!this.dryrun) {\n out = new DataSet();\n }\n BufferedReader r = null;\n StreamTokenizer tokenizer = null;\n try {\n if (this.isURL) {\n if (this.url2goto == null) {\n return (null);\n }\n DataInputStream in = null;\n try {\n in = new DataInputStream(this.url2goto.openStream());\n System.out.println("READY TO READ FROM URL:" + url2goto);\n r = new BufferedReader(new InputStreamReader(in));\n }\n catch (Exception err) {\n throw new RuntimeException("Problem reading from URL " + this.url2goto + ".", err);\n }\n }\n else {\n if (this.file == null) {\n throw new RuntimeException("Data file to be parsed can not be null.");\n }\n if (!this.file.exists()) {\n throw new RuntimeException("The file " + this.file + " does not exist.");\n }\n r = new BufferedReader(new FileReader(this.file));\n }\n if (this.ignorePreHeaderLines > 0) {\n String strLine;\n int k = 0;\n while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {\n k++;\n }\n }\n tokenizer = new StreamTokenizer(r);\n tokenizer.resetSyntax();\n tokenizer.eolIsSignificant(true);\n tokenizer.parseNumbers();\n if (this.delimiter.equals("\\t")) {\n tokenizer.whitespaceChars('\t', '\t');\n }\n if (this.delimiter.equals(",")) {\n tokenizer.whitespaceChars(',', ',');\n }\n tokenizer.quoteChar('"');\n tokenizer.whitespaceChars(' ', ' ');\n boolean readingHeaders = true;\n boolean readingInitialValues = false;\n boolean readingData = false;\n boolean readingScientificNotation = false;\n if (this.headers.size() > 0) {\n readingHeaders = false;\n readingInitialValues = true;\n }\n if (this.types.size() > 0) {\n readingInitialValues = false;\n Class targetclass;\n for (int j = 0;\n j < this.types.size();\n j++) {\n targetclass = (Class) this.types.get(j);\n try {\n this.constructors.add(targetclass.getConstructor(String.class));\n }\n catch (java.lang.NoSuchMethodException err) {\n throw new SnifflibDatatypeException("Could not find appropriate constructor for " + targetclass + ". " + err.getMessage());\n }\n }\n readingData = true;\n }\n int currentColumn = 0;\n int currentRow = 0;\n this.rowcount = 0;\n boolean advanceField = true;\n while (true) {\n tokenizer.nextToken();\n switch(tokenizer.ttype) {\n case StreamTokenizer.TT_WORD: {\n if (readingScientificNotation) {\n throw new RuntimeException("Problem reading scientific notation at row " + currentRow + " column " + currentColumn + ".");\n }\n advanceField = true;\n if (readingHeaders) {\n this.headers.add(tokenizer.sval);\n }\n else {\n if (readingInitialValues) {\n this.types.add(String.class);\n }\n if (!this.dryrun) {\n if (out.getColumnCount() <= currentColumn) {\n out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n }\n }\n try {\n Constructor construct;\n if (currentColumn < this.constructors.size()) {\n construct = (Constructor) this.constructors.get(currentColumn);\n }\n else {\n Class targetclass = (Class) this.types.get(currentColumn);\n construct = targetclass.getConstructor(String.class);\n this.constructors.add(construct);\n }\n try {\n try {\n try {\n if (!this.dryrun) {\n out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n }\n else if (this.findingTargetValue) {\n if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n this.targetValue = construct.newInstance((String) tokenizer.sval);\n r.close();\n return (null);\n }\n }\n }\n catch (java.lang.reflect.InvocationTargetException err) {\n throw new SnifflibDatatypeException("Problem constructing 1" + err.getMessage());\n }\n }\n catch (java.lang.IllegalAccessException err) {\n throw new SnifflibDatatypeException("Problem constructing 2" + err.getMessage());\n }\n }\n catch (java.lang.InstantiationException err) {\n throw new SnifflibDatatypeException("Problem constructing 3" + err.getMessage());\n }\n }\n catch (java.lang.NoSuchMethodException err) {\n throw new SnifflibDatatypeException("Problem constructing 4" + err.getMessage());\n }\n }\n break;\n }\n case StreamTokenizer.TT_NUMBER: {\n advanceField = true;\n if (readingHeaders) {\n throw new SnifflibDatatypeException("Expecting string header at row=" + currentRow + ", column=" + currentColumn + ".");\n }\n else {\n if (readingInitialValues) {\n this.types.add(Double.class);\n }\n if (!this.dryrun) {\n if (out.getColumnCount() <= currentColumn) {\n out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n }\n }\n try {\n Constructor construct;\n if (currentColumn < this.constructors.size()) {\n construct = (Constructor) this.constructors.get(currentColumn);\n }\n else {\n Class targetclass = (Class) this.types.get(currentColumn);\n construct = targetclass.getConstructor(double.class);\n this.constructors.add(construct);\n }\n if (readingScientificNotation) {\n Double val = this.scientificNumber;\n if (!this.dryrun) {\n try {\n out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);\n }\n catch (Exception err) {\n throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err);\n }\n }\n else if (this.findingTargetValue) {\n if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n Double NVAL = new Double(tokenizer.nval);\n try {\n this.targetValue = numformat.parse(val + "E" + NVAL);\n }\n catch (Exception err) {\n throw new RuntimeException("Problem parsing scientific notation at row=" + currentRow + " col=" + currentColumn + ".");\n }\n tokenizer.nextToken();\n if (tokenizer.ttype != 'e') {\n r.close();\n return (null);\n }\n else {\n tokenizer.pushBack();\n }\n }\n }\n readingScientificNotation = false;\n }\n else {\n try {\n this.scientificNumber = new Double(tokenizer.nval);\n if (!this.dryrun) {\n out.setValueAt(this.scientificNumber, currentRow, currentColumn);\n }\n else if (this.findingTargetValue) {\n if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n this.targetValue = this.scientificNumber;\n r.close();\n return (null);\n }\n }\n }\n catch (Exception err) {\n throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err);\n }\n }\n }\n catch (java.lang.NoSuchMethodException err) {\n throw new SnifflibDatatypeException("Problem constructing" + err.getMessage());\n }\n }\n break;\n }\n case StreamTokenizer.TT_EOL: {\n if (readingHeaders) {\n readingHeaders = false;\n readingInitialValues = true;\n }\n else {\n if (readingInitialValues) {\n readingInitialValues = false;\n readingData = true;\n }\n }\n if (readingData) {\n currentRow++;\n }\n break;\n }\n case StreamTokenizer.TT_EOF: {\n if (readingHeaders) {\n throw new SnifflibDatatypeException("End of file reached while reading headers.");\n }\n if (readingInitialValues) {\n throw new SnifflibDatatypeException("End of file reached while reading initial values.");\n }\n if (readingData) {\n readingData = false;\n }\n break;\n }\n-   default: {\n+   default: {\n if (tokenizer.ttype == '"') {\n advanceField = true;\n if (readingHeaders) {\n this.headers.add(tokenizer.sval);\n }\n else {\n if (readingInitialValues) {\n this.types.add(String.class);\n }\n if (!this.dryrun) {\n if (out.getColumnCount() <= currentColumn) {\n out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n }\n }\n try {\n Constructor construct;\n if (currentColumn < this.constructors.size()) {\n construct = (Constructor) this.constructors.get(currentColumn);\n }\n else {\n Class targetclass = (Class) this.types.get(currentColumn);\n construct = targetclass.getConstructor(String.class);\n this.constructors.add(construct);\n }\n try {\n try {\n try {\n if (!this.dryrun) {\n out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n }\n else if (this.findingTargetValue) {\n if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n this.targetValue = construct.newInstance((String) tokenizer.sval);\n r.close();\n return (null);\n }\n }\n }\n catch (java.lang.reflect.InvocationTargetException err) {\n throw new SnifflibDatatypeException("Problem constructing 1 " + err.getMessage());\n }\n }\n catch (java.lang.IllegalAccessException err) {\n throw new SnifflibDatatypeException("Problem constructing 2 " + err.getMessage());\n }\n }\n catch (java.lang.InstantiationException err) {\n throw new SnifflibDatatypeException("Problem constructing 3 " + err.getMessage());\n }\n }\n catch (java.lang.NoSuchMethodException err) {\n throw new SnifflibDatatypeException("Problem constructing 4" + err.getMessage());\n }\n }\n }\n else if (tokenizer.ttype == 'e') {\n Class targetclass = (Class) this.types.get(currentColumn);\n if (Number.class.isAssignableFrom(targetclass)) {\n currentColumn--;\n readingScientificNotation = true;\n advanceField = false;\n }\n }\n else {\n advanceField = false;\n }\n break;\n }\n }\n if (tokenizer.ttype == StreamTokenizer.TT_EOF) {\n break;\n }\n if (advanceField) {\n currentColumn++;\n if (!readingHeaders) {\n if (currentColumn >= this.headers.size()) {\n currentColumn = 0;\n }\n }\n }\n }\n if (!readingHeaders) {\n this.rowcount = currentRow;\n }\n else {\n this.rowcount = 0;\n readingHeaders = false;\n if (this.ignorePostHeaderLines > 0) {\n String strLine;\n int k = 0;\n while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {\n k++;\n }\n }\n }\n r.close();\n }\n catch (java.io.IOException err) {\n throw new SnifflibDatatypeException(err.getMessage());\n }\n if (!this.dryrun) {\n for (int j = 0;\n j < this.headers.size();\n j++) {\n out.setColumnName(j, (String) this.headers.get(j));\n }\n }\n return (out);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-683|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n-   byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n+   byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|-  public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n+  public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-683|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-684|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n final byte[] buffer = new byte[65536];\n int read = -1;\n-   while ((read = in.read(buffer)) >= 0) {\n+   while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n out.close();\n }\n catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n final byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n-   }\n+   }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n out.close();\n }\n catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-684|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(final String infile, final String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n final byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (final java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (final Exception exc) {\n }\n try {\n out.close();\n }\n-   catch (final Exception exc) {\n+   catch (final Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|private void bootKernel(String conf) {\n try {\n AssetManager am = getResources().getAssets();\n-   InputStream is = am.open(conf + ".conf");\n+   InputStream is = am.open(conf + ".conf");\n Properties props = new Properties();\n props.load(is);\n is.close();\n Log.d("bootKernel", "Listing sdcard assets...");\n String[] sdcardfiles = am.list("sdcard");\n for (String file : sdcardfiles) {\n Log.d("bootKernel", "Copying sdcard asset " + file + ".");\n AssetFileDescriptor afd = am.openFd("sdcard/" + file);\n FileInputStream fis = afd.createInputStream();\n FileChannel fic = fis.getChannel();\n FileOutputStream fos = new FileOutputStream("/sdcard/" + file);\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n }\n Configuration gconf = new JavaPropertiesConfiguration(props);\n Configuration bconf = gconf.subset("boot");\n String kclass_name = bconf.getString("kernel");\n Log.d("bootKernel", "Attempting to load kernel from class '" + kclass_name + "'...");\n Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n Kernel kernel = kclass.newInstance();\n Log.d("bootKernel", "Kernel loaded, proceeding with boot...");\n BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n kernel.boot(bctx).get();\n Log.d("bootKernel", "Kernel boot complete.");\n }\n catch (Exception e) {\n Log.e("bootKernel", "Unable to boot kernel due to exception.", e);\n finish();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-685|SpecialSeperatorForDevSet|public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\n super();\n addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent aEvent) {\n System.exit(0);\n }\n }\n);\n Dimension dim = getToolkit().getScreenSize();\n Rectangle abounds = getBounds();\n setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\n setVisible(true);\n URL url = new URL("ftp://cendantstp/");\n char[] password = "spnr".toCharArray();\n PasswordAuthentication passwordAuthentication = new PasswordAuthentication("spnr", password);\n FTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\n JFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\n fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n fileChooser.setMultiSelectionEnabled(true);\n File[] selectedFiles = null;\n if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n selectedFiles = fileChooser.getSelectedFiles();\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n if (selectedFiles[i] instanceof FTPFileFile) {\n FTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\n-   logger.fine(ftpFile.getName());\n+   logger.fine(ftpFile.getName());\n logger.fine(ftpFile.getPath());\n }\n else {\n logger.fine(selectedFiles[i].toString());\n logger.fine(selectedFiles[i].getAbsolutePath());\n }\n }\n }\n remoteFileSystemView.disconnect();\n try {\n if (null != selectedFiles) {\n FTPClient ftpClient = new FTPClient();\n InetAddress inetAddress = InetAddress.getByName(url.getHost());\n ftpClient.connect(inetAddress);\n if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n throw new FTPBrowseException(ftpClient.getReplyString());\n }\n if (null != passwordAuthentication) {\n ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n }\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n FTPFileFile file = (FTPFileFile) selectedFiles[i];\n logger.fine(file.getPath());\n FileOutputStream fos = new FileOutputStream(new File("d:/junk/ftp/test.txt"));\n logger.fine("" + ftpClient.retrieveFile(file.getPath().replaceAll("\\\\", "/"), fos));\n fos.close();\n }\n }\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n System.exit(0);\n }\n|SpecialSeperatorForDevSet|public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\n super();\n addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent aEvent) {\n System.exit(0);\n }\n }\n);\n Dimension dim = getToolkit().getScreenSize();\n Rectangle abounds = getBounds();\n setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\n setVisible(true);\n URL url = new URL("ftp://cendantstp/");\n char[] password = "spnr".toCharArray();\n PasswordAuthentication passwordAuthentication = new PasswordAuthentication("spnr", password);\n FTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\n JFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\n fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n fileChooser.setMultiSelectionEnabled(true);\n File[] selectedFiles = null;\n if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n selectedFiles = fileChooser.getSelectedFiles();\n-   for (int i = 0;\n+   for (int i = 0;\n i < selectedFiles.length;\n i++) {\n if (selectedFiles[i] instanceof FTPFileFile) {\n FTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\n logger.fine(ftpFile.getName());\n logger.fine(ftpFile.getPath());\n }\n else {\n logger.fine(selectedFiles[i].toString());\n logger.fine(selectedFiles[i].getAbsolutePath());\n }\n }\n }\n remoteFileSystemView.disconnect();\n try {\n if (null != selectedFiles) {\n FTPClient ftpClient = new FTPClient();\n InetAddress inetAddress = InetAddress.getByName(url.getHost());\n ftpClient.connect(inetAddress);\n if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n throw new FTPBrowseException(ftpClient.getReplyString());\n }\n if (null != passwordAuthentication) {\n ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n }\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n FTPFileFile file = (FTPFileFile) selectedFiles[i];\n logger.fine(file.getPath());\n FileOutputStream fos = new FileOutputStream(new File("d:/junk/ftp/test.txt"));\n logger.fine("" + ftpClient.retrieveFile(file.getPath().replaceAll("\\\\", "/"), fos));\n fos.close();\n }\n }\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n System.exit(0);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-685|SpecialSeperatorForDevSet|public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\n super();\n addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent aEvent) {\n System.exit(0);\n }\n }\n);\n Dimension dim = getToolkit().getScreenSize();\n Rectangle abounds = getBounds();\n setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\n setVisible(true);\n URL url = new URL("ftp://cendantstp/");\n char[] password = "spnr".toCharArray();\n PasswordAuthentication passwordAuthentication = new PasswordAuthentication("spnr", password);\n FTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\n JFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\n fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n fileChooser.setMultiSelectionEnabled(true);\n File[] selectedFiles = null;\n if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n selectedFiles = fileChooser.getSelectedFiles();\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n if (selectedFiles[i] instanceof FTPFileFile) {\n FTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\n logger.fine(ftpFile.getName());\n logger.fine(ftpFile.getPath());\n }\n else {\n logger.fine(selectedFiles[i].toString());\n logger.fine(selectedFiles[i].getAbsolutePath());\n }\n-   }\n+   }\n }\n remoteFileSystemView.disconnect();\n try {\n if (null != selectedFiles) {\n FTPClient ftpClient = new FTPClient();\n InetAddress inetAddress = InetAddress.getByName(url.getHost());\n ftpClient.connect(inetAddress);\n if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n throw new FTPBrowseException(ftpClient.getReplyString());\n }\n if (null != passwordAuthentication) {\n ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n }\n for (int i = 0;\n i < selectedFiles.length;\n i++) {\n FTPFileFile file = (FTPFileFile) selectedFiles[i];\n logger.fine(file.getPath());\n FileOutputStream fos = new FileOutputStream(new File("d:/junk/ftp/test.txt"));\n logger.fine("" + ftpClient.retrieveFile(file.getPath().replaceAll("\\\\", "/"), fos));\n fos.close();\n }\n }\n }\n catch (UnknownHostException e) {\n e.printStackTrace();\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n System.exit(0);\n }\n|SpecialSeperatorForDevSet|public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\n FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\n ftpClient.connect(ftpserver, ftpport);\n ftpClient.login(username, password);\n return ftpClient;\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-686|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n-   int n;\n+   int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n-   int n;\n+   int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-686|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-687|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n-   IOUtil.closeQuietly(input);\n+   IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n-   }\n+   }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-687|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n-   try {\n+   try {\n output.transferFrom(input, 0, input.size());\n }\n finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n-   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n+   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-688|SpecialSeperatorForDevSet|public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n-   srcChannel.close();\n+   srcChannel.close();\n dstChannel.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File dest, File src) throws IOException {\n+  public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-688|SpecialSeperatorForDevSet|public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n-   dstChannel.close();\n+   dstChannel.close();\n }\n|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n-   Document document = parser.parse(inputstream);\n+   Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-689|SpecialSeperatorForDevSet|-  static void copyFile(File in, File out) throws IOException {\n+  static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n source.close();\n destination.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-689|SpecialSeperatorForDevSet|static void copyFile(File in, File out) throws IOException {\n FileChannel source = new FileInputStream(in).getChannel();\n FileChannel destination = new FileOutputStream(out).getChannel();\n source.transferTo(0, source.size(), destination);\n-   source.close();\n+   source.close();\n destination.close();\n }\n|SpecialSeperatorForDevSet|private void unzip(File filename) throws ZipException, IOException {\n ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n ZipEntry entry = null;\n boolean first_entry = true;\n while ((entry = in.getNextEntry()) != null) {\n if (first_entry) {\n if (!entry.isDirectory()) {\n File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n if (!subdir.exists()) {\n subdir.mkdir();\n dir = subdir;\n }\n }\n first_entry = false;\n }\n if (entry.isDirectory()) {\n FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n }\n-   else {\n+   else {\n File outfile = new File(dir + File.separator + entry.getName());\n File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n FileOutputStream fo = new FileOutputStream(outfile);\n BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n int read;\n byte data[] = new byte[BUFFER];\n while ((read = in.read(data, 0, BUFFER)) != -1) {\n read_position++;\n bos.write(data, 0, read);\n }\n bos.flush();\n bos.close();\n }\n }\n in.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-690|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n-   }\n+   }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n-   try {\n+   try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-690|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n-   jp.add(jb);\n+   jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n-   IOUtils.closeQuietly(sink);\n+   IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-691|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n-   bw.flush();\n+   bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n-   bw = new BufferedWriter(osw);\n+   bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-691|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n-   bw.flush();\n+   bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|public static void copy(File srcPath, File dstPath) throws IOException {\n if (srcPath.isDirectory()) {\n if (!dstPath.exists()) {\n boolean result = dstPath.mkdir();\n if (!result) throw new IOException("Unable to create directoy: " + dstPath);\n }\n String[] files = srcPath.list();\n for (String file : files) {\n-   copy(new File(srcPath, file), new File(dstPath, file));\n+   copy(new File(srcPath, file), new File(dstPath, file));\n }\n }\n else {\n if (srcPath.exists()) {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(srcPath).getChannel();\n out = new FileOutputStream(dstPath).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-692|SpecialSeperatorForDevSet|-  public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n+  public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n bos.flush();\n }\n catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n-   bos.flush();\n+   bos.flush();\n }\n catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-692|SpecialSeperatorForDevSet|public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n-   try {\n+   try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n bos.flush();\n }\n catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n-   FileChannel out = (new FileOutputStream(target)).getChannel();\n+   FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-693|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n-   byte[] digesta = alga.digest();\n+   byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n-   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n+   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-693|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static final String calculate(File f) {\n MessageDigest md;\n BufferedReader rd;\n StringBuffer buffer = new StringBuffer("");\n try {\n rd = new BufferedReader(new FileReader(f));\n md = MessageDigest.getInstance("SHA");\n String line = "";\n while ((line = rd.readLine()) != null) buffer.append(line);\n md.update(buffer.toString().getBytes());\n byte[] digest = md.digest();\n String result = "";\n for (byte b : digest) result += String.format("%h", b & 0xFF);\n-   return result;\n+   return result;\n }\n catch (Exception ex) {\n ex.printStackTrace();\n return "";\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-694|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n-   throw new RuntimeException(e);\n+   throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n-   InputStream in = null;\n+   InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-694|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n-   }\n+   }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|private boolean setPayload() throws IOException {\n if (Index < Headers.length) {\n FileOutputStream fos = new FileOutputStream(Headers[Index], true);\n FileInputStream fis = new FileInputStream(HeadlessData);\n FileChannel fic = fis.getChannel();\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n-   foc.close();\n+   foc.close();\n setDestination(Destinations[Index]);\n setPayload(Headers[Index]);\n Index++;\n return true;\n }\n return false;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-695|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n-   }\n+   }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n-   return StringUtils.EMPTY;\n+   return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-695|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n-   return sw.toString();\n+   return sw.toString();\n }\n|SpecialSeperatorForDevSet|@Override protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n String charset = null;\n IndexDocument sourceDocument = getSourceDocument();\n if (sourceDocument != null && urlItemFieldEnum != null) {\n FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n if (fieldValueItem != null) charset = fieldValueItem.getValue();\n if (charset == null) {\n fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n if (fieldValueItem != null) charset = fieldValueItem.getValue();\n }\n }\n boolean charsetWasNull = charset == null;\n if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n StringWriter writer = new StringWriter();\n IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\n addField(ParserFieldEnum.htmlSource, writer.toString());\n writer.close();\n HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\n if (htmlProvider == null) return;\n addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n String contentType = htmlProvider.getMetaHttpEquiv("content-type");\n String contentTypeCharset = null;\n if (contentType != null) {\n contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n }\n if (charsetWasNull) {\n if (contentTypeCharset != null) charset = contentTypeCharset;\n else charset = htmlProvider.getMetaCharset();\n if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n }\n HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n if (rootNode == null) return;\n for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n String metaName = metaNode.getAttributeText("name");\n if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n String[] fields = field.split("\\.");\n if (fields != null) {\n String content = metaNode.getAttributeText("content");\n addDirectFields(fields, content);\n }\n }\n }\n addField(ParserFieldEnum.charset, charset);\n addFieldTitle(htmlProvider.getTitle());\n String metaRobots = null;\n String metaDcLanguage = null;\n String metaContentLanguage = null;\n for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n String attr_name = node.getAttributeText("name");\n String attr_http_equiv = node.getAttributeText("http-equiv");\n if ("keywords".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node));\n else if ("description".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node));\n else if ("robots".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node);\n else if ("dc.language".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node);\n else if ("content-language".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n }\n boolean metaRobotsFollow = true;\n boolean metaRobotsNoIndex = false;\n if (metaRobots != null) {\n metaRobots = metaRobots.toLowerCase();\n if (metaRobots.contains("noindex")) {\n metaRobotsNoIndex = true;\n addField(ParserFieldEnum.meta_robots, "noindex");\n }\n if (metaRobots.contains("nofollow")) {\n metaRobotsFollow = false;\n addField(ParserFieldEnum.meta_robots, "nofollow");\n }\n }\n UrlFilterItem[] urlFilterList = getUrlFilterList();\n List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes("a", "frame");\n IndexDocument srcDoc = getSourceDocument();\n if (srcDoc != null && nodes != null && metaRobotsFollow) {\n URL currentURL = htmlProvider.getBaseHref();\n if (currentURL == null && urlItemFieldEnum != null) {\n FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n if (fvi != null) currentURL = new URL(fvi.getValue());\n }\n for (HtmlNodeAbstract<?> node : nodes) {\n String href = null;\n String rel = null;\n String nodeName = node.getNodeName();\n if ("a".equals(nodeName)) {\n href = node.getAttributeText("href");\n rel = node.getAttributeText("rel");\n }\n else if ("frame".equals(nodeName)) {\n href = node.getAttributeText("src");\n }\n boolean follow = true;\n if (rel != null) if (rel.contains("nofollow")) follow = false;\n URL newUrl = null;\n if (href != null) if (!href.startsWith("javascript:")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n if (newUrl != null) {\n ParserFieldEnum field = null;\n if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n if (follow) field = ParserFieldEnum.internal_link;\n else field = ParserFieldEnum.internal_link_nofollow;\n }\n else {\n if (follow) field = ParserFieldEnum.external_link;\n else field = ParserFieldEnum.external_link_nofollow;\n }\n addField(field, newUrl.toExternalForm());\n }\n-   }\n+   }\n }\n if (!metaRobotsNoIndex) {\n nodes = rootNode.getNodes("html", "body");\n if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes("html");\n if (nodes != null && nodes.size() > 0) {\n StringBuffer sb = new StringBuffer();\n getBodyTextContent(sb, nodes.get(0), true, null);\n addField(ParserFieldEnum.body, sb);\n }\n }\n Locale lang = null;\n String langMethod = null;\n String[] pathHtml = {\n "html" }\n;\n nodes = rootNode.getNodes(pathHtml);\n if (nodes != null && nodes.size() > 0) {\n langMethod = "html lang attribute";\n String l = nodes.get(0).getAttributeText("lang");\n if (l != null) lang = Lang.findLocaleISO639(l);\n }\n if (lang == null && metaContentLanguage != null) {\n langMethod = "meta http-equiv content-language";\n lang = Lang.findLocaleISO639(metaContentLanguage);\n }\n if (lang == null && metaDcLanguage != null) {\n langMethod = "meta dc.language";\n lang = Lang.findLocaleISO639(metaDcLanguage);\n }\n if (lang != null) {\n addField(ParserFieldEnum.lang, lang.getLanguage());\n addField(ParserFieldEnum.lang_method, langMethod);\n }\n else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-696|SpecialSeperatorForDevSet|@Test public void testCopyUnknownSize() throws IOException {\n final InputStream in = new ByteArrayInputStream(TEST_DATA);\n final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n assertEquals("Mismatched copy size", TEST_DATA.length, cpySize);\n final byte[] outArray = out.toByteArray();\n assertArrayEquals("Mismatched data", TEST_DATA, outArray);\n }\n-  \n+  |SpecialSeperatorForDevSet|@Test public void testCopyUnknownSize() throws IOException {\n final InputStream in = new ByteArrayInputStream(TEST_DATA);\n-   final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n+   final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n assertEquals("Mismatched copy size", TEST_DATA.length, cpySize);\n final byte[] outArray = out.toByteArray();\n assertArrayEquals("Mismatched data", TEST_DATA, outArray);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-696|SpecialSeperatorForDevSet|-  @Test public void testCopyUnknownSize() throws IOException {\n+  @Test public void testCopyUnknownSize() throws IOException {\n final InputStream in = new ByteArrayInputStream(TEST_DATA);\n final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n assertEquals("Mismatched copy size", TEST_DATA.length, cpySize);\n final byte[] outArray = out.toByteArray();\n assertArrayEquals("Mismatched data", TEST_DATA, outArray);\n }\n|SpecialSeperatorForDevSet|public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {\n PrintWriter file = getWriter(name + ".txt");\n file.print("Filename\t");\n file.print("Date\t");\n file.print("Acquisition #\t");\n file.print("�m Diameter\t");\n for (int i = mzmin;\n i <= mzmax;\n i++) file.print(i + "\t");\n file.println();\n int nothing = 0;\n String fileLoc = "C:/abcd/" + name + ".txt\t";\n Date tempDate;\n for (int i = 0;\n i < items;\n i++) {\n tempDate = new Date(tstart);\n tstart += tdelta;\n file.print(fileLoc);\n file.print(dateFormat.format(tempDate) + "\t");\n file.print(i + 1 + "\t");\n double t = (double) (i) / 10;\n file.print(t + "\t");\n boolean peaked = false;\n for (int k = mzmin;\n k <= mzmax;\n k++) {\n for (int j = 0;\n j < peaks.length && !peaked;\n j++) {\n if (k == peaks[j]) {\n file.print(peakVals[j % peakVals.length] + "\t");\n peaked = true;\n }\n }\n if (!peaked) {\n if (k == mzmax) file.print(nothing);\n else file.print(nothing + "\t");\n }\n peaked = false;\n }\n file.println();\n-   }\n+   }\n try {\n Scanner test = new Scanner(f);\n while (test.hasNext()) {\n System.out.println(test.nextLine());\n }\n System.out.println("test");\n }\n catch (Exception e) {\n }\n file.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-697|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n-   int read = -1;\n+   int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n-   out.close();\n+   out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-697|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n-   in.close();\n+   in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n-   StringWriter sw = new StringWriter();\n+   StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-698|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n-   else if (fields.get("taReplyBody") != null) {\n+   else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n }\n|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n-   }\n+   }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-698|SpecialSeperatorForDevSet|protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n ActionMessages errors = new ActionMessages();\n try {\n boolean isMultipart = FileUpload.isMultipartContent(request);\n Mail mailInstance = getMailInstance(request);\n if (isMultipart) {\n Map fields = new HashMap();\n Vector attachments = new Vector();\n List items = diskFileUpload.parseRequest(request);\n Iterator iter = items.iterator();\n while (iter.hasNext()) {\n FileItem item = (FileItem) iter.next();\n if (item.isFormField()) {\n if (item.getFieldName().equals("forwardAttachments")) {\n String[] aux = item.getString().split(":");\n MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n attachments.addElement(part);\n }\n else {\n fields.put(item.getFieldName(), item.getString());\n }\n }\n else {\n if (!StringUtils.isBlank(item.getName())) {\n ByteArrayOutputStream baos = null;\n try {\n baos = new ByteArrayOutputStream();\n IOUtils.copy(item.getInputStream(), baos);\n MailPartObj part = new MailPartObj();\n part.setAttachent(baos.toByteArray());\n part.setContentType(item.getContentType());\n part.setName(item.getName());\n part.setSize(item.getSize());\n attachments.addElement(part);\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(baos);\n }\n }\n }\n }\n-   String body = "";\n+   String body = "";\n if (fields.get("taBody") != null) {\n body = (String) fields.get("taBody");\n }\n else if (fields.get("taReplyBody") != null) {\n body = (String) fields.get("taReplyBody");\n }\n Preferences preferencesInstance = getPreferencesInstance(request);\n Send sendInstance = getSendInstance(request);\n String mid = (String) fields.get("mid");\n if (StringUtils.isBlank(mid)) {\n request.setAttribute("action", "compose");\n }\n else {\n request.setAttribute("action", "reply");\n }\n Boolean isHtml = null;\n if (StringUtils.isBlank((String) fields.get("isHtml"))) {\n isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n }\n else {\n isHtml = Boolean.valueOf((String) fields.get("isHtml"));\n }\n sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"));\n }\n else {\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));\n request.setAttribute("exception", "The form is null");\n request.setAttribute("newLocation", null);\n doTrace(request, DLog.ERROR, getClass(), "The form is null");\n }\n }\n catch (Exception ex) {\n String errorMessage = ExceptionUtilities.parseMessage(ex);\n if (errorMessage == null) {\n errorMessage = "NullPointerException";\n }\n errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));\n request.setAttribute("exception", errorMessage);\n doTrace(request, DLog.ERROR, getClass(), errorMessage);\n }\n finally {\n }\n if (errors.isEmpty()) {\n doTrace(request, DLog.INFO, getClass(), "OK");\n return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n }\n else {\n saveErrors(request, errors);\n return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n-   assertTrue("Not all bytes were read", in.available() == 0);\n+   assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-699|SpecialSeperatorForDevSet|-  @Test public void testIdentification() {\n+  @Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-699|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n-   userServ.setLogger(logServiceMock);\n+   userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static String getMessageDigest(String input) {\n if (input == null) {\n log.warn("Returning SHA-1 null value for null input");\n return null;\n }\n try {\n MessageDigest md = MessageDigest.getInstance("SHA-1");\n md.update(input.getBytes("UTF-8"));\n byte[] bytes = md.digest();\n return new BASE64Encoder().encode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException(e.getMessage());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-700|SpecialSeperatorForDevSet|private static File getZipAsFile(DigitalObject digOb) {\n String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n File tmpFolder = new File(utils_tmp, folderName);\n File zip = null;\n try {\n FileUtils.forceMkdir(tmpFolder);\n zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n FileOutputStream out = new FileOutputStream(zip);\n IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n out.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n }\n return zip;\n }\n|SpecialSeperatorForDevSet|private static File getZipAsFile(DigitalObject digOb) {\n String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n File tmpFolder = new File(utils_tmp, folderName);\n File zip = null;\n try {\n FileUtils.forceMkdir(tmpFolder);\n zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n FileOutputStream out = new FileOutputStream(zip);\n IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n out.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   return zip;\n+   return zip;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-700|SpecialSeperatorForDevSet|private static File getZipAsFile(DigitalObject digOb) {\n String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n File tmpFolder = new File(utils_tmp, folderName);\n File zip = null;\n try {\n FileUtils.forceMkdir(tmpFolder);\n zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n FileOutputStream out = new FileOutputStream(zip);\n IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n out.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   return zip;\n+   return zip;\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File from, File to) throws IOException {\n if (from.isDirectory()) {\n if (!to.exists()) {\n to.mkdir();\n }\n File[] children = from.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".") || children[i].getName().equals("..")) {\n continue;\n }\n if (children[i].isDirectory()) {\n File f = new File(to, children[i].getName());\n copyFile(children[i], f);\n }\n else {\n copyFile(children[i], to);\n }\n }\n }\n else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n if (to.isDirectory()) {\n to = new File(to, from.getName());\n }\n FileInputStream in = new FileInputStream(from);\n FileOutputStream out = new FileOutputStream(to);\n byte[] buf = new byte[32678];\n int read;\n while ((read = in.read(buf)) > -1) {\n out.write(buf, 0, read);\n }\n closeStream(in);\n closeStream(out);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-701|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n-   fos.close();\n+   fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n-   }\n+   }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-701|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n-   fos.close();\n+   fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|private void bootKernel(String conf) {\n try {\n-   AssetManager am = getResources().getAssets();\n+   AssetManager am = getResources().getAssets();\n InputStream is = am.open(conf + ".conf");\n Properties props = new Properties();\n props.load(is);\n is.close();\n Log.d("bootKernel", "Listing sdcard assets...");\n String[] sdcardfiles = am.list("sdcard");\n for (String file : sdcardfiles) {\n Log.d("bootKernel", "Copying sdcard asset " + file + ".");\n AssetFileDescriptor afd = am.openFd("sdcard/" + file);\n FileInputStream fis = afd.createInputStream();\n FileChannel fic = fis.getChannel();\n FileOutputStream fos = new FileOutputStream("/sdcard/" + file);\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n }\n Configuration gconf = new JavaPropertiesConfiguration(props);\n Configuration bconf = gconf.subset("boot");\n String kclass_name = bconf.getString("kernel");\n Log.d("bootKernel", "Attempting to load kernel from class '" + kclass_name + "'...");\n Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n Kernel kernel = kclass.newInstance();\n Log.d("bootKernel", "Kernel loaded, proceeding with boot...");\n BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n kernel.boot(bctx).get();\n Log.d("bootKernel", "Kernel boot complete.");\n }\n catch (Exception e) {\n Log.e("bootKernel", "Unable to boot kernel due to exception.", e);\n finish();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-702|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n-   DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n+   DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   System.out.println("reading " + inFile + "...");\n+   System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-702|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n-   DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n+   DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static boolean copyFile(String sourceName, String destName) {\n FileChannel sourceChannel = null;\n FileChannel destChannel = null;\n boolean wasOk = false;\n try {\n sourceChannel = new FileInputStream(sourceName).getChannel();\n destChannel = new FileOutputStream(destName).getChannel();\n destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n wasOk = true;\n }\n catch (Throwable exception) {\n logger.log(Level.SEVERE, "Exception in copyFile", exception);\n }\n finally {\n try {\n if (sourceChannel != null) sourceChannel.close();\n }\n catch (Throwable tt) {\n }\n try {\n if (destChannel != null) destChannel.close();\n }\n catch (Throwable tt) {\n-   }\n+   }\n }\n return wasOk;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-703|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n-   md.reset();\n+   md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-703|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n-   md.update(input.getBytes("UTF-8"));\n+   md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|static String encrypt(String plaintext) {\n MessageDigest d = null;\n-   try {\n+   try {\n d = MessageDigest.getInstance("SHA-1");\n d.update(plaintext.getBytes("UTF-8"));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return new String(Base64.encodeBase64(d.digest()));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-704|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n-   try {\n+   try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-704|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n-   writer.write(strBuilder.toString());\n+   writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n-   throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n+   throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-705|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n StringBuffer bufferPass;\n-   try {\n+   try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n }\n|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n StringBuffer bufferPass;\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n-   md5.reset();\n+   md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-705|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n-   StringBuffer bufferPass;\n+   StringBuffer bufferPass;\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n }\n|SpecialSeperatorForDevSet|public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(string.getBytes());\n byte byteData[] = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < byteData.length;\n i++) {\n sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n }\n StringBuffer hexString = new StringBuffer();\n-   for (int i = 0;\n+   for (int i = 0;\n i < byteData.length;\n i++) {\n String hex = Integer.toHexString(0xff & byteData[i]);\n if (hex.length() == 1) hexString.append('0');\n hexString.append(hex);\n }\n return hexString.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-706|SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n-   user.setDataRegjistrimit(new Date());\n+   user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|-  @Override public User saveUser(User user) {\n+  @Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-706|SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n return em.merge(user);\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n-   byte[] sha1hash = new byte[40];\n+   byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-707|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n-   File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n+   File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-707|SpecialSeperatorForDevSet|@Override public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n Node[] node = xed.getActivatedNodes();\n X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n FileObject mySrc = dob.getPrimaryFile();\n File mySrcF = FileUtil.toFile(mySrc);\n-   File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n+   File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3dv.gz");\n TransformListener co = TransformListener.getInstance();\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting"));\n co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath());\n co.moveToFront();\n co.setNode(node[0]);\n try {\n String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n FileInputStream fis = new FileInputStream(new File(x3dvFile));\n GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n byte[] buf = new byte[4096];\n int ret;\n while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n gzos.close();\n }\n catch (Exception ex) {\n co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage());\n return null;\n }\n co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete"));\n return myOutF.getAbsolutePath();\n }\n|SpecialSeperatorForDevSet|public void copy(File s, File t) throws IOException {\n FileChannel in = (new FileInputStream(s)).getChannel();\n-   FileChannel out = (new FileOutputStream(t)).getChannel();\n+   FileChannel out = (new FileOutputStream(t)).getChannel();\n in.transferTo(0, s.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-708|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n-   jd.setAlwaysOnTop(true);\n+   jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n-   public void actionPerformed(ActionEvent e) {\n+   public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-708|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n-   src = null;\n+   src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n-   }\n+   }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-709|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-   IOUtils.copy(is, baos);\n+   IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n-   con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n+   con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-709|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n-   if (proxyHost != null) {\n+   if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) {\n try {\n if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n System.out.println("sourceFile & destinationFile is null");\n System.exit(-1);\n }\n-   if (sourceFile.isDirectory()) {\n+   if (sourceFile.isDirectory()) {\n File[] tmp = sourceFile.listFiles();\n File f;\n for (int i = 0;\n i < tmp.length;\n i++) {\n f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n f.getParentFile().mkdirs();\n copy(tmp[i], f);\n }\n }\n else {\n System.out.println("\nCopy from: " + sourceFile + "\n\n to: " + destinationFile);\n FileChannel source = new FileInputStream(sourceFile).getChannel();\n FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-710|SpecialSeperatorForDevSet|public void handler(Map<String, String> result, TargetPage target) {\n try {\n URL url = new URL(target.getUrl());\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n while ((line = reader.readLine()) != null) {\n-   for (Map.Entry<String, String> entry : result.entrySet()) {\n+   for (Map.Entry<String, String> entry : result.entrySet()) {\n if (line.indexOf(target.getInclude()) != -1) {\n int fromIndex = line.indexOf(target.getFromStr());\n String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n entry.setValue(r);\n line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n }\n }\n }\n reader.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|public void handler(Map<String, String> result, TargetPage target) {\n try {\n URL url = new URL(target.getUrl());\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n while ((line = reader.readLine()) != null) {\n-   for (Map.Entry<String, String> entry : result.entrySet()) {\n+   for (Map.Entry<String, String> entry : result.entrySet()) {\n if (line.indexOf(target.getInclude()) != -1) {\n int fromIndex = line.indexOf(target.getFromStr());\n String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n entry.setValue(r);\n line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n }\n }\n }\n reader.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-710|SpecialSeperatorForDevSet|public void handler(Map<String, String> result, TargetPage target) {\n try {\n URL url = new URL(target.getUrl());\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String line = null;\n while ((line = reader.readLine()) != null) {\n for (Map.Entry<String, String> entry : result.entrySet()) {\n if (line.indexOf(target.getInclude()) != -1) {\n int fromIndex = line.indexOf(target.getFromStr());\n String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n entry.setValue(r);\n line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n-   }\n+   }\n }\n }\n reader.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|protected void readURL(URL url) {\n InputStream istream = null;\n InputStreamReader isr = null;\n BufferedReader in = null;\n try {\n istream = url.openStream();\n isr = new InputStreamReader(istream);\n in = new BufferedReader(isr);\n String line = in.readLine();\n while (null != line) {\n System.out.println(line);\n line = in.readLine();\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n-   IOUtilities.close(in);\n+   IOUtilities.close(in);\n IOUtilities.close(isr);\n IOUtilities.close(istream);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-711|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n-   }\n+   }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-711|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n-  \n+  |SpecialSeperatorForDevSet|public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n Calendar rightNow = Calendar.getInstance();\n String dayNamedFolderName = "" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n String uploadDirRoot = props.getProperty("uploaded.files.root");\n File file = new File(uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName);\n if (!file.exists()) file.mkdirs();\n String extension = FilenameUtils.getExtension(fileName);\n String outFileName;\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, "true"))) {\n-   outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n+   outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n }\n else {\n outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n }\n if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, "true"))) {\n outFileName = outFileName + DOT + extension;\n }\n String outPathAndName = uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName + System.getProperty("file.separator") + props.getProperty("uploaded.files.prefix") + outFileName;\n File uploadedFile = new File(outPathAndName);\n _logger.info("uploadedFile.getAbsolutePath() = {\n}\n", uploadedFile.getAbsolutePath());\n uploadedFile.createNewFile();\n OutputStream outStream = new FileOutputStream(outPathAndName);\n IOUtils.copyLarge(inStream, outStream);\n IOUtils.closeQuietly(inStream);\n outStream.close();\n if (resize) {\n writeResizedImage(outPathAndName, extension, "imgSize_xs");\n writeResizedImage(outPathAndName, extension, "imgSize_s");\n writeResizedImage(outPathAndName, extension, "imgSize_m");\n writeResizedImage(outPathAndName, extension, "imgSize_l");\n writeResizedImage(outPathAndName, extension, "imgSize_xl");\n }\n String retVal = dayNamedFolderName + "/" + props.getProperty("uploaded.files.prefix") + outFileName;\n return retVal;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-712|SpecialSeperatorForDevSet|@TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n-   in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n+   in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n report.addLink("Link to PNG", "blue.png");\n report.addLink("Link to GIF", "classDir.gif");\n }\n|SpecialSeperatorForDevSet|-  @TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n+  @TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n report.addLink("Link to PNG", "blue.png");\n report.addLink("Link to GIF", "classDir.gif");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-712|SpecialSeperatorForDevSet|@TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n-   IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n+   IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n report.addLink("Link to PNG", "blue.png");\n report.addLink("Link to GIF", "classDir.gif");\n }\n|SpecialSeperatorForDevSet|private static void copyFile(File src, File dst) throws IOException {\n FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-713|SpecialSeperatorForDevSet|public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n-   preStm.setInt(2, Integer.parseInt(checkId[j]));\n+   preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|-  public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n+  public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-713|SpecialSeperatorForDevSet|public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n }\n }\n-   connection.commit();\n+   connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|@Override public void incluir(Igreja igreja) throws Exception {\n Connection connection = criaConexao(false);\n String sql = "insert into igreja ? as idlocal, ? as possui_salao;\n";\n String sql2 = "SELECT MAX(idlocal) FROM Local";\n PreparedStatement stmt = null;\n PreparedStatement stmt2 = null;\n ResultSet rs = null;\n try {\n stmt = connection.prepareStatement(sql);\n stmt2 = connection.prepareStatement(sql2);\n rs = stmt2.executeQuery();\n stmt.setInt(1, rs.getInt("max"));\n stmt.setBoolean(2, igreja.getPossuiSalao());\n int retorno = stmt.executeUpdate();\n if (retorno == 0) {\n-   connection.rollback();\n+   connection.rollback();\n throw new SQLException("Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!");\n }\n connection.commit();\n }\n catch (SQLException e) {\n connection.rollback();\n throw e;\n }\n finally {\n try {\n stmt.close();\n stmt2.close();\n rs.close();\n this.fechaConexao();\n }\n catch (SQLException e) {\n throw e;\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-714|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n-   in.transferTo(0, in.size(), out);\n+   in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n-   System.out.println("IOException copying file: " + ioe.getMessage());\n+   System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-714|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n-   fis.close();\n+   fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n-   }\n+   }\n }\n if (os != null) {\n try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-715|SpecialSeperatorForDevSet|private void updateFile(File file) throws FileNotFoundException, IOException {\n File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, ""));\n FileChannel in = null;\n FileChannel out = null;\n try {\n if (!destFile.exists()) {\n destFile.getParentFile().mkdirs();\n destFile.createNewFile();\n }\n in = new FileInputStream(file).getChannel();\n out = new FileOutputStream(destFile).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n-   if (out != null) out.close();\n+   if (out != null) out.close();\n if (in != null) in.close();\n }\n }\n|SpecialSeperatorForDevSet|private void updateFile(File file) throws FileNotFoundException, IOException {\n File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, ""));\n FileChannel in = null;\n FileChannel out = null;\n try {\n if (!destFile.exists()) {\n destFile.getParentFile().mkdirs();\n destFile.createNewFile();\n }\n-   in = new FileInputStream(file).getChannel();\n+   in = new FileInputStream(file).getChannel();\n out = new FileOutputStream(destFile).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (out != null) out.close();\n if (in != null) in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-715|SpecialSeperatorForDevSet|private void updateFile(File file) throws FileNotFoundException, IOException {\n File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, ""));\n FileChannel in = null;\n FileChannel out = null;\n try {\n if (!destFile.exists()) {\n-   destFile.getParentFile().mkdirs();\n+   destFile.getParentFile().mkdirs();\n destFile.createNewFile();\n }\n in = new FileInputStream(file).getChannel();\n out = new FileOutputStream(destFile).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (out != null) out.close();\n if (in != null) in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n-   srcChannel.close();\n+   srcChannel.close();\n dstChannel.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-716|SpecialSeperatorForDevSet|public static String hash(String value) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(value.getBytes("iso-8859-1"), 0, value.length());\n-   md5hash = md.digest();\n+   md5hash = md.digest();\n return Hex.encodeHexString(md5hash);\n }\n catch (Exception e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public static String hash(String value) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(value.getBytes("iso-8859-1"), 0, value.length());\n md5hash = md.digest();\n return Hex.encodeHexString(md5hash);\n }\n catch (Exception e) {\n e.printStackTrace();\n return null;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-716|SpecialSeperatorForDevSet|public static String hash(String value) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n-   md.update(value.getBytes("iso-8859-1"), 0, value.length());\n+   md.update(value.getBytes("iso-8859-1"), 0, value.length());\n md5hash = md.digest();\n return Hex.encodeHexString(md5hash);\n }\n catch (Exception e) {\n e.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n-   final MessageDigest md = MessageDigest.getInstance("SHA");\n+   final MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-717|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n-   newName = si.getName().substring(0, idx);\n+   newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n-   for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n+   for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-717|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n-   FileManager.deleteFile(main);\n+   FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\n if (fSource.getName().equals("Thums.db")) return;\n System.out.println("copying " + fSource + " in " + file);\n OutputStream o = new BufferedOutputStream(new FileOutputStream(file));\n InputStream i = new BufferedInputStream(new FileInputStream(fSource));\n byte[] b = new byte[8192];\n int n;\n while ((n = i.read(b)) > 0) o.write(b, 0, n);\n i.close();\n-   o.close();\n+   o.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-718|SpecialSeperatorForDevSet|public void updateUser(final User user) throws IOException {\n try {\n Connection conn = null;\n boolean autoCommit = false;\n try {\n conn = pool.getConnection();\n autoCommit = conn.getAutoCommit();\n conn.setAutoCommit(false);\n final PreparedStatement updateUser = conn.prepareStatement("update users set mainRoleId=? where userId=?");\n updateUser.setInt(1, user.getMainRole().getId());\n updateUser.setString(2, user.getUserId());\n updateUser.executeUpdate();\n final PreparedStatement deleteRoles = conn.prepareStatement("delete from userRoles where userId=?");\n deleteRoles.setString(1, user.getUserId());\n deleteRoles.executeUpdate();\n final PreparedStatement insertRoles = conn.prepareStatement("insert into userRoles (userId, roleId) values (?,?)");\n for (final Role role : user.getRoles()) {\n insertRoles.setString(1, user.getUserId());\n insertRoles.setInt(2, role.getId());\n insertRoles.executeUpdate();\n }\n conn.commit();\n-   }\n+   }\n catch (Throwable t) {\n if (conn != null) conn.rollback();\n throw new SQLException(t.toString());\n }\n finally {\n if (conn != null) {\n conn.setAutoCommit(autoCommit);\n conn.close();\n }\n }\n }\n catch (final SQLException sqle) {\n log.log(Level.SEVERE, sqle.toString(), sqle);\n throw new IOException(sqle.toString());\n }\n }\n|SpecialSeperatorForDevSet|public void updateUser(final User user) throws IOException {\n try {\n Connection conn = null;\n boolean autoCommit = false;\n try {\n conn = pool.getConnection();\n-   autoCommit = conn.getAutoCommit();\n+   autoCommit = conn.getAutoCommit();\n conn.setAutoCommit(false);\n final PreparedStatement updateUser = conn.prepareStatement("update users set mainRoleId=? where userId=?");\n updateUser.setInt(1, user.getMainRole().getId());\n updateUser.setString(2, user.getUserId());\n updateUser.executeUpdate();\n final PreparedStatement deleteRoles = conn.prepareStatement("delete from userRoles where userId=?");\n deleteRoles.setString(1, user.getUserId());\n deleteRoles.executeUpdate();\n final PreparedStatement insertRoles = conn.prepareStatement("insert into userRoles (userId, roleId) values (?,?)");\n for (final Role role : user.getRoles()) {\n insertRoles.setString(1, user.getUserId());\n insertRoles.setInt(2, role.getId());\n insertRoles.executeUpdate();\n }\n conn.commit();\n }\n catch (Throwable t) {\n if (conn != null) conn.rollback();\n throw new SQLException(t.toString());\n }\n finally {\n if (conn != null) {\n conn.setAutoCommit(autoCommit);\n conn.close();\n }\n }\n }\n catch (final SQLException sqle) {\n log.log(Level.SEVERE, sqle.toString(), sqle);\n throw new IOException(sqle.toString());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-718|SpecialSeperatorForDevSet|public void updateUser(final User user) throws IOException {\n try {\n Connection conn = null;\n boolean autoCommit = false;\n try {\n conn = pool.getConnection();\n autoCommit = conn.getAutoCommit();\n conn.setAutoCommit(false);\n final PreparedStatement updateUser = conn.prepareStatement("update users set mainRoleId=? where userId=?");\n updateUser.setInt(1, user.getMainRole().getId());\n updateUser.setString(2, user.getUserId());\n updateUser.executeUpdate();\n final PreparedStatement deleteRoles = conn.prepareStatement("delete from userRoles where userId=?");\n deleteRoles.setString(1, user.getUserId());\n deleteRoles.executeUpdate();\n final PreparedStatement insertRoles = conn.prepareStatement("insert into userRoles (userId, roleId) values (?,?)");\n for (final Role role : user.getRoles()) {\n insertRoles.setString(1, user.getUserId());\n insertRoles.setInt(2, role.getId());\n insertRoles.executeUpdate();\n }\n conn.commit();\n }\n catch (Throwable t) {\n if (conn != null) conn.rollback();\n throw new SQLException(t.toString());\n-   }\n+   }\n finally {\n if (conn != null) {\n conn.setAutoCommit(autoCommit);\n conn.close();\n }\n }\n }\n catch (final SQLException sqle) {\n log.log(Level.SEVERE, sqle.toString(), sqle);\n throw new IOException(sqle.toString());\n }\n }\n|SpecialSeperatorForDevSet|public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\n ConnectionProvider cp = null;\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement pstmt = null;\n PrivilegeFactory factory = PrivilegeFactory.getInstance();\n Operation op = factory.createOperation();\n try {\n cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\n conn = cp.getConnection();\n try {\n pstmt = conn.prepareStatement(DEL_ROLE_PERM);\n pstmt.setString(1, roleid);\n pstmt.executeUpdate();\n }\n catch (Exception e) {\n }\n if ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\n return;\n }\n else {\n conn.setAutoCommit(false);\n pstmt = conn.prepareStatement(ADD_ROLE_PERM);\n Iterator role_perm_ir = role_perm_collect.iterator();\n while (role_perm_ir.hasNext()) {\n-   RolePermission rolePerm = (RolePermission) role_perm_ir.next();\n+   RolePermission rolePerm = (RolePermission) role_perm_ir.next();\n pstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\n pstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\n pstmt.setString(3, String.valueOf(rolePerm.getResopid()));\n pstmt.executeUpdate();\n }\n conn.commit();\n conn.setAutoCommit(true);\n }\n }\n catch (Exception e) {\n conn.rollback();\n throw new DAOException();\n }\n finally {\n try {\n if (conn != null) {\n conn.close();\n }\n if (pstmt != null) {\n pstmt.close();\n }\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-719|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n-   jf.getContentPane().setLayout(new BorderLayout());\n+   jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n-   final boolean writeExp = Utils.getFlag('s', args);\n+   final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-719|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n-   System.err.println("Initial Experiment:\n" + exp.toString());\n+   System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n out = new TitleCaseFilter(out);\n-   String line;\n+   String line;\n while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-720|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n-   out.close();\n+   out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n-   }\n+   }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-720|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n-   }\n+   }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|private void extractZipFile(String filename, JTextPane progressText) throws IOException {\n String destinationname = "";\n byte[] buf = new byte[1024];\n ZipInputStream zipinputstream = null;\n ZipEntry zipentry;\n zipinputstream = new ZipInputStream(new FileInputStream(filename));\n while ((zipentry = zipinputstream.getNextEntry()) != null) {\n String entryName = zipentry.getName();\n if (progressText != null) {\n progressText.setText("extracting " + entryName);\n }\n int n;\n FileOutputStream fileoutputstream;\n if (zipentry.isDirectory()) {\n-   (new File(destinationname + entryName)).mkdir();\n+   (new File(destinationname + entryName)).mkdir();\n continue;\n }\n fileoutputstream = new FileOutputStream(destinationname + entryName);\n while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n fileoutputstream.close();\n zipinputstream.closeEntry();\n }\n if (progressText != null) {\n progressText.setText("Files extracted");\n }\n zipinputstream.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-721|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n-   InputStream in = getClass().getResourceAsStream(resourcePath);\n+   InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n-   }\n+   }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-721|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n-   }\n+   }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void doFinishLoadAttachment(long attachmentId) {\n if (attachmentId != mLoadAttachmentId) {\n return;\n }\n Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n if (mLoadAttachmentSave) {\n try {\n File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n InputStream in = getContentResolver().openInputStream(contentUri);\n OutputStream out = new FileOutputStream(file);\n IOUtils.copy(in, out);\n out.flush();\n out.close();\n in.close();\n Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n new MediaScannerNotifier(this, file, mHandler);\n }\n catch (IOException ioe) {\n Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n }\n }\n else {\n-   try {\n+   try {\n Intent intent = new Intent(Intent.ACTION_VIEW);\n intent.setData(contentUri);\n intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n startActivity(intent);\n }\n catch (ActivityNotFoundException e) {\n mHandler.attachmentViewError();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-722|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n-   List<Layer> layers = new ArrayList<Layer>();\n+   List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n-   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n+   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-722|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n-   List<Layer> layers = new ArrayList<Layer>();\n+   List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToWriter_nullIn() throws Exception {\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n-   Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n+   Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n try {\n IOUtils.copy((Reader) null, writer);\n fail();\n }\n catch (NullPointerException ex) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-723|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n-   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n+   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-723|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n-   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n+   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n-   try {\n+   try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-724|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n-   in = urlConnection.getInputStream();\n+   in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n-   try {\n+   try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-724|SpecialSeperatorForDevSet|private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n URLConnection urlConnection = url.openConnection();\n File tmpFile = null;\n try {\n tmpFile = File.createTempFile("remoteLib_", null);\n InputStream in = null;\n FileOutputStream out = null;\n try {\n in = urlConnection.getInputStream();\n out = new FileOutputStream(tmpFile);\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n-   if (in != null) {\n+   if (in != null) {\n in.close();\n }\n }\n unzip(tmpFile, destDir);\n }\n finally {\n if (tmpFile != null) {\n tmpFile.delete();\n }\n }\n URL localURL = destDir.toURI().toURL();\n return localURL;\n }\n|SpecialSeperatorForDevSet|private void copyJar(File src, File dst) throws IOException {\n-   FileChannel srcChannel = null;\n+   FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(src).getChannel();\n dstChannel = new FileOutputStream(dst).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n catch (IOException e) {\n fLog.log(Level.SEVERE, e.getMessage(), e);\n }\n finally {\n srcChannel.close();\n dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-725|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n-   rutaFicheroOrigen.close();\n+   rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-725|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n-   rutaFicheroOrigen.close();\n+   rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|void run(PseudolocalizerArguments arguments) throws IOException {\n List<String> fileNames = arguments.getFileNames();\n PseudolocalizationPipeline pipeline = arguments.getPipeline();\n if (arguments.isInteractive()) {\n runStdin(pipeline);\n return;\n-   }\n+   }\n if (fileNames.size() == 0) {\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n return;\n }\n String suffix = arguments.getVariant();\n if (suffix == null) {\n suffix = "_pseudo";\n }\n else {\n suffix = "_" + suffix;\n }\n for (String fileName : fileNames) {\n File file = new File(fileName);\n if (!file.exists()) {\n System.err.println("File " + fileName + " not found");\n continue;\n }\n int lastDot = fileName.lastIndexOf('.');\n String extension;\n String outFileName;\n if (lastDot >= 0) {\n extension = fileName.substring(lastDot + 1);\n outFileName = fileName.substring(0, lastDot) + suffix + "." + extension;\n }\n else {\n extension = "";\n outFileName = fileName + suffix;\n }\n System.out.println("Processing " + fileName + " into " + outFileName);\n String fileType = arguments.getType();\n if (fileType == null) {\n fileType = extension;\n }\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n InputStream inputStream = new FileInputStream(file);\n List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n OutputStream outputStream = new FileOutputStream(new File(outFileName));\n writeMessages(msgCat, processedMessages, outputStream);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-726|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n-   String[] pieces = line.split("=");\n+   String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n-   while ((c = in.read()) != -1) out.write(c);\n+   while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-726|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n-   if (pieces.length == 2) {\n+   if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n-   else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n+   else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-727|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n-   Fann fann = new Fann(layers);\n+   Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n-   File temp = File.createTempFile("fannj_", ".tmp");\n+   File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-727|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n-   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n+   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|@Override public void actionPerformed(ActionEvent e) {\n try {\n Pattern delim = Pattern.compile("[ ]");\n BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));\n String line = null;\n URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write("db=snp&retmode=xml");\n while ((line = r.readLine()) != null) {\n String tokens[] = delim.split(line, 2);\n if (!tokens[0].startsWith("rs")) continue;\n wr.write("&id=" + tokens[0].substring(2).trim());\n }\n wr.flush();\n r.close();\n InputStream in = conn.getInputStream();\n IOUtils.copyTo(in, System.err);\n in.close();\n wr.close();\n }\n-   catch (IOException err) {\n+   catch (IOException err) {\n err.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-728|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-728|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public DataRecord addRecord(InputStream input) throws DataStoreException {\n File temporary = null;\n try {\n temporary = newTemporaryFile();\n DataIdentifier tempId = new DataIdentifier(temporary.getName());\n usesIdentifier(tempId);\n long length = 0;\n MessageDigest digest = MessageDigest.getInstance(DIGEST);\n OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n try {\n length = IOUtils.copyLarge(input, output);\n }\n-   finally {\n+   finally {\n output.close();\n }\n DataIdentifier identifier = new DataIdentifier(digest.digest());\n File file;\n synchronized (this) {\n usesIdentifier(identifier);\n file = getFile(identifier);\n if (!file.exists()) {\n File parent = file.getParentFile();\n parent.mkdirs();\n if (temporary.renameTo(file)) {\n temporary = null;\n }\n else {\n throw new IOException("Can not rename " + temporary.getAbsolutePath() + " to " + file.getAbsolutePath() + " (media read only?)");\n }\n }\n else {\n long now = System.currentTimeMillis();\n if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n }\n }\n if (file.length() != length) {\n if (!file.isFile()) {\n throw new IOException("Not a file: " + file);\n }\n throw new IOException(DIGEST + " collision: " + file);\n }\n }\n inUse.remove(tempId);\n return new FileDataRecord(identifier, file);\n }\n catch (NoSuchAlgorithmException e) {\n throw new DataStoreException(DIGEST + " not available", e);\n }\n catch (IOException e) {\n throw new DataStoreException("Could not add record", e);\n }\n finally {\n if (temporary != null) {\n temporary.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-729|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n-   MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n+   MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n-   while ((line = secrets.readLine()) != null) {\n+   while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-729|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n-   if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n+   if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|private static String encodeMd5(String key) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(key.getBytes());\n byte[] bytes = md.digest();\n-   String result = toHexString(bytes);\n+   String result = toHexString(bytes);\n return result;\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-730|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n-   while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n+   while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-730|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n-   }\n+   }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n-   out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n+   out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-731|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n-   ZipEntry entry;\n+   ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n-   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n+   while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-731|SpecialSeperatorForDevSet|-  public static void unzipModel(String filename, String tempdir) throws EDITSException {\n+  public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n-   ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n+   ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n zaos.closeArchiveEntry();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-732|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n-   sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n+   sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n-   FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n+   FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-732|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public byte[] getResponse() {\n final ByteArrayInputStream bais = new ByteArrayInputStream(request);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n List<String> lines = Collections.emptyList();\n try {\n @SuppressWarnings("unchecked") List<String> dl = IOUtils.readLines(bais);\n lines = dl;\n }\n catch (IOException ioex) {\n throw new AssertionError(ioex);\n }\n String resource = null;\n for (String line : lines) {\n if (line.startsWith("GET ")) {\n int endIndex = line.lastIndexOf(' ');\n resource = line.substring(4, endIndex);\n }\n }\n final PrintStream printStream = new PrintStream(baos);\n if (resource == null) {\n printStream.println("HTTP/1.1 400 Bad Request");\n }\n else {\n final InputStream inputStream = getClass().getResourceAsStream(resource);\n if (inputStream == null) {\n printStream.println("HTTP/1.1 404 Not Found");\n printStream.println();\n }\n else {\n printStream.println("HTTP/1.1 200 OK");\n printStream.println();\n try {\n IOUtils.copy(inputStream, printStream);\n }\n catch (IOException ioex) {\n throw new AssertionError(ioex);\n }\n }\n }\n-   printStream.flush();\n+   printStream.flush();\n printStream.close();\n return baos.toByteArray();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-733|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n-   out.write((byte) (grlen >> 8));\n+   out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n-   boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n+   boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-733|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n-   if (fmi) {\n+   if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public Converter(String input, String output) {\n try {\n FileInputStream fis = new FileInputStream(new File(input));\n BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));\n FileOutputStream fos = new FileOutputStream(new File(output));\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));\n int len = 80;\n char buf[] = new char[len];\n int numRead;\n while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n out.close();\n in.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n System.out.println("An I/O Exception Occurred: " + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-734|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n-   assertEquals("Hello World", new String(content, "UTF-8"));\n+   assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n-   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n+   content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-734|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n-   FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n+   FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String fromPath, String toPath) {\n try {\n File inputFile = new File(fromPath);\n String dirImg = (new File(toPath)).getParent();\n File tmp = new File(dirImg);\n if (!tmp.exists()) {\n tmp.mkdir();\n }\n File outputFile = new File(toPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n-   LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n+   LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-735|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n-   addFile(META_INF_CONTEXT_XML, contextXml, jout);\n+   addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n-   dstChannel.close();\n+   dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-735|SpecialSeperatorForDevSet|public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n File tempFile = null;\n JarFile jin = null;\n JarOutputStream jout = null;\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n String portletApplicationName = getPortletApplicationName(outputName);\n System.out.println("portletApplicationName = " + portletApplicationName);\n tempFile = File.createTempFile("webmill-delpoy-", "");\n tempFile.deleteOnExit();\n jin = new JarFile(inputName);\n jout = new JarOutputStream(new FileOutputStream(tempFile));\n Document webXml = null;\n Document portletXml = null;\n Document contextXml = null;\n ZipEntry src;\n InputStream source;\n Enumeration zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n if (WEB_INF_WEB_XML.equals(target)) {\n System.out.println("Found web.xml");\n webXml = parseXml(source);\n }\n else if (WEB_INF_PORTLET_XML.equals(target)) {\n System.out.println("Found WEB-INF/portlet.xml");\n portletXml = parseXml(source);\n }\n else if (META_INF_CONTEXT_XML.equals(target)) {\n System.out.println("Found META-INF/context.xml");\n contextXml = parseXml(source);\n }\n }\n finally {\n source.close();\n }\n }\n if (webXml == null) {\n throw new IllegalArgumentException("WEB-INF/web.xml not found");\n }\n if (portletXml == null) {\n throw new IllegalArgumentException("WEB-INF/portlet.xml not found");\n }\n WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n webRewriter.processWebXML();\n WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n contextRewriter.processContextXML();\n jin = new JarFile(inputName);\n zipEntries = jin.entries();\n while (zipEntries.hasMoreElements()) {\n src = (ZipEntry) zipEntries.nextElement();\n source = jin.getInputStream(src);\n try {\n String target = src.getName();\n String fullTarget = '/' + target;\n if (stripLoggers && target.endsWith(".jar") && (target.startsWith("WEB-INF/lib/commons-logging") || target.startsWith("WEB-INF/lib/log4j"))) {\n System.out.println("Skip logger " + target);\n continue;\n }\n else {\n if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n System.out.println("Skip portlet tld file " + fullTarget);\n continue;\n }\n else if (target.equals(WEB_INF_WEB_XML)) {\n System.out.println("Skip web.xml file " + target);\n continue;\n }\n else if (target.equals(WEB_INF_PORTLET_XML)) {\n System.out.println("Skip portlet.xml file " + target);\n continue;\n }\n else if (target.equals(META_INF_CONTEXT_XML)) {\n System.out.println("Skip context.xml file " + target);\n continue;\n }\n System.out.println("Add file " + target);\n }\n addFile(target, source, jout);\n }\n finally {\n source.close();\n }\n }\n addFile(WEB_INF_WEB_XML, webXml, jout);\n addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n addFile(META_INF_CONTEXT_XML, contextXml, jout);\n System.out.println("Attempting to add portlet.tld to war...");\n InputStream is = this.getClass().getResourceAsStream("/org/riverock/webmill/container/tags/portlet.tld");\n if (is == null) {\n System.out.println("Failed to find portlet.tld in classpath");\n }\n else {\n String portletTldFile = webRewriter.getRealPortletTldFile();\n if (portletTldFile.charAt(0) == '/') {\n portletTldFile = portletTldFile.substring(1);\n }\n System.out.println("Adding file " + portletTldFile);\n try {\n addFile(portletTldFile, is, jout);\n }\n finally {\n is.close();\n }\n }\n jout.close();\n jin.close();\n jin = null;\n jout = null;\n System.out.println("Creating war " + outputName + " ...");\n System.out.flush();\n srcChannel = new FileInputStream(tempFile).getChannel();\n dstChannel = new FileOutputStream(outputName).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n-   srcChannel = null;\n+   srcChannel = null;\n dstChannel.close();\n dstChannel = null;\n tempFile.delete();\n tempFile = null;\n System.out.println("War " + outputName + " created");\n System.out.flush();\n }\n finally {\n if (srcChannel != null && srcChannel.isOpen()) {\n try {\n srcChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (dstChannel != null && dstChannel.isOpen()) {\n try {\n dstChannel.close();\n }\n catch (IOException e1) {\n }\n }\n if (jin != null) {\n try {\n jin.close();\n jin = null;\n }\n catch (IOException e1) {\n }\n }\n if (jout != null) {\n try {\n jout.close();\n jout = null;\n }\n catch (IOException e1) {\n }\n }\n if (tempFile != null && tempFile.exists()) {\n tempFile.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n log.println("Concat files into: " + outputFile);\n OutputStream out = new FileOutputStream(absPath + outputFile);\n byte[] buffer = new byte[4096];\n int readBytes;\n for (String file : inputFiles) {\n log.println(" Read: " + file);\n InputStream in = new FileInputStream(absPath + file);\n while ((readBytes = in.read(buffer)) != -1) {\n out.write(buffer, 0, readBytes);\n }\n-   in.close();\n+   in.close();\n }\n out.close();\n if (compress) {\n long normalSize = new File(absPath + outputFile).length();\n ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000");\n builder.directory(new File(absPath));\n Process process = builder.start();\n process.waitFor();\n long minSize = new File(absPath + outputFile).length();\n long diff = normalSize - minSize;\n double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n log.println("Result: " + percentage + " % (" + diffSize + " KB)");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-736|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n-   byte[] theDigest = md.digest();\n+   byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-736|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return returnString;\n-   }\n+   }\n catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-737|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n-   assertNotNull(source);\n+   assertNotNull(source);\n os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n rSrc.delete();\n }\n|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n-   assertNotNull(dummySource);\n+   assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n assertNotNull(source);\n os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n rSrc.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-737|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n assertNotNull(source);\n-   os = ((ModifiableSource) source).getOutputStream();\n+   os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n rSrc.delete();\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToWriter_nullIn() throws Exception {\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n Writer writer = new OutputStreamWriter(baout, "US-ASCII");\n try {\n IOUtils.copy((Reader) null, writer);\n fail();\n }\n catch (NullPointerException ex) {\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-738|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   pdWriter.writePixelData();\n+   pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n-   dcmParser.parseDcmFile(null, Tags.PixelData);\n+   dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-738|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n-   System.out.println("writing " + outFile + "...");\n+   System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static File getZipAsFile(DigitalObject digOb) {\n String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n File tmpFolder = new File(utils_tmp, folderName);\n File zip = null;\n try {\n FileUtils.forceMkdir(tmpFolder);\n zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n FileOutputStream out = new FileOutputStream(zip);\n IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n out.close();\n }\n catch (FileNotFoundException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return zip;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-739|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n-   MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n+   MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n-   }\n+   }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-739|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n-   hasher.update(title.getBytes());\n+   hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public static synchronized String toSHA1(String str) {\n Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");\n try {\n-   MessageDigest md;\n+   MessageDigest md;\n md = MessageDigest.getInstance(SHA1);\n byte[] sha1hash = new byte[40];\n md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n catch (UnsupportedEncodingException ex) {\n ex.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-740|SpecialSeperatorForDevSet|private static void copyFile(File in, File out) {\n try {\n-   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n+   FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private static void copyFile(File in, File out) {\n-   try {\n+   try {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-740|SpecialSeperatorForDevSet|private static void copyFile(File in, File out) {\n try {\n FileChannel sourceChannel = new FileInputStream(in).getChannel();\n FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copy(File in, File out) throws IOException {\n if (in.exists() && in != null && out != null) {\n if (!out.exists()) {\n if (in.isDirectory()) {\n out.mkdirs();\n }\n else {\n out.createNewFile();\n }\n }\n String source = in.isDirectory() ? "directory" : "file";\n String target = out.isDirectory() ? "directory" : "file";\n if (!source.equals(target)) {\n throw new IOException("Can't duplicate " + source + " as " + target);\n }\n else {\n if (source.equals("directory")) {\n File[] files = in.listFiles();\n for (File file : files) {\n copy(file, new File(out, file.getName()));\n }\n }\n else {\n FileChannel inCh = new FileInputStream(in).getChannel();\n-   FileChannel outCh = new FileOutputStream(out).getChannel();\n+   FileChannel outCh = new FileOutputStream(out).getChannel();\n inCh.transferTo(0, inCh.size(), outCh);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-741|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n-   int num = nodelist.getLength();\n+   int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n-   System.out.println(ex);\n+   System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-741|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n-   FileOutputStream os = new FileOutputStream(filename);\n+   FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|public void resolvePlugins() {\n try {\n File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\n File pluginsFile = new File(cacheDir, "plugins.xml");\n if (!pluginsFile.exists()) {\n URL pluginURL = new URL("http://xpontus.sourceforge.net/snapshot/plugins.xml");\n InputStream is = pluginURL.openStream();\n OutputStream os = FileUtils.openOutputStream(pluginsFile);\n IOUtils.copy(is, os);\n IOUtils.closeQuietly(os);\n IOUtils.closeQuietly(is);\n }\n resolvePlugins(pluginsFile.getAbsolutePath());\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-742|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n-   FileChannel in = null, out = null;\n+   FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n-   }\n+   }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-742|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n-   if (in != null) in.close();\n+   if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n if (destFile.exists() && destFile.isDirectory()) {\n throw new IOException("Destination '" + destFile + "' exists but is a directory");\n }\n FileChannel input = new FileInputStream(srcFile).getChannel();\n try {\n FileChannel output = new FileOutputStream(destFile).getChannel();\n try {\n output.transferFrom(input, 0, input.size());\n }\n-   finally {\n+   finally {\n IOUtil.closeQuietly(output);\n }\n }\n finally {\n IOUtil.closeQuietly(input);\n }\n if (srcFile.length() != destFile.length()) {\n throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");\n }\n if (preserveFileDate) {\n destFile.setLastModified(srcFile.lastModified());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-743|SpecialSeperatorForDevSet|public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n-   }\n+   }\n catch (NoSuchAlgorithmException nsae) {\n _log.error(nsae, nsae);\n }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n }\n catch (NoSuchAlgorithmException nsae) {\n _log.error(nsae, nsae);\n-   }\n+   }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-743|SpecialSeperatorForDevSet|-  public static String digest(String algorithm, String text) {\n+  public static String digest(String algorithm, String text) {\n MessageDigest mDigest = null;\n try {\n mDigest = MessageDigest.getInstance(algorithm);\n mDigest.update(text.getBytes(ENCODING));\n }\n catch (NoSuchAlgorithmException nsae) {\n _log.error(nsae, nsae);\n }\n catch (UnsupportedEncodingException uee) {\n _log.error(uee, uee);\n }\n byte[] raw = mDigest.digest();\n BASE64Encoder encoder = new BASE64Encoder();\n return encoder.encode(raw);\n }\n|SpecialSeperatorForDevSet|static String encrypt(String plaintext) {\n MessageDigest d = null;\n try {\n d = MessageDigest.getInstance("SHA-1");\n d.update(plaintext.getBytes("UTF-8"));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return new String(Base64.encodeBase64(d.digest()));\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-744|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n-   in = new Base64InputStream(in);\n+   in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n-   if (contentTransferEncoding != null) {\n+   if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-744|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n-   }\n+   }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n try {\n CmdLineParser cmdLineParser = new CmdLineParser();\n Option formatOption = cmdLineParser.addStringOption('f', "format");\n Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset");\n Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset");\n cmdLineParser.parse(args);\n String format = (String) cmdLineParser.getOptionValue(formatOption);\n String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\n if (outputEncoding == null || outputEncoding.trim().equals("")) {\n outputEncoding = "utf-8";\n System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.");\n }\n String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\n if (inputEncoding == null || outputEncoding.trim().equals("")) {\n inputEncoding = "utf-8";\n System.out.println("Defaulting to input charset utf-8 as argument -i is missing or not valid.");\n }\n String[] remainingArgs = cmdLineParser.getRemainingArgs();\n if (remainingArgs.length != 2) {\n printUsage("Input and output file are not specified correctly. ");\n }\n File inputFile = new File(remainingArgs[0]);\n if (!inputFile.exists()) {\n printUsage("Input file " + remainingArgs[0] + " does not exist. ");\n }\n if (format == null || format.trim().equals("")) {\n format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n }\n File outputFile = new File(remainingArgs[1]);\n if (!outputFile.exists()) {\n outputFile.createNewFile();\n }\n System.out.println("format detected: " + format);\n-   if ("html".equals(format)) {\n+   if ("html".equals(format)) {\n Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\n OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\n char[] buffer = new char[1024];\n int read;\n do {\n read = reader.read(buffer);\n if (read > 0) {\n out.write(buffer, 0, read);\n }\n }\n while (read != -1);\n out.flush();\n out.close();\n }\n else {\n printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed");\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n printUsage(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-745|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n-   }\n+   }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n-   md5.update(internalId.getBytes());\n+   md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-745|SpecialSeperatorForDevSet|private void generateDeviceUUID() {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(deviceType.getBytes());\n md5.update(internalId.getBytes());\n md5.update(bindAddress.getHostName().getBytes());\n StringBuffer hexString = new StringBuffer();\n byte[] digest = md5.digest();\n for (int i = 0;\n i < digest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & digest[i]));\n }\n uuid = hexString.toString().toUpperCase();\n }\n catch (Exception ex) {\n RuntimeException runTimeEx = new RuntimeException("Unexpected error during MD5 hash creation, check your JRE");\n runTimeEx.initCause(ex);\n-   throw runTimeEx;\n+   throw runTimeEx;\n }\n }\n|SpecialSeperatorForDevSet|public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n-   byte[] md5hash = new byte[32];\n+   byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-746|SpecialSeperatorForDevSet|public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n-   bos.flush();\n+   bos.flush();\n }\n catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n bos.flush();\n-   }\n+   }\n catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-746|SpecialSeperatorForDevSet|public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n BufferedInputStream bis = null;\n BufferedOutputStream bos = null;\n try {\n bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n bos = new BufferedOutputStream(resp.getOutputStream());\n IOUtils.copy(bis, bos);\n bos.flush();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n _cat.warn("Write data failed!", e);\n }\n finally {\n IOUtils.closeQuietly(bis);\n IOUtils.closeQuietly(bos);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String source_name, String dest_name) throws IOException {\n source_name = Shell.getUtils().constructPath(source_name);\n File source_file = new File(source_name);\n dest_name = Shell.getUtils().constructPath(dest_name);\n File destination_file = new File(dest_name);\n FileInputStream source = null;\n FileOutputStream destination = null;\n byte[] buffer;\n int bytes_read;\n try {\n if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException("cp: no such source file: " + source_name);\n if (!source_file.canRead()) throw new FileCopyException("cp: source file " + "is unreadable: " + source_name);\n if (destination_file.exists()) {\n if (destination_file.isFile()) {\n BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n String response;\n if (!destination_file.canWrite()) throw new FileCopyException("cp: destination " + "file is unwriteable: " + dest_name);\n System.out.print("cp: file " + dest_name + " already exists. Overwrite it ? (Y/N): ");\n System.out.flush();\n response = in.readLine();\n if (!response.equals("Y") && !response.equals("y")) throw new FileCopyException("cp: copy cancelled.");\n }\n else throw new FileCopyException("cp: destination " + "is not a file: " + dest_name);\n }\n else {\n File parentdir = parent(destination_file);\n if (!parentdir.exists()) throw new FileCopyException("cp: destination " + "directory doesn't exist: " + dest_name);\n if (!parentdir.canWrite()) throw new FileCopyException("cp: destination " + "directory is unwriteable: " + dest_name);\n }\n source = new FileInputStream(source_file);\n destination = new FileOutputStream(destination_file);\n buffer = new byte[1024];\n int size = (new Long((source_file.length() / 1024) / 50)).intValue();\n int c = 1;\n int written = 0;\n System.out.print("cp: ");\n while (true) {\n if (written < 50) {\n if ((c - 1) == size && size != 0) {\n System.out.print("#");\n-   c = 1;\n+   c = 1;\n written++;\n }\n else if (size == 0) {\n int j = 1;\n if (c > 1) j = (50 / c) - 50;\n else j = 50 / c;\n for (int i = 0;\n i < j;\n i++) System.out.print("#");\n written += j;\n }\n }\n bytes_read = source.read(buffer);\n if (bytes_read == -1) break;\n destination.write(buffer, 0, bytes_read);\n c++;\n }\n System.out.println();\n }\n finally {\n if (source != null) try {\n source.close();\n }\n catch (IOException e) {\n }\n if (destination != null) try {\n destination.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-747|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n-   final InputStream in = FileLocator.openStream(getBundle(), src, false);\n+   final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n-   IOUtils.copy(in, out);\n+   IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-747|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n-   out.close();\n+   out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n int length;\n-   while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n+   while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-748|SpecialSeperatorForDevSet|-  private static void copy(String sourceName, String destName) throws IOException {\n+  private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n-   long size = in.size();\n+   long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-748|SpecialSeperatorForDevSet|-  private static void copy(String sourceName, String destName) throws IOException {\n+  private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private void streamContains(String in, InputStream stream) throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(stream, baos);\n byte[] bytes = baos.toByteArray();\n String cmp = new String(bytes, "UTF-8");\n assertTrue(cmp.contains(in));\n baos.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-749|SpecialSeperatorForDevSet|-  public static void copy(String from_name, String to_name) throws IOException {\n+  public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n-   from.close();\n+   from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-749|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n-   String parent = to_file.getParent();\n+   String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-750|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n-   digest.update(data.getBytes());\n+   digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n-   try {\n+   try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-750|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n-   }\n+   }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|static Cipher createCipher(String passwd, int mode) throws Exception {\n PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\n SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");\n SecretKey key = keyFactory.generateSecret(keySpec);\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update("input".getBytes());\n byte[] digest = md.digest();\n byte[] salt = new byte[8];\n for (int i = 0;\n i < 8;\n ++i) salt[i] = digest[i];\n-   PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n+   PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\n cipher.init(mode, key, paramSpec);\n return cipher;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-751|SpecialSeperatorForDevSet|-  public static void copy(File sourceFile, File destinationFile) throws IOException {\n+  public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copy(File sourceFile, File destinationFile) throws IOException {\n+  public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-751|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) throws IOException {\n FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n-   sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n+   sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n sourceFileChannel.close();\n destinationFileChannel.close();\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n {\n Assert.notNull(configuration);\n Assert.notNull(monitor);\n }\n final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "");\n final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n final IFile pom = prj.getFile("pom.xml");\n if (!pom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 root pom.xml available");\n }\n ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n handleRootProfile(doc);\n }\n }\n);\n final IFile bpom = prj.getFile("business/pom.xml");\n if (!bpom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 business pom.xml available");\n }\n ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n try {\n handleBusinessProfile(doc, configuration, prj);\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n);\n final ByteArrayOutputStream output = new ByteArrayOutputStream();\n try {\n-   final Properties props = new Properties();\n+   final Properties props = new Properties();\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n props.setProperty("hibernate.dialect", support.getDialectClass(dialectName));\n props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver"));\n props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>"));\n props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, ""));\n props.store(output, "hibernate properties for code generation using NexOpen Tools 1.0.0");\n final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties");\n if (!props_file.exists()) {\n props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n }\n else {\n props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n }\n }\n catch (final IOException e) {\n Logger.getLog().error("I/O exception ", e);\n throw new RuntimeException(e);\n }\n finally {\n try {\n output.flush();\n output.close();\n }\n catch (IOException e) {\n }\n }\n if (NexOpenProjectUtils.is04xProject(prj)) {\n final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml");\n if (!appContext.exists()) {\n throw new IllegalStateException("It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project");\n }\n ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n final Element root = doc.getDocumentElement();\n final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean");\n for (final Element bean : beans) {\n final String id = bean.getAttribute("id");\n if ("valueListAdapterResolver".equals(id)) {\n try {\n final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "");\n final String className = new StringBuilder(pkgName).append(".vlh.support.AnnotationValueListAdapterResolver").toString();\n bean.setAttribute("class", className);\n break;\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n }\n }\n);\n }\n {\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n if (support.isReverseEngineeringFileNeeded(dialectName)) {\n try {\n final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName));\n if (!revengFile.exists()) {\n final Bundle bundle = HibernateActivator.getDefault().getBundle();\n final Path src = new Path("resources/" + support.getReversEngineeringFile(dialectName));\n final InputStream in = FileLocator.openStream(bundle, src, false);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(in, baos);\n String str = baos.toString();\n str = str.replace("${\nschema}\n", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n }\n }\n catch (final IOException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n final IResource resource = (IResource) prj.getAdapter(IResource.class);\n final QualifiedName qn = new QualifiedName("org.nexopenframework.ide.eclipse.ui", "default.profile");\n final String profile = resource.getPersistentProperty(qn);\n resource.setPersistentProperty(qn, "reverse-engineering");\n try {\n final InstallProjectAction action = new InstallProjectAction();\n action.scheduleJob(prj, monitor);\n prj.refreshLocal(2, monitor);\n }\n finally {\n prj.setPersistentProperty(qn, profile);\n }\n }\n else {\n Logger.getLog().info("Not a NexOpen project :: " + prj);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-752|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n-   app.append((s2.length() == 1) ? "0" + s2 : s2);\n+   app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n-   i++) {\n+   i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-752|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n-   MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n+   MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n-   md5.update(valueBeforeMD5.getBytes());\n+   md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-753|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n-   if (read == -1) break;\n+   if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-753|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n-   }\n+   }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n-   byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n+   byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-754|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n-   int c;\n+   int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-754|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n-   OutputStream out = new FileOutputStream(destFile);\n+   OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-755|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n-   layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n+   layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n-   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n+   layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-755|SpecialSeperatorForDevSet|@Test public void testTrainingBackprop() throws IOException {\n File temp = File.createTempFile("fannj_", ".tmp");\n temp.deleteOnExit();\n IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));\n List<Layer> layers = new ArrayList<Layer>();\n layers.add(Layer.create(2));\n layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n Fann fann = new Fann(layers);\n Trainer trainer = new Trainer(fann);\n trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n float desiredError = .001f;\n float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n-   assertTrue("" + mse, mse <= desiredError);\n+   assertTrue("" + mse, mse <= desiredError);\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n-   }\n+   }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-756|SpecialSeperatorForDevSet|public String getPasswordMD5() {\n try {\n MessageDigest algorithm = MessageDigest.getInstance("MD5");\n algorithm.reset();\n algorithm.update(password.getBytes());\n byte messageDigest[] = algorithm.digest();\n-   StringBuffer hexString = new StringBuffer();\n+   StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public String getPasswordMD5() {\n-   try {\n+   try {\n MessageDigest algorithm = MessageDigest.getInstance("MD5");\n algorithm.reset();\n algorithm.update(password.getBytes());\n byte messageDigest[] = algorithm.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n }\n return null;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-756|SpecialSeperatorForDevSet|public String getPasswordMD5() {\n try {\n MessageDigest algorithm = MessageDigest.getInstance("MD5");\n algorithm.reset();\n algorithm.update(password.getBytes());\n byte messageDigest[] = algorithm.digest();\n StringBuffer hexString = new StringBuffer();\n for (int i = 0;\n i < messageDigest.length;\n i++) {\n hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n }\n return hexString.toString();\n }\n catch (NoSuchAlgorithmException nsae) {\n }\n return null;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String encryptPassword(String password) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("SHA1");\n digest.update(password.getBytes("UTF-8"));\n byte[] hash = digest.digest();\n StringBuffer buf = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n int halfbyte = (hash[i] >>> 4) & 0x0F;\n int two_halfs = 0;\n do {\n if ((0 <= halfbyte) && (halfbyte <= 9)) {\n buf.append((char) ('0' + halfbyte));\n }\n else {\n buf.append((char) ('a' + (halfbyte - 10)));\n }\n halfbyte = hash[i] & 0x0F;\n }\n while (two_halfs++ < 1);\n }\n return buf.toString();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n }\n return null;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-757|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n-   throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n+   throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n-   try {\n+   try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-757|SpecialSeperatorForDevSet|public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n byte[] hash;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA-256");\n digest.reset();\n digest.update(PasswordSalt.getBytes("UTF-16"));\n hash = digest.digest(passwordHash.getBytes("UTF-16"));\n return bytesToHex(hash);\n }\n catch (NoSuchAlgorithmException ex) {\n throw new PasswordHashingException("Current environment does not supply needed security algorithms. Please update Java");\n }\n catch (UnsupportedEncodingException ex) {\n-   throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n+   throw new PasswordHashingException("Current environment does not supply needed character encoding. Please update Java");\n }\n }\n|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n-   buf.append(s);\n+   buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-758|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n-   return app.toString();\n+   return app.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-758|SpecialSeperatorForDevSet|private final String createMD5(String pwd) throws Exception {\n MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();\n md.update(pwd.getBytes("UTF-8"));\n byte[] pd = md.digest();\n StringBuffer app = new StringBuffer();\n for (int i = 0;\n i < pd.length;\n i++) {\n String s2 = Integer.toHexString(pd[i] & 0xFF);\n app.append((s2.length() == 1) ? "0" + s2 : s2);\n }\n return app.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void hash(String... plainTexts) {\n try {\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n for (String plainText : plainTexts) md.update(plainText.getBytes());\n byte b[] = md.digest();\n int i;\n StringBuffer buf = new StringBuffer("");\n for (int offset = 0;\n offset < b.length;\n offset++) {\n i = b[offset];\n if (i < 0) i += 256;\n if (i < 16) buf.append("0");\n buf.append(Integer.toHexString(i));\n }\n String str = buf.toString();\n System.out.println("result: " + buf.toString());\n System.out.println("result: " + buf.toString().substring(8, 24));\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-759|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n-   return estado;\n+   return estado;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-759|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n-   }\n+   }\n return estado;\n }\n|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n-   for (File sel : source.listFiles()) copyTo(sel, temp);\n+   for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-760|SpecialSeperatorForDevSet|-  private boolean authenticate(Module module) throws Exception {\n+  private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n-   else {\n+   else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-760|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n-   rand.nextBytes(challenge);\n+   rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|public static String SHA(String source) {\n logger.info(source);\n String result = null;\n try {\n MessageDigest digest = MessageDigest.getInstance("SHA");\n digest.update(source.getBytes());\n byte[] bytes = digest.digest();\n result = EncodeUtils.hexEncode(bytes);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n logger.info(result);\n return result;\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-761|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n-   }\n+   }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n-   final StringWriter sw = new StringWriter();\n+   final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-761|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n-   if (args.length > 2) {\n+   if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-762|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n-   catch (java.io.IOException exc) {\n+   catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-762|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n-   try {\n+   try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-763|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n-   ++j) {\n+   ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-763|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n-   }\n+   }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|private static final String hash(String input, String algorithm) {\n try {\n MessageDigest dig = MessageDigest.getInstance(algorithm);\n dig.update(input.getBytes());\n StringBuffer result = new StringBuffer();\n byte[] digest = dig.digest();\n String[] hex = {\n "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" }\n;\n for (int i = 0;\n i < digest.length;\n-   i++) {\n+   i++) {\n int u = digest[i];\n u &= 0x000000FF;\n int highCount = u / 16;\n int lowCount = u - (highCount * 16);\n result.append(hex[highCount]);\n result.append(hex[lowCount]);\n }\n return result.toString();\n }\n catch (NoSuchAlgorithmException e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-764|SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n ic.transferTo(0, ic.size(), oc);\n ic.close();\n oc.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n ic.transferTo(0, ic.size(), oc);\n ic.close();\n oc.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-764|SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n-   ic.transferTo(0, ic.size(), oc);\n+   ic.transferTo(0, ic.size(), oc);\n ic.close();\n oc.close();\n }\n|SpecialSeperatorForDevSet|public void patch() throws IOException {\n if (mods.isEmpty()) {\n return;\n }\n IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-765|SpecialSeperatorForDevSet|public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n-   byte[] buffer = new byte[1024];\n+   byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n }\n|SpecialSeperatorForDevSet|public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n-   file.createNewFile();\n+   file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-765|SpecialSeperatorForDevSet|-  public void copyToDir(File dir) {\n+  public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File from, File to) {\n boolean result;\n if (from.isDirectory()) {\n File[] subFiles = from.listFiles();\n for (int i = 0;\n i < subFiles.length;\n i++) {\n File newDir = new File(to, subFiles[i].getName());\n result = false;\n if (subFiles[i].isDirectory()) {\n if (newDir.exists()) result = true;\n else result = newDir.mkdirs();\n }\n else if (subFiles[i].isFile()) {\n try {\n result = newDir.createNewFile();\n }\n catch (IOException e) {\n log.error("unable to create new file: " + newDir, e);\n result = false;\n }\n }\n if (result) copy(subFiles[i], newDir);\n }\n }\n else if (from.isFile()) {\n FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n out = new FileOutputStream(to);\n int fileLength = (int) from.length();\n char charBuff[] = new char[fileLength];\n int len;\n int oneChar;\n while ((oneChar = in.read()) != -1) {\n out.write(oneChar);\n }\n }\n catch (FileNotFoundException e) {\n log.error("File not found!", e);\n }\n catch (IOException e) {\n-   log.error("Unable to read from file!", e);\n+   log.error("Unable to read from file!", e);\n }\n finally {\n try {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n catch (IOException e1) {\n log.error("Error closing file reader/writer", e1);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-766|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-766|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n-   int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n+   int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(File from, File to) {\n boolean result;\n if (from.isDirectory()) {\n File[] subFiles = from.listFiles();\n for (int i = 0;\n i < subFiles.length;\n i++) {\n File newDir = new File(to, subFiles[i].getName());\n result = false;\n if (subFiles[i].isDirectory()) {\n if (newDir.exists()) result = true;\n else result = newDir.mkdirs();\n }\n else if (subFiles[i].isFile()) {\n try {\n result = newDir.createNewFile();\n }\n catch (IOException e) {\n log.error("unable to create new file: " + newDir, e);\n result = false;\n }\n }\n if (result) copy(subFiles[i], newDir);\n }\n }\n else if (from.isFile()) {\n-   FileInputStream in = null;\n+   FileInputStream in = null;\n FileOutputStream out = null;\n try {\n in = new FileInputStream(from);\n out = new FileOutputStream(to);\n int fileLength = (int) from.length();\n char charBuff[] = new char[fileLength];\n int len;\n int oneChar;\n while ((oneChar = in.read()) != -1) {\n out.write(oneChar);\n }\n }\n catch (FileNotFoundException e) {\n log.error("File not found!", e);\n }\n catch (IOException e) {\n log.error("Unable to read from file!", e);\n }\n finally {\n try {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n catch (IOException e1) {\n log.error("Error closing file reader/writer", e1);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-767|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n-   }\n+   }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n-   out.write(buffer, 0, read);\n+   out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-767|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n-   while ((read = in.read(buffer)) >= 0) {\n+   while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (File file2 : files) {\n recurseFiles(root, file2, zaos, absolute);\n }\n }\n else if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) {\n String filename = null;\n if (absolute) {\n filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n }\n else {\n filename = file.getName();\n }\n ZipArchiveEntry zae = new ZipArchiveEntry(filename);\n zae.setSize(file.length());\n zaos.putArchiveEntry(zae);\n FileInputStream fis = new FileInputStream(file);\n IOUtils.copy(fis, zaos);\n zaos.closeArchiveEntry();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-768|SpecialSeperatorForDevSet|public void update(String channelPath, String dataField, String fatherDocId) {\n String sqlInitial = "select uri from t_ip_doc_res where doc_id = '" + fatherDocId + "' and type=" + " '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n-   String sqlsortURL = "update t_ip_doc_res set uri = ? where doc_id = '" + fatherDocId + "' " + " and type = '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n+   String sqlsortURL = "update t_ip_doc_res set uri = ? where doc_id = '" + fatherDocId + "' " + " and type = '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement ps = null;\n try {\n dbo = (ERDBOperation) createDBOperation();\n String url = "";\n boolean flag = true;\n StringTokenizer st = null;\n conn = dbo.getConnection();\n conn.setAutoCommit(false);\n ps = conn.prepareStatement(sqlInitial);\n rs = ps.executeQuery();\n if (rs.next()) url = rs.getString(1);\n if (!url.equals("")) {\n st = new StringTokenizer(url, ",");\n String sortDocId = "";\n while (st.hasMoreTokens()) {\n if (flag) {\n sortDocId = "'" + st.nextToken() + "'";\n flag = false;\n }\n else {\n sortDocId = sortDocId + "," + "'" + st.nextToken() + "'";\n }\n }\n String sqlsort = "select id from t_ip_doc where id in (" + sortDocId + ") order by " + dataField;\n ps = conn.prepareStatement(sqlsort);\n rs = ps.executeQuery();\n String sortURL = "";\n boolean sortflag = true;\n while (rs.next()) {\n if (sortflag) {\n sortURL = rs.getString(1);\n sortflag = false;\n }\n else {\n sortURL = sortURL + "," + rs.getString(1);\n }\n }\n ps = conn.prepareStatement(sqlsortURL);\n ps.setString(1, sortURL);\n ps.executeUpdate();\n }\n conn.commit();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n }\n finally {\n close(rs, null, ps, conn, dbo);\n }\n }\n|SpecialSeperatorForDevSet|public void update(String channelPath, String dataField, String fatherDocId) {\n String sqlInitial = "select uri from t_ip_doc_res where doc_id = '" + fatherDocId + "' and type=" + " '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n String sqlsortURL = "update t_ip_doc_res set uri = ? where doc_id = '" + fatherDocId + "' " + " and type = '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement ps = null;\n try {\n dbo = (ERDBOperation) createDBOperation();\n String url = "";\n boolean flag = true;\n StringTokenizer st = null;\n conn = dbo.getConnection();\n conn.setAutoCommit(false);\n ps = conn.prepareStatement(sqlInitial);\n rs = ps.executeQuery();\n if (rs.next()) url = rs.getString(1);\n if (!url.equals("")) {\n st = new StringTokenizer(url, ",");\n String sortDocId = "";\n while (st.hasMoreTokens()) {\n if (flag) {\n sortDocId = "'" + st.nextToken() + "'";\n flag = false;\n }\n else {\n sortDocId = sortDocId + "," + "'" + st.nextToken() + "'";\n }\n }\n String sqlsort = "select id from t_ip_doc where id in (" + sortDocId + ") order by " + dataField;\n ps = conn.prepareStatement(sqlsort);\n rs = ps.executeQuery();\n String sortURL = "";\n boolean sortflag = true;\n while (rs.next()) {\n if (sortflag) {\n sortURL = rs.getString(1);\n sortflag = false;\n }\n else {\n sortURL = sortURL + "," + rs.getString(1);\n }\n }\n ps = conn.prepareStatement(sqlsortURL);\n ps.setString(1, sortURL);\n ps.executeUpdate();\n }\n conn.commit();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n }\n finally {\n-   close(rs, null, ps, conn, dbo);\n+   close(rs, null, ps, conn, dbo);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-768|SpecialSeperatorForDevSet|public void update(String channelPath, String dataField, String fatherDocId) {\n String sqlInitial = "select uri from t_ip_doc_res where doc_id = '" + fatherDocId + "' and type=" + " '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n String sqlsortURL = "update t_ip_doc_res set uri = ? where doc_id = '" + fatherDocId + "' " + " and type = '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement ps = null;\n try {\n dbo = (ERDBOperation) createDBOperation();\n String url = "";\n boolean flag = true;\n StringTokenizer st = null;\n conn = dbo.getConnection();\n conn.setAutoCommit(false);\n ps = conn.prepareStatement(sqlInitial);\n rs = ps.executeQuery();\n if (rs.next()) url = rs.getString(1);\n if (!url.equals("")) {\n st = new StringTokenizer(url, ",");\n String sortDocId = "";\n-   while (st.hasMoreTokens()) {\n+   while (st.hasMoreTokens()) {\n if (flag) {\n sortDocId = "'" + st.nextToken() + "'";\n flag = false;\n }\n else {\n sortDocId = sortDocId + "," + "'" + st.nextToken() + "'";\n }\n }\n String sqlsort = "select id from t_ip_doc where id in (" + sortDocId + ") order by " + dataField;\n ps = conn.prepareStatement(sqlsort);\n rs = ps.executeQuery();\n String sortURL = "";\n boolean sortflag = true;\n while (rs.next()) {\n if (sortflag) {\n sortURL = rs.getString(1);\n sortflag = false;\n }\n else {\n sortURL = sortURL + "," + rs.getString(1);\n }\n }\n ps = conn.prepareStatement(sqlsortURL);\n ps.setString(1, sortURL);\n ps.executeUpdate();\n }\n conn.commit();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n }\n finally {\n close(rs, null, ps, conn, dbo);\n }\n }\n|SpecialSeperatorForDevSet|private void insertService(String table, int type) {\n Connection con = null;\n log.info("");\n log.info("正在生成" + table + "的服务。。。。。。。");\n try {\n con = DODataSource.getDefaultCon();\n con.setAutoCommit(false);\n Statement stmt = con.createStatement();\n Statement stmt2 = con.createStatement();\n String serviceUid = UUIDHex.getInstance().generate();\n DOBO bo = DOBO.getDOBOByName(table);\n List props = new ArrayList();\n StringBuffer mainSql = null;\n String name = "";\n String l10n = "";\n String prefix = table;\n String serviceType = "null";\n Boolean isNew = null;\n switch(type) {\n case 1: name = prefix + "_insert";\n l10n = name;\n props = bo.retrieveProperties();\n mainSql = getInsertSql(props, table);\n serviceType = "8";\n isNew = Boolean.TRUE;\n break;\n case 2: name = prefix + "_update";\n l10n = name;\n props = bo.retrieveProperties();\n mainSql = this.getModiSql(props, table);\n serviceType = "7";\n isNew = Boolean.FALSE;\n break;\n case 3: DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n if (property == null || property.getColName() == null) {\n return;\n }\n name = prefix + "_delete";\n l10n = name;\n props.add(property);\n mainSql = new StringBuffer("delete from ").append(table).append(" where ").append(this.keyCol).append(" = ?");\n serviceType = "5";\n break;\n case 4: property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n if (property == null || property.getColName() == null) {\n return;\n }\n name = prefix + "_browse";\n l10n = name;\n props.add(property);\n mainSql = new StringBuffer("select * from ").append(table).append(" where ").append(this.keyCol).append(" = ?");\n serviceType = "10";\n break;\n case 5: serviceType = "2";\n name = prefix + "_list";\n l10n = name;\n mainSql = new StringBuffer("select * from ").append(table);\n }\n this.setParaLinkBatch(props, stmt2, serviceUid, isNew);\n StringBuffer aSql = new StringBuffer("insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values(").append("'").append(serviceUid).append("','").append(l10n).append("','").append(name).append("','").append(this.getDOBOUid(table)).append("','").append(mainSql).append("',").append(serviceType).append(")");\n-   log.info("Servcice's Sql:" + aSql.toString());\n+   log.info("Servcice's Sql:" + aSql.toString());\n stmt.executeUpdate(aSql.toString());\n stmt2.executeBatch();\n con.commit();\n }\n catch (SQLException ex) {\n try {\n con.rollback();\n }\n catch (SQLException ex2) {\n ex2.printStackTrace();\n }\n ex.printStackTrace();\n }\n finally {\n try {\n if (!con.isClosed()) {\n con.close();\n }\n }\n catch (SQLException ex1) {\n ex1.printStackTrace();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-769|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n-   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n+   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n }\n in.close();\n return sb.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-769|SpecialSeperatorForDevSet|protected String downloadURLtoString(URL url) throws IOException {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer sb = new StringBuffer(100 * 1024);\n String str;\n while ((str = in.readLine()) != null) {\n sb.append(str);\n-   }\n+   }\n in.close();\n return sb.toString();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n-   URL url = new URL(jEdit.getProperty("version-check.url"));\n+   URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-770|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n-   File destFile = new File(dest);\n+   File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n-   byte buf[] = new byte[1024];\n+   byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-770|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n byte buf[] = new byte[1024];\n int len;\n-   while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n+   while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n-   FileFormat format = p.detectFileFormat();\n+   FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-771|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n-   System.out.println("User.dir : " + System.getProperty("user.dir"));\n+   System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n-   if (dir.listFiles(ff).length == 0) {\n+   if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-771|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n-   }\n+   }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n-   int bread = 0;\n+   int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-772|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n-   return new BASE64Encoder().encode(theDigest);\n+   return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n-   try {\n+   try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-772|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n-   return null;\n+   return null;\n }\n|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-773|SpecialSeperatorForDevSet|public void uncaughtException(final Thread t, final Throwable e) {\n final Display display = Display.getCurrent();\n final Shell shell = new Shell(display);\n final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n message.setText("Hawkscope Error");\n message.setMessage(e.getMessage() + "\nSubmit Hawkscope Error Report to Issue Tracker?");\n log.error("Uncaught exception", e);\n if (message.open() == SWT.OK) {\n IOUtils.copyToClipboard(Version.getBugReport(e));\n-   try {\n+   try {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry?comment=" + URLEncoder.encode("Please paste the Hawkscope Error " + "Report here. It's currently copied to your " + "clipboard. Thank you for your support!", Constants.ENCODING));\n }\n catch (final Exception e1) {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry");\n }\n }\n shell.dispose();\n }\n|SpecialSeperatorForDevSet|public void uncaughtException(final Thread t, final Throwable e) {\n final Display display = Display.getCurrent();\n final Shell shell = new Shell(display);\n final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n message.setText("Hawkscope Error");\n message.setMessage(e.getMessage() + "\nSubmit Hawkscope Error Report to Issue Tracker?");\n log.error("Uncaught exception", e);\n if (message.open() == SWT.OK) {\n IOUtils.copyToClipboard(Version.getBugReport(e));\n try {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry?comment=" + URLEncoder.encode("Please paste the Hawkscope Error " + "Report here. It's currently copied to your " + "clipboard. Thank you for your support!", Constants.ENCODING));\n }\n catch (final Exception e1) {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry");\n-   }\n+   }\n }\n shell.dispose();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-773|SpecialSeperatorForDevSet|public void uncaughtException(final Thread t, final Throwable e) {\n final Display display = Display.getCurrent();\n final Shell shell = new Shell(display);\n final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n message.setText("Hawkscope Error");\n message.setMessage(e.getMessage() + "\nSubmit Hawkscope Error Report to Issue Tracker?");\n log.error("Uncaught exception", e);\n if (message.open() == SWT.OK) {\n IOUtils.copyToClipboard(Version.getBugReport(e));\n try {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry?comment=" + URLEncoder.encode("Please paste the Hawkscope Error " + "Report here. It's currently copied to your " + "clipboard. Thank you for your support!", Constants.ENCODING));\n }\n catch (final Exception e1) {\n Program.launch(Constants.HAWKSCOPE_URL_ROOT + "issues/entry");\n }\n }\n-   shell.dispose();\n+   shell.dispose();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n return;\n-   }\n+   }\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-774|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-774|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n-   FileChannel out = (new FileOutputStream(target)).getChannel();\n+   FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|private void displayDiffResults() throws IOException {\n File outFile = File.createTempFile("diff", ".htm");\n outFile.deleteOnExit();\n FileOutputStream outStream = new FileOutputStream(outFile);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");\n if (addedTable.length() > 0) {\n out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");\n out.write(addedTable.toString());\n out.write("</table><br><br>");\n }\n if (modifiedTable.length() > 0) {\n out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");\n out.write(modifiedTable.toString());\n out.write("</table><br><br>");\n }\n if (deletedTable.length() > 0) {\n out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n-   out.write(deletedTable.toString());\n+   out.write(deletedTable.toString());\n out.write("</table><br><br>");\n }\n out.write("<table name=METRICS BORDER>\n");\n if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n out.write("<tr><td>Base:&nbsp;\n</td><td>");\n out.write(Long.toString(base));\n out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n</td><td>");\n out.write(Long.toString(deleted));\n out.write("</td></tr>\n<tr><td>Modified:&nbsp;\n</td><td>");\n out.write(Long.toString(modified));\n out.write("</td></tr>\n<tr><td>Added:&nbsp;\n</td><td>");\n out.write(Long.toString(added));\n out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;\n</td><td>");\n out.write(Long.toString(added + modified));\n out.write("</td></tr>\n");\n }\n out.write("<tr><td>Total:&nbsp;\n</td><td>");\n out.write(Long.toString(total));\n out.write("</td></tr>\n</table></div>");\n redlinesOut.close();\n out.flush();\n InputStream redlines = new FileInputStream(redlinesTempFile);\n byte[] buffer = new byte[4096];\n int bytesRead;\n while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n outStream.write("</BODY></HTML>".getBytes());\n outStream.close();\n Browser.launch(outFile.toURL().toString());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-775|SpecialSeperatorForDevSet|public static JSONObject getJSONData(String url) throws JSONException {\n JSONObject jObject = null;\n InputStream data = null;\n DefaultHttpClient httpClient = new DefaultHttpClient();\n-   URI uri;\n+   URI uri;\n try {\n uri = new URI(url);\n HttpGet httpGet = new HttpGet(uri);\n HttpResponse response = httpClient.execute(httpGet);\n data = response.getEntity().getContent();\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader;\n reader = new BufferedReader(new InputStreamReader(data), 8192);\n while ((line = reader.readLine()) != null) builder.append(line);\n reader.close();\n jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return jObject;\n }\n|SpecialSeperatorForDevSet|public static JSONObject getJSONData(String url) throws JSONException {\n JSONObject jObject = null;\n InputStream data = null;\n DefaultHttpClient httpClient = new DefaultHttpClient();\n URI uri;\n try {\n uri = new URI(url);\n-   HttpGet httpGet = new HttpGet(uri);\n+   HttpGet httpGet = new HttpGet(uri);\n HttpResponse response = httpClient.execute(httpGet);\n data = response.getEntity().getContent();\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader;\n reader = new BufferedReader(new InputStreamReader(data), 8192);\n while ((line = reader.readLine()) != null) builder.append(line);\n reader.close();\n jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return jObject;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-775|SpecialSeperatorForDevSet|public static JSONObject getJSONData(String url) throws JSONException {\n JSONObject jObject = null;\n InputStream data = null;\n DefaultHttpClient httpClient = new DefaultHttpClient();\n URI uri;\n try {\n uri = new URI(url);\n-   HttpGet httpGet = new HttpGet(uri);\n+   HttpGet httpGet = new HttpGet(uri);\n HttpResponse response = httpClient.execute(httpGet);\n data = response.getEntity().getContent();\n String line;\n StringBuilder builder = new StringBuilder();\n BufferedReader reader;\n reader = new BufferedReader(new InputStreamReader(data), 8192);\n while ((line = reader.readLine()) != null) builder.append(line);\n reader.close();\n jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return jObject;\n }\n|SpecialSeperatorForDevSet|public final int wordFrequency(String word) {\n String replWebQuery = webQuery.replaceFirst("WORDREPLACE", word);\n try {\n URL url = new URL(replWebQuery);\n String content = url.toString();\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.matches(nrResultsPattern)) {\n int fr = matchedLine(inputLine);\n if (fr >= 0) {\n return fr;\n }\n }\n }\n }\n catch (MalformedURLException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-776|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n-   pxlen = pxlen * 4 / 3;\n+   pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n-   out.write((byte) (pxlen >> 16));\n+   out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-776|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n-   }\n+   }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-777|SpecialSeperatorForDevSet|public static void copy(String fromFile, String toFile) throws IOException {\n File inputFile = new File(fromFile);\n File outputFile = new File(toFile);\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copy(String fromFile, String toFile) throws IOException {\n File inputFile = new File(fromFile);\n File outputFile = new File(toFile);\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-777|SpecialSeperatorForDevSet|-  public static void copy(String fromFile, String toFile) throws IOException {\n+  public static void copy(String fromFile, String toFile) throws IOException {\n File inputFile = new File(fromFile);\n File outputFile = new File(toFile);\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|public Converter(String input, String output) {\n try {\n FileInputStream fis = new FileInputStream(new File(input));\n BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));\n FileOutputStream fos = new FileOutputStream(new File(output));\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));\n int len = 80;\n char buf[] = new char[len];\n int numRead;\n while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n out.close();\n in.close();\n }\n catch (IOException e) {\n System.out.println("An I/O Exception Occurred: " + e);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-778|SpecialSeperatorForDevSet|public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n if (key == null || key.length == 0) {\n throw new IllegalArgumentException("Argument 'key' cannot be null or an empty array.");\n }\n if (salt == null || salt.length == 0) {\n throw new IllegalArgumentException("Argument 'salt' cannot be null or an empty array.");\n }\n final MessageDigest _md = MessageDigest.getInstance("MD5");\n _md.update(key);\n _md.update(MAGIC.getBytes());\n _md.update(salt);\n final MessageDigest md2 = MessageDigest.getInstance("MD5");\n md2.update(key);\n md2.update(salt);\n md2.update(key);\n byte[] abyFinal = md2.digest();\n for (int n = key.length;\n n > 0;\n n -= 16) {\n _md.update(abyFinal, 0, n > 16 ? 16 : n);\n }\n abyFinal = new byte[] {\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n;\n for (int j = 0, i = key.length;\n i != 0;\n i >>>= 1) {\n if ((i & 1) == 1) _md.update(abyFinal, j, 1);\n else _md.update(key, j, 1);\n }\n final StringBuilder sbPasswd = new StringBuilder();\n sbPasswd.append(MAGIC);\n sbPasswd.append(new String(salt));\n sbPasswd.append('$');\n abyFinal = _md.digest();\n for (int n = 0;\n n < 1000;\n n++) {\n final MessageDigest md3 = MessageDigest.getInstance("MD5");\n if ((n & 1) != 0) {\n md3.update(key);\n }\n else {\n md3.update(abyFinal);\n }\n if ((n % 3) != 0) {\n md3.update(salt);\n }\n if ((n % 7) != 0) {\n md3.update(key);\n }\n if ((n & 1) != 0) {\n md3.update(abyFinal);\n-   }\n+   }\n else {\n md3.update(key);\n }\n abyFinal = md3.digest();\n }\n int[] anFinal = new int[] {\n (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) }\n;\n to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n to64(sbPasswd, anFinal[11], 2);\n return sbPasswd.toString();\n }\n|SpecialSeperatorForDevSet|public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n if (key == null || key.length == 0) {\n throw new IllegalArgumentException("Argument 'key' cannot be null or an empty array.");\n }\n if (salt == null || salt.length == 0) {\n throw new IllegalArgumentException("Argument 'salt' cannot be null or an empty array.");\n }\n final MessageDigest _md = MessageDigest.getInstance("MD5");\n _md.update(key);\n _md.update(MAGIC.getBytes());\n _md.update(salt);\n final MessageDigest md2 = MessageDigest.getInstance("MD5");\n md2.update(key);\n md2.update(salt);\n md2.update(key);\n byte[] abyFinal = md2.digest();\n for (int n = key.length;\n n > 0;\n n -= 16) {\n _md.update(abyFinal, 0, n > 16 ? 16 : n);\n }\n abyFinal = new byte[] {\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n;\n for (int j = 0, i = key.length;\n i != 0;\n i >>>= 1) {\n if ((i & 1) == 1) _md.update(abyFinal, j, 1);\n else _md.update(key, j, 1);\n }\n final StringBuilder sbPasswd = new StringBuilder();\n sbPasswd.append(MAGIC);\n sbPasswd.append(new String(salt));\n sbPasswd.append('$');\n abyFinal = _md.digest();\n for (int n = 0;\n n < 1000;\n n++) {\n final MessageDigest md3 = MessageDigest.getInstance("MD5");\n if ((n & 1) != 0) {\n md3.update(key);\n }\n else {\n-   md3.update(abyFinal);\n+   md3.update(abyFinal);\n }\n if ((n % 3) != 0) {\n md3.update(salt);\n }\n if ((n % 7) != 0) {\n md3.update(key);\n }\n if ((n & 1) != 0) {\n md3.update(abyFinal);\n }\n else {\n md3.update(key);\n }\n abyFinal = md3.digest();\n }\n int[] anFinal = new int[] {\n (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) }\n;\n to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n to64(sbPasswd, anFinal[11], 2);\n return sbPasswd.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-778|SpecialSeperatorForDevSet|public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n if (key == null || key.length == 0) {\n throw new IllegalArgumentException("Argument 'key' cannot be null or an empty array.");\n }\n if (salt == null || salt.length == 0) {\n throw new IllegalArgumentException("Argument 'salt' cannot be null or an empty array.");\n }\n final MessageDigest _md = MessageDigest.getInstance("MD5");\n _md.update(key);\n _md.update(MAGIC.getBytes());\n _md.update(salt);\n final MessageDigest md2 = MessageDigest.getInstance("MD5");\n md2.update(key);\n md2.update(salt);\n md2.update(key);\n byte[] abyFinal = md2.digest();\n for (int n = key.length;\n n > 0;\n n -= 16) {\n _md.update(abyFinal, 0, n > 16 ? 16 : n);\n }\n abyFinal = new byte[] {\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n;\n for (int j = 0, i = key.length;\n i != 0;\n i >>>= 1) {\n if ((i & 1) == 1) _md.update(abyFinal, j, 1);\n else _md.update(key, j, 1);\n }\n final StringBuilder sbPasswd = new StringBuilder();\n sbPasswd.append(MAGIC);\n sbPasswd.append(new String(salt));\n sbPasswd.append('$');\n abyFinal = _md.digest();\n for (int n = 0;\n-   n < 1000;\n+   n < 1000;\n n++) {\n final MessageDigest md3 = MessageDigest.getInstance("MD5");\n if ((n & 1) != 0) {\n md3.update(key);\n }\n else {\n md3.update(abyFinal);\n }\n if ((n % 3) != 0) {\n md3.update(salt);\n }\n if ((n % 7) != 0) {\n md3.update(key);\n }\n if ((n & 1) != 0) {\n md3.update(abyFinal);\n }\n else {\n md3.update(key);\n }\n abyFinal = md3.digest();\n }\n int[] anFinal = new int[] {\n (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) }\n;\n to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n to64(sbPasswd, anFinal[11], 2);\n return sbPasswd.toString();\n }\n|SpecialSeperatorForDevSet|public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[40];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-779|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n-   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n+   PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n-   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n+   ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-779|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n-   pdWriter.writePixelData();\n+   pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n }\n BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n-   IOUtils.copy(in, out);\n+   IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-780|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n-   catch (ParserConfigurationException ex) {\n+   catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n-   }\n+   }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-780|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n-   String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n+   String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|public static File copyFile(File fileToCopy, File copiedFile) {\n BufferedInputStream in = null;\n BufferedOutputStream outWriter = null;\n if (!copiedFile.exists()) {\n try {\n copiedFile.createNewFile();\n }\n catch (IOException e1) {\n e1.printStackTrace();\n return null;\n }\n }\n try {\n in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n int c;\n-   while ((c = in.read()) != -1) outWriter.write(c);\n+   while ((c = in.read()) != -1) outWriter.write(c);\n in.close();\n outWriter.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n return null;\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n return copiedFile;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-781|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n-   DataInputStream is = new DataInputStream(u.openStream());\n+   DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n-   String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n+   String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-781|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n-   is.close();\n+   is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n-   in = new FileInputStream(source).getChannel();\n+   in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-782|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n-   FicheDocument ficheDocument = support.getFicheDocument();\n+   FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n-   FicheDocument ficheDocument = support.getFicheDocument();\n+   FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-782|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n-   IOUtils.copy(inputStream, outputStream);\n+   IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File srcFile, File destFile) throws IOException {\n+  public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-783|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n-   }\n+   }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n-   try {\n+   try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-783|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n-   try {\n+   try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n-   salida.close();\n+   salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-784|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n-   totRead += read;\n+   totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n-   f.delete();\n+   f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-784|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n-   totRead += read;\n+   totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n String fileName = file.getFileName();\n String assetsPath = FileFactory.getRealAssetsRootPath();\n new java.io.File(assetsPath).mkdir();\n java.io.File workingFile = getAssetIOFile(file);\n DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n if (destination != null && destination.getInode() > 0) {\n FileInputStream is = new FileInputStream(workingFile);\n FileChannel channelFrom = is.getChannel();\n java.io.File newVersionFile = getAssetIOFile(destination);\n FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n channelFrom.transferTo(0, channelFrom.size(), channelTo);\n channelTo.force(false);\n channelTo.close();\n channelFrom.close();\n }\n if (newDataFile != null) {\n FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n writeCurrentChannel.truncate(0);\n FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n writeCurrentChannel.force(false);\n writeCurrentChannel.close();\n fromChannel.close();\n if (UtilMethods.isImage(fileName)) {\n BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n int height = img.getHeight();\n file.setHeight(height);\n int width = img.getWidth();\n file.setWidth(width);\n }\n String folderPath = workingFile.getParentFile().getAbsolutePath();\n Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n java.io.File directory = new java.io.File(folderPath);\n java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n for (java.io.File iofile : files) {\n try {\n-   iofile.delete();\n+   iofile.delete();\n }\n catch (SecurityException e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.");\n }\n catch (Exception e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + e.getMessage());\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-785|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n assertNotNull(source);\n os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n-   rSrc.delete();\n+   rSrc.delete();\n }\n|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n assertNotNull(source);\n os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n-   os.close();\n+   os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n rSrc.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-785|SpecialSeperatorForDevSet|public void testSimpleQuery() throws Exception {\n JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek");\n assertNotNull(dummySource);\n OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n assertNotNull(os);\n-   String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n+   String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>";\n os.write(dummyContent.getBytes());\n os.flush();\n os.close();\n JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian");\n assertNotNull(source);\n os = ((ModifiableSource) source).getOutputStream();\n assertNotNull(os);\n String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>";\n os.write(content.getBytes());\n os.flush();\n os.close();\n QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']");\n assertNotNull(qResult);\n Collection results = qResult.getChildren();\n assertEquals(1, results.size());\n Iterator it = results.iterator();\n JCRNodeSource rSrc = (JCRNodeSource) it.next();\n InputStream rSrcIn = rSrc.getInputStream();\n ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n IOUtils.copy(rSrcIn, actualOut);\n rSrcIn.close();\n assertEquals(content, actualOut.toString());\n actualOut.close();\n rSrc.delete();\n }\n|SpecialSeperatorForDevSet|public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.getRealFile(), name);\n LOGGER.debug("PUT?? - real file: " + this.getRealFile() + ",name: " + name);\n if (isOwner) {\n if (!".request".equals(name) && !".tokens".equals(name)) {\n-   FileOutputStream out = null;\n+   FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n else {\n if (ServerConfiguration.isDynamicSEL()) {\n }\n else {\n }\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n }\n return factory.resolveFile(this.host, dest);\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-786|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n-   HashSet allEntries = new HashSet(includeJars);\n+   HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-786|SpecialSeperatorForDevSet|public void write() throws IOException {\n JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n if (includeJars != null) {\n HashSet allEntries = new HashSet(includeJars);\n if (!ignoreDependencies) expandSet(allEntries);\n for (Iterator iterator = allEntries.iterator();\n iterator.hasNext();\n ) {\n JarFile jar = getJarFile(iterator.next());\n Enumeration jarEntries = jar.entries();\n while (jarEntries.hasMoreElements()) {\n ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) continue;\n jarOut.putNextEntry(o1);\n-   InputStream entryStream = jar.getInputStream(o1);\n+   InputStream entryStream = jar.getInputStream(o1);\n IOUtils.copy(entryStream, jarOut);\n jarOut.closeEntry();\n }\n }\n }\n jarOut.finish();\n jarOut.close();\n }\n|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n-   ;\n+   ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-787|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n-   FileInputStream in = new FileInputStream(source);\n+   FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|-  protected static void copyDeleting(File source, File dest) throws IOException {\n+  protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-787|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n-   try {\n+   try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void CopyFile(String in, String out) throws Exception {\n-   FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\n+   FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\n FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-788|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n-   conn.setRequestMethod("GET");\n+   conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n-   is = conn.getInputStream();\n+   is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-788|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n-   is = conn.getInputStream();\n+   is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|protected boolean copyFile(File sourceFile, File destinationFile) {\n try {\n FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-789|SpecialSeperatorForDevSet|public int exists(String fileToCheck) throws IOException {\n FTPClient ftp = new FTPClient();\n int found = 0;\n try {\n int reply = 0;\n ftp.connect(this.endpointURL, this.endpointPort);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n throw new IOException("Ftp exists server refused connection.");\n }\n if (!ftp.login("anonymous", "")) {\n ftp.logout();\n throw new IOException("FTP: server wrong passwd");\n }\n ftp.enterLocalPassiveMode();\n if (ftp.listNames(fileToCheck) != null) {\n-   found = 1;\n+   found = 1;\n }\n ftp.logout();\n }\n catch (Exception e) {\n throw new IOException(e.getMessage());\n }\n return found;\n }\n|SpecialSeperatorForDevSet|public int exists(String fileToCheck) throws IOException {\n FTPClient ftp = new FTPClient();\n int found = 0;\n try {\n int reply = 0;\n ftp.connect(this.endpointURL, this.endpointPort);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n throw new IOException("Ftp exists server refused connection.");\n }\n if (!ftp.login("anonymous", "")) {\n ftp.logout();\n throw new IOException("FTP: server wrong passwd");\n }\n ftp.enterLocalPassiveMode();\n if (ftp.listNames(fileToCheck) != null) {\n found = 1;\n }\n-   ftp.logout();\n+   ftp.logout();\n }\n catch (Exception e) {\n throw new IOException(e.getMessage());\n }\n return found;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-789|SpecialSeperatorForDevSet|public int exists(String fileToCheck) throws IOException {\n FTPClient ftp = new FTPClient();\n-   int found = 0;\n+   int found = 0;\n try {\n int reply = 0;\n ftp.connect(this.endpointURL, this.endpointPort);\n reply = ftp.getReplyCode();\n if (!FTPReply.isPositiveCompletion(reply)) {\n ftp.disconnect();\n throw new IOException("Ftp exists server refused connection.");\n }\n if (!ftp.login("anonymous", "")) {\n ftp.logout();\n throw new IOException("FTP: server wrong passwd");\n }\n ftp.enterLocalPassiveMode();\n if (ftp.listNames(fileToCheck) != null) {\n found = 1;\n }\n ftp.logout();\n }\n catch (Exception e) {\n throw new IOException(e.getMessage());\n }\n return found;\n }\n|SpecialSeperatorForDevSet|private void UploadActionPerformed(ActionEvent evt) {\n JFileChooser chooser = new JFileChooser();\n FileNameExtensionFilter filter = new FileNameExtensionFilter("*.jpg", "jpg");\n chooser.setFileFilter(filter);\n File dir = new File(System.getProperty("user.home"));\n chooser.setCurrentDirectory(dir);\n Component parent = null;\n int returnVal = chooser.showOpenDialog(parent);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n UserStatus.setText("Bitte warten");\n }\n try {\n Pic.setVisible(false);\n FTPClient client = new FTPClient();\n client.connect("showus.de");\n client.login("web2", "kcinnay88");\n client.enterLocalActiveMode();\n client.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);\n client.setFileType(FTPClient.BINARY_FILE_TYPE);\n int reply = client.getReplyCode();\n System.out.println("Connect returned: " + reply);\n-   FileInputStream in = new FileInputStream(chooser.getSelectedFile().getAbsolutePath());\n+   FileInputStream in = new FileInputStream(chooser.getSelectedFile().getAbsolutePath());\n System.out.println("Uploading File");\n client.storeFile("/html/Applet/user/" + Config.id + ".jpg", in);\n client.logout();\n in.close();\n System.out.println("done");\n UserStatus.setText("Upload fertig, Bild wird aktuallisiert");\n }\n catch (SocketException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n UserStatus.setText("Fehler beim Upload");\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-790|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n-   out = fos.getChannel();\n+   out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n-   fos.close();\n+   fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-790|SpecialSeperatorForDevSet|-  public static void copyFromTo(File srcFile, File destFile) {\n+  public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File src, File dest) throws IOException {\n+  public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n FileOutputStream fos = new FileOutputStream(dest);\n java.nio.channels.FileChannel channelSrc = fis.getChannel();\n java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-791|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n-   long tailleFichier = contenuFichier.getTailleFichier();\n+   long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n-   Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n+   Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-791|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n-   if (contenuFichier != null) {\n+   if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void createButtonCopyToClipboard() {\n buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n buttonCopyToClipboard.setText("Co&py to Clipboard");\n buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n-   buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n+   buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n @Override public void widgetSelected(final SelectionEvent event) {\n IOUtils.copyToClipboard(Version.getEnvironmentReport());\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-792|SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n while (iter.hasNext()) {\n String fileName = (String) iter.next();\n int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n-   while (iter.hasNext()) {\n+   while (iter.hasNext()) {\n String fileName = (String) iter.next();\n int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-792|SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n while (iter.hasNext()) {\n String fileName = (String) iter.next();\n-   int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n+   int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n|SpecialSeperatorForDevSet|public void copyLogic() {\n if (getState() == States.Idle) {\n setState(States.Synchronizing);\n try {\n FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty("binPath") + name + ".class")).getChannel();\n FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty("agentFileLocation") + name + ".class")).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n sourceChannel.close();\n destinationChannel.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n }\n setState(States.Idle);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-793|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n-   view.hideWaitCursor();\n+   view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-793|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n-   }\n+   }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n-   try {\n+   try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String develBuild = null;\n String stableBuild = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".build")) develBuild = line.substring(6).trim();\n else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();\n }\n bin.close();\n if (develBuild != null && stableBuild != null) {\n doVersionCheck(view, stableBuild, develBuild);\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-794|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n-   out.close();\n+   out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n-   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n+   ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-794|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n-   out.flush();\n+   out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n-   OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n+   OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-795|SpecialSeperatorForDevSet|-  protected String getPasswordHash(String password) {\n+  protected String getPasswordHash(String password) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n log.error("MD5 algorithm not found", e);\n throw new ServiceException(e);\n }\n md.update(password.getBytes());\n byte[] hash = md.digest();\n StringBuffer buf = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n buf.append(Integer.toHexString(hash[i] & 0xff));\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|protected String getPasswordHash(String password) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n log.error("MD5 algorithm not found", e);\n-   throw new ServiceException(e);\n+   throw new ServiceException(e);\n }\n md.update(password.getBytes());\n byte[] hash = md.digest();\n StringBuffer buf = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n buf.append(Integer.toHexString(hash[i] & 0xff));\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-795|SpecialSeperatorForDevSet|protected String getPasswordHash(String password) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n log.error("MD5 algorithm not found", e);\n throw new ServiceException(e);\n }\n-   md.update(password.getBytes());\n+   md.update(password.getBytes());\n byte[] hash = md.digest();\n StringBuffer buf = new StringBuffer();\n for (int i = 0;\n i < hash.length;\n i++) {\n buf.append(Integer.toHexString(hash[i] & 0xff));\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n-   StringBuffer sb = new StringBuffer();\n+   StringBuffer sb = new StringBuffer();\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA-512");\n }\n catch (NoSuchAlgorithmException e) {\n throw new Exception(e.getMessage());\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new Exception(e.getMessage());\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-796|SpecialSeperatorForDevSet|public static String load(String id) {\n String xml = "";\n-   if (id.length() < 5) return "";\n+   if (id.length() < 5) return "";\n try {\n working = true;\n URL url = new URL("http://pastebin.com/download.php?i=" + id);\n URLConnection conn = url.openConnection();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n xml = "";\n String str;\n while ((str = reader.readLine()) != null) {\n xml += str;\n }\n reader.close();\n working = false;\n return xml.toString();\n }\n catch (IOException ex) {\n JOptionPane.showMessageDialog(null, " Load error");\n }\n working = false;\n return xml;\n }\n|SpecialSeperatorForDevSet|public static String load(String id) {\n String xml = "";\n if (id.length() < 5) return "";\n try {\n working = true;\n URL url = new URL("http://pastebin.com/download.php?i=" + id);\n URLConnection conn = url.openConnection();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n xml = "";\n String str;\n while ((str = reader.readLine()) != null) {\n xml += str;\n }\n reader.close();\n working = false;\n return xml.toString();\n }\n catch (IOException ex) {\n JOptionPane.showMessageDialog(null, " Load error");\n }\n working = false;\n return xml;\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-796|SpecialSeperatorForDevSet|public static String load(String id) {\n String xml = "";\n if (id.length() < 5) return "";\n try {\n working = true;\n URL url = new URL("http://pastebin.com/download.php?i=" + id);\n URLConnection conn = url.openConnection();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n xml = "";\n String str;\n while ((str = reader.readLine()) != null) {\n xml += str;\n }\n reader.close();\n working = false;\n return xml.toString();\n }\n catch (IOException ex) {\n-   JOptionPane.showMessageDialog(null, " Load error");\n+   JOptionPane.showMessageDialog(null, " Load error");\n }\n working = false;\n return xml;\n }\n|SpecialSeperatorForDevSet|public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n String osRoot = OSRoot.getRoot();\n String fname = "";\n Object retobj = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (myport == null || myport.trim().equals("")) {\n myport = "80";\n }\n if (this.serverURL == null) {\n-   try {\n+   try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n try {\n java.io.FileOutputStream pw = new java.io.FileOutputStream("log.txt");\n pw.write(req1xml.getBytes());\n pw.flush();\n pw.close();\n }\n catch (Exception exp) {\n exp.printStackTrace();\n }\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.io.File f1 = new java.io.File(osRoot + "/localattachments/Reports");\n if (!f1.exists()) f1.mkdirs();\n java.io.File file = null;\n if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("application/vnd.oasis.opendocument.text")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".odt");\n }\n else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals("text/html")) {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".html");\n }\n else {\n file = new java.io.File(osRoot + "/localattachments/Reports/" + System.currentTimeMillis() + ".xls");\n }\n file = new java.io.File(file.getAbsolutePath());\n java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n int c;\n while ((c = ios.read()) != -1) fos.write(c);\n fos.close();\n ios.close();\n fname = file.getAbsolutePath();\n System.out.println(fname);\n newgen.presentation.component.Utility.getInstance().showBrowser("file://" + fname);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n javax.swing.JOptionPane.showMessageDialog(null, "<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>", "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n return fname;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-797|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n-   finally {\n+   finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-797|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n-   }\n+   }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n outputStream.close();\n inputStream.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-798|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n-   dir = new File(System.getProperty("user.dir") + "/war");\n+   dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n-   }\n+   }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-798|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n-   newFile.createNewFile();\n+   newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n if (contentTransferEncoding != null) {\n contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {\n in = new QuotedPrintableInputStream(in);\n }\n else if ("base64".equalsIgnoreCase(contentTransferEncoding)) {\n in = new Base64InputStream(in);\n }\n }\n-   BinaryTempFileBody tempBody = new BinaryTempFileBody();\n+   BinaryTempFileBody tempBody = new BinaryTempFileBody();\n OutputStream out = tempBody.getOutputStream();\n IOUtils.copy(in, out);\n out.close();\n return tempBody;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-799|SpecialSeperatorForDevSet|public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n String[] files;\n files = dir.list();\n File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding);\n if (!checkdir.isDirectory()) {\n checkdir.mkdir();\n }\n ;\n Date date = new Date();\n-   long msec = date.getTime();\n+   long msec = date.getTime();\n checkdir.setLastModified(msec);\n File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config");\n if (checkFile.exists()) {\n checkFile.setLastModified(msec);\n }\n try {\n for (int i = 0;\n i < files.length;\n i++) {\n File f = new File(dir, files[i]);\n File g = new File(files[i]);\n if (f.isDirectory()) {\n }\n else {\n String destinationFile = checkdir + System.getProperty("file.separator") + g;\n String sourceFile = sourcedir + System.getProperty("file.separator") + g;\n FileInputStream infile = new FileInputStream(sourceFile);\n FileOutputStream outfile = new FileOutputStream(destinationFile);\n int c;\n while ((c = infile.read()) != -1) outfile.write(c);\n infile.close();\n outfile.close();\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n String[] files;\n files = dir.list();\n File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding);\n if (!checkdir.isDirectory()) {\n checkdir.mkdir();\n }\n ;\n Date date = new Date();\n long msec = date.getTime();\n-   checkdir.setLastModified(msec);\n+   checkdir.setLastModified(msec);\n File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config");\n if (checkFile.exists()) {\n checkFile.setLastModified(msec);\n }\n try {\n for (int i = 0;\n i < files.length;\n i++) {\n File f = new File(dir, files[i]);\n File g = new File(files[i]);\n if (f.isDirectory()) {\n }\n else {\n String destinationFile = checkdir + System.getProperty("file.separator") + g;\n String sourceFile = sourcedir + System.getProperty("file.separator") + g;\n FileInputStream infile = new FileInputStream(sourceFile);\n FileOutputStream outfile = new FileOutputStream(destinationFile);\n int c;\n while ((c = infile.read()) != -1) outfile.write(c);\n infile.close();\n outfile.close();\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-799|SpecialSeperatorForDevSet|public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n String[] files;\n files = dir.list();\n File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding);\n if (!checkdir.isDirectory()) {\n checkdir.mkdir();\n }\n ;\n Date date = new Date();\n long msec = date.getTime();\n checkdir.setLastModified(msec);\n File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config");\n if (checkFile.exists()) {\n checkFile.setLastModified(msec);\n }\n try {\n for (int i = 0;\n i < files.length;\n i++) {\n File f = new File(dir, files[i]);\n File g = new File(files[i]);\n if (f.isDirectory()) {\n }\n else {\n String destinationFile = checkdir + System.getProperty("file.separator") + g;\n String sourceFile = sourcedir + System.getProperty("file.separator") + g;\n FileInputStream infile = new FileInputStream(sourceFile);\n FileOutputStream outfile = new FileOutputStream(destinationFile);\n int c;\n while ((c = infile.read()) != -1) outfile.write(c);\n infile.close();\n outfile.close();\n-   }\n+   }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testCopyUnknownSize() throws IOException {\n-   final InputStream in = new ByteArrayInputStream(TEST_DATA);\n+   final InputStream in = new ByteArrayInputStream(TEST_DATA);\n final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n assertEquals("Mismatched copy size", TEST_DATA.length, cpySize);\n final byte[] outArray = out.toByteArray();\n assertArrayEquals("Mismatched data", TEST_DATA, outArray);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-800|SpecialSeperatorForDevSet|@TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n-   report.addLink("Link to PNG", "blue.png");\n+   report.addLink("Link to PNG", "blue.png");\n report.addLink("Link to GIF", "classDir.gif");\n }\n|SpecialSeperatorForDevSet|@TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n report.addLink("Link to PNG", "blue.png");\n report.addLink("Link to GIF", "classDir.gif");\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-800|SpecialSeperatorForDevSet|@TestProperties(name = "Simple test for adding different image files to report as link") public void testAddLinkToImage() throws Exception {\n InputStream in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/splash.jpg");\n report.report(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "splash.jpg")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/blue.png");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "blue.png")));\n in = this.getClass().getClassLoader().getResourceAsStream("regression/generic/images/classDir.gif");\n IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty("file.separator") + "classDir.gif")));\n report.addLink("Link to JPG", "splash.jpg");\n report.addLink("Link to PNG", "blue.png");\n-   report.addLink("Link to GIF", "classDir.gif");\n+   report.addLink("Link to GIF", "classDir.gif");\n }\n|SpecialSeperatorForDevSet|private static boolean copyFile(File in, File out) {\n boolean ok = true;\n InputStream is = null;\n OutputStream os = null;\n try {\n is = new FileInputStream(in);\n os = new FileOutputStream(out);\n byte[] buffer = new byte[0xFFFF];\n for (int len;\n (len = is.read(buffer)) != -1;\n ) os.write(buffer, 0, len);\n }\n catch (IOException e) {\n System.err.println(e);\n ok = false;\n }\n finally {\n if (is != null) {\n try {\n is.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n if (os != null) {\n-   try {\n+   try {\n os.close();\n }\n catch (IOException e) {\n System.err.println(e);\n }\n }\n }\n return ok;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-801|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n-   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n+   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n-   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n+   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-801|SpecialSeperatorForDevSet|-  @Test public void testCopy_inputStreamToOutputStream() throws Exception {\n+  @Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|private void bootKernel(String conf) {\n try {\n AssetManager am = getResources().getAssets();\n InputStream is = am.open(conf + ".conf");\n Properties props = new Properties();\n props.load(is);\n is.close();\n-   Log.d("bootKernel", "Listing sdcard assets...");\n+   Log.d("bootKernel", "Listing sdcard assets...");\n String[] sdcardfiles = am.list("sdcard");\n for (String file : sdcardfiles) {\n Log.d("bootKernel", "Copying sdcard asset " + file + ".");\n AssetFileDescriptor afd = am.openFd("sdcard/" + file);\n FileInputStream fis = afd.createInputStream();\n FileChannel fic = fis.getChannel();\n FileOutputStream fos = new FileOutputStream("/sdcard/" + file);\n FileChannel foc = fos.getChannel();\n fic.transferTo(0, fic.size(), foc);\n fic.close();\n foc.close();\n }\n Configuration gconf = new JavaPropertiesConfiguration(props);\n Configuration bconf = gconf.subset("boot");\n String kclass_name = bconf.getString("kernel");\n Log.d("bootKernel", "Attempting to load kernel from class '" + kclass_name + "'...");\n Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n Kernel kernel = kclass.newInstance();\n Log.d("bootKernel", "Kernel loaded, proceeding with boot...");\n BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n kernel.boot(bctx).get();\n Log.d("bootKernel", "Kernel boot complete.");\n }\n catch (Exception e) {\n Log.e("bootKernel", "Unable to boot kernel due to exception.", e);\n finish();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-802|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n-   OutputStream out = null;\n+   OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n-   finally {\n+   finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-802|SpecialSeperatorForDevSet|-  static void copy(String src, String dest) throws IOException {\n+  static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n for (int i = 0;\n i < list.size();\n i++) {\n long langId = ((Language) list.get(i)).getId();\n try {\n String filePath = getGlobalVariablesPath() + "cms_language_" + langId + ".properties";\n boolean copy = false;\n File from = new java.io.File(filePath);\n if (!from.exists()) {\n from.createNewFile();\n copy = true;\n }\n String tmpFilePath = getTemporyDirPath() + "cms_language_" + langId + "_properties.tmp";\n File to = new java.io.File(tmpFilePath);\n if (!to.exists()) {\n to.createNewFile();\n copy = true;\n }\n-   if (copy) {\n+   if (copy) {\n FileChannel srcChannel = new FileInputStream(from).getChannel();\n FileChannel dstChannel = new FileOutputStream(to).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n }\n catch (IOException e) {\n Logger.error(this, "_checkLanguagesFiles:Property File Copy Failed " + e, e);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-803|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n try {\n URL url = new URL(urlString);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n-   buff = new StringBuffer();\n+   buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n }\n|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n try {\n URL url = new URL(urlString);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n-   if (line.equals("</RoleName>")) {\n+   if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-803|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n try {\n URL url = new URL(urlString);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-804|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-804|SpecialSeperatorForDevSet|public static String getMD5(String s) {\n try {\n MessageDigest m = MessageDigest.getInstance("MD5");\n m.update(s.getBytes(), 0, s.length());\n return "" + new BigInteger(1, m.digest()).toString(16);\n }\n catch (NoSuchAlgorithmException e) {\n logger.error("MD5 is not supported !!!");\n }\n return s;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void hash(String... plainTexts) {\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n for (String plainText : plainTexts) md.update(plainText.getBytes());\n byte b[] = md.digest();\n int i;\n StringBuffer buf = new StringBuffer("");\n for (int offset = 0;\n offset < b.length;\n offset++) {\n i = b[offset];\n if (i < 0) i += 256;\n if (i < 16) buf.append("0");\n buf.append(Integer.toHexString(i));\n }\n String str = buf.toString();\n System.out.println("result: " + buf.toString());\n System.out.println("result: " + buf.toString().substring(8, 24));\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-805|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n-   System.setProperty("user.dir", theAppsDataDir);\n+   System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n-   }\n+   }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-805|SpecialSeperatorForDevSet|public static void copyOverWarFile() {\n System.out.println("Copy Over War File:");\n File dir = new File(theAppsDataDir);\n FileFilter ff = new WildcardFileFilter("*.war");\n if (dir.listFiles(ff).length == 0) {\n dir = new File(System.getProperty("user.dir") + "/war");\n if (dir.exists()) {\n File[] files = dir.listFiles(ff);\n for (File f : files) {\n try {\n File newFile = new File("" + theAppsDataDir + "/" + f.getName());\n System.out.println("Creating new file \"" + f.getAbsolutePath() + "\"");\n newFile.createNewFile();\n InputStream fi = new FileInputStream(f);\n OutputStream fo = new FileOutputStream(newFile);\n IOUtils.copy(fi, fo);\n-   moveUnzipAndExtract(newFile);\n+   moveUnzipAndExtract(newFile);\n }\n catch (Exception ex) {\n Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n }\n else {\n System.out.println("Found a war in the apps data dir, ignoring a fresh copy");\n }\n new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n System.setProperty("user.dir", theAppsDataDir);\n System.out.println("User.dir : " + System.getProperty("user.dir"));\n }\n|SpecialSeperatorForDevSet|public void createJAR(String fileString, String ext) {\n try {\n File file = new File(fileString);\n int i = fileString.lastIndexOf(java.io.File.separator);\n String dir = fileString.substring(0, i + 1);\n if (ext.matches("jar")) {\n jarFile = new File(getClass().getClassLoader().getResource("jsdviewer.jar").toURI());\n java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n FileChannel out = fstrm.getChannel();\n in.transferTo(0, jarFile.length(), out);\n in.close();\n out.close();\n }\n else {\n file.mkdir();\n }\n File.umount(file);\n File temp = new File(dir + "document.jsd");\n FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n ostrm = new ObjectOutputStream(fstrm2);\n ostrm.writeObject(doc);\n ostrm.flush();\n-   ostrm.close();\n+   ostrm.close();\n File.umount();\n File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n File.cp_p(temp, docFile);\n File.umount();\n temp.delete();\n File.umount(file);\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-806|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n-   System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n+   System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n-   Dataset ds = fact.newDataset();\n+   Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-806|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n-   }\n+   }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-807|SpecialSeperatorForDevSet|public int scrapeForIsbns(URL url) {\n int matches = 0;\n-   Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{\n+   Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{\n10}\n)");\n Matcher m;\n for (int i = 0;\n i < RETRIES;\n i++) {\n try {\n InputStream in = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(in));\n String str;\n while ((str = br.readLine()) != null) {\n m = p.matcher(str);\n while (m.find()) {\n matches++;\n outputIsbns.put(m.group(1));\n logger.debug("Got ISBN: " + m.group(1));\n }\n }\n break;\n }\n catch (ConnectException e) {\n logger.warn("Connection attempt " + i + " failed, trying again. Max retries: " + RETRIES);\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e1) {\n }\n }\n catch (IOException e) {\n logger.error("Error reading URL stream", e);\n }\n catch (InterruptedException e) {\n logger.error("Interrupted while calling put(Object E)", e);\n }\n }\n return matches;\n }\n|SpecialSeperatorForDevSet|public int scrapeForIsbns(URL url) {\n int matches = 0;\n Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{\n10}\n)");\n Matcher m;\n for (int i = 0;\n i < RETRIES;\n i++) {\n try {\n InputStream in = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(in));\n String str;\n while ((str = br.readLine()) != null) {\n m = p.matcher(str);\n while (m.find()) {\n matches++;\n outputIsbns.put(m.group(1));\n logger.debug("Got ISBN: " + m.group(1));\n }\n }\n break;\n }\n catch (ConnectException e) {\n logger.warn("Connection attempt " + i + " failed, trying again. Max retries: " + RETRIES);\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e1) {\n }\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n logger.error("Error reading URL stream", e);\n }\n catch (InterruptedException e) {\n logger.error("Interrupted while calling put(Object E)", e);\n }\n }\n return matches;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-807|SpecialSeperatorForDevSet|public int scrapeForIsbns(URL url) {\n int matches = 0;\n Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{\n10}\n)");\n Matcher m;\n for (int i = 0;\n i < RETRIES;\n i++) {\n try {\n InputStream in = url.openStream();\n BufferedReader br = new BufferedReader(new InputStreamReader(in));\n String str;\n while ((str = br.readLine()) != null) {\n m = p.matcher(str);\n while (m.find()) {\n matches++;\n outputIsbns.put(m.group(1));\n logger.debug("Got ISBN: " + m.group(1));\n }\n }\n break;\n }\n catch (ConnectException e) {\n logger.warn("Connection attempt " + i + " failed, trying again. Max retries: " + RETRIES);\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e1) {\n-   }\n+   }\n }\n catch (IOException e) {\n logger.error("Error reading URL stream", e);\n }\n catch (InterruptedException e) {\n logger.error("Interrupted while calling put(Object E)", e);\n }\n }\n return matches;\n }\n|SpecialSeperatorForDevSet|private void readVersion() {\n URL url = ClassLoader.getSystemResource("version");\n if (url == null) {\n return;\n }\n-   BufferedReader reader = null;\n+   BufferedReader reader = null;\n String line = null;\n try {\n reader = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((line = reader.readLine()) != null) {\n if (line.startsWith("Version=")) {\n version = (line.split("="))[1];\n }\n if (line.startsWith("Revision=")) {\n revision = (line.split("="))[1];\n }\n if (line.startsWith("Date=")) {\n String sSec = (line.split("="))[1];\n Long lSec = Long.valueOf(sSec);\n compileDate = new Date(lSec);\n }\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n finally {\n if (reader != null) {\n try {\n reader.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-808|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n-   if (outChannel != null) outChannel.close();\n+   if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-808|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n-   FileChannel outChannel = new FileOutputStream(dst).getChannel();\n+   FileChannel outChannel = new FileOutputStream(dst).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|private void displayDiffResults() throws IOException {\n File outFile = File.createTempFile("diff", ".htm");\n outFile.deleteOnExit();\n FileOutputStream outStream = new FileOutputStream(outFile);\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");\n if (addedTable.length() > 0) {\n out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");\n out.write(addedTable.toString());\n out.write("</table><br><br>");\n }\n if (modifiedTable.length() > 0) {\n out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");\n out.write(modifiedTable.toString());\n out.write("</table><br><br>");\n }\n if (deletedTable.length() > 0) {\n-   out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n+   out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");\n out.write(deletedTable.toString());\n out.write("</table><br><br>");\n }\n out.write("<table name=METRICS BORDER>\n");\n if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n out.write("<tr><td>Base:&nbsp;\n</td><td>");\n out.write(Long.toString(base));\n out.write("</td></tr>\n<tr><td>Deleted:&nbsp;\n</td><td>");\n out.write(Long.toString(deleted));\n out.write("</td></tr>\n<tr><td>Modified:&nbsp;\n</td><td>");\n out.write(Long.toString(modified));\n out.write("</td></tr>\n<tr><td>Added:&nbsp;\n</td><td>");\n out.write(Long.toString(added));\n out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;\n</td><td>");\n out.write(Long.toString(added + modified));\n out.write("</td></tr>\n");\n }\n out.write("<tr><td>Total:&nbsp;\n</td><td>");\n out.write(Long.toString(total));\n out.write("</td></tr>\n</table></div>");\n redlinesOut.close();\n out.flush();\n InputStream redlines = new FileInputStream(redlinesTempFile);\n byte[] buffer = new byte[4096];\n int bytesRead;\n while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n outStream.write("</BODY></HTML>".getBytes());\n outStream.close();\n Browser.launch(outFile.toURL().toString());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-809|SpecialSeperatorForDevSet|public static String plainToMD(LoggerCollection loggerCol, String input) {\n byte[] byteHash = null;\n MessageDigest md = null;\n StringBuilder md5result = new StringBuilder();\n try {\n md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes());\n byteHash = md.digest();\n for (int i = 0;\n i < byteHash.length;\n i++) {\n md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n }\n }\n-   catch (NoSuchAlgorithmException ex) {\n+   catch (NoSuchAlgorithmException ex) {\n loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);\n }\n return (md5result.toString());\n }\n|SpecialSeperatorForDevSet|public static String plainToMD(LoggerCollection loggerCol, String input) {\n byte[] byteHash = null;\n-   MessageDigest md = null;\n+   MessageDigest md = null;\n StringBuilder md5result = new StringBuilder();\n try {\n md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes());\n byteHash = md.digest();\n for (int i = 0;\n i < byteHash.length;\n i++) {\n md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n }\n }\n catch (NoSuchAlgorithmException ex) {\n loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);\n }\n return (md5result.toString());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-809|SpecialSeperatorForDevSet|public static String plainToMD(LoggerCollection loggerCol, String input) {\n byte[] byteHash = null;\n MessageDigest md = null;\n StringBuilder md5result = new StringBuilder();\n try {\n md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes());\n byteHash = md.digest();\n for (int i = 0;\n i < byteHash.length;\n i++) {\n md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n }\n }\n catch (NoSuchAlgorithmException ex) {\n loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);\n }\n return (md5result.toString());\n-   }\n+   }\n|SpecialSeperatorForDevSet|static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\n if (normaliseWhitespace) {\n profileDiff = removeWhitespaces(profileDiff);\n }\n MessageDigest md = MessageDigest.getInstance("MD5");\n-   md.update(profileDiff.getBytes());\n+   md.update(profileDiff.getBytes());\n return new BASE64Encoder().encode(md.digest());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-810|SpecialSeperatorForDevSet|@Override public void actionPerformed(ActionEvent e) {\n try {\n Pattern delim = Pattern.compile("[ ]");\n BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));\n String line = null;\n URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write("db=snp&retmode=xml");\n while ((line = r.readLine()) != null) {\n String tokens[] = delim.split(line, 2);\n if (!tokens[0].startsWith("rs")) continue;\n wr.write("&id=" + tokens[0].substring(2).trim());\n }\n wr.flush();\n r.close();\n InputStream in = conn.getInputStream();\n IOUtils.copyTo(in, System.err);\n in.close();\n-   wr.close();\n+   wr.close();\n }\n catch (IOException err) {\n err.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Override public void actionPerformed(ActionEvent e) {\n try {\n Pattern delim = Pattern.compile("[ ]");\n BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));\n String line = null;\n URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");\n-   URLConnection conn = url.openConnection();\n+   URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write("db=snp&retmode=xml");\n while ((line = r.readLine()) != null) {\n String tokens[] = delim.split(line, 2);\n if (!tokens[0].startsWith("rs")) continue;\n wr.write("&id=" + tokens[0].substring(2).trim());\n }\n wr.flush();\n r.close();\n InputStream in = conn.getInputStream();\n IOUtils.copyTo(in, System.err);\n in.close();\n wr.close();\n }\n catch (IOException err) {\n err.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-810|SpecialSeperatorForDevSet|@Override public void actionPerformed(ActionEvent e) {\n try {\n Pattern delim = Pattern.compile("[ ]");\n BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));\n String line = null;\n URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n wr.write("db=snp&retmode=xml");\n while ((line = r.readLine()) != null) {\n String tokens[] = delim.split(line, 2);\n if (!tokens[0].startsWith("rs")) continue;\n wr.write("&id=" + tokens[0].substring(2).trim());\n }\n wr.flush();\n r.close();\n InputStream in = conn.getInputStream();\n IOUtils.copyTo(in, System.err);\n in.close();\n wr.close();\n }\n catch (IOException err) {\n-   err.printStackTrace();\n+   err.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-811|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n-   finally {\n+   finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n-   catch (SQLException exe) {\n+   catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-811|SpecialSeperatorForDevSet|public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n int intResult = 0;\n String sql = "UPDATE torneo" + " SET numeroDivisiones=" + nDivisiones + " WHERE idTorneo=" + idTorneo;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n catch (SQLException exe) {\n exe.printStackTrace();\n-   }\n+   }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|public static void Sample1(String myField, String condition1, String condition2) throws SQLException {\n-   Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");\n+   Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");\n connection.setAutoCommit(false);\n PreparedStatement ps = connection.prepareStatement("UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?");\n ps.setString(1, myField);\n ps.setString(2, condition1);\n ps.setString(3, condition2);\n // If more than 10 entries change, panic and rollback int numChanged = ps.executeUpdate();\n if(numChanged > 10) {\n connection.rollback();\n }\n else {\n connection.commit();\n }\n ps.close();\n connection.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-812|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n-   in.close();\n+   in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n-   in = new FileReader(image);\n+   in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-812|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n-   assertEquals("the two string are equals", reference, destination1.toString());\n+   assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-813|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n-   orig.delete();\n+   orig.delete();\n }\n|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n-   while (bread != -1) {\n+   while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-813|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n-   if (bread != -1) fos.write(buffer, 0, bread);\n+   if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws FileNotFoundException {\n if (args.length < 2) throw new IllegalArgumentException();\n String fnOut = args[args.length - 1];\n PrintWriter writer = new PrintWriter(fnOut);\n for (int i = 0;\n i < args.length - 1;\n i++) {\n File fInput = new File(args[i]);\n Scanner in = new Scanner(fInput);\n while (in.hasNext()) {\n writer.println(in.nextLine());\n }\n-   }\n+   }\n writer.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-814|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-814|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n-   MessageDigest md = null;\n+   MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n }\n|SpecialSeperatorForDevSet|public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {\n String digest1 = user + ":" + realm + ":" + password;\n String digest2 = method + ":" + uri;\n try {\n MessageDigest digestOne = MessageDigest.getInstance("md5");\n digestOne.update(digest1.getBytes());\n String hexDigestOne = getHexString(digestOne.digest());\n MessageDigest digestTwo = MessageDigest.getInstance("md5");\n digestTwo.update(digest2.getBytes());\n String hexDigestTwo = getHexString(digestTwo.digest());\n String digest3 = hexDigestOne + ":" + nonce + ":" + hexDigestTwo;\n MessageDigest digestThree = MessageDigest.getInstance("md5");\n digestThree.update(digest3.getBytes());\n String hexDigestThree = getHexString(digestThree.digest());\n return hexDigestThree;\n }\n catch (NoSuchAlgorithmException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return null;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-815|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n-   in = new BufferedInputStream(inputStream);\n+   in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n-   }\n+   }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-815|SpecialSeperatorForDevSet|public synchronized InputStream getResourceAsStream(String name) {\n InputStream inputStream = null;\n BufferedInputStream in = null;\n BufferedOutputStream out = null;\n try {\n URL url = getResource(name);\n String remoteName = url.toExternalForm();\n String localName = (String) cacheHashtable.get(remoteName);\n if (localName != null) {\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n String host = url.getHost();\n String prot = url.getProtocol();\n int port = url.getPort();\n File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);\n cacheFile = new File(cacheFile.getCanonicalPath());\n localName = cacheFile.getCanonicalPath();\n System.out.println("Comparing \"" + localName + "\"...");\n URLConnection urlConnection = url.openConnection();\n if (cacheFile.exists()) {\n urlConnection.setIfModifiedSince(cacheFile.lastModified());\n }\n if (urlConnection instanceof HttpURLConnection) {\n HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n httpURLConnection.setFollowRedirects(true);\n httpURLConnection.setRequestMethod("GET");\n int responseCode = httpURLConnection.getResponseCode();\n System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));\n if (responseCode != HttpURLConnection.HTTP_OK) {\n return null;\n }\n }\n inputStream = urlConnection.getInputStream();\n if (inputStream == null) return null;\n if (cacheFile.exists()) {\n long lastModified = urlConnection.getLastModified();\n if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n inputStream.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(cacheFile);\n }\n }\n File parentFile = new File(cacheFile.getParent());\n parentFile.mkdirs();\n localName = cacheFile.getCanonicalPath();\n System.out.println("CACHING \"" + localName + "\"...");\n in = new BufferedInputStream(inputStream);\n out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n int i;\n while ((i = in.read()) > -1) out.write(i);\n out.close();\n in.close();\n cacheHashtable.put(remoteName, localName);\n System.out.println("Retrieving \"" + localName + "\"...");\n return new FileInputStream(localName);\n }\n catch (Exception ex) {\n try {\n inputStream.close();\n }\n catch (Exception ex1) {\n }\n try {\n in.close();\n }\n catch (Exception ex1) {\n }\n try {\n out.close();\n }\n catch (Exception ex1) {\n-   }\n+   }\n ex.printStackTrace();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public void test() throws Exception {\n StorageStringWriter s = new StorageStringWriter(2048, "UTF-8");\n s.addText("Test");\n try {\n s.getOutputStream();\n fail("Should throw IOException as method not supported.");\n-   }\n+   }\n catch (IOException e) {\n }\n s.getWriter().write("ing is important");\n s.close(ResponseStateOk.getInstance());\n assertEquals("Testing is important", s.getText());\n InputStream input = s.getInputStream();\n StringWriter writer = new StringWriter();\n IOUtils.copy(input, writer, "UTF-8");\n assertEquals("Testing is important", writer.toString());\n try {\n s.getWriter();\n fail("Should throw IOException as storage is closed.");\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-816|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n-   if (all) assertEquals(cmp.length, out.length);\n+   if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-816|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n-   if (all) assertEquals(cmp.length, out.length);\n+   if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n try {\n-   InputStream in = new FileInputStream(src);\n+   InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n catch (FileNotFoundException e1) {\n MLUtil.runtimeError(e1, src.toString());\n }\n catch (IOException e2) {\n MLUtil.runtimeError(e2, src.toString());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-817|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n-   return IOUtils.copyLarge(source, sink);\n+   return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n-   }\n+   }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-817|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n finally {\n-   IOUtils.closeQuietly(source);\n+   IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n-   b3 = in.read();\n+   b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-818|SpecialSeperatorForDevSet|public static boolean dump(File source, File target) {\n boolean done = false;\n try {\n InputStream is = new BufferedInputStream(new FileInputStream(source));\n OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n while (is.available() > 0) {\n os.write(is.read());\n-   }\n+   }\n os.flush();\n os.close();\n is.close();\n return true;\n }\n catch (IOException e) {\n }\n return done;\n }\n|SpecialSeperatorForDevSet|public static boolean dump(File source, File target) {\n boolean done = false;\n try {\n InputStream is = new BufferedInputStream(new FileInputStream(source));\n OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n while (is.available() > 0) {\n os.write(is.read());\n }\n os.flush();\n os.close();\n is.close();\n-   return true;\n+   return true;\n }\n catch (IOException e) {\n }\n return done;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-818|SpecialSeperatorForDevSet|public static boolean dump(File source, File target) {\n boolean done = false;\n try {\n InputStream is = new BufferedInputStream(new FileInputStream(source));\n OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n while (is.available() > 0) {\n os.write(is.read());\n }\n os.flush();\n os.close();\n is.close();\n return true;\n }\n catch (IOException e) {\n }\n return done;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n Properties properties = new Properties();\n try {\n String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();\n File englishFile = new File(i18nPath + "TranubeConstants_en.properties");\n if (!englishFile.exists()) throw new Exception("English file not found");\n String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";\n File file = new File(propertiesFilePath);\n if (!file.exists()) {\n FileReader in = new FileReader(englishFile);\n FileWriter out = new FileWriter(file);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");\n BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n String line = null;\n StringBuilder strBuilder = new StringBuilder();\n boolean found = false;\n while ((line = breader.readLine()) != null) {\n-   if (line.startsWith("#")) strBuilder.append(line).append("\n");\n+   if (line.startsWith("#")) strBuilder.append(line).append("\n");\n else {\n String[] pieces = line.split("=");\n if (pieces.length == 2) {\n if (pieces[0].trim().equals(messageName)) {\n strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");\n found = true;\n }\n else strBuilder.append(line).append("\n");\n }\n else strBuilder.append(line).append("\n");\n }\n }\n if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");\n breader.close();\n is.close();\n FileWriter writer = new FileWriter(file);\n writer.write(strBuilder.toString());\n writer.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-819|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n-   targetOutputTar.putNextEntry(tarAdd);\n+   targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n-   log.info("Tar Archive created successfully '" + targetTarFile + "'");\n+   log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-819|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n-   while (true) {\n+   while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n for (int i = 0;\n i < list.size();\n i++) {\n long langId = ((Language) list.get(i)).getId();\n try {\n String filePath = getGlobalVariablesPath() + "cms_language_" + langId + ".properties";\n boolean copy = false;\n File from = new java.io.File(filePath);\n if (!from.exists()) {\n from.createNewFile();\n copy = true;\n }\n-   String tmpFilePath = getTemporyDirPath() + "cms_language_" + langId + "_properties.tmp";\n+   String tmpFilePath = getTemporyDirPath() + "cms_language_" + langId + "_properties.tmp";\n File to = new java.io.File(tmpFilePath);\n if (!to.exists()) {\n to.createNewFile();\n copy = true;\n }\n if (copy) {\n FileChannel srcChannel = new FileInputStream(from).getChannel();\n FileChannel dstChannel = new FileOutputStream(to).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n }\n catch (IOException e) {\n Logger.error(this, "_checkLanguagesFiles:Property File Copy Failed " + e, e);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-820|SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return returnString;\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n-   if (logger.isDebugEnabled()) {\n+   if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return returnString;\n }\n catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-820|SpecialSeperatorForDevSet|public static String md5(String str) {\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - start");\n }\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(str.getBytes());\n byte[] b = md.digest();\n StringBuffer sb = new StringBuffer();\n for (int i = 0;\n i < b.length;\n i++) {\n int v = (int) b[i];\n-   v = v < 0 ? 0x100 + v : v;\n+   v = v < 0 ? 0x100 + v : v;\n String cc = Integer.toHexString(v);\n if (cc.length() == 1) sb.append('0');\n sb.append(cc);\n }\n String returnString = sb.toString();\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return returnString;\n }\n catch (Exception e) {\n logger.warn("md5(String) - exception ignored", e);\n }\n if (logger.isDebugEnabled()) {\n logger.debug("md5(String) - end");\n }\n return "";\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.");\n nsae.printStackTrace();\n }\n }\n digest.update(data.getBytes());\n return toHex(digest.digest());\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-821|SpecialSeperatorForDevSet|public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n-   IOUtils.copy(in, out);\n+   IOUtils.copy(in, out);\n }\n|SpecialSeperatorForDevSet|public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n-   ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n+   ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n IOUtils.copy(in, out);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-821|SpecialSeperatorForDevSet|public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n-   on_disk = createTemporaryFile();\n+   on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n IOUtils.copy(in, out);\n }\n|SpecialSeperatorForDevSet|public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n try {\n CmdLineParser cmdLineParser = new CmdLineParser();\n Option formatOption = cmdLineParser.addStringOption('f', "format");\n Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset");\n Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset");\n cmdLineParser.parse(args);\n-   String format = (String) cmdLineParser.getOptionValue(formatOption);\n+   String format = (String) cmdLineParser.getOptionValue(formatOption);\n String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\n if (outputEncoding == null || outputEncoding.trim().equals("")) {\n outputEncoding = "utf-8";\n System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.");\n }\n String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\n if (inputEncoding == null || outputEncoding.trim().equals("")) {\n inputEncoding = "utf-8";\n System.out.println("Defaulting to input charset utf-8 as argument -i is missing or not valid.");\n }\n String[] remainingArgs = cmdLineParser.getRemainingArgs();\n if (remainingArgs.length != 2) {\n printUsage("Input and output file are not specified correctly. ");\n }\n File inputFile = new File(remainingArgs[0]);\n if (!inputFile.exists()) {\n printUsage("Input file " + remainingArgs[0] + " does not exist. ");\n }\n if (format == null || format.trim().equals("")) {\n format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n }\n File outputFile = new File(remainingArgs[1]);\n if (!outputFile.exists()) {\n outputFile.createNewFile();\n }\n System.out.println("format detected: " + format);\n if ("html".equals(format)) {\n Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\n OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\n char[] buffer = new char[1024];\n int read;\n do {\n read = reader.read(buffer);\n if (read > 0) {\n out.write(buffer, 0, read);\n }\n }\n while (read != -1);\n out.flush();\n out.close();\n }\n else {\n printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed");\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n printUsage(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-822|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n-   MessageDigest md5 = MessageDigest.getInstance("MD5");\n+   MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n-   i < bytes.length;\n+   i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-822|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n-   }\n+   }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n-   }\n+   }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) {\n sb.append('0');\n }\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-823|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n-   if (line.startsWith(".version")) version = line.substring(8).trim();\n+   if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-823|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n-   jEdit.getProperty("version-check.url"), e.toString() }\n+   jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|public void run() {\n URL url;\n try {\n url = new URL("http://localhost:8080/glowaxes/dailytrend.jsp");\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n while ((str = in.readLine()) != null) {\n-   }\n+   }\n in.close();\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-824|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n-   int read = 0;\n+   int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n-   throw new WiseConnectionException("Wsdl download failed!", e);\n+   throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-824|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n-   throw new WiseConnectionException("Wsdl download failed!", e);\n+   throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File source, File dest) throws IOException {\n+  public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n from = new FileInputStream(source).getChannel();\n to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n finally {\n if (from != null) {\n from.close();\n }\n if (to != null) {\n to.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-825|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n-   WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n+   WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-   IOUtils.copy(is, baos);\n+   IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-825|SpecialSeperatorForDevSet|public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n HttpURLConnection con = null;\n InputStream is = null;\n try {\n URL u = new URL(url);\n if (url.startsWith("file://")) {\n is = new BufferedInputStream(u.openStream());\n }\n else {\n Proxy proxy;\n if (proxyHost != null) {\n proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n }\n else {\n proxy = Proxy.NO_PROXY;\n-   }\n+   }\n con = (HttpURLConnection) u.openConnection(proxy);\n con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1;\n WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");\n con.addRequestProperty("Accept-Charset", "UTF-8");\n con.addRequestProperty("Accept-Language", "en-US,en");\n con.addRequestProperty("Accept", "text/html,image/*");\n con.setDoInput(true);\n con.setDoOutput(false);\n con.connect();\n is = new BufferedInputStream(con.getInputStream());\n }\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n return baos.toByteArray();\n }\n finally {\n IOUtils.closeQuietly(is);\n if (con != null) {\n con.disconnect();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\n if (!destFile.exists()) {\n destFile.createNewFile();\n }\n FileChannel source = null;\n FileChannel destination = null;\n try {\n source = new FileInputStream(sourceFile).getChannel();\n destination = new FileOutputStream(destFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n }\n-   finally {\n+   finally {\n closeQuietly(source);\n closeQuietly(destination);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-826|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n-   catch (KeyStoreException e) {\n+   catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n-   InputStream ip = af.extractRevision(name);\n+   InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-826|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n-   os.close();\n+   os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n-   in = new YellOnCloseInputStreamTest(in);\n+   in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-827|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n-   String filePathInTar = getFilePathInTar(file, directoryToPack);\n+   String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n-   continue;\n+   continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-827|SpecialSeperatorForDevSet|public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n if (directoryToPack == null) {\n throw new NullPointerException("The parameter 'directoryToPack' must not be null");\n }\n if (targetTarFile == null) {\n throw new NullPointerException("The parameter 'targetTarFile' must not be null");\n }\n if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n throw new IllegalArgumentException("The target file '" + directoryToPack + "' does not exist or is not a directory.");\n }\n if (targetTarFile.exists()) {\n log.warn("The target file '" + targetTarFile + "' already exists. Will overwrite");\n }\n log.debug("Creating tar from all files in directory '" + directoryToPack + "'");\n byte buffer[] = new byte[BUFFER_SIZE];\n FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n try {\n List<File> fileList = collectFiles(directoryToPack);\n for (Iterator<File> iter = fileList.iterator();\n iter.hasNext();\n ) {\n File file = iter.next();\n if (file == null || !file.exists() || file.isDirectory()) {\n log.info("The file '" + file + "' is ignored - is a directory or non-existent");\n continue;\n }\n if (file.equals(targetTarFile)) {\n log.debug("Skipping file: '" + file + "' - is the tar file itself");\n continue;\n }\n log.debug("Adding to archive: file='" + file + "', archive='" + targetTarFile + "'");\n String filePathInTar = getFilePathInTar(file, directoryToPack);\n log.debug("File path in tar: '" + filePathInTar + "' (file=" + file + ")");\n TarEntry tarAdd = new TarEntry(file);\n tarAdd.setModTime(file.lastModified());\n tarAdd.setName(filePathInTar);\n targetOutputTar.putNextEntry(tarAdd);\n if (file.isFile()) {\n FileInputStream in = new FileInputStream(file);\n try {\n while (true) {\n int nRead = in.read(buffer, 0, buffer.length);\n if (nRead <= 0) break;\n targetOutputTar.write(buffer, 0, nRead);\n }\n }\n finally {\n StreamUtil.tryCloseStream(in);\n }\n }\n targetOutputTar.closeEntry();\n }\n }\n finally {\n StreamUtil.tryCloseStream(targetOutputTar);\n StreamUtil.tryCloseStream(targetOutput);\n }\n log.info("Tar Archive created successfully '" + targetTarFile + "'");\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void unJarStart(String jarPath, String jarEntryStart) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n Enumeration<JarEntry> entries = jar.entries();\n while (entries.hasMoreElements()) {\n JarEntry entry = entries.nextElement();\n-   String jarEntry = entry.getName();\n+   String jarEntry = entry.getName();\n if (jarEntry.startsWith(jarEntryStart)) {\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-828|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n-   success = (count == 1);\n+   success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n-   long typeGid = getGID(namespaceId, id);\n+   long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-828|SpecialSeperatorForDevSet|public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\n checkPermission(permit, String.valueOf(namespaceId));\n boolean exist = isRoleTypeUsed(namespaceId, id);\n-   if (exist) {\n+   if (exist) {\n throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg("DTS-0034"));\n }\n if (!removeReferencesInRoleTypes) {\n StringBuffer msgBuf = new StringBuffer();\n DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\n if (objects.length > 0) {\n msgBuf.append("Role Type is Right Identity in one or more Role Types.");\n }\n objects = fetchParentReferences(namespaceId, id);\n if (objects.length > 0) {\n if (msgBuf.length() > 0) {\n msgBuf.append("\n");\n }\n msgBuf.append("Role Type is Parent of one or more Role Types.");\n }\n if (msgBuf.length() > 0) {\n throw new DTSValidationException(msgBuf.toString());\n }\n }\n String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF");\n String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF");\n String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE");\n PreparedStatement pstmt = null;\n boolean success = false;\n long typeGid = getGID(namespaceId, id);\n conn.setAutoCommit(false);\n int defaultLevel = conn.getTransactionIsolation();\n conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n try {\n pstmt = conn.prepareStatement(sqlRightId);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sqlParent);\n pstmt.setLong(1, typeGid);\n pstmt.executeUpdate();\n pstmt.close();\n pstmt = conn.prepareStatement(sql);\n pstmt.setLong(1, typeGid);\n int count = pstmt.executeUpdate();\n success = (count == 1);\n conn.commit();\n }\n catch (SQLException e) {\n conn.rollback();\n throw e;\n }\n finally {\n conn.setTransactionIsolation(defaultLevel);\n conn.setAutoCommit(true);\n closeStatement(pstmt);\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void importCSV(InputStream csvfile) throws Exception {\n try {\n String[] qmarks = new String[columns.length];\n for (int i = 0;\n i < qmarks.length;\n i++) {\n qmarks[i] = "?";\n }\n if (cleartable) {\n String delsql = "delete from " + table;\n Statement delstm = conn.createStatement();\n delstm.executeUpdate(delsql);\n }\n String sql = "insert into " + table + " (" + StringUtils.join(columns, ", ") + ") values (" + StringUtils.join(qmarks, ", ") + ")";\n log.debug("SQL: " + sql);\n PreparedStatement stm = conn.prepareStatement(sql);\n int datatypes[] = new int[columns.length];\n-   for (int i = 0;\n+   for (int i = 0;\n i < columns.length;\n i++) {\n Table tbl = project.getTableByName(table);\n if (tbl == null) throw new OntopiaRuntimeException("Unknown table: " + table);\n Column col = tbl.getColumnByName(columns[i]);\n if (col == null) throw new OntopiaRuntimeException("Unknown table column: " + columns[i]);\n if (col.getType() == null) throw new OntopiaRuntimeException("Column type is null: " + col.getType());\n DataType datatype = project.getDataTypeByName(col.getType(), "generic");\n if (datatype == null) throw new OntopiaRuntimeException("Unknown column type: " + col.getType());\n String dtype = datatype.getType();\n if ("varchar".equals(dtype)) datatypes[i] = Types.VARCHAR;\n else if ("integer".equals(dtype)) datatypes[i] = Types.INTEGER;\n else throw new OntopiaRuntimeException("Unknown datatype: " + dtype);\n }\n LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n for (int i = 0;\n i < ignorelines;\n i++) {\n String line = reader.readLine();\n if (line == null) break;\n }\n log.debug("[" + StringUtils.join(columns, ", ") + "]");\n int lineno = 0;\n while (true) {\n lineno++;\n String line = reader.readLine();\n if (line == null) break;\n try {\n String[] cols = StringUtils.split(line, separator);\n if (cols.length > columns.length && !ignorecolumns) log.debug("Ignoring columns: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n log.debug("CVALUES: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n String dmesg = "(";\n for (int i = 0;\n i < columns.length;\n i++) {\n String col = cols[i];\n if (stripquotes) {\n int len = col.length();\n if (len > 1 && ((col.charAt(0) == '"' && col.charAt(len - 1) == '"') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);\n }\n if (col != null && col.equals("")) col = null;\n dmesg = dmesg + col;\n if (i < columns.length - 1) dmesg = dmesg + ", ";\n stm.setObject(i + 1, col, datatypes[i]);\n }\n dmesg = dmesg + ")";\n log.debug(dmesg);\n stm.execute();\n }\n catch (Exception e) {\n conn.rollback();\n throw new OntopiaRuntimeException("Cannot read line " + lineno + ": '" + line + "'", e);\n }\n }\n conn.commit();\n }\n finally {\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-829|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n-   catch (UnsupportedEncodingException e) {\n+   catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-829|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|@Override public User saveUser(User user) {\n try {\n MessageDigest digest = java.security.MessageDigest.getInstance("MD5");\n digest.update(user.getPassword().getBytes("UTF-8"));\n byte[] hash = digest.digest();\n BigInteger bigInt = new BigInteger(1, hash);\n String hashtext = bigInt.toString(16);\n while (hashtext.length() < 32) {\n hashtext = "0" + hashtext;\n }\n user.setPassword(hashtext);\n user.setDataRegjistrimit(new Date());\n-   return em.merge(user);\n+   return em.merge(user);\n }\n catch (Exception e) {\n throw new NestedException(e.getMessage(), e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-830|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n-   out.close();\n+   out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|-  private void CopyTo(File dest) throws IOException {\n+  private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-830|SpecialSeperatorForDevSet|private void CopyTo(File dest) throws IOException {\n FileReader in = null;\n FileWriter out = null;\n int c;\n try {\n in = new FileReader(image);\n out = new FileWriter(dest);\n while ((c = in.read()) != -1) out.write(c);\n }\n finally {\n if (in != null) try {\n in.close();\n }\n catch (Exception e) {\n }\n if (out != null) try {\n out.close();\n }\n catch (Exception e) {\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n-   FileOutputStream fos = new FileOutputStream(dest);\n+   FileOutputStream fos = new FileOutputStream(dest);\n java.nio.channels.FileChannel channelSrc = fis.getChannel();\n java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-831|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-831|SpecialSeperatorForDevSet|-  public static byte[] getMD5(String source) {\n+  public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) {\n sb.append('0');\n }\n-   sb.append(Integer.toHexString(b));\n+   sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-832|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n-   char bufCh[] = new char[1024];\n+   char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n-   con.setRequestProperty("refer", szUrl);\n+   con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-832|SpecialSeperatorForDevSet|protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n ServletContext servletContext = this.getServletConfig().getServletContext();\n WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n String szUrl = request.getParameter("url");\n System.out.println(szUrl);\n URL url;\n InputStream is = null;\n ServletOutputStream sout = null;\n try {\n url = new URL(szUrl);\n HttpURLConnection con = (HttpURLConnection) url.openConnection();\n Enumeration hNames = request.getHeaderNames();\n while (hNames.hasMoreElements()) {\n String txt = hNames.nextElement().toString();\n con.setRequestProperty(txt, request.getHeader(txt));\n }\n con.setRequestProperty("host", url.getHost());\n con.setRequestProperty("refer", szUrl);\n con.setRequestMethod(method);\n con.setDoOutput(true);\n con.setDoInput(true);\n InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n char bufCh[] = new char[1024];\n int r;\n OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n while ((r = inBody.read(bufCh)) != -1) {\n-   System.out.println(bufCh);\n+   System.out.println(bufCh);\n outReq.write(bufCh, 0, r);\n }\n outReq.flush();\n outReq.close();\n inBody.close();\n System.out.println(con.getResponseCode());\n System.out.println(con.getResponseMessage());\n if (con.getResponseCode() == con.HTTP_OK) {\n response.setContentType(con.getContentType());\n response.addHeader("Content-Encoding", con.getContentEncoding());\n sout = response.getOutputStream();\n is = con.getInputStream();\n byte buff[] = new byte[1024];\n while ((r = is.read(buff)) != -1) {\n sout.write(buff, 0, r);\n System.out.print(buff);\n }\n sout.flush();\n is.close();\n sout.close();\n }\n else {\n response.sendError(con.getResponseCode(), con.getResponseMessage());\n }\n }\n catch (MalformedURLException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-833|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n-   BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n+   BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n finally {\n IOUtils.closeQuietly(streamToLoad);\n-   IOUtils.closeQuietly(bos);\n+   IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-833|SpecialSeperatorForDevSet|private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n resp.setContentType(getContentType(req, streamName));\n resp.setHeader("Content-Disposition", "inline;\nfilename=" + streamName);\n resp.setContentLength((int) sz);\n OutputStream out = resp.getOutputStream();\n BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n try {\n IOUtils.copy(streamToLoad, bos);\n }\n-   finally {\n+   finally {\n IOUtils.closeQuietly(streamToLoad);\n IOUtils.closeQuietly(bos);\n }\n getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n }\n|SpecialSeperatorForDevSet|private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\n InputStream in = downloadData(s3key);\n if (in == null) {\n throw new IOException("No data found");\n }\n in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\n-   File temp = File.createTempFile("dirsync", null);\n+   File temp = File.createTempFile("dirsync", null);\n FileOutputStream fout = new FileOutputStream(temp);\n try {\n IOUtils.copy(in, fout);\n if (target.exists()) {\n target.delete();\n }\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n FileUtils.moveFile(temp, target);\n }\n catch (IOException e) {\n fetchStream(in);\n throw e;\n }\n finally {\n IOUtils.closeQuietly(fout);\n IOUtils.closeQuietly(in);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-834|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n-   estado = false;\n+   estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n-   FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n+   FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n }\n return estado;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-834|SpecialSeperatorForDevSet|public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n System.out.println("");\n boolean estado = false;\n try {\n FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n FileChannel canalDestino = salida.getChannel();\n canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n rutaFicheroOrigen.close();\n salida.close();\n estado = true;\n }\n catch (IOException e) {\n System.out.println("No se encontro el archivo");\n e.printStackTrace();\n estado = false;\n-   }\n+   }\n return estado;\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n {\n Assert.notNull(configuration);\n Assert.notNull(monitor);\n }\n final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "");\n final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n final IFile pom = prj.getFile("pom.xml");\n if (!pom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 root pom.xml available");\n }\n ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n handleRootProfile(doc);\n }\n }\n);\n final IFile bpom = prj.getFile("business/pom.xml");\n if (!bpom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 business pom.xml available");\n }\n ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n try {\n handleBusinessProfile(doc, configuration, prj);\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n);\n final ByteArrayOutputStream output = new ByteArrayOutputStream();\n try {\n final Properties props = new Properties();\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n props.setProperty("hibernate.dialect", support.getDialectClass(dialectName));\n props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver"));\n props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>"));\n props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, ""));\n props.store(output, "hibernate properties for code generation using NexOpen Tools 1.0.0");\n final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties");\n if (!props_file.exists()) {\n props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n }\n else {\n props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n }\n }\n catch (final IOException e) {\n Logger.getLog().error("I/O exception ", e);\n throw new RuntimeException(e);\n }\n finally {\n try {\n output.flush();\n output.close();\n }\n catch (IOException e) {\n }\n }\n if (NexOpenProjectUtils.is04xProject(prj)) {\n final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml");\n if (!appContext.exists()) {\n throw new IllegalStateException("It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project");\n }\n ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n final Element root = doc.getDocumentElement();\n final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean");\n for (final Element bean : beans) {\n final String id = bean.getAttribute("id");\n if ("valueListAdapterResolver".equals(id)) {\n try {\n final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "");\n final String className = new StringBuilder(pkgName).append(".vlh.support.AnnotationValueListAdapterResolver").toString();\n bean.setAttribute("class", className);\n break;\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n }\n }\n);\n }\n-   {\n+   {\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n if (support.isReverseEngineeringFileNeeded(dialectName)) {\n try {\n final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName));\n if (!revengFile.exists()) {\n final Bundle bundle = HibernateActivator.getDefault().getBundle();\n final Path src = new Path("resources/" + support.getReversEngineeringFile(dialectName));\n final InputStream in = FileLocator.openStream(bundle, src, false);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(in, baos);\n String str = baos.toString();\n str = str.replace("${\nschema}\n", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n }\n }\n catch (final IOException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n final IResource resource = (IResource) prj.getAdapter(IResource.class);\n final QualifiedName qn = new QualifiedName("org.nexopenframework.ide.eclipse.ui", "default.profile");\n final String profile = resource.getPersistentProperty(qn);\n resource.setPersistentProperty(qn, "reverse-engineering");\n try {\n final InstallProjectAction action = new InstallProjectAction();\n action.scheduleJob(prj, monitor);\n prj.refreshLocal(2, monitor);\n }\n finally {\n prj.setPersistentProperty(qn, profile);\n }\n }\n else {\n Logger.getLog().info("Not a NexOpen project :: " + prj);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-835|SpecialSeperatorForDevSet|public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n if (!source.exists()) throw new IOException("source file not exists");\n if (!source.isFile()) throw new IOException("source file not exists(is a directory)");\n-   InputStream src = new FileInputStream(source);\n+   InputStream src = new FileInputStream(source);\n File tarn = target;\n if (target.isDirectory() || !(!(target.exists()) || replace)) {\n String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n tarn = new File(tardir + File.separator + source.getName());\n int n = 1;\n while (!(!tarn.exists() || replace)) {\n tarn = new File(tardir + File.separator + String.valueOf(n) + " copy of " + source.getName());\n n++;\n }\n }\n if (source.getPath().equals(tarn.getPath()) && replace) return;\n OutputStream tar = new FileOutputStream(tarn);\n byte[] bytes = new byte[bufferSize];\n int readn = -1;\n while ((readn = src.read(bytes)) > 0) {\n tar.write(bytes, 0, readn);\n }\n tar.flush();\n tar.close();\n src.close();\n }\n|SpecialSeperatorForDevSet|-  public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n+  public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n if (!source.exists()) throw new IOException("source file not exists");\n if (!source.isFile()) throw new IOException("source file not exists(is a directory)");\n InputStream src = new FileInputStream(source);\n File tarn = target;\n if (target.isDirectory() || !(!(target.exists()) || replace)) {\n String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n tarn = new File(tardir + File.separator + source.getName());\n int n = 1;\n while (!(!tarn.exists() || replace)) {\n tarn = new File(tardir + File.separator + String.valueOf(n) + " copy of " + source.getName());\n n++;\n }\n }\n if (source.getPath().equals(tarn.getPath()) && replace) return;\n OutputStream tar = new FileOutputStream(tarn);\n byte[] bytes = new byte[bufferSize];\n int readn = -1;\n while ((readn = src.read(bytes)) > 0) {\n tar.write(bytes, 0, readn);\n }\n tar.flush();\n tar.close();\n src.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-835|SpecialSeperatorForDevSet|public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n if (!source.exists()) throw new IOException("source file not exists");\n if (!source.isFile()) throw new IOException("source file not exists(is a directory)");\n InputStream src = new FileInputStream(source);\n File tarn = target;\n if (target.isDirectory() || !(!(target.exists()) || replace)) {\n-   String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n+   String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n tarn = new File(tardir + File.separator + source.getName());\n int n = 1;\n while (!(!tarn.exists() || replace)) {\n tarn = new File(tardir + File.separator + String.valueOf(n) + " copy of " + source.getName());\n n++;\n }\n }\n if (source.getPath().equals(tarn.getPath()) && replace) return;\n OutputStream tar = new FileOutputStream(tarn);\n byte[] bytes = new byte[bufferSize];\n int readn = -1;\n while ((readn = src.read(bytes)) > 0) {\n tar.write(bytes, 0, readn);\n }\n tar.flush();\n tar.close();\n src.close();\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n File ifp = new File(src);\n File ofp = new File(dest);\n if (ifp.exists() == false) {\n throw new IOException("file '" + src + "' does not exist");\n }\n FileInputStream fis = new FileInputStream(ifp);\n FileOutputStream fos = new FileOutputStream(ofp);\n byte[] b = new byte[1024];\n while (fis.read(b) > 0) fos.write(b);\n fis.close();\n fos.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-836|SpecialSeperatorForDevSet|public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\n if (TESTING) {\n HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\n ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()));\n return ret;\n }\n int retries = 0;\n while (retries < 3) {\n try {\n ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\n-   String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>");\n+   String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>");\n Document doc = DocumentHelper.parseText(reqPre);\n doc.getRootElement().element("Resource").element("Contents").setText(recordContent);\n URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"));\n InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8");\n BufferedReader buffered = new BufferedReader(reader);\n StringBuffer sb = new StringBuffer();\n String line;\n while ((line = buffered.readLine()) != null) {\n sb.append(line);\n }\n Document d = DocumentHelper.parseText(sb.toString());\n HashSet<String> places = new HashSet<String>();\n for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName");\n it.hasNext();\n ) {\n Element plcEl = it.next();\n String val = plcEl.elementTextTrim("TermName");\n if (!val.equals("") && !places.contains(val)) {\n places.add(val);\n String entryID = plcEl.attributeValue("entryID");\n Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\n for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry");\n it2.hasNext();\n ) {\n Element idEl = it2.next();\n if (idEl.attributeValue("entryID").equals(entryID)) plc.getV2().add(idEl.attributeValue("id"));\n }\n ret.add(plc);\n }\n }\n return ret;\n }\n catch (Exception e) {\n log.debug("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage(), e);\n System.out.println("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage());\n retries++;\n }\n }\n System.out.println("Too many retries. Giving up.");\n return new HashSet<Tuple<String, ArrayList<String>>>();\n }\n|SpecialSeperatorForDevSet|public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\n if (TESTING) {\n HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\n ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()));\n return ret;\n }\n int retries = 0;\n while (retries < 3) {\n try {\n ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\n String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>");\n Document doc = DocumentHelper.parseText(reqPre);\n doc.getRootElement().element("Resource").element("Contents").setText(recordContent);\n URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"));\n InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8");\n BufferedReader buffered = new BufferedReader(reader);\n StringBuffer sb = new StringBuffer();\n String line;\n while ((line = buffered.readLine()) != null) {\n sb.append(line);\n }\n Document d = DocumentHelper.parseText(sb.toString());\n HashSet<String> places = new HashSet<String>();\n for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName");\n it.hasNext();\n ) {\n Element plcEl = it.next();\n String val = plcEl.elementTextTrim("TermName");\n if (!val.equals("") && !places.contains(val)) {\n places.add(val);\n String entryID = plcEl.attributeValue("entryID");\n Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\n for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry");\n it2.hasNext();\n ) {\n Element idEl = it2.next();\n if (idEl.attributeValue("entryID").equals(entryID)) plc.getV2().add(idEl.attributeValue("id"));\n }\n ret.add(plc);\n }\n }\n return ret;\n }\n catch (Exception e) {\n log.debug("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage(), e);\n System.out.println("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage());\n retries++;\n }\n-   }\n+   }\n System.out.println("Too many retries. Giving up.");\n return new HashSet<Tuple<String, ArrayList<String>>>();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-836|SpecialSeperatorForDevSet|public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\n if (TESTING) {\n HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\n ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()));\n return ret;\n }\n int retries = 0;\n while (retries < 3) {\n try {\n ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\n String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>");\n Document doc = DocumentHelper.parseText(reqPre);\n doc.getRootElement().element("Resource").element("Contents").setText(recordContent);\n URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"));\n InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8");\n BufferedReader buffered = new BufferedReader(reader);\n StringBuffer sb = new StringBuffer();\n String line;\n while ((line = buffered.readLine()) != null) {\n sb.append(line);\n }\n Document d = DocumentHelper.parseText(sb.toString());\n HashSet<String> places = new HashSet<String>();\n for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName");\n it.hasNext();\n ) {\n Element plcEl = it.next();\n String val = plcEl.elementTextTrim("TermName");\n-   if (!val.equals("") && !places.contains(val)) {\n+   if (!val.equals("") && !places.contains(val)) {\n places.add(val);\n String entryID = plcEl.attributeValue("entryID");\n Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\n for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry");\n it2.hasNext();\n ) {\n Element idEl = it2.next();\n if (idEl.attributeValue("entryID").equals(entryID)) plc.getV2().add(idEl.attributeValue("id"));\n }\n ret.add(plc);\n }\n }\n return ret;\n }\n catch (Exception e) {\n log.debug("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage(), e);\n System.out.println("Erro ao pesquisar a lista de termos para o registo " + recordContent + "! " + e.getMessage());\n retries++;\n }\n }\n System.out.println("Too many retries. Giving up.");\n return new HashSet<Tuple<String, ArrayList<String>>>();\n }\n|SpecialSeperatorForDevSet|-  public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\n+  public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\n URL url = new URL(urlToRetrieve);\n URLConnection uc = url.openConnection();\n InputStream is = uc.getInputStream();\n BufferedReader in = new BufferedReader(new InputStreamReader(is));\n StringBuilder output = new StringBuilder(16384);\n String str;\n boolean first = true;\n while ((str = in.readLine()) != null) {\n if (!first) output.append("\n");\n first = false;\n output.append(str);\n }\n in.close();\n System.err.println(((HttpURLConnection) uc).getResponseMessage());\n return output.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-837|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n out = new TitleCaseFilter(out);\n-   String line;\n+   String line;\n while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n out = new TitleCaseFilter(out);\n String line;\n-   while ((line = in.readLine()) != null) out.write(line + "\n");\n+   while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-837|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n-   BufferedReader in = new BufferedReader(new FileReader(args[0]));\n+   BufferedReader in = new BufferedReader(new FileReader(args[0]));\n Writer out = new FileWriter(args[1]);\n out = new WrapFilter(new BufferedWriter(out), 40);\n out = new TitleCaseFilter(out);\n String line;\n while ((line = in.readLine()) != null) out.write(line + "\n");\n out.close();\n in.close();\n }\n|SpecialSeperatorForDevSet|private void copyJar(File src, File dst) throws IOException {\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(src).getChannel();\n dstChannel = new FileOutputStream(dst).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n-   }\n+   }\n catch (IOException e) {\n fLog.log(Level.SEVERE, e.getMessage(), e);\n }\n finally {\n srcChannel.close();\n dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-838|SpecialSeperatorForDevSet|public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n-   if (part.getBody() != null) {\n+   if (part.getBody() != null) {\n long attachmentId = localAttachment.mId;\n InputStream in = part.getBody().getInputStream();\n File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n if (!saveIn.exists()) {\n saveIn.mkdirs();\n }\n File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n saveAs.createNewFile();\n FileOutputStream out = new FileOutputStream(saveAs);\n long copySize = IOUtils.copy(in, out);\n in.close();\n out.close();\n String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n localAttachment.mSize = copySize;\n localAttachment.mContentUri = contentUriString;\n ContentValues cv = new ContentValues();\n cv.put(AttachmentColumns.SIZE, copySize);\n cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n context.getContentResolver().update(uri, cv, null, null);\n }\n }\n|SpecialSeperatorForDevSet|public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n if (part.getBody() != null) {\n long attachmentId = localAttachment.mId;\n InputStream in = part.getBody().getInputStream();\n File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n if (!saveIn.exists()) {\n saveIn.mkdirs();\n }\n File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n saveAs.createNewFile();\n FileOutputStream out = new FileOutputStream(saveAs);\n-   long copySize = IOUtils.copy(in, out);\n+   long copySize = IOUtils.copy(in, out);\n in.close();\n out.close();\n String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n localAttachment.mSize = copySize;\n localAttachment.mContentUri = contentUriString;\n ContentValues cv = new ContentValues();\n cv.put(AttachmentColumns.SIZE, copySize);\n cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n context.getContentResolver().update(uri, cv, null, null);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-838|SpecialSeperatorForDevSet|public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n if (part.getBody() != null) {\n long attachmentId = localAttachment.mId;\n InputStream in = part.getBody().getInputStream();\n File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n if (!saveIn.exists()) {\n saveIn.mkdirs();\n }\n File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n saveAs.createNewFile();\n FileOutputStream out = new FileOutputStream(saveAs);\n-   long copySize = IOUtils.copy(in, out);\n+   long copySize = IOUtils.copy(in, out);\n in.close();\n out.close();\n String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n localAttachment.mSize = copySize;\n localAttachment.mContentUri = contentUriString;\n ContentValues cv = new ContentValues();\n cv.put(AttachmentColumns.SIZE, copySize);\n cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n context.getContentResolver().update(uri, cv, null, null);\n }\n }\n|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n-   int c;\n+   int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-839|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n-   try {\n+   try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n-   exc.printStackTrace();\n+   exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-839|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n int length;\n while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n in.close();\n out.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-840|SpecialSeperatorForDevSet|public static void writeFileType(String uriFile, String outputfile, int num) {\n BufferedWriter writer = null;\n String uri = null;\n try {\n int counter = 1;\n writer = new BufferedWriter(new FileWriter(outputfile));\n BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n uri = null;\n while (counter < num) {\n uri = reader.readLine();\n counter++;\n }\n while ((uri = reader.readLine()) != null) {\n-   try {\n+   try {\n System.err.println("working on the [" + counter + "]th document.");\n counter++;\n URL url = new URL(uri);\n URLConnection myConnection = url.openConnection();\n BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n String line = null;\n boolean hasOWL = false;\n boolean hasRDFS = false;\n boolean hasRDF = false;\n int linecount = 0;\n while ((line = myReader.readLine()) != null) {\n if (line.indexOf("http://www.w3.org/2002/07/owl") != -1) hasOWL = true;\n else if (line.indexOf("http://www.w3.org/2000/01/rdf-schema") != -1) hasRDFS = true;\n else if (line.indexOf("http://www.w3.org/1999/02/22-rdf-syntax-ns") != -1) hasRDF = true;\n linecount++;\n if (linecount > 100) break;\n }\n if (hasOWL) writer.write(uri + "\t" + OWL);\n else if (hasRDFS) writer.write(uri + "\t" + RDFS);\n else if (hasRDF) writer.write(uri + "\t" + RDF);\n else writer.write(uri + "\t" + UNKNOWN);\n writer.newLine();\n writer.flush();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n writer.write(uri + "\t" + BROKEN);\n writer.newLine();\n writer.flush();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n }\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void writeFileType(String uriFile, String outputfile, int num) {\n BufferedWriter writer = null;\n String uri = null;\n try {\n int counter = 1;\n writer = new BufferedWriter(new FileWriter(outputfile));\n BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n uri = null;\n while (counter < num) {\n uri = reader.readLine();\n counter++;\n }\n while ((uri = reader.readLine()) != null) {\n try {\n System.err.println("working on the [" + counter + "]th document.");\n counter++;\n URL url = new URL(uri);\n URLConnection myConnection = url.openConnection();\n BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n String line = null;\n boolean hasOWL = false;\n boolean hasRDFS = false;\n boolean hasRDF = false;\n int linecount = 0;\n while ((line = myReader.readLine()) != null) {\n if (line.indexOf("http://www.w3.org/2002/07/owl") != -1) hasOWL = true;\n else if (line.indexOf("http://www.w3.org/2000/01/rdf-schema") != -1) hasRDFS = true;\n else if (line.indexOf("http://www.w3.org/1999/02/22-rdf-syntax-ns") != -1) hasRDF = true;\n linecount++;\n if (linecount > 100) break;\n }\n if (hasOWL) writer.write(uri + "\t" + OWL);\n else if (hasRDFS) writer.write(uri + "\t" + RDFS);\n else if (hasRDF) writer.write(uri + "\t" + RDF);\n else writer.write(uri + "\t" + UNKNOWN);\n writer.newLine();\n writer.flush();\n }\n catch (Exception e) {\n e.printStackTrace();\n-   try {\n+   try {\n writer.write(uri + "\t" + BROKEN);\n writer.newLine();\n writer.flush();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n }\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-840|SpecialSeperatorForDevSet|public static void writeFileType(String uriFile, String outputfile, int num) {\n BufferedWriter writer = null;\n String uri = null;\n try {\n int counter = 1;\n writer = new BufferedWriter(new FileWriter(outputfile));\n BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n uri = null;\n while (counter < num) {\n uri = reader.readLine();\n counter++;\n }\n while ((uri = reader.readLine()) != null) {\n try {\n System.err.println("working on the [" + counter + "]th document.");\n counter++;\n URL url = new URL(uri);\n URLConnection myConnection = url.openConnection();\n BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n String line = null;\n boolean hasOWL = false;\n boolean hasRDFS = false;\n boolean hasRDF = false;\n int linecount = 0;\n while ((line = myReader.readLine()) != null) {\n if (line.indexOf("http://www.w3.org/2002/07/owl") != -1) hasOWL = true;\n else if (line.indexOf("http://www.w3.org/2000/01/rdf-schema") != -1) hasRDFS = true;\n else if (line.indexOf("http://www.w3.org/1999/02/22-rdf-syntax-ns") != -1) hasRDF = true;\n linecount++;\n if (linecount > 100) break;\n }\n if (hasOWL) writer.write(uri + "\t" + OWL);\n else if (hasRDFS) writer.write(uri + "\t" + RDFS);\n else if (hasRDF) writer.write(uri + "\t" + RDF);\n else writer.write(uri + "\t" + UNKNOWN);\n-   writer.newLine();\n+   writer.newLine();\n writer.flush();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n writer.write(uri + "\t" + BROKEN);\n writer.newLine();\n writer.flush();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n }\n }\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n-   String line;\n+   String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-841|SpecialSeperatorForDevSet|private synchronized void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM non_generic_favs").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n e.printStackTrace(System.out);\n throw new IOException("Error on initial data store read");\n }\n String[] qry = {\n "CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)", "CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n }\n e2.printStackTrace(new PrintWriter(System.out));\n throw new IOException("Error initializing data store");\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n e4.printStackTrace(System.out);\n throw new IOException("Unable to cleanup data store resources");\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n throw new IOException("Unable to reset data store auto commit");\n }\n }\n-   }\n+   }\n return;\n }\n|SpecialSeperatorForDevSet|private synchronized void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM non_generic_favs").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n e.printStackTrace(System.out);\n throw new IOException("Error on initial data store read");\n-   }\n+   }\n String[] qry = {\n "CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)", "CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n }\n e2.printStackTrace(new PrintWriter(System.out));\n throw new IOException("Error initializing data store");\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n e4.printStackTrace(System.out);\n throw new IOException("Unable to cleanup data store resources");\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n throw new IOException("Unable to reset data store auto commit");\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-841|SpecialSeperatorForDevSet|private synchronized void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM non_generic_favs").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n e.printStackTrace(System.out);\n throw new IOException("Error on initial data store read");\n }\n String[] qry = {\n "CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)", "CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n }\n e2.printStackTrace(new PrintWriter(System.out));\n throw new IOException("Error initializing data store");\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n e4.printStackTrace(System.out);\n throw new IOException("Unable to cleanup data store resources");\n-   }\n+   }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n throw new IOException("Unable to reset data store auto commit");\n }\n }\n }\n return;\n }\n|SpecialSeperatorForDevSet|public PTask stop(PTask task, SyrupConnection con) throws Exception {\n PreparedStatement s = null;\n ResultSet result = null;\n try {\n s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\n s.setString(1, task.key());\n result = s.executeQuery();\n con.commit();\n if (result.next()) {\n String url = result.getString("worker");\n InputStream i = null;\n try {\n Object b = new URL(url).getContent();\n if (b instanceof InputStream) {\n i = (InputStream) b;\n byte[] bb = new byte[256];\n int ll = i.read(bb);\n String k = new String(bb, 0, ll);\n if (k.equals(task.key())) {\n return task;\n }\n }\n }\n catch (Exception e) {\n }\n finally {\n if (i != null) {\n-   i.close();\n+   i.close();\n }\n }\n PreparedStatement s2 = null;\n s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\n s2.setString(1, task.key());\n s2.executeUpdate();\n task = sqlImpl().queryFunctions().readPTask(task.key(), con);\n sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);\n con.commit();\n }\n }\n finally {\n con.rollback();\n close(result);\n }\n return task;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-842|SpecialSeperatorForDevSet|public void writeConfiguration(Writer out) throws IOException {\n if (myResource == null) {\n-   out.append("# Unable to print configuration resource\n");\n+   out.append("# Unable to print configuration resource\n");\n }\n else {\n URL url = myResource.getUrl();\n InputStream in = url.openStream();\n if (in != null) {\n try {\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n else {\n out.append("# Unable to print configuration resource\n");\n }\n }\n }\n|SpecialSeperatorForDevSet|public void writeConfiguration(Writer out) throws IOException {\n if (myResource == null) {\n out.append("# Unable to print configuration resource\n");\n }\n else {\n URL url = myResource.getUrl();\n InputStream in = url.openStream();\n if (in != null) {\n try {\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n else {\n-   out.append("# Unable to print configuration resource\n");\n+   out.append("# Unable to print configuration resource\n");\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-842|SpecialSeperatorForDevSet|public void writeConfiguration(Writer out) throws IOException {\n if (myResource == null) {\n out.append("# Unable to print configuration resource\n");\n }\n else {\n URL url = myResource.getUrl();\n InputStream in = url.openStream();\n if (in != null) {\n try {\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n else {\n out.append("# Unable to print configuration resource\n");\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n-   assertEquals("byte count", reference.length(), tee.getSize());\n+   assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-843|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n-   LOGGER.error(e);\n+   LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n-   IOUtils.copy(fis, fos);\n+   IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-843|SpecialSeperatorForDevSet|public void createFile(File src, String filename) throws IOException {\n try {\n FileInputStream fis = new FileInputStream(src);\n OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\n IOUtils.copy(fis, fos);\n fos.close();\n fis.close();\n }\n-   catch (ResourceManagerException e) {\n+   catch (ResourceManagerException e) {\n LOGGER.error(e);\n }\n }\n|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n-   }\n+   }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-844|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n-   }\n+   }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-844|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n-   for (File del : deletes) {\n+   for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n-   if (entry.isDirectory()) {\n+   if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n outputStream.close();\n inputStream.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-845|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n-   byte data[] = new byte[BUFFER];\n+   byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-845|SpecialSeperatorForDevSet|public static void unzipModel(String filename, String tempdir) throws EDITSException {\n try {\n BufferedOutputStream dest = null;\n FileInputStream fis = new FileInputStream(filename);\n int BUFFER = 2048;\n ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n ZipEntry entry;\n while ((entry = zis.getNextEntry()) != null) {\n int count;\n byte data[] = new byte[BUFFER];\n FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n dest = new BufferedOutputStream(fos, BUFFER);\n while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n dest.flush();\n dest.close();\n-   }\n+   }\n zis.close();\n }\n catch (Exception e) {\n throw new EDITSException("Can not expand model in \"" + tempdir + "\" because:\n" + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public void copy(File s, File t) throws IOException {\n FileChannel in = (new FileInputStream(s)).getChannel();\n FileChannel out = (new FileOutputStream(t)).getChannel();\n in.transferTo(0, s.length(), out);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-846|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n-   i < cmp.length;\n+   i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n-   if (all) assertEquals(cmp.length, out.length);\n+   if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-846|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n-   }\n+   }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n-   else {\n+   else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-847|SpecialSeperatorForDevSet|public void runInternal() {\n connection = null;\n boolean itemsLoadedPartially = false;\n boolean loadNext = false;\n HashSet<String> visited = new HashSet<String>();\n do {\n try {\n setProgressMessage(url.toString(), -1);\n visited.add(url.toString());\n long startTimeStamp = System.currentTimeMillis();\n delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n URLConnection conn = url.openConnection();\n if (conn instanceof HttpsURLConnection) {\n onError("HTTPs is not supported yet");\n return;\n }\n if (!(conn instanceof HttpURLConnection)) {\n onError("Only HTTP supported");\n return;\n }\n connection = (HttpURLConnection) conn;\n connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");\n if (referer != null) connection.setRequestProperty("Referer", referer);\n connection.setInstanceFollowRedirects(true);\n connection.setAllowUserInteraction(false);\n connection.setConnectTimeout(CONNECT_TIMEOUT);\n connection.setReadTimeout(READ_TIMEOUT);\n connection.setDoInput(true);\n String fileName = null;\n String disp = connection.getHeaderField("Content-Disposition");\n if (disp != null) {\n int p = disp.indexOf("filename=");\n if (p > 0) {\n fileName = disp.substring(p + 9);\n }\n }\n int response = -1;\n response = connection.getResponseCode();\n L.d("Response: " + response);\n if (response != 200) {\n onError("Error " + response);\n return;\n }\n String contentType = connection.getContentType();\n String contentEncoding = connection.getContentEncoding();\n int contentLen = connection.getContentLength();\n L.d("Entity content length: " + contentLen);\n L.d("Entity content type: " + contentType);\n L.d("Entity content encoding: " + contentEncoding);\n setProgressMessage(url.toString(), contentLen);\n InputStream is = connection.getInputStream();\n delayedProgress.cancel();\n is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n boolean isZip = contentType != null && contentType.equals("application/zip");\n if (expectedType != null) contentType = expectedType;\n else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n byte[] buf = new byte[contentLen];\n-   if (is.read(buf) != contentLen) {\n+   if (is.read(buf) != contentLen) {\n onError("Wrong content length");\n return;\n }\n is.close();\n is = null;\n is = new ByteArrayInputStream(buf);\n if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";\n }\n if (contentType.startsWith("application/atom+xml")) {\n L.d("Parsing feed");\n parseFeed(is);\n itemsLoadedPartially = true;\n if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;\nprofile=opds-catalog")) {\n if (handler.entries.size() < MAX_OPDS_ITEMS) {\n url = new URL(handler.docInfo.nextLink.href);\n loadNext = !visited.contains(url.toString());\n L.d("continue with next part: " + url);\n }\n else {\n L.d("max item count reached: " + handler.entries.size());\n loadNext = false;\n }\n }\n else {\n loadNext = false;\n }\n }\n else {\n if (fileName == null) fileName = defaultFileName;\n L.d("Downloading book: " + contentEncoding);\n downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n if (progressShown) coolReader.getEngine().hideProgress();\n loadNext = false;\n itemsLoadedPartially = false;\n }\n }\n catch (Exception e) {\n L.e("Exception while trying to open URI " + url.toString(), e);\n if (progressShown) coolReader.getEngine().hideProgress();\n onError("Error occured while reading OPDS catalog");\n break;\n }\n finally {\n if (connection != null) try {\n connection.disconnect();\n }\n catch (Exception e) {\n }\n }\n }\n while (loadNext);\n if (progressShown) coolReader.getEngine().hideProgress();\n if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n @Override public void run() {\n L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");\n callback.onFinish(handler.docInfo, handler.entries);\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|public void runInternal() {\n connection = null;\n boolean itemsLoadedPartially = false;\n boolean loadNext = false;\n HashSet<String> visited = new HashSet<String>();\n do {\n try {\n setProgressMessage(url.toString(), -1);\n visited.add(url.toString());\n long startTimeStamp = System.currentTimeMillis();\n delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n URLConnection conn = url.openConnection();\n if (conn instanceof HttpsURLConnection) {\n onError("HTTPs is not supported yet");\n return;\n }\n if (!(conn instanceof HttpURLConnection)) {\n onError("Only HTTP supported");\n return;\n }\n connection = (HttpURLConnection) conn;\n connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");\n if (referer != null) connection.setRequestProperty("Referer", referer);\n connection.setInstanceFollowRedirects(true);\n connection.setAllowUserInteraction(false);\n connection.setConnectTimeout(CONNECT_TIMEOUT);\n connection.setReadTimeout(READ_TIMEOUT);\n connection.setDoInput(true);\n String fileName = null;\n String disp = connection.getHeaderField("Content-Disposition");\n-   if (disp != null) {\n+   if (disp != null) {\n int p = disp.indexOf("filename=");\n if (p > 0) {\n fileName = disp.substring(p + 9);\n }\n }\n int response = -1;\n response = connection.getResponseCode();\n L.d("Response: " + response);\n if (response != 200) {\n onError("Error " + response);\n return;\n }\n String contentType = connection.getContentType();\n String contentEncoding = connection.getContentEncoding();\n int contentLen = connection.getContentLength();\n L.d("Entity content length: " + contentLen);\n L.d("Entity content type: " + contentType);\n L.d("Entity content encoding: " + contentEncoding);\n setProgressMessage(url.toString(), contentLen);\n InputStream is = connection.getInputStream();\n delayedProgress.cancel();\n is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n boolean isZip = contentType != null && contentType.equals("application/zip");\n if (expectedType != null) contentType = expectedType;\n else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n byte[] buf = new byte[contentLen];\n if (is.read(buf) != contentLen) {\n onError("Wrong content length");\n return;\n }\n is.close();\n is = null;\n is = new ByteArrayInputStream(buf);\n if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";\n }\n if (contentType.startsWith("application/atom+xml")) {\n L.d("Parsing feed");\n parseFeed(is);\n itemsLoadedPartially = true;\n if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;\nprofile=opds-catalog")) {\n if (handler.entries.size() < MAX_OPDS_ITEMS) {\n url = new URL(handler.docInfo.nextLink.href);\n loadNext = !visited.contains(url.toString());\n L.d("continue with next part: " + url);\n }\n else {\n L.d("max item count reached: " + handler.entries.size());\n loadNext = false;\n }\n }\n else {\n loadNext = false;\n }\n }\n else {\n if (fileName == null) fileName = defaultFileName;\n L.d("Downloading book: " + contentEncoding);\n downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n if (progressShown) coolReader.getEngine().hideProgress();\n loadNext = false;\n itemsLoadedPartially = false;\n }\n }\n catch (Exception e) {\n L.e("Exception while trying to open URI " + url.toString(), e);\n if (progressShown) coolReader.getEngine().hideProgress();\n onError("Error occured while reading OPDS catalog");\n break;\n }\n finally {\n if (connection != null) try {\n connection.disconnect();\n }\n catch (Exception e) {\n }\n }\n }\n while (loadNext);\n if (progressShown) coolReader.getEngine().hideProgress();\n if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n @Override public void run() {\n L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");\n callback.onFinish(handler.docInfo, handler.entries);\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-847|SpecialSeperatorForDevSet|public void runInternal() {\n connection = null;\n boolean itemsLoadedPartially = false;\n boolean loadNext = false;\n HashSet<String> visited = new HashSet<String>();\n do {\n try {\n setProgressMessage(url.toString(), -1);\n visited.add(url.toString());\n long startTimeStamp = System.currentTimeMillis();\n delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n URLConnection conn = url.openConnection();\n if (conn instanceof HttpsURLConnection) {\n onError("HTTPs is not supported yet");\n return;\n }\n if (!(conn instanceof HttpURLConnection)) {\n onError("Only HTTP supported");\n return;\n }\n connection = (HttpURLConnection) conn;\n connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");\n if (referer != null) connection.setRequestProperty("Referer", referer);\n connection.setInstanceFollowRedirects(true);\n connection.setAllowUserInteraction(false);\n connection.setConnectTimeout(CONNECT_TIMEOUT);\n connection.setReadTimeout(READ_TIMEOUT);\n connection.setDoInput(true);\n String fileName = null;\n String disp = connection.getHeaderField("Content-Disposition");\n if (disp != null) {\n int p = disp.indexOf("filename=");\n if (p > 0) {\n fileName = disp.substring(p + 9);\n }\n }\n int response = -1;\n response = connection.getResponseCode();\n L.d("Response: " + response);\n if (response != 200) {\n onError("Error " + response);\n return;\n }\n String contentType = connection.getContentType();\n String contentEncoding = connection.getContentEncoding();\n int contentLen = connection.getContentLength();\n L.d("Entity content length: " + contentLen);\n L.d("Entity content type: " + contentType);\n L.d("Entity content encoding: " + contentEncoding);\n setProgressMessage(url.toString(), contentLen);\n InputStream is = connection.getInputStream();\n delayedProgress.cancel();\n is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n boolean isZip = contentType != null && contentType.equals("application/zip");\n if (expectedType != null) contentType = expectedType;\n else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n byte[] buf = new byte[contentLen];\n if (is.read(buf) != contentLen) {\n onError("Wrong content length");\n return;\n }\n is.close();\n is = null;\n is = new ByteArrayInputStream(buf);\n if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";\n }\n if (contentType.startsWith("application/atom+xml")) {\n L.d("Parsing feed");\n parseFeed(is);\n itemsLoadedPartially = true;\n if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;\nprofile=opds-catalog")) {\n if (handler.entries.size() < MAX_OPDS_ITEMS) {\n url = new URL(handler.docInfo.nextLink.href);\n-   loadNext = !visited.contains(url.toString());\n+   loadNext = !visited.contains(url.toString());\n L.d("continue with next part: " + url);\n }\n else {\n L.d("max item count reached: " + handler.entries.size());\n loadNext = false;\n }\n }\n else {\n loadNext = false;\n }\n }\n else {\n if (fileName == null) fileName = defaultFileName;\n L.d("Downloading book: " + contentEncoding);\n downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n if (progressShown) coolReader.getEngine().hideProgress();\n loadNext = false;\n itemsLoadedPartially = false;\n }\n }\n catch (Exception e) {\n L.e("Exception while trying to open URI " + url.toString(), e);\n if (progressShown) coolReader.getEngine().hideProgress();\n onError("Error occured while reading OPDS catalog");\n break;\n }\n finally {\n if (connection != null) try {\n connection.disconnect();\n }\n catch (Exception e) {\n }\n }\n }\n while (loadNext);\n if (progressShown) coolReader.getEngine().hideProgress();\n if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n @Override public void run() {\n L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");\n callback.onFinish(handler.docInfo, handler.entries);\n }\n }\n);\n }\n|SpecialSeperatorForDevSet|public static void doVersionCheck(View view) {\n-   view.showWaitCursor();\n+   view.showWaitCursor();\n try {\n URL url = new URL(jEdit.getProperty("version-check.url"));\n InputStream in = url.openStream();\n BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n String line;\n String version = null;\n String build = null;\n while ((line = bin.readLine()) != null) {\n if (line.startsWith(".version")) version = line.substring(8).trim();\n else if (line.startsWith(".build")) build = line.substring(6).trim();\n }\n bin.close();\n if (version != null && build != null) {\n if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url);\n else {\n GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);\n }\n }\n }\n catch (IOException e) {\n String[] args = {\n jEdit.getProperty("version-check.url"), e.toString() }\n;\n GUIUtilities.error(view, "read-error", args);\n }\n view.hideWaitCursor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-848|SpecialSeperatorForDevSet|-  public static String toMd5(String str) {\n+  public static String toMd5(String str) {\n MessageDigest messageDigest = null;\n try {\n messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.reset();\n messageDigest.update(str.getBytes("UTF-8"));\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("NoSuchAlgorithmException caught!");\n System.exit(-1);\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte[] byteArray = messageDigest.digest();\n StringBuffer md5StrBuff = new StringBuffer();\n for (int i = 0;\n i < byteArray.length;\n i++) {\n if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n }\n return md5StrBuff.toString();\n }\n|SpecialSeperatorForDevSet|public static String toMd5(String str) {\n MessageDigest messageDigest = null;\n try {\n messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.reset();\n messageDigest.update(str.getBytes("UTF-8"));\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("NoSuchAlgorithmException caught!");\n System.exit(-1);\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n-   }\n+   }\n byte[] byteArray = messageDigest.digest();\n StringBuffer md5StrBuff = new StringBuffer();\n for (int i = 0;\n i < byteArray.length;\n i++) {\n if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n }\n return md5StrBuff.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-848|SpecialSeperatorForDevSet|public static String toMd5(String str) {\n MessageDigest messageDigest = null;\n try {\n messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.reset();\n messageDigest.update(str.getBytes("UTF-8"));\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("NoSuchAlgorithmException caught!");\n-   System.exit(-1);\n+   System.exit(-1);\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte[] byteArray = messageDigest.digest();\n StringBuffer md5StrBuff = new StringBuffer();\n for (int i = 0;\n i < byteArray.length;\n i++) {\n if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));\n else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n }\n return md5StrBuff.toString();\n }\n|SpecialSeperatorForDevSet|private static final String hash(String input, String algorithm) {\n try {\n MessageDigest dig = MessageDigest.getInstance(algorithm);\n dig.update(input.getBytes());\n StringBuffer result = new StringBuffer();\n byte[] digest = dig.digest();\n String[] hex = {\n "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" }\n;\n for (int i = 0;\n i < digest.length;\n i++) {\n int u = digest[i];\n u &= 0x000000FF;\n int highCount = u / 16;\n int lowCount = u - (highCount * 16);\n-   result.append(hex[highCount]);\n+   result.append(hex[highCount]);\n result.append(hex[lowCount]);\n }\n return result.toString();\n }\n catch (NoSuchAlgorithmException e) {\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-849|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n-   int no = 0;\n+   int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n }\n finally {\n in.close();\n-   out.close();\n+   out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-849|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException("Source file doesn't exist: " + srcFile.getAbsolutePath());\n if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException("Destination file is directory: " + destFile.getAbsolutePath());\n FileInputStream in = new FileInputStream(srcFile);\n FileOutputStream out = new FileOutputStream(destFile);\n byte[] buffer = new byte[4096];\n int no = 0;\n try {\n while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n-   }\n+   }\n finally {\n in.close();\n out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static File copyFile(File fileToCopy, File copiedFile) {\n BufferedInputStream in = null;\n BufferedOutputStream outWriter = null;\n if (!copiedFile.exists()) {\n try {\n copiedFile.createNewFile();\n }\n catch (IOException e1) {\n e1.printStackTrace();\n return null;\n }\n-   }\n+   }\n try {\n in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n int c;\n while ((c = in.read()) != -1) outWriter.write(c);\n in.close();\n outWriter.close();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n return null;\n }\n catch (IOException e) {\n e.printStackTrace();\n return null;\n }\n return copiedFile;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-850|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n fis.close();\n fos.close();\n return true;\n }\n catch (FileNotFoundException e) {\n-   }\n+   }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n fis.close();\n fos.close();\n return true;\n-   }\n+   }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-850|SpecialSeperatorForDevSet|private boolean copyFile(File _file1, File _file2) {\n FileInputStream fis;\n FileOutputStream fos;\n-   try {\n+   try {\n fis = new FileInputStream(_file1);\n fos = new FileOutputStream(_file2);\n FileChannel canalFuente = fis.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n fis.close();\n fos.close();\n return true;\n }\n catch (FileNotFoundException e) {\n }\n catch (IOException e) {\n }\n return false;\n }\n|SpecialSeperatorForDevSet|public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n String dirBase = Util.JAVA_DIR + File.separator + packageName;\n File packageDir = new File(dirBase);\n if (!packageDir.exists()) {\n boolean created = packageDir.mkdir();\n if (!created) {\n File currentPath = new File(".");\n throw new Exception("Directory " + packageName + " could not be created. Current directory: " + currentPath.getAbsolutePath());\n }\n }\n for (int i = 0;\n i < fileContents.size();\n i++) {\n File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n FileOutputStream fos = new FileOutputStream(file);\n fos.write(fileContents.get(i));\n-   fos.flush();\n+   fos.flush();\n fos.close();\n }\n for (int i = 0;\n i < fileNames.size();\n i++) {\n File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n writer.append("package " + packageName + ";\n\n");\n String line = "";\n while ((line = reader.readLine()) != null) writer.append(line + "\n");\n writer.flush();\n writer.close();\n reader.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-851|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n-   boolean readExp = Utils.getFlag('l', args);\n+   boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n-   }\n+   }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-851|SpecialSeperatorForDevSet|public static void main(String[] args) {\n try {\n boolean readExp = Utils.getFlag('l', args);\n final boolean writeExp = Utils.getFlag('s', args);\n final String expFile = Utils.getOption('f', args);\n if ((readExp || writeExp) && (expFile.length() == 0)) {\n throw new Exception("A filename must be given with the -f option");\n }\n Experiment exp = null;\n if (readExp) {\n-   FileInputStream fi = new FileInputStream(expFile);\n+   FileInputStream fi = new FileInputStream(expFile);\n ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n exp = (Experiment) oi.readObject();\n oi.close();\n }\n else {\n exp = new Experiment();\n }\n System.err.println("Initial Experiment:\n" + exp.toString());\n final JFrame jf = new JFrame("Weka Experiment Setup");\n jf.getContentPane().setLayout(new BorderLayout());\n final SetupPanel sp = new SetupPanel();\n jf.getContentPane().add(sp, BorderLayout.CENTER);\n jf.addWindowListener(new WindowAdapter() {\n public void windowClosing(WindowEvent e) {\n System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());\n if (writeExp) {\n try {\n FileOutputStream fo = new FileOutputStream(expFile);\n ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n oo.writeObject(sp.m_Exp);\n oo.close();\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());\n }\n }\n jf.dispose();\n System.exit(0);\n }\n }\n);\n jf.pack();\n jf.setVisible(true);\n System.err.println("Short nap");\n Thread.currentThread().sleep(3000);\n System.err.println("Done");\n sp.setExperiment(exp);\n }\n catch (Exception ex) {\n ex.printStackTrace();\n System.err.println(ex.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n-   BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n+   BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n outputStream.close();\n inputStream.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-852|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n-   return false;\n+   return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n-   if (alias.equals("/")) {\n+   if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-852|SpecialSeperatorForDevSet|protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String path = request.getPathInfo();\n if (!path.startsWith(alias)) {\n throw new ServletException("Path '" + path + "' does not start with registered alias '" + alias + "'");\n }\n String internal;\n if (alias.equals("/")) {\n internal = name + path;\n }\n else {\n internal = name + path.substring(alias.length(), path.length());\n }\n URL resource = httpContext.getResource(internal);\n-   if (resource == null) {\n+   if (resource == null) {\n return false;\n }\n String mimeType = servletContext.getMimeType(internal);\n if (mimeType != null) {\n response.setContentType(mimeType);\n }\n InputStream is = resource.openStream();\n OutputStream os = response.getOutputStream();\n IOUtils.copyAndClose(is, os);\n return true;\n }\n|SpecialSeperatorForDevSet|public String[][] getProjectTreeData() {\n String[][] treeData = null;\n String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";\n String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";\n try {\n String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n factory.setValidating(false);\n DocumentBuilder parser = factory.newDocumentBuilder();\n URL u = new URL(urldata);\n DataInputStream is = new DataInputStream(u.openStream());\n FileOutputStream os = new FileOutputStream(filename);\n int iBufSize = is.available();\n byte inBuf[] = new byte[20000 * 1024];\n int iNumRead;\n while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n os.close();\n is.close();\n File f = new File(filename);\n InputStream inputstream = new FileInputStream(f);\n Document document = parser.parse(inputstream);\n NodeList nodelist = document.getElementsByTagName("proj");\n int num = nodelist.getLength();\n treeData = new String[num][3];\n for (int i = 0;\n i < num;\n-   i++) {\n+   i++) {\n treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));\n treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));\n treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));\n }\n }\n catch (MalformedURLException ex) {\n System.out.println(ex);\n }\n catch (ParserConfigurationException ex) {\n System.out.println(ex);\n }\n catch (NullPointerException e) {\n }\n catch (Exception ex) {\n System.out.println(ex);\n }\n return treeData;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-853|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n-   IOUtils.closeQuietly(fos);\n+   IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-853|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n-   catch (FileNotFoundException e) {\n+   catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n logger.debug("copyFile(srcFile={\n}\n, destFile={\n}\n) - start", srcFile, destFile);\n FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n-   try {\n+   try {\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n srcChannel.close();\n dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-854|SpecialSeperatorForDevSet|public void reset(int currentPilot) {\n try {\n PreparedStatement psta = jdbc.prepareStatement("DELETE FROM component_prop " + "WHERE pilot_id = ? ");\n psta.setInt(1, currentPilot);\n psta.executeUpdate();\n-   jdbc.commit();\n+   jdbc.commit();\n }\n catch (SQLException e) {\n jdbc.rollback();\n log.debug(e);\n }\n }\n|SpecialSeperatorForDevSet|public void reset(int currentPilot) {\n try {\n PreparedStatement psta = jdbc.prepareStatement("DELETE FROM component_prop " + "WHERE pilot_id = ? ");\n psta.setInt(1, currentPilot);\n psta.executeUpdate();\n jdbc.commit();\n }\n catch (SQLException e) {\n jdbc.rollback();\n-   log.debug(e);\n+   log.debug(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-854|SpecialSeperatorForDevSet|public void reset(int currentPilot) {\n try {\n PreparedStatement psta = jdbc.prepareStatement("DELETE FROM component_prop " + "WHERE pilot_id = ? ");\n psta.setInt(1, currentPilot);\n psta.executeUpdate();\n jdbc.commit();\n }\n catch (SQLException e) {\n jdbc.rollback();\n-   log.debug(e);\n+   log.debug(e);\n }\n }\n|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n-   PreparedStatement ps = null;\n+   PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n ps.setString(num++, portalUserBean.getPhone());\n ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-855|SpecialSeperatorForDevSet|public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n String fileName = file.getFileName();\n String assetsPath = FileFactory.getRealAssetsRootPath();\n new java.io.File(assetsPath).mkdir();\n java.io.File workingFile = getAssetIOFile(file);\n DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n if (destination != null && destination.getInode() > 0) {\n FileInputStream is = new FileInputStream(workingFile);\n FileChannel channelFrom = is.getChannel();\n java.io.File newVersionFile = getAssetIOFile(destination);\n FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n channelFrom.transferTo(0, channelFrom.size(), channelTo);\n channelTo.force(false);\n channelTo.close();\n channelFrom.close();\n }\n if (newDataFile != null) {\n FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n writeCurrentChannel.truncate(0);\n FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n writeCurrentChannel.force(false);\n writeCurrentChannel.close();\n fromChannel.close();\n if (UtilMethods.isImage(fileName)) {\n BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n int height = img.getHeight();\n file.setHeight(height);\n int width = img.getWidth();\n file.setWidth(width);\n-   }\n+   }\n String folderPath = workingFile.getParentFile().getAbsolutePath();\n Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n java.io.File directory = new java.io.File(folderPath);\n java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n for (java.io.File iofile : files) {\n try {\n iofile.delete();\n }\n catch (SecurityException e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.");\n }\n catch (Exception e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + e.getMessage());\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n String fileName = file.getFileName();\n String assetsPath = FileFactory.getRealAssetsRootPath();\n new java.io.File(assetsPath).mkdir();\n java.io.File workingFile = getAssetIOFile(file);\n DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n if (destination != null && destination.getInode() > 0) {\n FileInputStream is = new FileInputStream(workingFile);\n-   FileChannel channelFrom = is.getChannel();\n+   FileChannel channelFrom = is.getChannel();\n java.io.File newVersionFile = getAssetIOFile(destination);\n FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n channelFrom.transferTo(0, channelFrom.size(), channelTo);\n channelTo.force(false);\n channelTo.close();\n channelFrom.close();\n }\n if (newDataFile != null) {\n FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n writeCurrentChannel.truncate(0);\n FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n writeCurrentChannel.force(false);\n writeCurrentChannel.close();\n fromChannel.close();\n if (UtilMethods.isImage(fileName)) {\n BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n int height = img.getHeight();\n file.setHeight(height);\n int width = img.getWidth();\n file.setWidth(width);\n }\n String folderPath = workingFile.getParentFile().getAbsolutePath();\n Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n java.io.File directory = new java.io.File(folderPath);\n java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n for (java.io.File iofile : files) {\n try {\n iofile.delete();\n }\n catch (SecurityException e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.");\n }\n catch (Exception e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + e.getMessage());\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-855|SpecialSeperatorForDevSet|public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n String fileName = file.getFileName();\n String assetsPath = FileFactory.getRealAssetsRootPath();\n new java.io.File(assetsPath).mkdir();\n java.io.File workingFile = getAssetIOFile(file);\n DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n if (destination != null && destination.getInode() > 0) {\n FileInputStream is = new FileInputStream(workingFile);\n FileChannel channelFrom = is.getChannel();\n java.io.File newVersionFile = getAssetIOFile(destination);\n FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n channelFrom.transferTo(0, channelFrom.size(), channelTo);\n channelTo.force(false);\n channelTo.close();\n channelFrom.close();\n }\n if (newDataFile != null) {\n FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n-   writeCurrentChannel.truncate(0);\n+   writeCurrentChannel.truncate(0);\n FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n writeCurrentChannel.force(false);\n writeCurrentChannel.close();\n fromChannel.close();\n if (UtilMethods.isImage(fileName)) {\n BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n int height = img.getHeight();\n file.setHeight(height);\n int width = img.getWidth();\n file.setWidth(width);\n }\n String folderPath = workingFile.getParentFile().getAbsolutePath();\n Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n java.io.File directory = new java.io.File(folderPath);\n java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n for (java.io.File iofile : files) {\n try {\n iofile.delete();\n }\n catch (SecurityException e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.");\n }\n catch (Exception e) {\n Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + e.getMessage());\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n-   log.info(" Copying " + filename);\n+   log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-856|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n-   from = new FileInputStream(fromFile);\n+   from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n-   if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n+   if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-856|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n-   finally {\n+   finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|public Converter(String input, String output) {\n try {\n FileInputStream fis = new FileInputStream(new File(input));\n BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));\n FileOutputStream fos = new FileOutputStream(new File(output));\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));\n int len = 80;\n char buf[] = new char[len];\n int numRead;\n while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n out.close();\n in.close();\n }\n catch (IOException e) {\n-   System.out.println("An I/O Exception Occurred: " + e);\n+   System.out.println("An I/O Exception Occurred: " + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-857|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n-   LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n+   LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n-   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n+   HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-857|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n-   FileOutputStream fout = new FileOutputStream(tmpFile);\n+   FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|-  public static void copyTo(File source, File dest) {\n+  public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-858|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n-   }\n+   }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n }\n return buffer.toString();\n }\n-   catch (MalformedURLException muEx) {\n+   catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-858|SpecialSeperatorForDevSet|public String readReferenceText(final String ident) throws NoContentException {\n try {\n String name = getFilename(ident);\n URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry("/"), name);\n InputStream in = url.openStream();\n InputStreamReader isr = new InputStreamReader(in, "UTF-8");\n BufferedReader br = new BufferedReader(isr);\n StringBuffer buffer = new StringBuffer();\n String line = br.readLine();\n while (null != line) {\n buffer.append(line + "\n");\n line = br.readLine();\n-   }\n+   }\n return buffer.toString();\n }\n catch (MalformedURLException muEx) {\n logError(muEx);\n }\n catch (UnsupportedEncodingException ueEx) {\n logError(ueEx);\n }\n catch (IOException ioEx) {\n logError(ioEx);\n }\n throw new NoContentException("Unable to find or read reference text.");\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\n StringBuilder json = new StringBuilder();\n String requestUrl = "http://api.meetup.com/events.json/?group_urlname=" + groupIdentifier + "&key=" + key;\n try {\n URL url = new URL(requestUrl.toString());\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n-   String inputLine;\n+   String inputLine;\n while ((inputLine = in.readLine()) != null) {\n json.append(inputLine);\n }\n in.close();\n }\n catch (IOException e) {\n throw new GtugsException(e);\n }\n List<Event> events = new ArrayList<Event>();\n JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());\n JSONArray results = (JSONArray) jsonObj.get("results");\n for (int i = 0;\n i < results.size();\n i++) {\n JSONObject result = (JSONObject) results.get(i);\n Event e = new Event();\n e.setAttendeeCount(Integer.parseInt((String) result.get("rsvpcount")));\n e.setCity((String) result.get("venue_city"));\n e.setDescription((String) result.get("description"));\n e.setLatitude(Double.parseDouble((String) result.get("venue_lat")));\n e.setLongitude(Double.parseDouble((String) result.get("venue_lon")));\n e.setName((String) result.get("name"));\n Date myDate = null;\n String time = (String) result.get("time");\n try {\n myDate = meetupDateFormat.parse(time);\n e.setStartTime(timeDateFormat.format(myDate));\n e.setEndTime(timeDateFormat.format(myDate));\n e.setStartDate(myDate);\n e.setEndDate(myDate);\n String tz = tzDateFormat.format(myDate);\n if (tz != null && tz.startsWith("+")) {\n tz = tz.substring(1);\n }\n e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));\n }\n catch (ParseException ex) {\n ex.printStackTrace();\n continue;\n }\n e.setState((String) result.get("venue_state"));\n StringBuilder addressBuilder = new StringBuilder();\n if (result.get("venue_address1") != null) {\n addressBuilder.append((String) result.get("venue_address1") + " ");\n }\n if (result.get("venue_address2") != null) {\n addressBuilder.append((String) result.get("venue_address2") + " ");\n }\n if (result.get("venue_address3") != null) {\n addressBuilder.append((String) result.get("venue_address3") + " ");\n }\n if (result.get("venue_address4") != null) {\n addressBuilder.append((String) result.get("venue_address4"));\n }\n e.setStreetAddress(addressBuilder.toString().trim());\n e.setZipCode((String) result.get("venue_zip"));\n e.setUrl((String) result.get("event_url"));\n events.add(e);\n }\n return events;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-859|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n-   }\n+   }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n-   FileChannel inChannel = new FileInputStream(in).getChannel();\n+   FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-859|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n-   finally {\n+   finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|void copyFile(File src, File dst) throws IOException {\n FileChannel inChannel = new FileInputStream(src).getChannel();\n FileChannel outChannel = new FileOutputStream(dst).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-860|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n-   InputStream input;\n+   InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n-   input = new FileInputStream(source);\n+   input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-860|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n-   while ((b = input.read()) != -1) output.write(b);\n+   while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n logger.debug("copyFile(srcFile={\n}\n-  , destFile={\n+  , destFile={\n}\n) - start", srcFile, destFile);\n FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n try {\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n srcChannel.close();\n dstChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-861|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n-   }\n+   }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n-   return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n+   return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-861|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n-   return null;\n+   return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n String logFileName = args[0];\n int extractLineEvery = new Integer(args[1]).intValue();\n String filterToken = "P0";\n if (args.length > 2) {\n filterToken = args[2];\n }\n try {\n BufferedReader br = new BufferedReader(new FileReader(logFileName));\n BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + ".trim")));\n String readLine;\n int x = 0;\n while ((readLine = br.readLine()) != null) {\n if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n bw.write(readLine + "\n");\n }\n }\n-   bw.flush();\n+   bw.flush();\n bw.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-862|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n-   md.update(plaintext.getBytes("UTF-8"));\n+   md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-862|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|public static String encodePassword(String _originalPassword) {\n MessageDigest md = null;\n String encodedPassword = null;\n try {\n md = MessageDigest.getInstance("SHA-1");\n md.update(_originalPassword.getBytes("UTF-8"));\n encodedPassword = (new BASE64Encoder()).encode(md.digest());\n }\n catch (NoSuchAlgorithmException _e) {\n _e.printStackTrace();\n }\n catch (UnsupportedEncodingException _e) {\n _e.printStackTrace();\n }\n return encodedPassword;\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-863|SpecialSeperatorForDevSet|private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\n response.setContentType("image/" + type + "");\n Point imgSize = null;\n if (width > 0 || height > 0) {\n imgSize = new Point(width, height);\n }\n if (fmt != null && imageFormats.containsKey(fmt)) {\n imgSize = imageFormats.get(fmt);\n }\n InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\n if (imageInputStream == null) {\n throw new RuntimeException("File " + imageUrl + " does not exist!");\n }\n if (imgSize == null) {\n IOUtils.copy(imageInputStream, response.getOutputStream());\n }\n else {\n byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n response.setContentLength(imageBytes.length);\n response.getOutputStream().write(imageBytes);\n }\n response.getOutputStream().flush();\n-   response.getOutputStream().close();\n+   response.getOutputStream().close();\n }\n|SpecialSeperatorForDevSet|private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\n response.setContentType("image/" + type + "");\n Point imgSize = null;\n if (width > 0 || height > 0) {\n imgSize = new Point(width, height);\n }\n if (fmt != null && imageFormats.containsKey(fmt)) {\n imgSize = imageFormats.get(fmt);\n }\n InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\n if (imageInputStream == null) {\n throw new RuntimeException("File " + imageUrl + " does not exist!");\n }\n-   if (imgSize == null) {\n+   if (imgSize == null) {\n IOUtils.copy(imageInputStream, response.getOutputStream());\n }\n else {\n byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n response.setContentLength(imageBytes.length);\n response.getOutputStream().write(imageBytes);\n }\n response.getOutputStream().flush();\n response.getOutputStream().close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-863|SpecialSeperatorForDevSet|private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\n response.setContentType("image/" + type + "");\n Point imgSize = null;\n if (width > 0 || height > 0) {\n imgSize = new Point(width, height);\n }\n if (fmt != null && imageFormats.containsKey(fmt)) {\n imgSize = imageFormats.get(fmt);\n }\n InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\n if (imageInputStream == null) {\n throw new RuntimeException("File " + imageUrl + " does not exist!");\n }\n if (imgSize == null) {\n IOUtils.copy(imageInputStream, response.getOutputStream());\n }\n else {\n-   byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n+   byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n response.setContentLength(imageBytes.length);\n response.getOutputStream().write(imageBytes);\n }\n response.getOutputStream().flush();\n response.getOutputStream().close();\n }\n|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n-   byte[] buffer = new byte[2048];\n+   byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-864|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n-   appearance.setReason("Double signed.");\n+   appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-864|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n-   ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n+   ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n return;\n }\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-865|SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n while (iter.hasNext()) {\n String fileName = (String) iter.next();\n int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n-   if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n+   if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n|SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n while (iter.hasNext()) {\n String fileName = (String) iter.next();\n int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n-   fis.close();\n+   fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-865|SpecialSeperatorForDevSet|public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n-   if (fileList == null || fileList.size() == 0) return;\n+   if (fileList == null || fileList.size() == 0) return;\n FileOutputStream fos = new FileOutputStream(zipFileName);\n ZipOutputStream zos = new ZipOutputStream(fos);\n Iterator iter = fileList.iterator();\n while (iter.hasNext()) {\n String fileName = (String) iter.next();\n int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));\n String shortName = "unknown";\n if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n zos.putNextEntry(new ZipEntry(shortName));\n FileInputStream fis = new FileInputStream(fileName);\n byte[] buf = new byte[10000];\n int bytesRead;\n while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n fis.close();\n zos.closeEntry();\n }\n zos.close();\n }\n|SpecialSeperatorForDevSet|-  @Test public void testCopy_inputStreamToOutputStream() throws Exception {\n+  @Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-866|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n-  \n+  |SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-866|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n-   JarFile jar = new JarFile(jarPath);\n+   JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n LOG.info("Unzipping zip file '" + file.getAbsolutePath() + "' to directory '" + targetDirectory.getAbsolutePath() + "'.");\n assert (file.exists() && file.isFile());\n if (targetDirectory.exists() == false) {\n LOG.debug("Creating target directory.");\n if (targetDirectory.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + targetDirectory.getAbsolutePath() + "'!");\n }\n }\n ZipInputStream zipin = null;\n try {\n zipin = new ZipInputStream(new FileInputStream(file));\n ZipEntry entry = null;\n while ((entry = zipin.getNextEntry()) != null) {\n LOG.debug("Unzipping entry '" + entry.getName() + "'.");\n if (entry.isDirectory()) {\n LOG.debug("Skipping directory.");\n continue;\n }\n final File targetFile = new File(targetDirectory, entry.getName());\n final File parentTargetFile = targetFile.getParentFile();\n if (parentTargetFile.exists() == false) {\n LOG.debug("Creating directory '" + parentTargetFile.getAbsolutePath() + "'.");\n if (parentTargetFile.mkdirs() == false) {\n throw new BusinessException("Could not create target directory at '" + parentTargetFile.getAbsolutePath() + "'!");\n }\n }\n InputStream input = null;\n FileOutputStream output = null;\n try {\n input = zipFile.getInputStream(entry);\n if (targetFile.createNewFile() == false) {\n throw new BusinessException("Could not create target file '" + targetFile.getAbsolutePath() + "'!");\n }\n output = new FileOutputStream(targetFile);\n int readBytes = 0;\n byte[] buffer = new byte[BUFFER_SIZE];\n-   while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n+   while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n output.write(buffer, 0, readBytes);\n }\n }\n finally {\n FileUtil.closeCloseable(input);\n FileUtil.closeCloseable(output);\n }\n }\n }\n catch (IOException e) {\n throw new BusinessException("Could not unzip file '" + file.getAbsolutePath() + "'!", e);\n }\n finally {\n FileUtil.closeCloseable(zipin);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-867|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n-   if (is != null) {\n+   if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-867|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n-   }\n+   }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n-   selectedObjects.createNewFile();\n+   selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-868|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n-   }\n+   }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-868|SpecialSeperatorForDevSet|protected static void copyDeleting(File source, File dest) throws IOException {\n byte[] buf = new byte[8 * 1024];\n FileInputStream in = new FileInputStream(source);\n-   try {\n+   try {\n FileOutputStream out = new FileOutputStream(dest);\n try {\n int count;\n while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n }\n finally {\n out.close();\n }\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public String upload() {\n System.out.println(imgFile);\n String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(new File(destDir));\n IOUtils.copy(new FileInputStream(imgFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n }\n return "show";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-869|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n-   assertTrue(rs.next());\n+   assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n-   con = TestUtil.openDB();\n+   con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-869|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n-   con.setAutoCommit(false);\n+   con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|public void update(String channelPath, String dataField, String fatherDocId) {\n String sqlInitial = "select uri from t_ip_doc_res where doc_id = '" + fatherDocId + "' and type=" + " '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n String sqlsortURL = "update t_ip_doc_res set uri = ? where doc_id = '" + fatherDocId + "' " + " and type = '" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + "' ";\n Connection conn = null;\n ResultSet rs = null;\n PreparedStatement ps = null;\n try {\n dbo = (ERDBOperation) createDBOperation();\n String url = "";\n boolean flag = true;\n StringTokenizer st = null;\n conn = dbo.getConnection();\n conn.setAutoCommit(false);\n ps = conn.prepareStatement(sqlInitial);\n rs = ps.executeQuery();\n if (rs.next()) url = rs.getString(1);\n if (!url.equals("")) {\n st = new StringTokenizer(url, ",");\n String sortDocId = "";\n while (st.hasMoreTokens()) {\n if (flag) {\n sortDocId = "'" + st.nextToken() + "'";\n flag = false;\n-   }\n+   }\n else {\n sortDocId = sortDocId + "," + "'" + st.nextToken() + "'";\n }\n }\n String sqlsort = "select id from t_ip_doc where id in (" + sortDocId + ") order by " + dataField;\n ps = conn.prepareStatement(sqlsort);\n rs = ps.executeQuery();\n String sortURL = "";\n boolean sortflag = true;\n while (rs.next()) {\n if (sortflag) {\n sortURL = rs.getString(1);\n sortflag = false;\n }\n else {\n sortURL = sortURL + "," + rs.getString(1);\n }\n }\n ps = conn.prepareStatement(sqlsortURL);\n ps.setString(1, sortURL);\n ps.executeUpdate();\n }\n conn.commit();\n }\n catch (Exception e) {\n e.printStackTrace();\n try {\n conn.rollback();\n }\n catch (SQLException e1) {\n e1.printStackTrace();\n }\n }\n finally {\n close(rs, null, ps, conn, dbo);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-870|SpecialSeperatorForDevSet|public String execute() {\n String dir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\";\n HomeMap map = new HomeMap();\n map.setDescription(description);\n-   Integer id = homeMapDao.saveHomeMap(map);\n+   Integer id = homeMapDao.saveHomeMap(map);\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(dir + id);\n IOUtils.copy(new FileInputStream(imageFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return list();\n }\n|SpecialSeperatorForDevSet|public String execute() {\n String dir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\";\n HomeMap map = new HomeMap();\n map.setDescription(description);\n Integer id = homeMapDao.saveHomeMap(map);\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(dir + id);\n IOUtils.copy(new FileInputStream(imageFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n return list();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-870|SpecialSeperatorForDevSet|public String execute() {\n String dir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\";\n HomeMap map = new HomeMap();\n map.setDescription(description);\n Integer id = homeMapDao.saveHomeMap(map);\n FileOutputStream fos;\n try {\n fos = new FileOutputStream(dir + id);\n IOUtils.copy(new FileInputStream(imageFile), fos);\n IOUtils.closeQuietly(fos);\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n-   }\n+   }\n return list();\n }\n|SpecialSeperatorForDevSet|-  private static void copyFile(File src, File dst) throws IOException {\n+  private static void copyFile(File src, File dst) throws IOException {\n FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-871|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n-   }\n+   }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n-   String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n+   String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-871|SpecialSeperatorForDevSet|-  private String unJar(String jarPath, String jarEntry) {\n+  private String unJar(String jarPath, String jarEntry) {\n String path;\n if (jarPath.lastIndexOf("lib/") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf("lib/"));\n else path = jarPath.substring(0, jarPath.lastIndexOf("/"));\n String relPath = jarEntry.substring(0, jarEntry.lastIndexOf("/"));\n try {\n new File(path + "/" + relPath).mkdirs();\n JarFile jar = new JarFile(jarPath);\n ZipEntry ze = jar.getEntry(jarEntry);\n File bin = new File(path + "/" + jarEntry);\n IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return path + "/" + jarEntry;\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n String inFileName = args[0];\n String outFileName = args[1];\n-   long position = 0L;\n+   long position = 0L;\n try {\n position = Long.parseLong(args[2]);\n }\n catch (NumberFormatException nfex1) {\n try {\n position = Long.parseLong(args[2], 16);\n }\n catch (NumberFormatException nfex2) {\n System.err.println("Wrong offset");\n System.exit(0);\n }\n }\n if (position < 1L) {\n System.err.println("Wrong offset. Must be more than 0");\n System.exit(0);\n }\n System.out.println("Copying input: " + inFileName);\n System.out.println(" output: " + outFileName);\n System.out.println(" from: " + position);\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n bis.skip(position);\n for (byte[] b = new byte[1];\n bis.read(b) > 0;\n bos.write(b)) ;\n bis.close();\n bos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-872|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n-   }\n+   }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n-   new Thread() {\n+   new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-872|SpecialSeperatorForDevSet|protected ExternalDecoder(InputStream source, Process process) {\n super(source);\n this.process = process;\n this.processStdOut = process.getInputStream();\n this.processStdIn = process.getOutputStream();\n new Thread() {\n @Override public void run() {\n try {\n IOUtils.copy(getSource(), processStdIn);\n System.err.println("Copy done.");\n close();\n }\n catch (IOException e) {\n e.printStackTrace();\n IOUtils.closeQuietly(ExternalDecoder.this);\n }\n }\n }\n.start();\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static boolean dump(File source, File target) {\n boolean done = false;\n try {\n InputStream is = new BufferedInputStream(new FileInputStream(source));\n OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n while (is.available() > 0) {\n os.write(is.read());\n }\n os.flush();\n os.close();\n is.close();\n return true;\n }\n catch (IOException e) {\n-   }\n+   }\n return done;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-873|SpecialSeperatorForDevSet|public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\n if (srcFS.getFileStatus(src).isDir()) {\n if (!dst.mkdirs()) {\n return false;\n }\n FileStatus contents[] = srcFS.listStatus(src);\n for (int i = 0;\n i < contents.length;\n i++) {\n copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n }\n }\n else if (srcFS.isFile(src)) {\n-   InputStream in = srcFS.open(src);\n+   InputStream in = srcFS.open(src);\n IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n }\n else {\n throw new IOException(src.toString() + ": No such file or directory");\n }\n if (deleteSource) {\n return srcFS.delete(src, true);\n }\n else {\n return true;\n }\n }\n|SpecialSeperatorForDevSet|public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\n if (srcFS.getFileStatus(src).isDir()) {\n if (!dst.mkdirs()) {\n-   return false;\n+   return false;\n }\n FileStatus contents[] = srcFS.listStatus(src);\n for (int i = 0;\n i < contents.length;\n i++) {\n copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n }\n }\n else if (srcFS.isFile(src)) {\n InputStream in = srcFS.open(src);\n IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n }\n else {\n throw new IOException(src.toString() + ": No such file or directory");\n }\n if (deleteSource) {\n return srcFS.delete(src, true);\n }\n else {\n return true;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-873|SpecialSeperatorForDevSet|public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\n if (srcFS.getFileStatus(src).isDir()) {\n if (!dst.mkdirs()) {\n return false;\n }\n FileStatus contents[] = srcFS.listStatus(src);\n for (int i = 0;\n i < contents.length;\n i++) {\n copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n }\n }\n else if (srcFS.isFile(src)) {\n InputStream in = srcFS.open(src);\n-   IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n+   IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n }\n else {\n throw new IOException(src.toString() + ": No such file or directory");\n }\n if (deleteSource) {\n return srcFS.delete(src, true);\n }\n else {\n return true;\n }\n }\n|SpecialSeperatorForDevSet|-  public void patch() throws IOException {\n+  public void patch() throws IOException {\n if (mods.isEmpty()) {\n return;\n }\n IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-874|SpecialSeperatorForDevSet|public String readPage(boolean ignoreComments) throws Exception {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n String html = "";\n if (ignoreComments) {\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.length() > 0) {\n if (inputLine.substring(0, 1).compareTo("#") != 0) {\n html = html + inputLine + "\n";\n }\n }\n }\n }\n else {\n-   while ((inputLine = in.readLine()) != null) {\n+   while ((inputLine = in.readLine()) != null) {\n html = html + inputLine + "\n";\n }\n }\n in.close();\n return html;\n }\n|SpecialSeperatorForDevSet|-  public String readPage(boolean ignoreComments) throws Exception {\n+  public String readPage(boolean ignoreComments) throws Exception {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n String html = "";\n if (ignoreComments) {\n while ((inputLine = in.readLine()) != null) {\n if (inputLine.length() > 0) {\n if (inputLine.substring(0, 1).compareTo("#") != 0) {\n html = html + inputLine + "\n";\n }\n }\n }\n }\n else {\n while ((inputLine = in.readLine()) != null) {\n html = html + inputLine + "\n";\n }\n }\n in.close();\n return html;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-874|SpecialSeperatorForDevSet|public String readPage(boolean ignoreComments) throws Exception {\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n String html = "";\n if (ignoreComments) {\n while ((inputLine = in.readLine()) != null) {\n-   if (inputLine.length() > 0) {\n+   if (inputLine.length() > 0) {\n if (inputLine.substring(0, 1).compareTo("#") != 0) {\n html = html + inputLine + "\n";\n }\n }\n }\n }\n else {\n while ((inputLine = in.readLine()) != null) {\n html = html + inputLine + "\n";\n }\n }\n in.close();\n return html;\n }\n|SpecialSeperatorForDevSet|private void callService() {\n try {\n URL url = new URL(baseUrl + servicePath + attributes);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n StringBuffer buf = new StringBuffer();\n while ((inputLine = in.readLine()) != null) {\n buf.append(inputLine);\n-   }\n+   }\n in.close();\n answer = buf.toString();\n }\n catch (MalformedURLException e) {\n answer = "Malformed Url:" + e.getMessage();\n return;\n }\n catch (IOException e) {\n answer = "I/O exception: " + e.getMessage();\n return;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-875|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n-   }\n+   }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n-   }\n+   }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-875|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n-   }\n+   }\n|SpecialSeperatorForDevSet|public void handle() {\n FileChannel srcChannel, destChannel;\n String destOutFile = logFile + "." + System.currentTimeMillis();\n String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz";\n if (rotateDest != null) {\n (new File(rotateDest)).mkdirs();\n if (destOutFile.indexOf("/") != -1) {\n destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1);\n }\n if (destOutFileCompressed.indexOf("/") != -1) {\n destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1);\n }\n }\n if (rotateCompress) {\n try {\n GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n FileInputStream in = new FileInputStream(logFile);\n byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) {\n out.write(buf, 0, len);\n }\n in.close();\n out.finish();\n out.close();\n buf = null;\n in = null;\n out = null;\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFileCompressed + "'");\n }\n catch (Exception e) {\n Debug.debug("Unable to rotate log file '" + logFile + "': " + e);\n }\n }\n else {\n try {\n srcChannel = new FileInputStream(logFile).getChannel();\n }\n catch (IOException e) {\n Debug.debug("Unable to read log file '" + logFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel = new FileOutputStream(destOutFile).getChannel();\n-   }\n+   }\n catch (IOException e) {\n Debug.debug("Unable to rotate log file to '" + destOutFile + "': " + e.getMessage());\n return;\n }\n try {\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n destChannel.close();\n srcChannel = null;\n destChannel = null;\n }\n catch (IOException e) {\n Debug.debug("Unable to copy data for file rotation: " + e.getMessage());\n return;\n }\n Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'");\n }\n if (rotateDelete && isFile) {\n try {\n ps.close();\n }\n catch (Exception e) {\n }\n isFile = false;\n ps = null;\n (new File(logFile)).delete();\n reconfigureDebug();\n }\n if (rotateDest != null) {\n long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n long currentTime = System.currentTimeMillis();\n File fileList[] = (new File(rotateDest)).listFiles();\n DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");\n java.util.Date date = new java.util.Date(currentTime);\n String archiveFile = format1.format(date).toString() + ".zip";\n if (rotateArchive != null) {\n archiveFile = rotateArchive + "/" + archiveFile;\n (new File(rotateArchive)).mkdirs();\n }\n Archive archive = new Archive(archiveFile);\n for (int i = 0;\n i < fileList.length;\n i++) {\n String currentFilename = fileList[i].getName();\n long timeDifference = (currentTime - fileList[i].lastModified());\n if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) {\n if (rotateDest != null) {\n currentFilename = rotateDest + "/" + currentFilename;\n }\n if (timeDifference > comparisonTime) {\n archive.addFile(fileList[i].getName(), currentFilename);\n fileList[i].delete();\n }\n }\n }\n archive = null;\n fileList = null;\n format1 = null;\n date = null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-876|SpecialSeperatorForDevSet|public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n if (content == null) return null;\n final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n if (digestLength == -1) digestLength = digest.getDigestLength();\n for (int i = 0;\n i < repeatedHashingCount;\n i++) {\n if (i > 0) digest.update(digest.digest());\n digest.update(saltBefore);\n digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n digest.update(saltAfter);\n }\n return digest.digest();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n if (content == null) return null;\n final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n if (digestLength == -1) digestLength = digest.getDigestLength();\n for (int i = 0;\n i < repeatedHashingCount;\n-   i++) {\n+   i++) {\n if (i > 0) digest.update(digest.digest());\n digest.update(saltBefore);\n digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n digest.update(saltAfter);\n }\n return digest.digest();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-876|SpecialSeperatorForDevSet|public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n-   if (content == null) return null;\n+   if (content == null) return null;\n final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n if (digestLength == -1) digestLength = digest.getDigestLength();\n for (int i = 0;\n i < repeatedHashingCount;\n i++) {\n if (i > 0) digest.update(digest.digest());\n digest.update(saltBefore);\n digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n digest.update(saltAfter);\n }\n return digest.digest();\n }\n|SpecialSeperatorForDevSet|public String kodetu(String testusoila) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("SHA");\n }\n catch (NoSuchAlgorithmException e) {\n new MezuLeiho("Ez da zifraketa algoritmoa aurkitu", "Ados", "Zifraketa Arazoa", JOptionPane.ERROR_MESSAGE);\n e.printStackTrace();\n }\n try {\n-   md.update(testusoila.getBytes("UTF-8"));\n+   md.update(testusoila.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n new MezuLeiho("Errorea kodetzerakoan", "Ados", "Kodeketa Errorea", JOptionPane.ERROR_MESSAGE);\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-877|SpecialSeperatorForDevSet|public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n InputStream is = ffConfigurable.getInputConfigStream();\n-   try {\n+   try {\n OutputStream os = new FileOutputStream(file);\n IOUtils.copy(is, os);\n }\n catch (Exception e) {\n throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n }\n }\n|SpecialSeperatorForDevSet|public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n-   File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n+   File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n InputStream is = ffConfigurable.getInputConfigStream();\n try {\n OutputStream os = new FileOutputStream(file);\n IOUtils.copy(is, os);\n }\n catch (Exception e) {\n throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-877|SpecialSeperatorForDevSet|public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n InputStream is = ffConfigurable.getInputConfigStream();\n try {\n OutputStream os = new FileOutputStream(file);\n IOUtils.copy(is, os);\n }\n catch (Exception e) {\n throw new ConfigurationException("Failed to store free from config for class " + ffConfigurable.getClass().getName() + " into file " + file.getAbsolutePath());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n }\n-   finally {\n+   finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-878|SpecialSeperatorForDevSet|-  public static String str2md5(String str) {\n+  public static String str2md5(String str) {\n try {\n MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n-   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n+   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-878|SpecialSeperatorForDevSet|public static String str2md5(String str) {\n try {\n-   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n+   MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n alga.update(str.getBytes());\n byte[] digesta = alga.digest();\n return byte2hex(digesta);\n }\n catch (NoSuchAlgorithmException ex) {\n return str;\n }\n }\n|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) throws Exception {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (Exception e) {\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-879|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n-   finally {\n+   finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-879|SpecialSeperatorForDevSet|-  protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n+  protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n InputStream input = null;\n StringWriter sw = new StringWriter();\n try {\n if (testURL != null) {\n input = testURL.openStream();\n }\n else {\n input = new FileInputStream(filePath);\n }\n IOUtils.copy(input, sw, encoding);\n }\n finally {\n if (input != null) {\n input.close();\n }\n }\n return sw.toString();\n }\n|SpecialSeperatorForDevSet|public void test() throws Exception {\n StorageStringWriter s = new StorageStringWriter(2048, "UTF-8");\n s.addText("Test");\n try {\n s.getOutputStream();\n fail("Should throw IOException as method not supported.");\n }\n catch (IOException e) {\n }\n s.getWriter().write("ing is important");\n s.close(ResponseStateOk.getInstance());\n assertEquals("Testing is important", s.getText());\n InputStream input = s.getInputStream();\n StringWriter writer = new StringWriter();\n IOUtils.copy(input, writer, "UTF-8");\n assertEquals("Testing is important", writer.toString());\n try {\n s.getWriter();\n fail("Should throw IOException as storage is closed.");\n-   }\n+   }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-880|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n-   }\n+   }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n-   }\n+   }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-880|SpecialSeperatorForDevSet|-  private static void loadDefaultSettings(final String configFileName) {\n+  private static void loadDefaultSettings(final String configFileName) {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n out = new FileOutputStream(configFileName);\n IOUtils.copy(in, out);\n }\n catch (final Exception e) {\n log.warn("Unable to pull out the default.", e);\n throw new RuntimeException(e);\n }\n finally {\n IOUtils.closeQuietly(in);\n IOUtils.closeQuietly(out);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(String fromPath, String toPath) {\n try {\n File inputFile = new File(fromPath);\n String dirImg = (new File(toPath)).getParent();\n File tmp = new File(dirImg);\n if (!tmp.exists()) {\n tmp.mkdir();\n }\n File outputFile = new File(toPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-881|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n-   }\n+   }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n-   }\n+   }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-881|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n-   success = true;\n+   success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void transport(File file) throws TransportException {\n if (file.exists()) {\n if (file.isDirectory()) {\n File[] files = file.listFiles();\n for (int i = 0;\n i < files.length;\n i++) {\n transport(file);\n }\n }\n else if (file.isFile()) {\n-   try {\n+   try {\n FileChannel inChannel = new FileInputStream(file).getChannel();\n FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n log.error("File transfer failed", e);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-882|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n-   else {\n+   else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n-   case redora: destinationPath = where.redoraDir;\n+   case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-882|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n-   throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n+   throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n-   catch (Exception exception) {\n+   catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-883|SpecialSeperatorForDevSet|public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n IOUtils.copy(in, out);\n-   }\n+   }\n|SpecialSeperatorForDevSet|-  public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n+  public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n IOUtils.copy(in, out);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-883|SpecialSeperatorForDevSet|public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n ensureParsed();\n ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n-   parser.setContentPackage(cp);\n+   parser.setContentPackage(cp);\n if (on_disk != null) on_disk.delete();\n on_disk = createTemporaryFile();\n parser.serialize(on_disk);\n InputStream in = new FileInputStream(on_disk);\n IOUtils.copy(in, out);\n }\n|SpecialSeperatorForDevSet|public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n int index = file.getName().lastIndexOf(".");\n String name = file.getName().substring(0, index);\n DecimalFormat format = new DecimalFormat("####");\n format.setMinimumIntegerDigits(4);\n int count = 0;\n File main = new File(name);\n if (main.exists()) {\n throw new IOException(main.getAbsolutePath());\n }\n main.mkdir();\n File version = new File(main, "version");\n version.createNewFile();\n PrintWriter writer = new PrintWriter(version);\n writer.write(Videso3D.VERSION);\n writer.flush();\n writer.close();\n File xmlDir = new File(main.getAbsolutePath() + "/xml");\n xmlDir.mkdir();\n if (types != null && !types.isEmpty()) {\n File databases = new File(main.getAbsolutePath() + "/databases");\n databases.mkdir();\n for (String t : types) {\n Type type = DatabaseManager.stringToType(t);\n if (type != null) {\n if (onlyLinks) {\n if (databasesIncluded) {\n String currentName = DatabaseManager.getCurrentName(type);\n File baseCopy = new File(databases, currentName + "." + type);\n baseCopy.createNewFile();\n FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n List<String[]> clefs = new ArrayList<String[]>();\n Statement st = DatabaseManager.getCurrent(Type.Databases);\n ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'");\n while (rs.next()) {\n clefs.add(new String[] {\n rs.getString("name"), rs.getString("value") }\n);\n }\n st.close();\n if (!clefs.isEmpty()) {\n File clefsFile = new File(databases, currentName + "_clefs");\n clefsFile.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n oos.writeObject(clefs);\n oos.close();\n-   }\n+   }\n File filesDir = new File(currentName + "_files");\n if (filesDir.exists() && filesDir.isDirectory()) {\n File baseFiles = new File(databases, currentName + "_files");\n baseFiles.mkdirs();\n for (File f : filesDir.listFiles()) {\n File copy = new File(baseFiles, f.getName());\n copy.createNewFile();\n source = new FileInputStream(f).getChannel();\n destination = new FileOutputStream(copy).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n }\n File selectedObjects = new File(databases, type.toString());\n selectedObjects.createNewFile();\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n oos.writeObject(objects.get(type));\n oos.close();\n }\n else {\n for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n }\n File imagesDir = new File(main.getAbsolutePath() + "/images");\n imagesDir.mkdir();\n for (EditableSurfaceImage si : this.getImages()) {\n if (images.contains(si.getName())) {\n int idx = si.getName().lastIndexOf(".");\n String newName = si.getName();\n if (idx != -1) {\n newName = si.getName().substring(0, idx);\n }\n File img = new File(imagesDir, newName + ".gtif");\n ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n }\n }\n File trajectoDir = new File(main, "trajectory");\n trajectoDir.mkdirs();\n for (Layer l : wwd.getModel().getLayers()) {\n if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true);\n for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n geoWriter.writeTrack((GEOTrack) track);\n }\n geoWriter.close();\n }\n }\n if (types != null && types.contains("Autres objets affichés.")) {\n for (Layer l : wwd.getModel().getLayers()) {\n if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n if (r instanceof Restorable) {\n this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n }\n }\n }\n for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"));\n }\n this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"));\n FileManager.createZipFile(file, main);\n FileManager.deleteFile(main);\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-884|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n-   buffer.getHeader().append(headers);\n+   buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n-   }\n+   }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-884|SpecialSeperatorForDevSet|public void logging() throws Fault {\n final InterceptorWrapper wrap = new InterceptorWrapper(message);\n final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------");\n String encoding = (String) wrap.getEncoding();\n if (encoding != null) {\n buffer.getEncoding().append(encoding);\n }\n Object headers = wrap.getProtocolHeaders();\n if (headers != null) {\n buffer.getHeader().append(headers);\n }\n InputStream is = (InputStream) wrap.getContent(InputStream.class);\n-   if (is != null) {\n+   if (is != null) {\n CachedOutputStream bos = new CachedOutputStream();\n try {\n IOUtils.copy(is, bos);\n bos.flush();\n is.close();\n this.message.setContent(InputStream.class, bos.getInputStream());\n if (bos.getTempFile() != null) {\n logger.error("\nMessage (saved to tmp file):\n");\n logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n");\n }\n if (bos.size() > limit) {\n logger.error("(message truncated to " + limit + " bytes)\n");\n }\n bos.writeCacheTo(buffer.getPayload(), limit);\n bos.close();\n }\n catch (IOException e) {\n throw new Fault(e);\n }\n }\n logger.debug(buffer.getPayload().toString().replaceAll("\r\n|\n|\r", ""));\n }\n|SpecialSeperatorForDevSet|public static void copy(File sourceFile, File destinationFile) {\n try {\n if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n System.out.println("sourceFile & destinationFile is null");\n System.exit(-1);\n }\n if (sourceFile.isDirectory()) {\n File[] tmp = sourceFile.listFiles();\n File f;\n for (int i = 0;\n i < tmp.length;\n i++) {\n f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n f.getParentFile().mkdirs();\n copy(tmp[i], f);\n-   }\n+   }\n }\n else {\n System.out.println("\nCopy from: " + sourceFile + "\n\n to: " + destinationFile);\n FileChannel source = new FileInputStream(sourceFile).getChannel();\n FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n destination.transferFrom(source, 0, source.size());\n source.close();\n destination.close();\n }\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-885|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n-   }\n+   }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n-   System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n+   System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-885|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n-   }\n+   }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n from = new FileInputStream(source).getChannel();\n-   to = new FileOutputStream(dest).getChannel();\n+   to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n finally {\n if (from != null) {\n from.close();\n }\n if (to != null) {\n to.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-886|SpecialSeperatorForDevSet|public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {\n int last = destfile.lastIndexOf('/');\n if (last < 0) {\n DrxWriteError("CopyFile", "Destination filepath " + destfile + " doesn't contain /");\n throw new java.io.FileNotFoundException(destfile);\n }\n String parent = destfile.substring(0, last);\n if (parent.length() > 0) {\n File f = new File(parent);\n if (!f.isDirectory()) {\n if (!f.mkdirs()) {\n DrxWriteError("CopyFile", "Folder " + parent + " doesn't exist, cannot create");\n }\n }\n }\n-   FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\n+   FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destfile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n return destfile;\n }\n|SpecialSeperatorForDevSet|public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {\n int last = destfile.lastIndexOf('/');\n-   if (last < 0) {\n+   if (last < 0) {\n DrxWriteError("CopyFile", "Destination filepath " + destfile + " doesn't contain /");\n throw new java.io.FileNotFoundException(destfile);\n }\n String parent = destfile.substring(0, last);\n if (parent.length() > 0) {\n File f = new File(parent);\n if (!f.isDirectory()) {\n if (!f.mkdirs()) {\n DrxWriteError("CopyFile", "Folder " + parent + " doesn't exist, cannot create");\n }\n }\n }\n FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destfile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n return destfile;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-886|SpecialSeperatorForDevSet|public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {\n int last = destfile.lastIndexOf('/');\n if (last < 0) {\n DrxWriteError("CopyFile", "Destination filepath " + destfile + " doesn't contain /");\n throw new java.io.FileNotFoundException(destfile);\n }\n String parent = destfile.substring(0, last);\n if (parent.length() > 0) {\n File f = new File(parent);\n if (!f.isDirectory()) {\n if (!f.mkdirs()) {\n DrxWriteError("CopyFile", "Folder " + parent + " doesn't exist, cannot create");\n-   }\n+   }\n }\n }\n FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destfile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n return destfile;\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n-   }\n+   }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-887|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n-   byte[] out = stream.toByteArray();\n+   byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n-   if (all) assertEquals(cmp.length, out.length);\n+   if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-887|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n-   i++) assertEquals(cmp[i], out[i]);\n+   i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|private static void copyFiles(String strPath, String dstPath) throws Exception {\n File src = new File(strPath);\n File dest = new File(dstPath);\n if (src.isDirectory()) {\n dest.mkdirs();\n String list[] = src.list();\n for (int i = 0;\n i < list.length;\n i++) {\n String dest1 = dest.getAbsolutePath() + "\\" + list[i];\n String src1 = src.getAbsolutePath() + "\\" + list[i];\n copyFiles(src1, dest1);\n }\n }\n-   else {\n+   else {\n FileChannel sourceChannel = new FileInputStream(src).getChannel();\n FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n sourceChannel.close();\n targetChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-888|SpecialSeperatorForDevSet|public static void copyFile(File source, File destination) throws IOException {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(source).getChannel();\n-   out = new FileOutputStream(destination).getChannel();\n+   out = new FileOutputStream(destination).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File destination) throws IOException {\n FileChannel in = null;\n FileChannel out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(destination).getChannel();\n in.transferTo(0, in.size(), out);\n-   }\n+   }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-888|SpecialSeperatorForDevSet|public static void copyFile(File source, File destination) throws IOException {\n FileChannel in = null;\n FileChannel out = null;\n-   try {\n+   try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(destination).getChannel();\n in.transferTo(0, in.size(), out);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest) throws IOException {\n FileInputStream fis = new FileInputStream(src);\n FileOutputStream fos = new FileOutputStream(dest);\n-   java.nio.channels.FileChannel channelSrc = fis.getChannel();\n+   java.nio.channels.FileChannel channelSrc = fis.getChannel();\n java.nio.channels.FileChannel channelDest = fos.getChannel();\n channelSrc.transferTo(0, channelSrc.size(), channelDest);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-889|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n-   ++j) {\n+   ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-889|SpecialSeperatorForDevSet|private void getRandomGUID(boolean secure) {\n MessageDigest md5 = null;\n StringBuffer sbValueBeforeMD5 = new StringBuffer();\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n System.out.println("Error: " + e);\n }\n try {\n long time = System.currentTimeMillis();\n long rand = 0;\n if (secure) {\n rand = mySecureRand.nextLong();\n }\n else {\n rand = myRand.nextLong();\n }\n sbValueBeforeMD5.append(s_id);\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(time));\n sbValueBeforeMD5.append(":");\n sbValueBeforeMD5.append(Long.toString(rand));\n valueBeforeMD5 = sbValueBeforeMD5.toString();\n md5.update(valueBeforeMD5.getBytes());\n byte[] array = md5.digest();\n StringBuffer sb = new StringBuffer();\n for (int j = 0;\n j < array.length;\n ++j) {\n int b = array[j] & 0xFF;\n if (b < 0x10) sb.append('0');\n sb.append(Integer.toHexString(b));\n }\n-   valueAfterMD5 = sb.toString();\n+   valueAfterMD5 = sb.toString();\n }\n catch (Exception e) {\n System.out.println("Error:" + e);\n }\n }\n|SpecialSeperatorForDevSet|public static synchronized String getMD5_Base64(String input) {\n MessageDigest msgDigest = null;\n try {\n msgDigest = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException e) {\n+   catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("System doesn't support MD5 algorithm.");\n }\n try {\n msgDigest.update(input.getBytes("UTF-8"));\n }\n catch (java.io.UnsupportedEncodingException ex) {\n throw new IllegalStateException("System doesn't support your EncodingException.");\n }\n byte[] rawData = msgDigest.digest();\n byte[] encoded = Base64.encode(rawData);\n String retValue = new String(encoded);\n return retValue;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-890|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n-   source.transferTo(0L, srclen, target);\n+   source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n-   }\n+   }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-890|SpecialSeperatorForDevSet|public static void main(String[] argv) {\n if (1 < argv.length) {\n File[] sources = Source(argv[0]);\n if (null != sources) {\n-   for (File src : sources) {\n+   for (File src : sources) {\n File[] targets = Target(src, argv);\n if (null != targets) {\n final long srclen = src.length();\n try {\n FileChannel source = new FileInputStream(src).getChannel();\n try {\n for (File tgt : targets) {\n FileChannel target = new FileOutputStream(tgt).getChannel();\n try {\n source.transferTo(0L, srclen, target);\n }\n finally {\n target.close();\n }\n System.out.printf("Updated %s\n", tgt.getPath());\n File[] deletes = Delete(src, tgt);\n if (null != deletes) {\n for (File del : deletes) {\n if (SVN) {\n if (SvnDelete(del)) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n else if (del.delete()) System.out.printf("Deleted %s\n", del.getPath());\n else System.out.printf("Failed to delete %s\n", del.getPath());\n }\n }\n if (SVN) SvnAdd(tgt);\n }\n }\n finally {\n source.close();\n }\n }\n catch (Exception exc) {\n exc.printStackTrace();\n System.exit(1);\n }\n }\n }\n System.exit(0);\n }\n else {\n System.err.printf("Source file(s) not found in '%s'\n", argv[0]);\n System.exit(1);\n }\n }\n else {\n usage();\n System.exit(1);\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n File destFile = new File(dest);\n InputStream in = new FileInputStream(new File(src));\n OutputStream out = new FileOutputStream(destFile);\n-   byte buf[] = new byte[1024];\n+   byte buf[] = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-891|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n-   SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n+   SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n-   throw new IOException("bad response");\n+   throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-891|SpecialSeperatorForDevSet|private boolean authenticate(Module module) throws Exception {\n SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");\n rand.setSeed(System.currentTimeMillis());\n byte[] challenge = new byte[16];\n rand.nextBytes(challenge);\n String b64 = Util.base64(challenge);\n Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n");\n String reply = Util.readLine(in);\n if (reply.indexOf(" ") < 0) {\n Util.writeASCII(out, AT_ERROR + ": bad response\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("bad response");\n }\n String user = reply.substring(0, reply.indexOf(" "));\n String response = reply.substring(reply.indexOf(" ") + 1);\n if (!module.users.contains(user)) {\n Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n throw new IOException("user " + user + " not allowed");\n }\n LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n MessageDigest md4 = MessageDigest.getInstance("BrokenMD4");\n String line;\n while ((line = secrets.readLine()) != null) {\n if (line.startsWith(user + ":")) {\n String passwd = line.substring(line.lastIndexOf(":") + 1);\n md4.update(new byte[4]);\n md4.update(passwd.getBytes("US-ASCII"));\n md4.update(b64.getBytes("US-ASCII"));\n String hash = Util.base64(md4.digest());\n if (hash.equals(response)) {\n secrets.close();\n return true;\n }\n else {\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n-   socket.close();\n+   socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n }\n }\n Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n");\n if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + "\n");\n socket.close();\n secrets.close();\n logger.error("auth failed on module " + module.name);\n return false;\n }\n|SpecialSeperatorForDevSet|@Primitive public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {\n try {\n final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);\n md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());\n return Value.createFromBlock(Block.createString(md5.digest()));\n }\n-   catch (final NoSuchAlgorithmException nsae) {\n+   catch (final NoSuchAlgorithmException nsae) {\n Fail.invalidArgument("Digest.substring");\n return Value.UNIT;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-892|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n-   DbService dbServiceMock = EasyMock.createMock(DbService.class);\n+   DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-892|SpecialSeperatorForDevSet|@Test public void testIdentification() {\n try {\n String username = "muchu";\n String password = "123";\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n LogService logServiceMock = EasyMock.createMock(LogService.class);\n DbService dbServiceMock = EasyMock.createMock(DbService.class);\n userServ.setDbServ(dbServiceMock);\n userServ.setLogger(logServiceMock);\n-   logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n+   logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");\n IFeelerUser user = new FeelerUserImpl();\n user.setUsername(username);\n user.setPassword(new String(md5.digest()));\n EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n EasyMock.replay(logServiceMock, dbServiceMock);\n Assert.assertTrue(userServ.identification(username, password));\n EasyMock.verify(logServiceMock, dbServiceMock);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public String encrypt(String password) throws Exception {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(password.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n-   String hashword = hash.toString(16);\n+   String hashword = hash.toString(16);\n return hashword;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-893|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-893|SpecialSeperatorForDevSet|public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("SHA-1");\n byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n sha1hash = md.digest();\n return convertToHex(sha1hash);\n-   }\n+   }\n|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n-   throw new IllegalStateException("Error encoding: " + e);\n+   throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-894|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n-   URL url = getResource(source);\n+   URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-894|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n-   OutputStream output = new FileOutputStream(destinationFile());\n+   OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|private static void copyFile(String src, String target) throws IOException {\n FileChannel ic = new FileInputStream(src).getChannel();\n FileChannel oc = new FileOutputStream(target).getChannel();\n ic.transferTo(0, ic.size(), oc);\n-   ic.close();\n+   ic.close();\n oc.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-895|SpecialSeperatorForDevSet|public static String mysqlPasswordHash(String string) {\n try {\n MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\n try {\n digest.update(string.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new RuntimeException(e);\n }\n byte[] encodedPassword = digest.digest();\n digest.update(encodedPassword);\n encodedPassword = digest.digest();\n String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\n while (hash.length() < 40) {\n hash = "0" + hash;\n }\n return "*" + hash;\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException(e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String mysqlPasswordHash(String string) {\n try {\n MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\n try {\n digest.update(string.getBytes("UTF-8"));\n-   }\n+   }\n catch (UnsupportedEncodingException e) {\n throw new RuntimeException(e);\n }\n byte[] encodedPassword = digest.digest();\n digest.update(encodedPassword);\n encodedPassword = digest.digest();\n String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\n while (hash.length() < 40) {\n hash = "0" + hash;\n }\n return "*" + hash;\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-895|SpecialSeperatorForDevSet|public static String mysqlPasswordHash(String string) {\n-   try {\n+   try {\n MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\n try {\n digest.update(string.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n throw new RuntimeException(e);\n }\n byte[] encodedPassword = digest.digest();\n digest.update(encodedPassword);\n encodedPassword = digest.digest();\n String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\n while (hash.length() < 40) {\n hash = "0" + hash;\n }\n return "*" + hash;\n }\n catch (NoSuchAlgorithmException e) {\n throw new RuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|public static String hash(String value) {\n try {\n MessageDigest md = MessageDigest.getInstance("MD5");\n byte[] md5hash = new byte[32];\n md.update(value.getBytes("iso-8859-1"), 0, value.length());\n md5hash = md.digest();\n return Hex.encodeHexString(md5hash);\n }\n catch (Exception e) {\n e.printStackTrace();\n return null;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-896|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n-   writer.close();\n+   writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n-   if (args.length != 2) {\n+   if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-896|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public static void main(String[] args) throws Exception {\n if (args.length != 2) {\n System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>");\n System.exit(1);\n }\n Helper helper = Helper.getHelper(args[1]);\n Dataset dataset = helper.read(args[1]);\n ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n Enumeration entries = zip.entries();\n Unit<?>[] performance = new Unit<?>[LIMIT];\n-   int index = 0;\n+   int index = 0;\n while (entries.hasMoreElements()) {\n ZipEntry entry = (ZipEntry) entries.nextElement();\n if (entry.getName().endsWith(".out")) {\n File temp = File.createTempFile("PARSER", ".zip");\n temp.deleteOnExit();\n PrintStream writer = new PrintStream(new FileOutputStream(temp));\n BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n byte[] buffer = new byte[4096];\n int read = -1;\n while ((read = reader.read(buffer)) != -1) {\n writer.write(buffer, 0, read);\n }\n writer.close();\n reader.close();\n BufferedReader outfile = new BufferedReader(new FileReader(temp));\n String line = null;\n RuleParser parser = new RuleParser();\n ProbabilisticRuleList list = new ProbabilisticRuleList();\n while ((line = outfile.readLine()) != null) {\n if (line.startsWith("IF")) {\n ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n }\n }\n outfile.close();\n PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n performance[index] = measure.evaluate(dataset, list);\n System.out.println(entry.getName() + ": " + performance[index]);\n index++;\n if (index >= LIMIT) {\n break;\n }\n }\n }\n System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n }\n|SpecialSeperatorForDevSet|private static void setup() throws Exception {\n String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar");\n if (!jarFile.exists()) jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar");\n File f = File.createTempFile("tempabca", "bdfafad");\n f.delete();\n f.mkdir();\n String parent = f.getAbsolutePath() + "/";\n byte[] buf = new byte[1024];\n ZipInputStream zipinputstream = null;\n ZipEntry zipentry;\n zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n zipentry = zipinputstream.getNextEntry();\n while (zipentry != null) {\n String entryName = zipentry.getName();\n if (entryName.startsWith("native")) {\n int n;\n FileOutputStream fileoutputstream;\n File newFile = new File(parent + entryName);\n if (zipentry.isDirectory()) {\n newFile.mkdirs();\n zipentry = zipinputstream.getNextEntry();\n continue;\n }\n fileoutputstream = new FileOutputStream(newFile);\n while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n fileoutputstream.close();\n zipinputstream.closeEntry();\n }\n zipentry = zipinputstream.getNextEntry();\n }\n zipinputstream.close();\n-   String arch = "";\n+   String arch = "";\n boolean x64 = false;\n for (String key : keys) {\n String property = System.getProperty(key);\n if (property != null) {\n x64 = (property.indexOf("64") >= 0);\n }\n }\n if (JPTrayIcon.isUnix()) {\n if (x64) arch = "linux-amd64";\n else arch = "linux-x86";\n }\n if (JPTrayIcon.isWindows()) {\n System.out.println("Arch: " + System.getProperty("sun.arch.data.model"));\n if (x64 && !System.getProperty("sun.arch.data.model").equals("32")) arch = "win64-amd64";\n else arch = "win32-x86";\n }\n if (JPTrayIcon.isMac()) arch = "macosx-universal";\n System.out.println("Using native/" + arch + "/");\n addLibraryPath(parent + "native/" + arch + "/");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-897|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n-   }\n+   }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n-   while ((read = in.read(buffer)) >= 0) {\n+   while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-897|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n-   boolean success = false;\n+   boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static void fileCopy(String from_name, String to_name) throws IOException {\n File fromFile = new File(from_name);\n File toFile = new File(to_name);\n if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);\n if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);\n-   if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n+   if (!fromFile.isFile()) abort("can't copy directory: " + from_name);\n if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);\n if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n if (toFile.exists()) {\n if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);\n }\n else {\n String parent = toFile.getParent();\n if (parent == null) abort("destination directory doesn't exist: " + parent);\n File dir = new File(parent);\n if (!dir.exists()) abort("destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(fromFile);\n to = new FileOutputStream(toFile);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n }\n finally {\n if (from != null) try {\n from.close();\n }\n catch (IOException e) {\n ;\n }\n if (to != null) try {\n to.close();\n }\n catch (IOException e) {\n ;\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-898|SpecialSeperatorForDevSet|@Override public void trainClassifier(File dir, String... args) throws Exception {\n String[] command = new String[args.length + 3];\n command[0] = this.getCommand();\n System.arraycopy(args, 0, command, 1, args.length);\n command[command.length - 2] = new File(dir, "training-data.libsvm").getPath();\n command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n Process process = Runtime.getRuntime().exec(command);\n IOUtils.copy(process.getInputStream(), System.out);\n IOUtils.copy(process.getErrorStream(), System.err);\n-   process.waitFor();\n+   process.waitFor();\n }\n|SpecialSeperatorForDevSet|@Override public void trainClassifier(File dir, String... args) throws Exception {\n String[] command = new String[args.length + 3];\n command[0] = this.getCommand();\n System.arraycopy(args, 0, command, 1, args.length);\n command[command.length - 2] = new File(dir, "training-data.libsvm").getPath();\n-   command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n+   command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n Process process = Runtime.getRuntime().exec(command);\n IOUtils.copy(process.getInputStream(), System.out);\n IOUtils.copy(process.getErrorStream(), System.err);\n process.waitFor();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-898|SpecialSeperatorForDevSet|@Override public void trainClassifier(File dir, String... args) throws Exception {\n String[] command = new String[args.length + 3];\n command[0] = this.getCommand();\n System.arraycopy(args, 0, command, 1, args.length);\n-   command[command.length - 2] = new File(dir, "training-data.libsvm").getPath();\n+   command[command.length - 2] = new File(dir, "training-data.libsvm").getPath();\n command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n Process process = Runtime.getRuntime().exec(command);\n IOUtils.copy(process.getInputStream(), System.out);\n IOUtils.copy(process.getErrorStream(), System.err);\n process.waitFor();\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n-   out.flush();\n+   out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-899|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n String inFileName = args[0];\n String outFileName = args[1];\n long position = 0L;\n try {\n position = Long.parseLong(args[2]);\n }\n catch (NumberFormatException nfex1) {\n try {\n position = Long.parseLong(args[2], 16);\n }\n catch (NumberFormatException nfex2) {\n System.err.println("Wrong offset");\n System.exit(0);\n }\n-   }\n+   }\n if (position < 1L) {\n System.err.println("Wrong offset. Must be more than 0");\n System.exit(0);\n }\n System.out.println("Copying input: " + inFileName);\n System.out.println(" output: " + outFileName);\n System.out.println(" from: " + position);\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n bis.skip(position);\n for (byte[] b = new byte[1];\n bis.read(b) > 0;\n bos.write(b)) ;\n bis.close();\n bos.close();\n }\n|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n String inFileName = args[0];\n String outFileName = args[1];\n long position = 0L;\n try {\n position = Long.parseLong(args[2]);\n }\n catch (NumberFormatException nfex1) {\n try {\n position = Long.parseLong(args[2], 16);\n }\n catch (NumberFormatException nfex2) {\n System.err.println("Wrong offset");\n System.exit(0);\n }\n }\n if (position < 1L) {\n System.err.println("Wrong offset. Must be more than 0");\n System.exit(0);\n }\n System.out.println("Copying input: " + inFileName);\n-   System.out.println(" output: " + outFileName);\n+   System.out.println(" output: " + outFileName);\n System.out.println(" from: " + position);\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n bis.skip(position);\n for (byte[] b = new byte[1];\n bis.read(b) > 0;\n bos.write(b)) ;\n bis.close();\n bos.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-899|SpecialSeperatorForDevSet|public static void main(String args[]) throws IOException {\n String inFileName = args[0];\n String outFileName = args[1];\n long position = 0L;\n try {\n position = Long.parseLong(args[2]);\n }\n catch (NumberFormatException nfex1) {\n try {\n position = Long.parseLong(args[2], 16);\n }\n catch (NumberFormatException nfex2) {\n System.err.println("Wrong offset");\n System.exit(0);\n }\n }\n if (position < 1L) {\n System.err.println("Wrong offset. Must be more than 0");\n-   System.exit(0);\n+   System.exit(0);\n }\n System.out.println("Copying input: " + inFileName);\n System.out.println(" output: " + outFileName);\n System.out.println(" from: " + position);\n BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n bis.skip(position);\n for (byte[] b = new byte[1];\n bis.read(b) > 0;\n bos.write(b)) ;\n bis.close();\n bos.close();\n }\n|SpecialSeperatorForDevSet|public void resolvePlugins() {\n try {\n File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\n File pluginsFile = new File(cacheDir, "plugins.xml");\n if (!pluginsFile.exists()) {\n URL pluginURL = new URL("http://xpontus.sourceforge.net/snapshot/plugins.xml");\n InputStream is = pluginURL.openStream();\n OutputStream os = FileUtils.openOutputStream(pluginsFile);\n IOUtils.copy(is, os);\n IOUtils.closeQuietly(os);\n-   IOUtils.closeQuietly(is);\n+   IOUtils.closeQuietly(is);\n }\n resolvePlugins(pluginsFile.getAbsolutePath());\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-900|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n+   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n-   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n+   assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-900|SpecialSeperatorForDevSet|@Test public void testCopy_inputStreamToOutputStream() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n+   ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n int count = IOUtils.copy(in, out);\n assertTrue("Not all bytes were read", in.available() == 0);\n assertEquals("Sizes differ", inData.length, baout.size());\n assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()));\n }\n|SpecialSeperatorForDevSet|public int run(String[] args) throws Exception {\n if (args.length < 2) {\n System.err.println("Download dir local");\n return 1;\n }\n OutputStream out = new FileOutputStream(args[1]);\n Path srcDir = new Path(args[0]);\n Configuration conf = new Configuration();\n FileSystem srcFS = FileSystem.get(conf);\n if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n System.err.println(args[0] + " is not a directory.");\n return 1;\n }\n try {\n FileStatus contents[] = srcFS.listStatus(srcDir);\n for (int i = 0;\n i < contents.length;\n i++) {\n if (contents[i].isFile()) {\n System.err.println(contents[i].getPath());\n InputStream in = srcFS.open(contents[i].getPath());\n try {\n IOUtils.copyBytes(in, out, conf, false);\n }\n finally {\n in.close();\n }\n }\n }\n }\n-   finally {\n+   finally {\n out.close();\n }\n return 0;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-901|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n-   entry.delete();\n+   entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n-   catch (PersistentModelException e) {\n+   catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-901|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n-   pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n+   pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|private static long copy(InputStream source, OutputStream sink) {\n try {\n return IOUtils.copyLarge(source, sink);\n }\n catch (IOException e) {\n logger.error(e.toString(), e);\n throw new FaultException("System error copying stream", e);\n-   }\n+   }\n finally {\n IOUtils.closeQuietly(source);\n IOUtils.closeQuietly(sink);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-902|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n-   }\n+   }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n-   else {\n+   else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-902|SpecialSeperatorForDevSet|private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n Category log = ThreadCategory.getInstance(OutageWriter.class);\n if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);\n return;\n }\n Connection dbConn = null;\n try {\n dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n try {\n dbConn.setAutoCommit(false);\n }\n catch (SQLException sqle) {\n log.error("Unable to change database AutoCommit to FALSE", sqle);\n return;\n }\n PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n outageUpdater.setLong(1, eventID);\n outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n outageUpdater.setLong(3, nodeID);\n outageUpdater.setString(4, ipAddr);\n outageUpdater.setLong(5, serviceID);\n outageUpdater.executeUpdate();\n outageUpdater.close();\n try {\n dbConn.commit();\n if (log.isDebugEnabled()) log.debug("nodeRegainedService: closed outage for nodeid/ip/service " + nodeID + "/" + ipAddr + "/" + serviceID + " in DB");\n }\n catch (SQLException se) {\n log.warn("Rolling back transaction, nodeRegainedService could not be recorded for nodeId/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);\n-   try {\n+   try {\n dbConn.rollback();\n }\n catch (SQLException sqle) {\n log.warn("SQL exception during rollback, reason", sqle);\n }\n }\n }\n else {\n log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " does not have open record.");\n }\n }\n catch (SQLException se) {\n log.warn("SQL exception while handling \'nodeRegainedService\'", se);\n }\n finally {\n try {\n if (dbConn != null) dbConn.close();\n }\n catch (SQLException e) {\n log.warn("Exception closing JDBC connection", e);\n }\n }\n }\n|SpecialSeperatorForDevSet|@Override public void alterar(Disciplina t) throws Exception {\n PreparedStatement stmt = null;\n String sql = "UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?";\n try {\n stmt = conexao.prepareStatement(sql);\n stmt.setString(1, t.getNomeDisciplina());\n stmt.setString(2, t.getCodDisciplina());\n stmt.setInt(3, t.getIdDisciplina());\n stmt.executeUpdate();\n conexao.commit();\n int id_disciplina = t.getIdDisciplina();\n excluirTopico(t.getIdDisciplina());\n for (Topico item : t.getTopicos()) {\n criarTopico(item, id_disciplina);\n }\n }\n catch (SQLException e) {\n conexao.rollback();\n throw e;\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-903|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n-   i++) {\n+   i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n-   while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n+   while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-903|SpecialSeperatorForDevSet|private static void main(String[] args) {\n try {\n File f = new File("test.txt");\n if (f.exists()) {\n throw new IOException(f + " already exists. I don't want to overwrite it.");\n }\n StraightStreamReader in;\n char[] cbuf = new char[0x1000];\n int read;\n int totRead;\n FileOutputStream out = new FileOutputStream(f);\n for (int i = 0x00;\n i < 0x100;\n i++) {\n out.write(i);\n }\n out.close();\n in = new StraightStreamReader(new FileInputStream(f));\n for (int i = 0x00;\n i < 0x100;\n i++) {\n read = in.read();\n if (read != i) {\n System.err.println("Error: " + i + " read as " + read);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = in.read(cbuf);\n if (totRead != 0x100) {\n System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n }\n in.close();\n in = new StraightStreamReader(new FileInputStream(f));\n totRead = 0;\n while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n totRead += read;\n }\n if (totRead != 0x100) {\n System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));\n }\n for (int i = 0x00;\n i < totRead;\n i++) {\n if (cbuf[i + 0x123] != i) {\n System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);\n }\n-   }\n+   }\n in.close();\n f.delete();\n }\n catch (IOException x) {\n System.err.println(x.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-904|SpecialSeperatorForDevSet|@Override public void run() {\n-   try {\n+   try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n-   in.close();\n+   in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-904|SpecialSeperatorForDevSet|@Override public void run() {\n try {\n BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n String ligneEnCours;\n int i = 0;\n informations = "";\n while ((ligneEnCours = in.readLine()) != null) {\n switch(i) {\n-   case 0: version = ligneEnCours;\n+   case 0: version = ligneEnCours;\n break;\n case 1: url = ligneEnCours;\n break;\n default: informations += ligneEnCours + '\n';\n break;\n }\n i++;\n }\n in.close();\n erreur = false;\n }\n catch (IOException e) {\n erreur = true;\n texteErreur = e.getMessage();\n if (texteErreur.equals("Network is unreachable")) {\n texteErreur = "Pas de réseau";\n numErreur = 1;\n }\n if (e instanceof FileNotFoundException) {\n texteErreur = "Problème paramétrage";\n numErreur = 2;\n }\n e.printStackTrace();\n }\n finally {\n for (ActionListener al : listeners) {\n al.actionPerformed(null);\n }\n }\n }\n|SpecialSeperatorForDevSet|-  @Override public void handledRun() throws Throwable {\n+  @Override public void handledRun() throws Throwable {\n try {\n URL url = new URL(ONLINE_CLIENT_DATA + "gamedata.xml");\n BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n int lastversion = 0;\n String readHeader1 = br.readLine();\n String readHeader2 = br.readLine();\n String[] parts = readHeader2.split(" ");\n lastversion = new Integer(parts[1]);\n GameDatabase.loadVersion();\n if (GameDatabase.version < lastversion) {\n Logger.log(LogTypes.LOG, "Downloading new gamedata");\n BufferedOutputStream bo = null;\n File destfile = new File(GameDatabase.dataFilePath);\n if (!destfile.createNewFile()) {\n destfile.delete();\n destfile.createNewFile();\n }\n bo = new BufferedOutputStream(new FileOutputStream(destfile));\n bo.write((readHeader1 + "\n").getBytes());\n bo.write((readHeader2 + "\n").getBytes());\n int readedbyte;\n while ((readedbyte = br.read()) != -1) {\n bo.write(readedbyte);\n }\n bo.flush();\n try {\n br.close();\n bo.close();\n }\n catch (Exception ex) {\n Logger.log(ex);\n }\n }\n }\n catch (java.net.UnknownHostException unknownHost) {\n Logger.log("Sourceforge is down, cannot update gamedata");\n }\n catch (Exception e) {\n JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), "The gamedata is outdated, but Coopnet couldn't update it!", "Gamedata outdated", JOptionPane.INFORMATION_MESSAGE);\n throw e;\n }\n finally {\n GameDatabase.loadVersion();\n GameDatabase.load("", GameDatabase.dataFilePath);\n GameDatabase.detectGames();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-905|SpecialSeperatorForDevSet|public void loadSourceCode() {\n-   int length = MAX_SOURCE_LENGTH;\n+   int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n File file = new File(filename);\n length = (int) file.length();\n }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n-   URL url;\n+   URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-905|SpecialSeperatorForDevSet|public void loadSourceCode() {\n int length = MAX_SOURCE_LENGTH;\n try {\n-   File file = new File(filename);\n+   File file = new File(filename);\n length = (int) file.length();\n }\n catch (SecurityException ex) {\n }\n char[] buff = new char[length];\n InputStream is;\n InputStreamReader isr;\n CodeViewer cv = new CodeViewer();\n URL url;\n try {\n url = getClass().getResource(filename);\n is = url.openStream();\n isr = new InputStreamReader(is);\n BufferedReader reader = new BufferedReader(isr);\n sourceCode = new String("<html><pre>");\n String line = reader.readLine();\n while (line != null) {\n sourceCode += cv.syntaxHighlight(line) + " \n ";\n line = reader.readLine();\n }\n sourceCode += "</pre></html>";\n }\n catch (Exception ex) {\n sourceCode = getString("SourceCode.error");\n }\n }\n|SpecialSeperatorForDevSet|private JSONObject executeHttpGet(String uri) throws Exception {\n HttpGet req = new HttpGet(uri);\n-   HttpClient client = new DefaultHttpClient();\n+   HttpClient client = new DefaultHttpClient();\n HttpResponse resLogin = client.execute(req);\n BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));\n StringBuilder sb = new StringBuilder();\n String s = null;\n while ((s = r.readLine()) != null) {\n sb.append(s);\n }\n return new JSONObject(sb.toString());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-906|SpecialSeperatorForDevSet|public void setImg() {\n JFileChooser jFileChooser1 = new JFileChooser();\n String separator = "";\n if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n setPath(jFileChooser1.getSelectedFile().getPath());\n separator = jFileChooser1.getSelectedFile().separator;\n File dirImg = new File("." + separator + "images");\n if (!dirImg.exists()) {\n dirImg.mkdir();\n }\n int index = getPath().lastIndexOf(separator);\n-   String imgName = getPath().substring(index);\n+   String imgName = getPath().substring(index);\n String newPath = dirImg + imgName;\n try {\n File inputFile = new File(getPath());\n File outputFile = new File(newPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "Set image", JOptionPane.ERROR_MESSAGE);\n }\n setPath(newPath);\n bckImg = new ImageIcon(getPath());\n }\n }\n|SpecialSeperatorForDevSet|public void setImg() {\n JFileChooser jFileChooser1 = new JFileChooser();\n String separator = "";\n if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n setPath(jFileChooser1.getSelectedFile().getPath());\n separator = jFileChooser1.getSelectedFile().separator;\n File dirImg = new File("." + separator + "images");\n if (!dirImg.exists()) {\n-   dirImg.mkdir();\n+   dirImg.mkdir();\n }\n int index = getPath().lastIndexOf(separator);\n String imgName = getPath().substring(index);\n String newPath = dirImg + imgName;\n try {\n File inputFile = new File(getPath());\n File outputFile = new File(newPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "Set image", JOptionPane.ERROR_MESSAGE);\n }\n setPath(newPath);\n bckImg = new ImageIcon(getPath());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-906|SpecialSeperatorForDevSet|public void setImg() {\n JFileChooser jFileChooser1 = new JFileChooser();\n String separator = "";\n if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n-   setPath(jFileChooser1.getSelectedFile().getPath());\n+   setPath(jFileChooser1.getSelectedFile().getPath());\n separator = jFileChooser1.getSelectedFile().separator;\n File dirImg = new File("." + separator + "images");\n if (!dirImg.exists()) {\n dirImg.mkdir();\n }\n int index = getPath().lastIndexOf(separator);\n String imgName = getPath().substring(index);\n String newPath = dirImg + imgName;\n try {\n File inputFile = new File(getPath());\n File outputFile = new File(newPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "Set image", JOptionPane.ERROR_MESSAGE);\n }\n setPath(newPath);\n bckImg = new ImageIcon(getPath());\n }\n }\n|SpecialSeperatorForDevSet|public void copyToDir(File dir) {\n if (!dir.exists()) {\n dir.mkdirs();\n }\n else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n return;\n }\n File file = getEstimatedFileName(dir);\n try {\n file.createNewFile();\n FileOutputStream fileOutputStream = new FileOutputStream(file);\n FileInputStream fileInputStream = new FileInputStream(this.file);\n int read = 0;\n byte[] buffer = new byte[1024];\n while (read != -1) {\n fileOutputStream.write(buffer, 0, read);\n read = fileInputStream.read(buffer);\n }\n fileInputStream.close();\n fileOutputStream.close();\n this.file = file;\n }\n catch (IOException e) {\n Logger.log(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-907|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n-   i < d.length;\n+   i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n-   StringBuilder text = new StringBuilder();\n+   StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-907|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n-   hash.append(Integer.toHexString(0xFF & d[i]));\n+   hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public String encrypt(String password) throws Exception {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n-   md5.update(password.getBytes());\n+   md5.update(password.getBytes());\n BigInteger hash = new BigInteger(1, md5.digest());\n String hashword = hash.toString(16);\n return hashword;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-908|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n-   }\n+   }\n }\n }\n|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n-   log.info(" Copying " + f.getName());\n+   log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-908|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n-   final String[] exeFiles = new String[] {\n+   final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n {\n Assert.notNull(configuration);\n Assert.notNull(monitor);\n }\n final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "");\n final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n final IFile pom = prj.getFile("pom.xml");\n if (!pom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 root pom.xml available");\n }\n ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n handleRootProfile(doc);\n }\n }\n);\n final IFile bpom = prj.getFile("business/pom.xml");\n if (!bpom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 business pom.xml available");\n }\n ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n try {\n handleBusinessProfile(doc, configuration, prj);\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n);\n final ByteArrayOutputStream output = new ByteArrayOutputStream();\n try {\n final Properties props = new Properties();\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n props.setProperty("hibernate.dialect", support.getDialectClass(dialectName));\n props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver"));\n props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>"));\n props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, ""));\n props.store(output, "hibernate properties for code generation using NexOpen Tools 1.0.0");\n final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties");\n if (!props_file.exists()) {\n props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n }\n else {\n props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n }\n-   }\n+   }\n catch (final IOException e) {\n Logger.getLog().error("I/O exception ", e);\n throw new RuntimeException(e);\n }\n finally {\n try {\n output.flush();\n output.close();\n }\n catch (IOException e) {\n }\n }\n if (NexOpenProjectUtils.is04xProject(prj)) {\n final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml");\n if (!appContext.exists()) {\n throw new IllegalStateException("It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project");\n }\n ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n final Element root = doc.getDocumentElement();\n final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean");\n for (final Element bean : beans) {\n final String id = bean.getAttribute("id");\n if ("valueListAdapterResolver".equals(id)) {\n try {\n final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "");\n final String className = new StringBuilder(pkgName).append(".vlh.support.AnnotationValueListAdapterResolver").toString();\n bean.setAttribute("class", className);\n break;\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n }\n }\n);\n }\n {\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n if (support.isReverseEngineeringFileNeeded(dialectName)) {\n try {\n final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName));\n if (!revengFile.exists()) {\n final Bundle bundle = HibernateActivator.getDefault().getBundle();\n final Path src = new Path("resources/" + support.getReversEngineeringFile(dialectName));\n final InputStream in = FileLocator.openStream(bundle, src, false);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(in, baos);\n String str = baos.toString();\n str = str.replace("${\nschema}\n", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n }\n }\n catch (final IOException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n final IResource resource = (IResource) prj.getAdapter(IResource.class);\n final QualifiedName qn = new QualifiedName("org.nexopenframework.ide.eclipse.ui", "default.profile");\n final String profile = resource.getPersistentProperty(qn);\n resource.setPersistentProperty(qn, "reverse-engineering");\n try {\n final InstallProjectAction action = new InstallProjectAction();\n action.scheduleJob(prj, monitor);\n prj.refreshLocal(2, monitor);\n }\n finally {\n prj.setPersistentProperty(qn, profile);\n }\n }\n else {\n Logger.getLog().info("Not a NexOpen project :: " + prj);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-909|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n-   in.close();\n+   in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-909|SpecialSeperatorForDevSet|private void copy(File inputFile, File outputFile) throws Exception {\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n-   out.close();\n+   out.close();\n }\n|SpecialSeperatorForDevSet|-  private static void copy(String sourceName, String destName) throws IOException {\n+  private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-910|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n-   fichierElectronique.setSoumetteur(utilisateurCourant);\n+   fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n-   if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n+   if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-910|SpecialSeperatorForDevSet|public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n if (contenuFichier != null) {\n SupportDocument support = fichierElectronique.getSupport();\n support.setFichierElectronique(fichierElectronique);\n FicheDocument ficheDocument = support.getFicheDocument();\n String nomFichier = contenuFichier.getNomFichier();\n String extension = FilenameUtils.getExtension(nomFichier);\n if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n }\n }\n if (fichierElectronique.getId() == null) {\n if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n if (idIgid != null) {\n throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n }\n }\n-   }\n+   }\n InputStream inputStream = contenuFichier.getInputStream();\n OutputStream outputStream = fichierElectronique.getOutputStream();\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n String typeMime = contenuFichier.getContentType();\n long tailleFichier = contenuFichier.getTailleFichier();\n Date dateDerniereModification = new Date();\n fichierElectronique.setNom(nomFichier);\n fichierElectronique.setTypeMime(extension);\n creerFormatSiNecessaire(typeMime, extension);\n fichierElectronique.setTaille(tailleFichier);\n fichierElectronique.setDateDerniereModification(dateDerniereModification);\n fichierElectronique.setSoumetteur(utilisateurCourant);\n if (extension.endsWith("msg")) {\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n }\n else if (extension.endsWith("eml")) {\n Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n }\n else {\n FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n }\n }\n }\n|SpecialSeperatorForDevSet|-  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n+  private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-911|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n-   for (String value : header.getValue()) {\n+   for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n-   IOUtils.copy(inputStream, outputStream);\n+   IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-911|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");\n logger.debug("rewrittenQueryString: " + rewrittenQueryString);\n URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n-   HttpURLConnection.setFollowRedirects(false);\n+   HttpURLConnection.setFollowRedirects(false);\n httpURLConnection.connect();\n response.setStatus(httpURLConnection.getResponseCode());\n logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");\n logger.debug("[headers]");\n for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n if (header.getKey() != null) {\n for (String value : header.getValue()) {\n if (value != null) {\n logger.debug(header.getKey() + ": " + value);\n if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {\n response.addHeader(header.getKey(), value);\n }\n }\n }\n }\n }\n logger.debug("[/headers]");\n InputStream inputStream = httpURLConnection.getInputStream();\n OutputStream outputStream = response.getOutputStream();\n IOUtils.copy(inputStream, outputStream);\n }\n|SpecialSeperatorForDevSet|public void run(String[] args) throws Throwable {\n FileInputStream input = new FileInputStream(args[0]);\n FileOutputStream output = new FileOutputStream(args[0] + ".out");\n Reader reader = $(Reader.class, $declass(input));\n-   Writer writer = $(Writer.class, $declass(output));\n+   Writer writer = $(Writer.class, $declass(output));\n Pump pump;\n if (args.length > 1 && "diag".equals(args[1])) {\n pump = $(new Reader() {\n int counter;\n @ToContext(mode = InvocationMode.sideEffect) public int read(byte[] buffer, int off, int len) throws Exception {\n Integer rd = (Integer) $next();\n if (rd > 0) {\n counter += rd;\n }\n return 0;\n }\n @ToContext(mode = InvocationMode.sideEffect) public void close() throws Exception {\n System.out.println("Read from input " + counter + " bytes.");\n }\n }\n, reader, writer, new Writer() {\n int counter;\n @ToContext(mode = InvocationMode.sideEffect) public void write(byte[] buffer, int off, int len) throws Exception {\n counter += len;\n }\n @ToContext(mode = InvocationMode.sideEffect) public void close() throws Exception {\n System.out.println("Written to output " + counter + " bytes.");\n }\n }\n);\n }\n else {\n pump = $(reader, writer);\n }\n pump.pump();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-912|SpecialSeperatorForDevSet|public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\n ProjectDeploymentConfiguration config = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n try {\n String query = "INSERT INTO ProjectDeploymentConfigurations" + "(projectID, name, description) VALUES (" + projectID + ", '" + name + "', '" + description + "')";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProjectDeploymentConfigurations WHERE " + " projectID = " + projectID + " AND " + " name = '" + name + "' AND " + " description = '" + description + "'";\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n connection.rollback();\n String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n }\n config = getProjectDeploymentConfiguration(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n }\n String msg = "SQLException in createNewProjectDeploymentConfig";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return config;\n }\n|SpecialSeperatorForDevSet|public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\n ProjectDeploymentConfiguration config = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n try {\n String query = "INSERT INTO ProjectDeploymentConfigurations" + "(projectID, name, description) VALUES (" + projectID + ", '" + name + "', '" + description + "')";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProjectDeploymentConfigurations WHERE " + " projectID = " + projectID + " AND " + " name = '" + name + "' AND " + " description = '" + description + "'";\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n connection.rollback();\n-   String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n+   String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n }\n config = getProjectDeploymentConfiguration(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n catch (Exception e) {\n }\n String msg = "SQLException in createNewProjectDeploymentConfig";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return config;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-912|SpecialSeperatorForDevSet|public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\n ProjectDeploymentConfiguration config = null;\n Connection connection = null;\n Statement statement = null;\n ResultSet resultSet = null;\n try {\n String query = "INSERT INTO ProjectDeploymentConfigurations" + "(projectID, name, description) VALUES (" + projectID + ", '" + name + "', '" + description + "')";\n connection = DriverManager.getConnection(CONN_STR);\n statement = connection.createStatement();\n statement.executeUpdate(query);\n query = "SELECT * FROM ProjectDeploymentConfigurations WHERE " + " projectID = " + projectID + " AND " + " name = '" + name + "' AND " + " description = '" + description + "'";\n resultSet = statement.executeQuery(query);\n if (!resultSet.next()) {\n connection.rollback();\n String msg = "Attempt to create " + "ProjectDeploymentConfiguration failed.";\n log.error(msg);\n throw new AdaptationException(msg);\n-   }\n+   }\n config = getProjectDeploymentConfiguration(resultSet);\n connection.commit();\n }\n catch (SQLException ex) {\n try {\n connection.rollback();\n }\n catch (Exception e) {\n }\n String msg = "SQLException in createNewProjectDeploymentConfig";\n log.error(msg, ex);\n throw new AdaptationException(msg, ex);\n }\n finally {\n try {\n resultSet.close();\n }\n catch (Exception ex) {\n }\n try {\n statement.close();\n }\n catch (Exception ex) {\n }\n try {\n connection.close();\n }\n catch (Exception ex) {\n }\n }\n return config;\n }\n|SpecialSeperatorForDevSet|@Override public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\n final Connection connection = this.getConnection();\n try {\n connection.setAutoCommit(false);\n String queryString = "DELETE " + this.getJvmInvocationsSchemaAndTableName() + " FROM " + this.getJvmInvocationsSchemaAndTableName() + " INNER JOIN " + this.getJvmElementsSchemaAndTableName() + " ON " + this.getJvmElementsSchemaAndTableName() + ".element_id = " + this.getJvmInvocationsSchemaAndTableName() + ".element_id WHERE ";\n if (contextName != null) {\n queryString = queryString + " context_name LIKE ? AND ";\n }\n if (dateFrom != null) {\n queryString = queryString + " start_timestamp >= ? AND ";\n }\n if (dateTo != null) {\n queryString = queryString + " start_timestamp <= ? AND ";\n }\n queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\n final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\n int indexCounter = 1;\n if (contextName != null) {\n preparedStatement.setString(indexCounter, contextName);\n indexCounter = indexCounter + 1;\n }\n if (dateFrom != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\n indexCounter = indexCounter + 1;\n }\n if (dateTo != null) {\n preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\n indexCounter = indexCounter + 1;\n }\n preparedStatement.executeUpdate();\n preparedStatement.close();\n connection.commit();\n }\n catch (final SQLException e) {\n try {\n connection.rollback();\n }\n catch (final SQLException ex) {\n JeeObserverServerContext.logger.log(Level.SEVERE, "Transaction rollback error.", ex);\n }\n JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\n throw new DatabaseException("Error deleting JVM statistics.", e);\n }\n-   finally {\n+   finally {\n this.releaseConnection(connection);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-913|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n-   IOUtils.copy(in, out);\n+   IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-913|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n-   }\n+   }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyFile(final String sourceFileName, final File path) throws IOException {\n final File source = new File(sourceFileName);\n final File destination = new File(path, source.getName());\n FileChannel srcChannel = null;\n FileChannel dstChannel = null;\n try {\n srcChannel = new FileInputStream(source).getChannel();\n dstChannel = new FileOutputStream(destination).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n-   }\n+   }\n finally {\n try {\n if (dstChannel != null) {\n dstChannel.close();\n }\n }\n catch (Exception exception) {\n }\n try {\n if (srcChannel != null) {\n srcChannel.close();\n }\n }\n catch (Exception exception) {\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-914|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n-   i++) {\n+   i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n-   i++) {\n+   i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-914|SpecialSeperatorForDevSet|private String encode(String str) {\n StringBuffer buf = new StringBuffer();\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(str.getBytes());\n byte bytes[] = md5.digest();\n for (int i = 0;\n i < bytes.length;\n i++) {\n String s = Integer.toHexString(bytes[i] & 0xff);\n if (s.length() == 1) {\n buf.append("0");\n }\n buf.append(s);\n-   }\n+   }\n }\n catch (Exception ex) {\n }\n return buf.toString();\n }\n|SpecialSeperatorForDevSet|private String getPrefsKey(String key) {\n try {\n if (MD5 == null) MD5 = MessageDigest.getInstance("MD5");\n MD5.reset();\n MD5.update(key.getBytes("UTF-8"));\n byte[] resultBytes = MD5.digest();\n return toHexString(resultBytes);\n }\n catch (Exception nsae) {\n return key;\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-915|SpecialSeperatorForDevSet|private JButton getButtonSonido() {\n if (buttonSonido == null) {\n buttonSonido = new JButton();\n buttonSonido.setText(Messages.getString("gui.AdministracionResorces.15"));\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png")));\n buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n public void actionPerformed(java.awt.event.ActionEvent e) {\n JFileChooser fc = new JFileChooser();\n fc.addChoosableFileFilter(new SoundFilter());\n int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = fc.getSelectedFile();\n String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();\n String rutaRelativa = rutaDatos + "sonidos/" + file.getName();\n try {\n FileInputStream fis = new FileInputStream(file);\n FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n FileChannel canalFuente = fis.getChannel();\n FileChannel canalDestino = fos.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n fis.close();\n fos.close();\n imagen.setSonidoURL(rutaRelativa);\n System.out.println(rutaGlobal + " " + rutaRelativa);\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png")));\n gui.getAudio().reproduceAudio(imagen);\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n else {\n }\n-   }\n+   }\n }\n);\n }\n return buttonSonido;\n }\n|SpecialSeperatorForDevSet|private JButton getButtonSonido() {\n if (buttonSonido == null) {\n buttonSonido = new JButton();\n buttonSonido.setText(Messages.getString("gui.AdministracionResorces.15"));\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png")));\n buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n public void actionPerformed(java.awt.event.ActionEvent e) {\n JFileChooser fc = new JFileChooser();\n fc.addChoosableFileFilter(new SoundFilter());\n int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n-   File file = fc.getSelectedFile();\n+   File file = fc.getSelectedFile();\n String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();\n String rutaRelativa = rutaDatos + "sonidos/" + file.getName();\n try {\n FileInputStream fis = new FileInputStream(file);\n FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n FileChannel canalFuente = fis.getChannel();\n FileChannel canalDestino = fos.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n fis.close();\n fos.close();\n imagen.setSonidoURL(rutaRelativa);\n System.out.println(rutaGlobal + " " + rutaRelativa);\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png")));\n gui.getAudio().reproduceAudio(imagen);\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n else {\n }\n }\n }\n);\n }\n return buttonSonido;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-915|SpecialSeperatorForDevSet|private JButton getButtonSonido() {\n if (buttonSonido == null) {\n buttonSonido = new JButton();\n buttonSonido.setText(Messages.getString("gui.AdministracionResorces.15"));\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png")));\n buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n public void actionPerformed(java.awt.event.ActionEvent e) {\n JFileChooser fc = new JFileChooser();\n fc.addChoosableFileFilter(new SoundFilter());\n int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = fc.getSelectedFile();\n String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();\n-   String rutaRelativa = rutaDatos + "sonidos/" + file.getName();\n+   String rutaRelativa = rutaDatos + "sonidos/" + file.getName();\n try {\n FileInputStream fis = new FileInputStream(file);\n FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n FileChannel canalFuente = fis.getChannel();\n FileChannel canalDestino = fos.getChannel();\n canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n fis.close();\n fos.close();\n imagen.setSonidoURL(rutaRelativa);\n System.out.println(rutaGlobal + " " + rutaRelativa);\n buttonSonido.setIcon(new ImageIcon(getClass().getResource("/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png")));\n gui.getAudio().reproduceAudio(imagen);\n }\n catch (IOException ex) {\n ex.printStackTrace();\n }\n }\n else {\n }\n }\n }\n);\n }\n return buttonSonido;\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n-   ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n+   ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-916|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n-   assertTrue(encoder.isCompleted());\n+   assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n-   File tmpFile = File.createTempFile("testFile", "txt");\n+   File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-916|SpecialSeperatorForDevSet|public void testCodingEmptyFile() throws Exception {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n WritableByteChannel channel = newChannel(baos);\n HttpParams params = new BasicHttpParams();\n SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n encoder.write(wrap("stuff;\n"));\n File tmpFile = File.createTempFile("testFile", "txt");\n FileOutputStream fout = new FileOutputStream(tmpFile);\n OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n wrtout.flush();\n wrtout.close();\n FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n encoder.transfer(fchannel, 0, 20);\n encoder.write(wrap("more stuff"));\n String s = baos.toString("US-ASCII");\n assertTrue(encoder.isCompleted());\n assertEquals("stuff;\nmore stuff", s);\n tmpFile.delete();\n-   }\n+   }\n|SpecialSeperatorForDevSet|private static void copy(String sourceName, String destName) throws IOException {\n-   File source = new File(sourceName);\n+   File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-917|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n-   }\n+   }\n|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n-   Reader reader = new InputStreamReader(in, "US-ASCII");\n+   Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-917|SpecialSeperatorForDevSet|@Test public void testCopy_readerToOutputStream_Encoding() throws Exception {\n InputStream in = new ByteArrayInputStream(inData);\n in = new YellOnCloseInputStreamTest(in);\n Reader reader = new InputStreamReader(in, "US-ASCII");\n ByteArrayOutputStream baout = new ByteArrayOutputStream();\n OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n IOUtils.copy(reader, out, "UTF16");\n byte[] bytes = baout.toByteArray();\n bytes = new String(bytes, "UTF16").getBytes("US-ASCII");\n assertTrue("Content differs", Arrays.equals(inData, bytes));\n }\n-  \n+  |SpecialSeperatorForDevSet|public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\n String name = metadata.get(Metadata.RESOURCE_NAME_KEY);\n if (name != null && wanted.containsKey(name)) {\n-   FileOutputStream out = new FileOutputStream(wanted.get(name));\n+   FileOutputStream out = new FileOutputStream(wanted.get(name));\n IOUtils.copy(stream, out);\n out.close();\n }\n else {\n if (downstreamParser != null) {\n downstreamParser.parse(stream, handler, metadata, context);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-918|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n-   throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n+   throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-918|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|private static void copyFile(File src, File dst) throws IOException {\n FileChannel in = new FileInputStream(src).getChannel();\n FileChannel out = new FileOutputStream(dst).getChannel();\n in.transferTo(0, in.size(), out);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-919|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n-   in.close();\n+   in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-919|SpecialSeperatorForDevSet|public static void copyFile(File src, File dst) throws IOException {\n InputStream in = new FileInputStream(src);\n OutputStream out = new FileOutputStream(dst);\n byte[] buf = new byte[1024];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n-   in.close();\n+   in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n InputStream is = null;\n InputStream page = null;\n OutputStream os = null;\n String rootUrl = null;\n try {\n boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n if (!isMultipart) {\n request.setAttribute("error", "Form isn't a multipart form");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ServletFileUpload upload = new ServletFileUpload();\n String webUrl = null;\n FileItemIterator iter = upload.getItemIterator(request);\n while (iter.hasNext()) {\n FileItemStream item = iter.next();\n String name = item.getFieldName();\n if (name.equals("webpage")) {\n is = item.openStream();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n else if (name.equals("weburl")) {\n InputStream wpIs = null;\n try {\n webUrl = Streams.asString(item.openStream());\n URL u = new URL(webUrl);\n wpIs = new BufferedInputStream(u.openStream());\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(wpIs, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n finally {\n IOUtils.closeQuietly(wpIs);\n }\n }\n else if (name.equals("rooturl")) {\n rootUrl = Streams.asString(item.openStream());\n }\n }\n if (page == null) {\n request.setAttribute("error", "Form doesn't have an html file");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n os = new BufferedOutputStream(response.getOutputStream());\n os.write(delegate.getMailer());\n os.flush();\n }\n catch (Exception e) {\n-   streamException(request, response, e);\n+   streamException(request, response, e);\n }\n finally {\n IOUtils.closeQuietly(page);\n IOUtils.closeQuietly(is);\n IOUtils.closeQuietly(os);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-920|SpecialSeperatorForDevSet|public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n-   FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n+   FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File dest, File src) throws IOException {\n+  public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-920|SpecialSeperatorForDevSet|public static void copyFile(File dest, File src) throws IOException {\n FileChannel srcChannel = new FileInputStream(src).getChannel();\n FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n-   fc = new FileOutputStream("data2.txt").getChannel();\n+   fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-921|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n-   md.update(input.getBytes("UTF-8"));\n+   md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|-  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n+  private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-921|SpecialSeperatorForDevSet|private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.reset();\n md.update(input.getBytes("UTF-8"));\n return toHexString(md.digest());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static byte[] encrypt(String x) throws Exception {\n java.security.MessageDigest d = null;\n d = java.security.MessageDigest.getInstance("SHA-1");\n d.reset();\n-   d.update(x.getBytes());\n+   d.update(x.getBytes());\n return d.digest();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-922|SpecialSeperatorForDevSet|public void testReadPerMemberSixSmall() throws IOException {\n GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n gzin.setEofEachMember(true);\n for (int i = 0;\n i < 3;\n i++) {\n int count2 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 1-byte member count", 1, count2);\n gzin.nextMember();\n int count3 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 5-byte member count", 5, count3);\n gzin.nextMember();\n }\n-   int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n+   int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong eof count", 0, countEnd);\n }\n|SpecialSeperatorForDevSet|public void testReadPerMemberSixSmall() throws IOException {\n GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n gzin.setEofEachMember(true);\n for (int i = 0;\n i < 3;\n i++) {\n int count2 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 1-byte member count", 1, count2);\n-   gzin.nextMember();\n+   gzin.nextMember();\n int count3 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 5-byte member count", 5, count3);\n gzin.nextMember();\n }\n int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong eof count", 0, countEnd);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-922|SpecialSeperatorForDevSet|public void testReadPerMemberSixSmall() throws IOException {\n GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n gzin.setEofEachMember(true);\n for (int i = 0;\n i < 3;\n i++) {\n int count2 = IOUtils.copy(gzin, new NullOutputStream());\n-   assertEquals("wrong 1-byte member count", 1, count2);\n+   assertEquals("wrong 1-byte member count", 1, count2);\n gzin.nextMember();\n int count3 = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong 5-byte member count", 5, count3);\n gzin.nextMember();\n }\n int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n assertEquals("wrong eof count", 0, countEnd);\n }\n|SpecialSeperatorForDevSet|public static void copyFromTo(File srcFile, File destFile) {\n FileChannel in = null, out = null;\n FileInputStream fis = null;\n FileOutputStream fos = null;\n try {\n fis = new FileInputStream(srcFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + srcFile.toString());\n System.out.println("file does not exist, " + "is a directory rather than a regular file, " + "or for some other reason cannot be opened for reading");\n System.exit(-1);\n }\n try {\n fos = new FileOutputStream(destFile);\n }\n catch (FileNotFoundException fnfe) {\n System.out.println("File: " + destFile.toString());\n System.out.println("file exists but is a directory rather than a regular file, " + "does not exist but cannot be created, " + "or cannot be opened for any other reason");\n System.exit(-1);\n }\n try {\n in = fis.getChannel();\n out = fos.getChannel();\n in.transferTo(0, in.size(), out);\n fos.flush();\n fos.close();\n out.close();\n fis.close();\n in.close();\n System.out.println("Completed copying " + srcFile.toString() + " to " + destFile.toString());\n }\n catch (IOException ioe) {\n System.out.println("IOException copying file: " + ioe.getMessage());\n-   System.exit(-1);\n+   System.exit(-1);\n }\n long srcModified = srcFile.lastModified();\n if (srcModified > 0L && destFile.exists()) {\n destFile.setLastModified(srcModified);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-923|SpecialSeperatorForDevSet|private String getEncoding() throws IOException {\n BufferedReader reader = null;\n String encoding = null;\n try {\n URLConnection connection = url.openConnection();\n Map<String, List<String>> header = connection.getHeaderFields();\n for (Map.Entry<String, List<String>> entry : header.entrySet()) {\n if (entry.getKey().toLowerCase().equals("content-type")) {\n String item = entry.getValue().toString().toLowerCase();\n if (item.contains("charset")) {\n encoding = extractEncoding(item);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n-   }\n+   }\n }\n reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String line;\n while ((line = reader.readLine()) != null) {\n line = line.toLowerCase();\n if (line.contains("charset") || line.contains("encoding")) {\n encoding = extractEncoding(line);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n return STANDARDENCODING;\n }\n finally {\n if (reader != null) reader.close();\n }\n }\n|SpecialSeperatorForDevSet|private String getEncoding() throws IOException {\n BufferedReader reader = null;\n String encoding = null;\n try {\n URLConnection connection = url.openConnection();\n Map<String, List<String>> header = connection.getHeaderFields();\n for (Map.Entry<String, List<String>> entry : header.entrySet()) {\n if (entry.getKey().toLowerCase().equals("content-type")) {\n-   String item = entry.getValue().toString().toLowerCase();\n+   String item = entry.getValue().toString().toLowerCase();\n if (item.contains("charset")) {\n encoding = extractEncoding(item);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n }\n reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String line;\n while ((line = reader.readLine()) != null) {\n line = line.toLowerCase();\n if (line.contains("charset") || line.contains("encoding")) {\n encoding = extractEncoding(line);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n return STANDARDENCODING;\n }\n finally {\n if (reader != null) reader.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-923|SpecialSeperatorForDevSet|-  private String getEncoding() throws IOException {\n+  private String getEncoding() throws IOException {\n BufferedReader reader = null;\n String encoding = null;\n try {\n URLConnection connection = url.openConnection();\n Map<String, List<String>> header = connection.getHeaderFields();\n for (Map.Entry<String, List<String>> entry : header.entrySet()) {\n if (entry.getKey().toLowerCase().equals("content-type")) {\n String item = entry.getValue().toString().toLowerCase();\n if (item.contains("charset")) {\n encoding = extractEncoding(item);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n }\n reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n String line;\n while ((line = reader.readLine()) != null) {\n line = line.toLowerCase();\n if (line.contains("charset") || line.contains("encoding")) {\n encoding = extractEncoding(line);\n if (encoding != null && !encoding.isEmpty()) return encoding;\n }\n }\n return STANDARDENCODING;\n }\n finally {\n if (reader != null) reader.close();\n }\n }\n|SpecialSeperatorForDevSet|public static String load(String id) {\n String xml = "";\n if (id.length() < 5) return "";\n try {\n working = true;\n URL url = new URL("http://pastebin.com/download.php?i=" + id);\n URLConnection conn = url.openConnection();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n xml = "";\n String str;\n while ((str = reader.readLine()) != null) {\n xml += str;\n }\n reader.close();\n working = false;\n return xml.toString();\n-   }\n+   }\n catch (IOException ex) {\n JOptionPane.showMessageDialog(null, " Load error");\n }\n working = false;\n return xml;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-924|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n-  \n+  |SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n-   }\n+   }\n try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-924|SpecialSeperatorForDevSet|public synchronized String encrypt(String plaintext) {\n MessageDigest md = null;\n try {\n md = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n-   try {\n+   try {\n md.update(plaintext.getBytes("UTF-8"));\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n byte raw[] = md.digest();\n String hash = (new BASE64Encoder()).encode(raw);\n return hash;\n }\n|SpecialSeperatorForDevSet|protected byte[] getHashedID(String ID) {\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n-   md5.update(ID.getBytes());\n+   md5.update(ID.getBytes());\n byte[] digest = md5.digest();\n byte[] bytes = new byte[WLDB_ID_SIZE];\n for (int i = 0;\n i < bytes.length;\n i++) {\n bytes[i] = digest[i];\n }\n return bytes;\n }\n catch (NoSuchAlgorithmException exception) {\n System.err.println("Java VM is not compatible");\n exit();\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-925|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n-   while ((b = input.read()) != -1) output.write(b);\n+   while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-925|SpecialSeperatorForDevSet|private void copyResource() throws Exception {\n URL url = getResource(source);\n InputStream input;\n if (url != null) {\n input = url.openStream();\n }\n else if (new File(source).exists()) {\n input = new FileInputStream(source);\n-   }\n+   }\n else {\n throw new Exception("Could not load resource: " + source);\n }\n OutputStream output = new FileOutputStream(destinationFile());\n int b;\n while ((b = input.read()) != -1) output.write(b);\n input.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void copy(String fileFrom, String fileTo) throws IOException {\n FileInputStream inputStream = null;\n FileOutputStream outputStream = null;\n FileChannel inputChannel = null;\n-   FileChannel outputChannel = null;\n+   FileChannel outputChannel = null;\n try {\n inputStream = new FileInputStream(fileFrom);\n outputStream = new FileOutputStream(fileTo);\n inputChannel = inputStream.getChannel();\n outputChannel = outputStream.getChannel();\n inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n }\n finally {\n try {\n inputChannel.close();\n }\n finally {\n try {\n outputChannel.close();\n }\n finally {\n try {\n inputStream.close();\n }\n finally {\n outputStream.close();\n }\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-926|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n-  \n+  |SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n-   }\n+   }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-926|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException nsae) {\n+   catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n final MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-927|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n-   assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n+   assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-927|SpecialSeperatorForDevSet|public void testAutoCommit() throws Exception {\n Connection con = getConnectionOverrideProperties(new Properties());\n try {\n Statement stmt = con.createStatement();\n assertEquals(0, stmt.executeUpdate("create table #testAutoCommit (i int)"));\n-   con.setAutoCommit(false);\n+   con.setAutoCommit(false);\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (0)"));\n con.setAutoCommit(false);\n con.rollback();\n assertEquals(1, stmt.executeUpdate("insert into #testAutoCommit (i) values (1)"));\n con.setAutoCommit(true);\n con.setAutoCommit(false);\n con.rollback();\n con.setAutoCommit(true);\n ResultSet rs = stmt.executeQuery("select i from #testAutoCommit");\n assertTrue(rs.next());\n assertEquals(1, rs.getInt(1));\n assertFalse(rs.next());\n rs.close();\n stmt.close();\n }\n finally {\n con.close();\n }\n }\n|SpecialSeperatorForDevSet|public void deleteAuthors() throws Exception {\n if (proposalIds.equals("") || usrIds.equals("")) throw new Exception("No proposal or author selected.");\n String[] pids = proposalIds.split(",");\n String[] uids = usrIds.split(",");\n int pnum = pids.length;\n int unum = uids.length;\n if (pnum == 0 || unum == 0) throw new Exception("No proposal or author selected.");\n int i, j;\n PreparedStatement prepStmt = null;\n try {\n con = database.getConnection();\n con.setAutoCommit(false);\n String pStr = "delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?";\n prepStmt = con.prepareStatement(pStr);\n for (i = 0;\n i < pnum;\n i++) {\n for (j = 0;\n j < unum;\n j++) {\n if (!uids[j].equals(userId)) {\n prepStmt.setString(1, pids[i]);\n-   prepStmt.setString(2, uids[j]);\n+   prepStmt.setString(2, uids[j]);\n prepStmt.executeUpdate();\n }\n }\n }\n con.commit();\n }\n catch (Exception e) {\n if (!con.isClosed()) {\n con.rollback();\n prepStmt.close();\n con.close();\n }\n throw e;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-928|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n-   }\n+   }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-928|SpecialSeperatorForDevSet|public static final synchronized String hash(String data) {\n if (digest == null) {\n try {\n digest = MessageDigest.getInstance("MD5");\n }\n-   catch (NoSuchAlgorithmException nsae) {\n+   catch (NoSuchAlgorithmException nsae) {\n log.error("Failed to load the MD5 MessageDigest. " + "Jive will be unable to function normally.", nsae);\n }\n }\n try {\n digest.update(data.getBytes("utf-8"));\n }\n catch (UnsupportedEncodingException e) {\n log.error(e);\n }\n return encodeHex(digest.digest());\n }\n|SpecialSeperatorForDevSet|public static String eventHash(String eventstr) {\n try {\n if (md == null) {\n md = MessageDigest.getInstance("MD5");\n }\n md.update(eventstr.getBytes("utf-8"));\n byte[] theDigest = md.digest();\n return new BASE64Encoder().encode(theDigest);\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (UnsupportedEncodingException e) {\n e.printStackTrace();\n }\n return null;\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-929|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n-   }\n+   }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-929|SpecialSeperatorForDevSet|public static String encrypt(String plainText) {\n if (TextUtils.isEmpty(plainText)) {\n plainText = "";\n }\n StringBuilder text = new StringBuilder();\n for (int i = plainText.length() - 1;\n i >= 0;\n-   i--) {\n+   i--) {\n text.append(plainText.charAt(i));\n }\n plainText = text.toString();\n MessageDigest mDigest;\n try {\n mDigest = MessageDigest.getInstance("SHA-256");\n }\n catch (NoSuchAlgorithmException e) {\n return plainText;\n }\n mDigest.update(plainText.getBytes());\n byte d[] = mDigest.digest();\n StringBuffer hash = new StringBuffer();\n for (int i = 0;\n i < d.length;\n i++) {\n hash.append(Integer.toHexString(0xFF & d[i]));\n }\n return hash.toString();\n }\n|SpecialSeperatorForDevSet|public static String getMD5Hash(String in) {\n StringBuffer result = new StringBuffer(32);\n try {\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.update(in.getBytes());\n Formatter f = new Formatter(result);\n for (byte b : md5.digest()) {\n f.format("%02x", b);\n }\n }\n catch (NoSuchAlgorithmException ex) {\n ex.printStackTrace();\n }\n-   return result.toString();\n+   return result.toString();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-930|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n if (request.getParameter("edit") != null) {\n try {\n User cu = (User) request.getSession().getAttribute("currentuser");\n UserDetails ud = cu.getUserDetails();\n String returnTo = "editprofile.jsp";\n if (!request.getParameter("password").equals("")) {\n String password = request.getParameter("password");\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(new String(password).getBytes());\n byte[] hash = md.digest();\n String pass = new BigInteger(1, hash).toString(16);\n cu.setClientPassword(pass);\n }\n ud.setFirstName(request.getParameter("fname"));\n ud.setLastName(request.getParameter("lname"));\n ud.setEmailAddress(request.getParameter("email"));\n ud.setAddress(request.getParameter("address"));\n ud.setZipcode(request.getParameter("zipcode"));\n ud.setTown(request.getParameter("town"));\n ud.setCountry(request.getParameter("country"));\n ud.setTrackingColor(request.getParameter("input1"));\n String vis = request.getParameter("visibility");\n-   if (vis.equals("self")) {\n+   if (vis.equals("self")) {\n cu.setVisibility(0);\n }\n else if (vis.equals("friends")) {\n cu.setVisibility(1);\n }\n else if (vis.equals("all")) {\n cu.setVisibility(2);\n }\n else {\n response.sendRedirect("error.jsp?id=8");\n }\n em.getTransaction().begin();\n em.persist(cu);\n em.getTransaction().commit();\n response.sendRedirect(returnTo);\n }\n catch (Throwable e) {\n e.printStackTrace();\n response.sendRedirect("error.jsp?id=5");\n }\n return;\n }\n }\n|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-   if (request.getParameter("edit") != null) {\n+   if (request.getParameter("edit") != null) {\n try {\n User cu = (User) request.getSession().getAttribute("currentuser");\n UserDetails ud = cu.getUserDetails();\n String returnTo = "editprofile.jsp";\n if (!request.getParameter("password").equals("")) {\n String password = request.getParameter("password");\n MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(new String(password).getBytes());\n byte[] hash = md.digest();\n String pass = new BigInteger(1, hash).toString(16);\n cu.setClientPassword(pass);\n }\n ud.setFirstName(request.getParameter("fname"));\n ud.setLastName(request.getParameter("lname"));\n ud.setEmailAddress(request.getParameter("email"));\n ud.setAddress(request.getParameter("address"));\n ud.setZipcode(request.getParameter("zipcode"));\n ud.setTown(request.getParameter("town"));\n ud.setCountry(request.getParameter("country"));\n ud.setTrackingColor(request.getParameter("input1"));\n String vis = request.getParameter("visibility");\n if (vis.equals("self")) {\n cu.setVisibility(0);\n }\n else if (vis.equals("friends")) {\n cu.setVisibility(1);\n }\n else if (vis.equals("all")) {\n cu.setVisibility(2);\n }\n else {\n response.sendRedirect("error.jsp?id=8");\n }\n em.getTransaction().begin();\n em.persist(cu);\n em.getTransaction().commit();\n response.sendRedirect(returnTo);\n }\n catch (Throwable e) {\n e.printStackTrace();\n response.sendRedirect("error.jsp?id=5");\n }\n return;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-930|SpecialSeperatorForDevSet|protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n if (request.getParameter("edit") != null) {\n try {\n User cu = (User) request.getSession().getAttribute("currentuser");\n UserDetails ud = cu.getUserDetails();\n String returnTo = "editprofile.jsp";\n if (!request.getParameter("password").equals("")) {\n String password = request.getParameter("password");\n-   MessageDigest md = MessageDigest.getInstance("MD5");\n+   MessageDigest md = MessageDigest.getInstance("MD5");\n md.update(new String(password).getBytes());\n byte[] hash = md.digest();\n String pass = new BigInteger(1, hash).toString(16);\n cu.setClientPassword(pass);\n }\n ud.setFirstName(request.getParameter("fname"));\n ud.setLastName(request.getParameter("lname"));\n ud.setEmailAddress(request.getParameter("email"));\n ud.setAddress(request.getParameter("address"));\n ud.setZipcode(request.getParameter("zipcode"));\n ud.setTown(request.getParameter("town"));\n ud.setCountry(request.getParameter("country"));\n ud.setTrackingColor(request.getParameter("input1"));\n String vis = request.getParameter("visibility");\n if (vis.equals("self")) {\n cu.setVisibility(0);\n }\n else if (vis.equals("friends")) {\n cu.setVisibility(1);\n }\n else if (vis.equals("all")) {\n cu.setVisibility(2);\n }\n else {\n response.sendRedirect("error.jsp?id=8");\n }\n em.getTransaction().begin();\n em.persist(cu);\n em.getTransaction().commit();\n response.sendRedirect(returnTo);\n }\n catch (Throwable e) {\n e.printStackTrace();\n response.sendRedirect("error.jsp?id=5");\n }\n return;\n }\n }\n|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n-   rating = Integer.parseInt(tokenizer.nextToken());\n+   rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-931|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n-   inChannel.close();\n+   inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n FileChannel inChannel = new FileInputStream(fin).getChannel();\n-   FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n+   FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-931|SpecialSeperatorForDevSet|public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n-   FileChannel inChannel = new FileInputStream(fin).getChannel();\n+   FileChannel inChannel = new FileInputStream(fin).getChannel();\n FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n finally {\n if (inChannel != null) try {\n inChannel.close();\n }\n catch (IOException ex) {\n }\n if (outChannel != null) try {\n outChannel.close();\n }\n catch (IOException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n InputStream is = null;\n InputStream page = null;\n OutputStream os = null;\n String rootUrl = null;\n try {\n boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n if (!isMultipart) {\n request.setAttribute("error", "Form isn't a multipart form");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ServletFileUpload upload = new ServletFileUpload();\n String webUrl = null;\n FileItemIterator iter = upload.getItemIterator(request);\n while (iter.hasNext()) {\n FileItemStream item = iter.next();\n String name = item.getFieldName();\n if (name.equals("webpage")) {\n is = item.openStream();\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(is, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n-   else if (name.equals("weburl")) {\n+   else if (name.equals("weburl")) {\n InputStream wpIs = null;\n try {\n webUrl = Streams.asString(item.openStream());\n URL u = new URL(webUrl);\n wpIs = new BufferedInputStream(u.openStream());\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(wpIs, baos);\n page = new ByteArrayInputStream(baos.toByteArray());\n }\n finally {\n IOUtils.closeQuietly(wpIs);\n }\n }\n else if (name.equals("rooturl")) {\n rootUrl = Streams.asString(item.openStream());\n }\n }\n if (page == null) {\n request.setAttribute("error", "Form doesn't have an html file");\n RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/error.jsp");\n rd.forward(request, response);\n }\n ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n os = new BufferedOutputStream(response.getOutputStream());\n os.write(delegate.getMailer());\n os.flush();\n }\n catch (Exception e) {\n streamException(request, response, e);\n }\n finally {\n IOUtils.closeQuietly(page);\n IOUtils.closeQuietly(is);\n IOUtils.closeQuietly(os);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-932|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n StringBuffer bufferPass;\n try {\n md5 = MessageDigest.getInstance("MD5");\n-   }\n+   }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n }\n|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n StringBuffer bufferPass;\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-932|SpecialSeperatorForDevSet|public String transformByMD5(String password) throws XSServiceException {\n MessageDigest md5;\n byte[] output;\n StringBuffer bufferPass;\n try {\n md5 = MessageDigest.getInstance("MD5");\n }\n catch (NoSuchAlgorithmException e) {\n logger.warn("DataAccessException thrown while getting MD5 algorithm:" + e.getMessage(), e);\n throw new XSServiceException("Database error while saving user");\n }\n md5.reset();\n md5.update(password.getBytes());\n output = md5.digest();\n bufferPass = new StringBuffer();\n for (byte b : output) {\n bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? "0" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n }\n return bufferPass.toString();\n-   }\n+   }\n|SpecialSeperatorForDevSet|private String md5(String uri) throws ConnoteaRuntimeException {\n try {\n MessageDigest messageDigest = MessageDigest.getInstance("MD5");\n messageDigest.update(uri.getBytes());\n byte[] bytes = messageDigest.digest();\n-   StringBuffer stringBuffer = new StringBuffer();\n+   StringBuffer stringBuffer = new StringBuffer();\n for (byte b : bytes) {\n String hex = Integer.toHexString(0xff & b);\n if (hex.length() == 1) {\n stringBuffer.append('0');\n }\n stringBuffer.append(hex);\n }\n return stringBuffer.toString();\n }\n catch (NoSuchAlgorithmException e) {\n throw new ConnoteaRuntimeException(e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-933|SpecialSeperatorForDevSet|protected int deleteBitstreamInfo(int id, Connection conn) {\n PreparedStatement stmt = null;\n int numDeleted = 0;\n try {\n stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n stmt.setInt(1, id);\n numDeleted = stmt.executeUpdate();\n if (numDeleted > 1) {\n conn.rollback();\n throw new IllegalStateException("Too many rows deleted! Number of rows deleted: " + numDeleted + " only one row should be deleted for bitstream id " + id);\n }\n }\n catch (SQLException e) {\n LOG.error("Problem deleting bitstream. " + e.getMessage(), e);\n throw new RuntimeException("Problem deleting bitstream. " + e.getMessage(), e);\n }\n finally {\n cleanup(stmt);\n }\n return numDeleted;\n }\n-  \n+  |SpecialSeperatorForDevSet|protected int deleteBitstreamInfo(int id, Connection conn) {\n PreparedStatement stmt = null;\n int numDeleted = 0;\n try {\n stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n stmt.setInt(1, id);\n numDeleted = stmt.executeUpdate();\n if (numDeleted > 1) {\n conn.rollback();\n throw new IllegalStateException("Too many rows deleted! Number of rows deleted: " + numDeleted + " only one row should be deleted for bitstream id " + id);\n }\n }\n catch (SQLException e) {\n LOG.error("Problem deleting bitstream. " + e.getMessage(), e);\n throw new RuntimeException("Problem deleting bitstream. " + e.getMessage(), e);\n }\n finally {\n cleanup(stmt);\n }\n-   return numDeleted;\n+   return numDeleted;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-933|SpecialSeperatorForDevSet|protected int deleteBitstreamInfo(int id, Connection conn) {\n PreparedStatement stmt = null;\n int numDeleted = 0;\n try {\n stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n stmt.setInt(1, id);\n numDeleted = stmt.executeUpdate();\n if (numDeleted > 1) {\n conn.rollback();\n throw new IllegalStateException("Too many rows deleted! Number of rows deleted: " + numDeleted + " only one row should be deleted for bitstream id " + id);\n }\n }\n catch (SQLException e) {\n LOG.error("Problem deleting bitstream. " + e.getMessage(), e);\n throw new RuntimeException("Problem deleting bitstream. " + e.getMessage(), e);\n }\n finally {\n-   cleanup(stmt);\n+   cleanup(stmt);\n }\n return numDeleted;\n }\n|SpecialSeperatorForDevSet|-  public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\n+  public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\n try {\n con.setAutoCommit(false);\n stmt = con.createStatement();\n Collection boxes = diagramModel.getBoxes();\n BoxModel box;\n String sqlQuery;\n if (foreignKeys) {\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n if (!box.isAbstractDef()) {\n dropForeignKeys(box);\n }\n }\n }\n int counter = 0;\n for (Iterator x = boxes.iterator();\n x.hasNext();\n ) {\n box = (BoxModel) x.next();\n if (!box.isAbstractDef()) {\n sqlQuery = sqlDropTable(box);\n System.out.println(sqlQuery);\n try {\n stmt.executeUpdate(sqlQuery);\n counter++;\n }\n catch (SQLException e) {\n String tableName = box.getName();\n System.out.println("// Problem while dropping table " + tableName + " : " + e.getMessage());\n String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName;\n this.informUser(msg);\n }\n }\n }\n con.commit();\n if (counter > 0) {\n String msg = Para.getPara().getText("schemaDropped") + " -- " + counter + " " + Para.getPara().getText("tables");\n this.informUser(msg);\n }\n else {\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n }\n catch (SQLException e) {\n System.out.println(e.getMessage() + " // Problem with the JDBC schema generation! ");\n try {\n con.rollback();\n this.informUser(Para.getPara().getText("schemaNotDropped"));\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection rollback! ");\n }\n }\n finally {\n try {\n con.setAutoCommit(true);\n stmt.close();\n }\n catch (SQLException e1) {\n System.out.println(e1.getMessage() + " // Problem with the connection disconnect! ");\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-934|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n-   in.close();\n+   in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n-   InputStream in = getClass().getResourceAsStream(resourcePath);\n+   InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-934|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n-   finally {\n+   finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\n Transformer oTransformer;\n StreamResult oStreamResult;\n StreamSource oStreamSrcXML;\n-   StringWriter oStrWritter;\n+   StringWriter oStrWritter;\n InputStream oXMLStream = null;\n String sTransformed;\n StringBuffer oPostTransform;\n String sKey;\n String sMedia;\n Object sVal;\n Page oCurrentPage;\n int iCloseHead, iOpenBody, iCloseBody;\n int iReaded;\n char CharBuffer[] = new char[8192];\n String sCharBuffer;\n long lElapsed = 0;\n final String sSep = System.getProperty("file.separator");\n if (DebugFile.trace) {\n lElapsed = System.currentTimeMillis();\n DebugFile.writeln("Begin Pageset.buildSiteForEdit(" + sBasePath + "," + sOutputPath + "," + sCtrlPath + "," + sMenuPath + ")");\n DebugFile.incIdent();\n }\n FileSystem oFS = new FileSystem();\n Vector vPages = pages();\n if (!sBasePath.endsWith(sSep)) sBasePath += sSep;\n String sWebServer = oEnvironmentProps.getProperty("webserver", "");\n if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln("WARNING: webserver property not set at EnvironmentProperties");\n if (!sWebServer.endsWith("/")) sWebServer += "/";\n Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), "containers");\n if (oContainers == null) {\n if (DebugFile.trace) DebugFile.writeln("ERROR: <containers> node not found.");\n throw new DOMException(DOMException.NOT_FOUND_ERR, "<containers> node not found");\n }\n if (DebugFile.trace) DebugFile.writeln("new FileInputStream(" + (sURI.startsWith("file://") ? sURI.substring(7) : sURI) + ")");\n for (int c = 0;\n c < vPages.size();\n c++) {\n oCurrentPage = (Page) vPages.get(c);\n oXMLStream = new FileInputStream(sURI.startsWith("file://") ? sURI.substring(7) : sURI);\n oStreamSrcXML = new StreamSource(oXMLStream);\n oStrWritter = new StringWriter();\n oStreamResult = new StreamResult(oStrWritter);\n try {\n oTransformer = StylesheetCache.newTransformer(sBasePath + "xslt" + sSep + "templates" + sSep + oMSite.name() + sSep + oCurrentPage.template());\n sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\n if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + "=" + sMedia);\n if (null == sMedia) sMedia = "html";\n else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\n if (null == oCurrentPage.getTitle()) throw new NullPointerException("Page " + String.valueOf(c) + " title is null");\n if (DebugFile.trace) DebugFile.writeln("Page.filePath(" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "." + sMedia + ")");\n oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "." + sMedia);\n StylesheetCache.setParameters(oTransformer, oEnvironmentProps);\n StylesheetCache.setParameters(oTransformer, oUserProps);\n oTransformer.setParameter("param_page", ((Page) (vPages.get(c))).getTitle());\n oTransformer.transform(oStreamSrcXML, oStreamResult);\n }\n catch (TransformerConfigurationException e) {\n oLastXcpt = e;\n sMedia = null;\n SourceLocator sl = e.getLocator();\n if (DebugFile.trace) {\n if (sl == null) {\n DebugFile.writeln("ERROR TransformerConfigurationException " + e.getMessage());\n }\n else {\n DebugFile.writeln("ERROR TransformerConfigurationException " + e.getMessage() + " line=" + String.valueOf(sl.getLineNumber()) + " column=" + String.valueOf(sl.getColumnNumber()));\n }\n }\n }\n catch (TransformerException e) {\n oLastXcpt = e;\n sMedia = null;\n if (DebugFile.trace) DebugFile.writeln("ERROR TransformerException " + e.getMessageAndLocation());\n }\n oTransformer = null;\n oStreamResult = null;\n sTransformed = oStrWritter.toString();\n if (DebugFile.trace) DebugFile.writeln("transformation length=" + String.valueOf(sTransformed.length()));\n if (sTransformed.length() > 0) {\n iCloseHead = sTransformed.indexOf("</head");\n if (iCloseHead < 0) iCloseHead = sTransformed.indexOf("</HEAD");\n iOpenBody = sTransformed.indexOf("<body", iCloseHead);\n if (iOpenBody < 0) iOpenBody = sTransformed.indexOf("<BODY", iCloseHead);\n iCloseBody = sTransformed.indexOf(">", iOpenBody + 5);\n for (char s = sTransformed.charAt(iCloseBody + 1);\n s == '\r' || s == '\n' || s == ' ' || s == '\t';\n s = sTransformed.charAt(++iCloseBody)) ;\n oPostTransform = new StringBuffer(sTransformed.length() + 4096);\n oPostTransform.append(sTransformed.substring(0, iCloseHead));\n oPostTransform.append("\n<script language=\"JavaScript\" src=\"" + sMenuPath + "\"></script>");\n oPostTransform.append("\n<script language=\"JavaScript\" src=\"" + sIntegradorPath + "\"></script>\n");\n oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\n oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\n try {\n sCharBuffer = oFS.readfilestr(sCtrlPath, "UTF-8");\n if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + " characters readed");\n }\n catch (com.enterprisedt.net.ftp.FTPException ftpe) {\n throw new IOException(ftpe.getMessage());\n }\n try {\n if (DebugFile.trace) DebugFile.writeln("Gadgets.replace(" + sCtrlPath + ",http://demo.hipergate.com/," + sWebServer + ")");\n Gadgets.replace(sCharBuffer, "http://demo.hipergate.com/", sWebServer);\n }\n catch (org.apache.oro.text.regex.MalformedPatternException e) {\n }\n oPostTransform.append("<!--Begin " + sCtrlPath + "-->\n");\n oPostTransform.append(sCharBuffer);\n sCharBuffer = null;\n oPostTransform.append("\n<!--End " + sCtrlPath + "-->\n");\n oPostTransform.append(sTransformed.substring(iCloseBody));\n }\n else {\n oPostTransform = new StringBuffer("Page " + ((Page) vPages.get(c)).getTitle() + " could not be rendered.");\n if (oLastXcpt != null) oPostTransform.append("<BR>" + oLastXcpt.getMessageAndLocation());\n }\n if (DebugFile.trace) DebugFile.writeln("new FileWriter(" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia + ")");\n if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia, oPostTransform.toString(), "UTF-8");\n else try {\n oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + "_." + sMedia, Gadgets.replace(oPostTransform.toString(), ":selPageOptions", sSelPageOptions), "UTF-8");\n }\n catch (Exception e) {\n }\n oPostTransform = null;\n sTransformed = null;\n }\n oXMLStream.close();\n if (DebugFile.trace) {\n DebugFile.writeln("done in " + String.valueOf(System.currentTimeMillis() - lElapsed) + " miliseconds");\n DebugFile.decIdent();\n DebugFile.writeln("End Pageset.buildSiteForEdit()");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-935|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n-   logger.fine("...got destination channel " + destChannel + "...");\n+   logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n-   destChannel.close();\n+   destChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-935|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n-   logger.fine("...got destination channel " + destChannel + "...");\n+   logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|public static void copy(File in, File out) throws IOException {\n if (in.exists() && in != null && out != null) {\n if (!out.exists()) {\n if (in.isDirectory()) {\n out.mkdirs();\n }\n-   else {\n+   else {\n out.createNewFile();\n }\n }\n String source = in.isDirectory() ? "directory" : "file";\n String target = out.isDirectory() ? "directory" : "file";\n if (!source.equals(target)) {\n throw new IOException("Can't duplicate " + source + " as " + target);\n }\n else {\n if (source.equals("directory")) {\n File[] files = in.listFiles();\n for (File file : files) {\n copy(file, new File(out, file.getName()));\n }\n }\n else {\n FileChannel inCh = new FileInputStream(in).getChannel();\n FileChannel outCh = new FileOutputStream(out).getChannel();\n inCh.transferTo(0, inCh.size(), outCh);\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-936|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n-  \n+  |SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n-   for (int i = 0;\n+   for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-936|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-   IOUtils.copy(in, stream);\n+   IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n-   RequestManager.manageRequest(request, null, true);\n+   RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-937|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n-   int quantity = (Integer) cartInfo[1];\n+   int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n-   ArrayList components = productList.getComponents(product.getId());\n+   ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-937|SpecialSeperatorForDevSet|public void updateShoppingBean(String userId) {\n Connection connection = null;\n PreparedStatement preparedStatement1 = null;\n PreparedStatement preparedStatement2 = null;\n try {\n Class.forName("com.mysql.jdbc.Driver");\n connection = DriverManager.getConnection(this.jdbcURL);\n connection.setAutoCommit(false);\n String preparedQuery = "INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)";\n preparedStatement1 = connection.prepareStatement(preparedQuery);\n Date date = new Date();\n SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n String orderDate = format.format(date);\n Iterator iterator = this.cart.iterator();\n Object[] shoppingInfo = null;\n while (iterator.hasNext()) {\n shoppingInfo = (Object[]) iterator.next();\n ProductBean product = (ProductBean) shoppingInfo[0];\n int quantity = (Integer) shoppingInfo[1];\n preparedStatement1.setString(1, userId);\n preparedStatement1.setInt(2, product.getId());\n preparedStatement1.setInt(3, quantity);\n preparedStatement1.setString(4, orderDate);\n preparedStatement1.setString(5, "confirmed");\n preparedStatement1.executeUpdate();\n }\n Object[] cartInfo = null;\n preparedQuery = "UPDATE components SET quantity=quantity-? WHERE comp_id=?";\n preparedStatement2 = connection.prepareStatement(preparedQuery);\n for (Iterator i = this.cart.iterator();\n i.hasNext();\n ) {\n cartInfo = (Object[]) i.next();\n ProductBean product = (ProductBean) cartInfo[0];\n int quantity = (Integer) cartInfo[1];\n ProductListBean productList = new ProductListBean(jdbcURL);\n ArrayList components = productList.getComponents(product.getId());\n for (Iterator j = components.iterator();\n j.hasNext();\n ) {\n ComponentBean component = (ComponentBean) j.next();\n preparedStatement2.setInt(1, quantity);\n preparedStatement2.setInt(2, component.getId());\n preparedStatement2.executeUpdate();\n }\n }\n connection.commit();\n }\n catch (Exception ex) {\n try {\n connection.rollback();\n-   }\n+   }\n catch (SQLException e) {\n }\n }\n finally {\n try {\n connection.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement1.close();\n }\n catch (SQLException ex) {\n }\n try {\n preparedStatement2.close();\n }\n catch (SQLException ex) {\n }\n }\n }\n|SpecialSeperatorForDevSet|@Override public boolean insert(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {\n filasInsert = 0;\n if (!consulta.contains(";\n")) {\n this.tipoConsulta = new Scanner(consulta);\n if (this.tipoConsulta.hasNext()) {\n execConsulta = this.tipoConsulta.next();\n if (execConsulta.equalsIgnoreCase("insert")) {\n Connection conexion = cx;\n Statement st = null;\n try {\n conexion.setAutoCommit(autocommit);\n if (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {\n conexion.setTransactionIsolation(transactionIsolation);\n }\n else {\n throw new IllegalArgumentException("Valor invalido sobre TransactionIsolation,\n TRANSACTION_NONE no es soportado por MySQL");\n }\n st = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);\n conexion.setReadOnly(false);\n filasInsert = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);\n if (filasInsert > -1) {\n if (autocommit == false) {\n conexion.commit();\n }\n return true;\n }\n else {\n return false;\n }\n-   }\n+   }\n catch (MySQLIntegrityConstraintViolationException e) {\n System.out.println("Posible duplicacion de DATOS");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n catch (MySQLNonTransientConnectionException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n catch (MySQLDataException e) {\n System.out.println("Datos incorrectos");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (MySQLSyntaxErrorException e) {\n System.out.println("Error en la sintaxis de la Consulta en MySQL");\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n return false;\n }\n catch (SQLException e) {\n if (autocommit == false) {\n try {\n conexion.rollback();\n System.out.println("Se ejecuto un Rollback");\n }\n catch (MySQLTransactionRollbackException sqlE) {\n System.out.println("No se ejecuto un Rollback");\n sqlE.printStackTrace();\n }\n catch (SQLException se) {\n se.printStackTrace();\n }\n }\n e.printStackTrace();\n return false;\n }\n finally {\n try {\n if (st != null) {\n if (!st.isClosed()) {\n st.close();\n }\n }\n if (!conexion.isClosed()) {\n conexion.close();\n }\n }\n catch (NullPointerException ne) {\n ne.printStackTrace();\n }\n catch (SQLException e) {\n e.printStackTrace();\n }\n }\n }\n else {\n throw new IllegalArgumentException("No es una instruccion Insert");\n }\n }\n else {\n try {\n throw new JMySQLException("Error Grave , notifique al departamento de Soporte Tecnico \n" + email);\n }\n catch (JMySQLException ex) {\n Logger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);\n return false;\n }\n }\n }\n else {\n throw new IllegalArgumentException("No estan permitidas las MultiConsultas en este metodo");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-938|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n-   if (result == null) return null;\n+   if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n-   encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n+   encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-938|SpecialSeperatorForDevSet|public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n if (!m_sslInitiated) {\n return m_writer.write(byteBuffers);\n }\n if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n if (!NIOUtils.isEmpty(byteBuffers)) {\n m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n byteBuffers = new ByteBuffer[0];\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n ByteBuffer[] buffers = null;\n try {\n SSLEngineResult result = null;\n while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n buffer.clear();\n result = m_engine.wrap(byteBuffers, buffer);\n buffer.flip();\n buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n }\n if (result == null) return null;\n if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());\n reactToHandshakeStatus(result.getHandshakeStatus());\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n return buffers;\n }\n ByteBuffer buffer = SSL_BUFFER.get();\n buffer.clear();\n if (NIOUtils.isEmpty(byteBuffers)) {\n if (m_initialOutBuffer == null) return null;\n }\n else {\n byteBuffers = m_writer.write(byteBuffers);\n }\n if (m_initialOutBuffer != null) {\n-   byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n+   byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n m_initialOutBuffer = null;\n }\n ByteBuffer[] encrypted = null;\n while (!NIOUtils.isEmpty(byteBuffers)) {\n buffer.clear();\n try {\n m_engine.wrap(byteBuffers, buffer);\n }\n catch (SSLException e) {\n throw new RuntimeException(e);\n }\n buffer.flip();\n encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n }\n return encrypted;\n }\n|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n-   else {\n+   else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-939|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n-   ps.setString(num++, portalUserBean.getPhone());\n+   ps.setString(num++, portalUserBean.getPhone());\n ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n ps.setString(num++, portalUserBean.getPhone());\n-   ps.setString(num++, portalUserBean.getEmail());\n+   ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-939|SpecialSeperatorForDevSet|public void updateUser(User portalUserBean, AuthSession authSession) {\n DatabaseAdapter dbDyn = null;\n PreparedStatement ps = null;\n try {\n dbDyn = DatabaseAdapter.getInstance();\n-   String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n+   String sql = "update WM_LIST_USER " + "set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, " + " ADDRESS=?,TELEPHONE=?,EMAIL=? " + "where ID_USER=? and is_deleted=0 and ID_FIRM in ";\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId();\n sql += " (" + idList + ") ";\n break;\n default: sql += "(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)";\n break;\n }\n ps = dbDyn.prepareStatement(sql);\n int num = 1;\n ps.setString(num++, portalUserBean.getFirstName());\n ps.setString(num++, portalUserBean.getMiddleName());\n ps.setString(num++, portalUserBean.getLastName());\n ps.setString(num++, portalUserBean.getAddress());\n ps.setString(num++, portalUserBean.getPhone());\n ps.setString(num++, portalUserBean.getEmail());\n ps.setLong(num++, portalUserBean.getUserId());\n switch(dbDyn.getFamaly()) {\n case DatabaseManager.MYSQL_FAMALY: break;\n default: ps.setString(num++, authSession.getUserLogin());\n break;\n }\n int i1 = ps.executeUpdate();\n if (log.isDebugEnabled()) log.debug("Count of updated record - " + i1);\n dbDyn.commit();\n }\n catch (Exception e) {\n try {\n if (dbDyn != null) {\n dbDyn.rollback();\n }\n }\n catch (Exception e001) {\n }\n String es = "Error update of portal user";\n log.error(es, e);\n throw new IllegalStateException(es, e);\n }\n finally {\n DatabaseManager.close(dbDyn, ps);\n dbDyn = null;\n ps = null;\n }\n }\n|SpecialSeperatorForDevSet|private synchronized void loadDDL() throws IOException {\n try {\n conn.createStatement().executeQuery("SELECT * FROM non_generic_favs").close();\n }\n catch (SQLException e) {\n Statement stmt = null;\n if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n e.printStackTrace(System.out);\n throw new IOException("Error on initial data store read");\n }\n String[] qry = {\n "CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)", "CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" }\n;\n try {\n conn.setAutoCommit(false);\n stmt = conn.createStatement();\n for (String q : qry) stmt.executeUpdate(q);\n conn.commit();\n }\n catch (SQLException e2) {\n try {\n conn.rollback();\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n }\n e2.printStackTrace(new PrintWriter(System.out));\n throw new IOException("Error initializing data store");\n }\n finally {\n if (stmt != null) {\n try {\n stmt.close();\n }\n catch (SQLException e4) {\n e4.printStackTrace(System.out);\n throw new IOException("Unable to cleanup data store resources");\n }\n }\n try {\n conn.setAutoCommit(true);\n }\n catch (SQLException e3) {\n e3.printStackTrace(System.out);\n throw new IOException("Unable to reset data store auto commit");\n }\n }\n }\n-   return;\n+   return;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-940|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n-   if (inChannel != null) inChannel.close();\n+   if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|-  protected void onlyFileCopy(File in, File out) throws IOException {\n+  protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-940|SpecialSeperatorForDevSet|protected void onlyFileCopy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n long size = inChannel.size();\n long pos = 0;\n while (pos < size) {\n pos += inChannel.transferTo(pos, maxCount, outChannel);\n }\n-   }\n+   }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n-   cw.close();\n+   cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-941|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n-   finally {\n+   finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-941|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n if (read == -1) break;\n out.write(buffer, 0, read);\n }\n-   }\n+   }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\n-   FileChannel inputChannel = null;\n+   FileChannel inputChannel = null;\n FileChannel outputChannel = null;\n long length = 0;\n try {\n inputChannel = new FileInputStream(src).getChannel();\n length = inputChannel.size();\n outputChannel = new FileOutputStream(dst).getChannel();\n long total = 0;\n while (total < length) {\n total += inputChannel.transferTo(0, length, outputChannel);\n }\n if (preserveModificationTime) {\n dst.setLastModified(src.lastModified());\n }\n }\n finally {\n if (inputChannel != null) {\n inputChannel.close();\n }\n if (outputChannel != null) {\n outputChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-942|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n-   in.transferTo(0, source.length(), out);\n+   in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|-  public static void copyFile(File source, File target) throws IOException {\n+  public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-942|SpecialSeperatorForDevSet|public static void copyFile(File source, File target) throws IOException {\n FileChannel in = (new FileInputStream(source)).getChannel();\n-   FileChannel out = (new FileOutputStream(target)).getChannel();\n+   FileChannel out = (new FileOutputStream(target)).getChannel();\n in.transferTo(0, source.length(), out);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|-  private void streamContains(String in, InputStream stream) throws IOException {\n+  private void streamContains(String in, InputStream stream) throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(stream, baos);\n byte[] bytes = baos.toByteArray();\n String cmp = new String(bytes, "UTF-8");\n assertTrue(cmp.contains(in));\n baos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-943|SpecialSeperatorForDevSet|public void delete(Site site) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preparedStatement = null;\n ResultSet resultSet = null;\n try {\n String chkSql = "select id from t_ip_doc where channel_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n String[] selfDefinePath = getSelfDefinePath(site.getPath(), "1", connection, preparedStatement, resultSet);\n selfDefineDelete(selfDefinePath, connection, preparedStatement);\n preparedStatement = connection.prepareStatement(chkSql);\n preparedStatement.setString(1, site.getPath());\n resultSet = preparedStatement.executeQuery();\n if (resultSet.next()) {\n throw new Exception("ɾ��ʧ�ܣ�" + site.getName() + "���Ѿ����ĵ����ڣ�");\n }\n else {\n String sqlStr = "delete from t_ip_site where site_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n preparedStatement = connection.prepareStatement(sqlStr);\n preparedStatement.setString(1, site.getPath());\n preparedStatement.executeUpdate();\n }\n connection.commit();\n }\n catch (SQLException ex) {\n-   connection.rollback();\n+   connection.rollback();\n throw ex;\n }\n finally {\n close(resultSet, null, preparedStatement, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|public void delete(Site site) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preparedStatement = null;\n ResultSet resultSet = null;\n try {\n String chkSql = "select id from t_ip_doc where channel_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n String[] selfDefinePath = getSelfDefinePath(site.getPath(), "1", connection, preparedStatement, resultSet);\n selfDefineDelete(selfDefinePath, connection, preparedStatement);\n preparedStatement = connection.prepareStatement(chkSql);\n preparedStatement.setString(1, site.getPath());\n resultSet = preparedStatement.executeQuery();\n if (resultSet.next()) {\n throw new Exception("ɾ��ʧ�ܣ�" + site.getName() + "���Ѿ����ĵ����ڣ�");\n }\n else {\n String sqlStr = "delete from t_ip_site where site_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n preparedStatement = connection.prepareStatement(sqlStr);\n preparedStatement.setString(1, site.getPath());\n preparedStatement.executeUpdate();\n }\n connection.commit();\n-   }\n+   }\n catch (SQLException ex) {\n connection.rollback();\n throw ex;\n }\n finally {\n close(resultSet, null, preparedStatement, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-943|SpecialSeperatorForDevSet|public void delete(Site site) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preparedStatement = null;\n ResultSet resultSet = null;\n try {\n String chkSql = "select id from t_ip_doc where channel_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n String[] selfDefinePath = getSelfDefinePath(site.getPath(), "1", connection, preparedStatement, resultSet);\n selfDefineDelete(selfDefinePath, connection, preparedStatement);\n preparedStatement = connection.prepareStatement(chkSql);\n preparedStatement.setString(1, site.getPath());\n resultSet = preparedStatement.executeQuery();\n if (resultSet.next()) {\n throw new Exception("ɾ��ʧ�ܣ�" + site.getName() + "���Ѿ����ĵ����ڣ�");\n }\n else {\n String sqlStr = "delete from t_ip_site where site_path=?";\n dbo = createDBOperation();\n connection = dbo.getConnection();\n preparedStatement = connection.prepareStatement(sqlStr);\n preparedStatement.setString(1, site.getPath());\n preparedStatement.executeUpdate();\n }\n connection.commit();\n }\n catch (SQLException ex) {\n-   connection.rollback();\n+   connection.rollback();\n throw ex;\n }\n finally {\n close(resultSet, null, preparedStatement, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\n DBOperation dbo = null;\n Connection connection = null;\n PreparedStatement preStm = null;\n String sql = "insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)";\n String cleanSql = "delete from COFFICE_JOBLOG_CHECKAUTH where " + "user_id = '" + userId + "' and check_type = '" + checkType + "' and obj_type = '" + objType + "'";\n try {\n dbo = createDBOperation();\n connection = dbo.getConnection();\n connection.setAutoCommit(false);\n preStm = connection.prepareStatement(cleanSql);\n int dCount = preStm.executeUpdate();\n String sHaveIns = ",";\n preStm = connection.prepareStatement(sql);\n for (int j = 0;\n j < checkId.length;\n j++) {\n if (sHaveIns.indexOf("," + checkId[j] + ",") < 0) {\n preStm.setInt(1, Integer.parseInt(userId));\n preStm.setInt(2, Integer.parseInt(checkId[j]));\n preStm.setInt(3, Integer.parseInt(checkType));\n preStm.setInt(4, Integer.parseInt(objType));\n preStm.executeUpdate();\n sHaveIns += checkId[j] + ",";\n-   }\n+   }\n }\n connection.commit();\n }\n catch (Exception ex) {\n log.debug((new Date().toString()) + " ������Ȩ��ʧ��! ");\n try {\n connection.rollback();\n }\n catch (SQLException e) {\n throw e;\n }\n throw ex;\n }\n finally {\n close(null, null, preStm, connection, dbo);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-944|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n-   try {\n+   try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n-   int read = -1;\n+   int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-944|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n-   }\n+   }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n-   LOG.info("helloWorldPath: " + helloWorldPath);\n+   LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-945|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n-   java.io.InputStream in = null;\n+   java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-945|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n-   exc.printStackTrace();\n+   exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void extractResourceToFile(String resourcePath, File dest) {\n InputStream in = getClass().getResourceAsStream(resourcePath);\n-   try {\n+   try {\n FileOutputStream out = FileUtils.openOutputStream(dest);\n try {\n IOUtils.copy(in, out);\n }\n finally {\n if (out != null) {\n out.close();\n }\n }\n }\n finally {\n if (in != null) {\n in.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-946|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n-   from = new FileInputStream(source).getChannel();\n+   from = new FileInputStream(source).getChannel();\n to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n finally {\n if (from != null) {\n from.close();\n }\n if (to != null) {\n to.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n from = new FileInputStream(source).getChannel();\n to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n finally {\n if (from != null) {\n from.close();\n }\n-   if (to != null) {\n+   if (to != null) {\n to.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-946|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n if (!dest.exists()) {\n dest.createNewFile();\n }\n FileChannel from = null;\n FileChannel to = null;\n try {\n from = new FileInputStream(source).getChannel();\n to = new FileOutputStream(dest).getChannel();\n to.transferFrom(from, 0, from.size());\n }\n-   finally {\n+   finally {\n if (from != null) {\n from.close();\n }\n if (to != null) {\n to.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void runDynusT(final boolean cleanUp) {\n final String[] exeFiles = new String[] {\n "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" }\n;\n final String[] modelFiles = new String[] {\n "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" }\n;\n log.info("Creating iteration-directory...");\n File iterDir = new File(this.tmpDir);\n if (!iterDir.exists()) {\n iterDir.mkdir();\n }\n log.info("Copying application files to iteration-directory...");\n for (String filename : exeFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n-   }\n+   }\n log.info("Copying model files to iteration-directory...");\n for (String filename : modelFiles) {\n log.info(" Copying " + filename);\n IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));\n }\n for (File f : new File(this.modelDir).listFiles()) {\n if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {\n log.info(" Copying " + f.getName());\n IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));\n }\n }\n String logfileName = this.tmpDir + "/dynus-t.log";\n String cmd = this.tmpDir + "/DynusT.exe";\n log.info("running command: " + cmd + " in directory " + this.tmpDir);\n int timeout = 7200;\n int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n if (exitcode != 0) {\n throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);\n }\n if (cleanUp) {\n for (String filename : exeFiles) {\n log.info(" Deleting " + filename);\n new File(this.tmpDir + "/" + filename).delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-947|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n-   try {\n+   try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-947|SpecialSeperatorForDevSet|public static void copyFile(File source, File dest) throws IOException {\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n in.transferTo(0, in.size(), out);\n-   }\n+   }\n catch (FileNotFoundException fnfe) {\n Log.debug(fnfe);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n-   catch (Exception exc) {\n+   catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-948|SpecialSeperatorForDevSet|public static void main(String[] args) {\n if (args.length != 1) {\n System.out.println("Usage: GZip source");\n return;\n }\n String zipname = args[0] + ".gz";\n GZIPOutputStream zipout;\n try {\n FileOutputStream out = new FileOutputStream(zipname);\n zipout = new GZIPOutputStream(out);\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n System.out.println("Couldn't create " + zipname + ".");\n return;\n }\n byte[] buffer = new byte[sChunk];\n try {\n FileInputStream in = new FileInputStream(args[0]);\n int length;\n while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n in.close();\n }\n catch (IOException e) {\n System.out.println("Couldn't compress " + args[0] + ".");\n }\n try {\n zipout.close();\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n if (args.length != 1) {\n System.out.println("Usage: GZip source");\n return;\n }\n String zipname = args[0] + ".gz";\n GZIPOutputStream zipout;\n-   try {\n+   try {\n FileOutputStream out = new FileOutputStream(zipname);\n zipout = new GZIPOutputStream(out);\n }\n catch (IOException e) {\n System.out.println("Couldn't create " + zipname + ".");\n return;\n }\n byte[] buffer = new byte[sChunk];\n try {\n FileInputStream in = new FileInputStream(args[0]);\n int length;\n while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n in.close();\n }\n catch (IOException e) {\n System.out.println("Couldn't compress " + args[0] + ".");\n }\n try {\n zipout.close();\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-948|SpecialSeperatorForDevSet|public static void main(String[] args) {\n-   if (args.length != 1) {\n+   if (args.length != 1) {\n System.out.println("Usage: GZip source");\n return;\n }\n String zipname = args[0] + ".gz";\n GZIPOutputStream zipout;\n try {\n FileOutputStream out = new FileOutputStream(zipname);\n zipout = new GZIPOutputStream(out);\n }\n catch (IOException e) {\n System.out.println("Couldn't create " + zipname + ".");\n return;\n }\n byte[] buffer = new byte[sChunk];\n try {\n FileInputStream in = new FileInputStream(args[0]);\n int length;\n while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n in.close();\n }\n catch (IOException e) {\n System.out.println("Couldn't compress " + args[0] + ".");\n }\n try {\n zipout.close();\n }\n catch (IOException e) {\n }\n }\n|SpecialSeperatorForDevSet|@SuppressWarnings("unchecked") public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n {\n Assert.notNull(configuration);\n Assert.notNull(monitor);\n }\n final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "");\n final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n final IFile pom = prj.getFile("pom.xml");\n if (!pom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 root pom.xml available");\n }\n ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n handleRootProfile(doc);\n }\n }\n);\n final IFile bpom = prj.getFile("business/pom.xml");\n if (!bpom.exists()) {\n throw new IllegalStateException("Not a NexOpen project. Not Maven2 business pom.xml available");\n }\n ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n try {\n handleBusinessProfile(doc, configuration, prj);\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n);\n final ByteArrayOutputStream output = new ByteArrayOutputStream();\n try {\n final Properties props = new Properties();\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n props.setProperty("hibernate.dialect", support.getDialectClass(dialectName));\n props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver"));\n props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>"));\n props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, ""));\n props.store(output, "hibernate properties for code generation using NexOpen Tools 1.0.0");\n final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties");\n if (!props_file.exists()) {\n props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n }\n else {\n props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n }\n }\n catch (final IOException e) {\n Logger.getLog().error("I/O exception ", e);\n throw new RuntimeException(e);\n }\n finally {\n try {\n output.flush();\n output.close();\n }\n catch (IOException e) {\n }\n }\n-   if (NexOpenProjectUtils.is04xProject(prj)) {\n+   if (NexOpenProjectUtils.is04xProject(prj)) {\n final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml");\n if (!appContext.exists()) {\n throw new IllegalStateException("It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project");\n }\n ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n public void processHandle(final Document doc) {\n final Element root = doc.getDocumentElement();\n final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean");\n for (final Element bean : beans) {\n final String id = bean.getAttribute("id");\n if ("valueListAdapterResolver".equals(id)) {\n try {\n final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "");\n final String className = new StringBuilder(pkgName).append(".vlh.support.AnnotationValueListAdapterResolver").toString();\n bean.setAttribute("class", className);\n break;\n }\n catch (final CoreException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n }\n }\n);\n }\n {\n final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB");\n if (support.isReverseEngineeringFileNeeded(dialectName)) {\n try {\n final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName));\n if (!revengFile.exists()) {\n final Bundle bundle = HibernateActivator.getDefault().getBundle();\n final Path src = new Path("resources/" + support.getReversEngineeringFile(dialectName));\n final InputStream in = FileLocator.openStream(bundle, src, false);\n final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n IOUtils.copy(in, baos);\n String str = baos.toString();\n str = str.replace("${\nschema}\n", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa"));\n revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n }\n }\n catch (final IOException e) {\n if (Logger.getLog().isInfoEnabled()) {\n Logger.getLog().info("CoreException", e);\n }\n throw new RuntimeException(e);\n }\n }\n }\n final IResource resource = (IResource) prj.getAdapter(IResource.class);\n final QualifiedName qn = new QualifiedName("org.nexopenframework.ide.eclipse.ui", "default.profile");\n final String profile = resource.getPersistentProperty(qn);\n resource.setPersistentProperty(qn, "reverse-engineering");\n try {\n final InstallProjectAction action = new InstallProjectAction();\n action.scheduleJob(prj, monitor);\n prj.refreshLocal(2, monitor);\n }\n finally {\n prj.setPersistentProperty(qn, profile);\n }\n }\n else {\n Logger.getLog().info("Not a NexOpen project :: " + prj);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-949|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n-   }\n+   }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n-   outStream = new FileOutputStream(destinationFilename);\n+   outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-949|SpecialSeperatorForDevSet|private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n InputStream inStream = null;\n OutputStream outStream = null;\n try {\n inStream = MatsimResource.getAsInputStream(resourceFilename);\n outStream = new FileOutputStream(destinationFilename);\n IOUtils.copyStream(inStream, outStream);\n }\n finally {\n if (inStream != null) {\n try {\n inStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (outStream != null) {\n try {\n-   outStream.close();\n+   outStream.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n if (entry.isDirectory()) {\n createDir(new File(outputDir, entry.getName()));\n return;\n }\n File outputFile = new File(outputDir, entry.getName());\n if (!outputFile.getParentFile().exists()) {\n createDir(outputFile.getParentFile());\n }\n BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n try {\n IOUtils.copy(inputStream, outputStream);\n }\n finally {\n-   outputStream.close();\n+   outputStream.close();\n inputStream.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-950|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n-   return out;\n+   return out;\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|-  static File copy(File in, File out) throws IOException {\n+  static File copy(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-950|SpecialSeperatorForDevSet|static File copy(File in, File out) throws IOException {\n-   FileChannel inChannel = new FileInputStream(in).getChannel();\n+   FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n return out;\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public void createJAR(String fileString, String ext) {\n try {\n File file = new File(fileString);\n int i = fileString.lastIndexOf(java.io.File.separator);\n String dir = fileString.substring(0, i + 1);\n if (ext.matches("jar")) {\n jarFile = new File(getClass().getClassLoader().getResource("jsdviewer.jar").toURI());\n java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n FileChannel out = fstrm.getChannel();\n in.transferTo(0, jarFile.length(), out);\n in.close();\n out.close();\n }\n else {\n file.mkdir();\n }\n File.umount(file);\n File temp = new File(dir + "document.jsd");\n FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n ostrm = new ObjectOutputStream(fstrm2);\n ostrm.writeObject(doc);\n ostrm.flush();\n ostrm.close();\n File.umount();\n File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n-   File.cp_p(temp, docFile);\n+   File.cp_p(temp, docFile);\n File.umount();\n temp.delete();\n File.umount(file);\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-951|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n-   }\n+   }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n-   }\n+   }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-951|SpecialSeperatorForDevSet|public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n try {\n if (charset == null) {\n charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n }\n if ((body == null) || body.trim().equals("")) {\n body = " ";\n }\n Email email = null;\n if (isHtml) {\n email = new HtmlEmail();\n }\n else {\n email = new MultiPartEmail();\n }\n email.setCharset(charset);\n Users user = getUser(hsession, repositoryName);\n Identity identity = getIdentity(hsession, ideIdint, user);\n InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n if (_from != null) {\n email.setFrom(_from.getAddress(), _from.getPersonal());\n }\n if (_returnPath != null) {\n email.addHeader("Return-Path", _returnPath.getAddress());\n email.addHeader("Errors-To", _returnPath.getAddress());\n email.addHeader("X-Errors-To", _returnPath.getAddress());\n }\n if (_replyTo != null) {\n email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n }\n if ((_to != null) && (_to.length > 0)) {\n HashSet aux = new HashSet(_to.length);\n Collections.addAll(aux, _to);\n email.setTo(aux);\n }\n if ((_cc != null) && (_cc.length > 0)) {\n HashSet aux = new HashSet(_cc.length);\n Collections.addAll(aux, _cc);\n email.setCc(aux);\n }\n if ((_bcc != null) && (_bcc.length > 0)) {\n HashSet aux = new HashSet(_bcc.length);\n Collections.addAll(aux, _bcc);\n email.setBcc(aux);\n }\n email.setSubject(subject);\n Date now = new Date();\n email.setSentDate(now);\n File dir = new File(System.getProperty("user.home") + File.separator + "tmp");\n if (!dir.exists()) {\n dir.mkdir();\n }\n if ((attachments != null) && (attachments.size() > 0)) {\n for (int i = 0;\n i < attachments.size();\n i++) {\n ByteArrayInputStream bais = null;\n FileOutputStream fos = null;\n try {\n MailPartObj obj = (MailPartObj) attachments.get(i);\n File file = new File(dir, obj.getName());\n bais = new ByteArrayInputStream(obj.getAttachent());\n fos = new FileOutputStream(file);\n IOUtils.copy(bais, fos);\n EmailAttachment attachment = new EmailAttachment();\n attachment.setPath(file.getPath());\n attachment.setDisposition(EmailAttachment.ATTACHMENT);\n attachment.setDescription("File Attachment: " + file.getName());\n attachment.setName(file.getName());\n if (email instanceof MultiPartEmail) {\n ((MultiPartEmail) email).attach(attachment);\n }\n }\n catch (Exception ex) {\n }\n finally {\n IOUtils.closeQuietly(bais);\n IOUtils.closeQuietly(fos);\n }\n }\n }\n String mid = getId();\n-   if (headers != null) {\n+   if (headers != null) {\n Header xheader;\n Enumeration xe = headers.getAllHeaders();\n for (;\n xe.hasMoreElements();\n ) {\n xheader = (Header) xe.nextElement();\n if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n email.addHeader(xheader.getName(), xheader.getValue());\n }\n }\n }\n else {\n email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");\n }\n if (priority != null) {\n if (priority.equals("high")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "1");\n }\n else if (priority.equals("low")) {\n email.addHeader("Importance", priority);\n email.addHeader("X-priority", "5");\n }\n }\n if (email instanceof HtmlEmail) {\n ((HtmlEmail) email).setHtmlMsg(body);\n }\n else {\n email.setMsg(body);\n }\n email.setMailSession(session);\n email.buildMimeMessage();\n MimeMessage mime = email.getMimeMessage();\n int size = MessageUtilities.getMessageSize(mime);\n if (!controlQuota(hsession, user, size)) {\n throw new MailException("ErrorMessages.mail.quota.exceded");\n }\n messageable.saveSentMessage(mid, mime, user);\n Thread thread = new Thread(new SendMessageThread(email));\n thread.start();\n }\n catch (MailException e) {\n throw e;\n }\n catch (Exception e) {\n throw new MailException(e);\n }\n catch (java.lang.OutOfMemoryError ex) {\n System.gc();\n throw new MailException(ex);\n }\n catch (Throwable e) {\n throw new MailException(e);\n }\n finally {\n GeneralOperations.closeHibernateSession(hsession);\n }\n }\n|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n-   FileChannel fic = fis.getChannel();\n+   FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-952|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n-   ZipOutputStream zos = null;\n+   ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n while ((readed = fis.read(buffer)) != -1) {\n-   zos.write(buffer, 0, readed);\n+   zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-952|SpecialSeperatorForDevSet|protected void truncate(final File file) {\n LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.");\n if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n final File backupRoot = new File(this.getBackupDir());\n if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n throw new AppenderInitializationError("Can't create backup dir for backup storage");\n }\n SimpleDateFormat df;\n try {\n df = new SimpleDateFormat(this.getBackupDateFormat());\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Invalid date formate for backup files: " + this.getBackupDateFormat(), e);\n }\n final String date = df.format(new Date(file.lastModified()));\n final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip");\n ZipOutputStream zos = null;\n FileInputStream fis = null;\n try {\n zos = new ZipOutputStream(new FileOutputStream(zipFile));\n final ZipEntry entry = new ZipEntry(file.getName());\n entry.setMethod(ZipEntry.DEFLATED);\n entry.setCrc(FileUtils.checksumCRC32(file));\n zos.putNextEntry(entry);\n fis = FileUtils.openInputStream(file);\n final byte[] buffer = new byte[1024];\n int readed;\n-   while ((readed = fis.read(buffer)) != -1) {\n+   while ((readed = fis.read(buffer)) != -1) {\n zos.write(buffer, 0, readed);\n }\n }\n catch (final Exception e) {\n throw new AppenderInitializationError("Can't create zip file", e);\n }\n finally {\n if (zos != null) {\n try {\n zos.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zip file", e);\n }\n }\n if (fis != null) {\n try {\n fis.close();\n }\n catch (final IOException e) {\n LogLog.warn("Can't close zipped file", e);\n }\n }\n }\n if (!file.delete()) {\n throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath());\n }\n }\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n-   out.write(buffer, 0, read);\n+   out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-953|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n-   PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n+   PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-953|SpecialSeperatorForDevSet|public static void main(String[] args) {\n System.out.println("Chapter 16: example SignedPdf");\n System.out.println("-> Creates a signed PDF;\n");\n System.out.println("-> jars needed: iText.jar");\n System.out.println("-> files generated in /results subdirectory:");\n System.out.println(" Resource needed: .keystore");\n System.out.println("-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,");\n System.out.println(" corrupted_message.pdf, signed_message_invisible.pdf,");\n System.out.println(" double_signed_message.pdf, revision_1.pdf and revision_2.pdf");\n createPdf();\n PdfReader reader;\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n stamper.close();\n }\n catch (KeyStoreException e) {\n e.printStackTrace();\n }\n catch (NoSuchAlgorithmException e) {\n e.printStackTrace();\n }\n catch (CertificateException e) {\n e.printStackTrace();\n }\n catch (FileNotFoundException e) {\n e.printStackTrace();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n catch (UnrecoverableKeyException e) {\n e.printStackTrace();\n }\n catch (DocumentException e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n Document document = new Document(reader.getPageSizeWithRotation(1));\n PdfCopy copy = new PdfCopy(document, new FileOutputStream("results/in_action/chapter16/corrupted_message.pdf"));\n document.open();\n copy.addPage(copy.getImportedPage(reader, 1));\n document.close();\n }\n catch (IOException ioe) {\n ioe.printStackTrace();\n }\n catch (DocumentException de) {\n de.printStackTrace();\n }\n try {\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n reader = new PdfReader("results/in_action/chapter16/unsigned_message.pdf");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/signed_message_invisible.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("It's personal.");\n appearance.setLocation("Foobar");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n reader = new PdfReader("results/in_action/chapter16/signed_message.pdf");\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(new FileInputStream("resources/in_action/chapter16/.keystore"), "f00b4r".toCharArray());\n PrivateKey key = (PrivateKey) ks.getKey("foobar", "r4b00f".toCharArray());\n Certificate[] chain = ks.getCertificateChain("foobar");\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/double_signed_message.pdf");\n PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);\n PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n appearance.setReason("Double signed.");\n appearance.setLocation("Foobar");\n appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, "secondsig");\n stamper.close();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n try {\n CertificateFactory cf = CertificateFactory.getInstance("X509");\n Collection col = cf.generateCertificates(new FileInputStream("resources/in_action/chapter16/foobar.cer"));\n KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n ks.load(null, null);\n for (Iterator it = col.iterator();\n it.hasNext();\n ) {\n X509Certificate cert = (X509Certificate) it.next();\n System.out.println(cert.getIssuerDN().getName());\n ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n }\n reader = new PdfReader("results/in_action/chapter16/double_signed_message.pdf");\n AcroFields af = reader.getAcroFields();\n ArrayList names = af.getSignatureNames();\n String name;\n for (Iterator it = names.iterator();\n it.hasNext();\n ) {\n name = (String) it.next();\n System.out.println("Signature name: " + name);\n System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));\n System.out.println("Document revision: " + af.getRevision(name) + " of " + af.getTotalRevisions());\n FileOutputStream os = new FileOutputStream("results/in_action/chapter16/revision_" + af.getRevision(name) + ".pdf");\n byte bb[] = new byte[8192];\n InputStream ip = af.extractRevision(name);\n int n = 0;\n while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n os.close();\n ip.close();\n PdfPKCS7 pk = af.verifySignature(name);\n Calendar cal = pk.getSignDate();\n Certificate pkc[] = pk.getCertificates();\n System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n System.out.println("Document modified: " + !pk.verify());\n Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n if (fails == null) System.out.println("Certificates verified against the KeyStore");\n else System.out.println("Certificate failed: " + fails[1]);\n }\n-   }\n+   }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public DataRecord addRecord(InputStream input) throws DataStoreException {\n File temporary = null;\n try {\n temporary = newTemporaryFile();\n-   DataIdentifier tempId = new DataIdentifier(temporary.getName());\n+   DataIdentifier tempId = new DataIdentifier(temporary.getName());\n usesIdentifier(tempId);\n long length = 0;\n MessageDigest digest = MessageDigest.getInstance(DIGEST);\n OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n try {\n length = IOUtils.copyLarge(input, output);\n }\n finally {\n output.close();\n }\n DataIdentifier identifier = new DataIdentifier(digest.digest());\n File file;\n synchronized (this) {\n usesIdentifier(identifier);\n file = getFile(identifier);\n if (!file.exists()) {\n File parent = file.getParentFile();\n parent.mkdirs();\n if (temporary.renameTo(file)) {\n temporary = null;\n }\n else {\n throw new IOException("Can not rename " + temporary.getAbsolutePath() + " to " + file.getAbsolutePath() + " (media read only?)");\n }\n }\n else {\n long now = System.currentTimeMillis();\n if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n }\n }\n if (file.length() != length) {\n if (!file.isFile()) {\n throw new IOException("Not a file: " + file);\n }\n throw new IOException(DIGEST + " collision: " + file);\n }\n }\n inUse.remove(tempId);\n return new FileDataRecord(identifier, file);\n }\n catch (NoSuchAlgorithmException e) {\n throw new DataStoreException(DIGEST + " not available", e);\n }\n catch (IOException e) {\n throw new DataStoreException("Could not add record", e);\n }\n finally {\n if (temporary != null) {\n temporary.delete();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-954|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n-   if (returnVal == JFileChooser.APPROVE_OPTION) {\n+   if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n-   String fileName = file.getPath();\n+   String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-954|SpecialSeperatorForDevSet|private DialogHelper(String title, final URL imageURL) {\n jd = new JDialog();\n jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n jd.setAlwaysOnTop(true);\n jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n jd.setTitle(title);\n JLabel jl = new JLabel();\n ImageIcon icon = new ImageIcon(imageURL);\n-   jl.setIcon(icon);\n+   jl.setIcon(icon);\n jd.add(new JScrollPane(jl));\n final JFileChooser chooser = getSaveImageChooser();\n JPanel jp = new JPanel();\n JButton jb = new JButton(getMessage("btn_save_as"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n int returnVal = chooser.showSaveDialog(jd);\n if (returnVal == JFileChooser.APPROVE_OPTION) {\n File file = chooser.getSelectedFile();\n String fileName = file.getPath();\n String ext = StringUtil.getLowerExtension(fileName);\n if (!"png".equals(ext)) {\n fileName += ".png";\n file = new File(fileName);\n }\n boolean doIt = true;\n if (file.exists()) {\n int i = JOptionPane.showConfirmDialog(jd, getMessage("warn_file_exist"));\n if (i != JOptionPane.YES_OPTION) doIt = false;\n }\n else if (!file.getParentFile().exists()) {\n doIt = file.getParentFile().mkdirs();\n }\n if (doIt) {\n FileChannel src = null;\n FileChannel dest = null;\n try {\n src = new FileInputStream(imageURL.getPath()).getChannel();\n dest = new FileOutputStream(fileName).getChannel();\n src.transferTo(0, src.size(), dest);\n }\n catch (FileNotFoundException e1) {\n warn(jd, getMessage("err_no_source_file"));\n }\n catch (IOException e2) {\n warn(jd, getMessage("err_output_target"));\n }\n finally {\n try {\n if (src != null) src.close();\n }\n catch (IOException e1) {\n }\n try {\n if (dest != null) dest.close();\n }\n catch (IOException e1) {\n }\n src = null;\n dest = null;\n }\n }\n }\n }\n }\n);\n jp.add(jb);\n jb = new JButton(getMessage("btn_close"));\n jb.addActionListener(new ActionListener() {\n public void actionPerformed(ActionEvent e) {\n jd.dispose();\n }\n }\n);\n jp.add(jb);\n jd.add(jp);\n jd.pack();\n setCentral(jd);\n }\n|SpecialSeperatorForDevSet|public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n String selectedPage = request.getParameter("SelectedPage");\n Page page = null;\n PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n if (selectedPage == null) {\n try {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n }\n catch (PersistentModelException e) {\n myLogger.info("Page could not be found due to an exception");\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n myLogger.info("Handling Page Request for Page " + selectedPage);\n try {\n if (page == null) {\n try {\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n catch (NumberFormatException e) {\n List<Page> possiblePage = Page.findByName(selectedPage);\n if (possiblePage.size() > 0) {\n page = possiblePage.get(0);\n }\n else {\n response.sendError(response.SC_NOT_FOUND);\n return;\n }\n }\n }\n if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n Property pageProp = Property.getProperty("HomePage");\n selectedPage = pageProp.getValue();\n page = Page.getPage(Long.parseLong(selectedPage));\n }\n try {\n Property property = Property.getProperty("LogPageRequests");\n if (property.getValue().toLowerCase().equals("true")) {\n String referer = request.getHeader("Referer");\n if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n referer = " ";\n }\n else {\n if (referer.length() >= 200) {\n referer = referer.substring(0, 198);\n }\n }\n PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "Log Page Requests property was not found.", e);\n }\n if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n HttpSession session = request.getSession();\n if (session != null) {\n-   RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n+   RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute("ipoint.RecentlyViewedManager");\n if (rvm == null) {\n rvm = new RecentlyViewedManager();\n }\n rvm.add(page);\n session.setAttribute("ipoint.RecentlyViewedManager", rvm);\n }\n PageCacheEntry entry = null;\n if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n try {\n int pageCacheTime = 60000;\n try {\n Property pageCacheTimeProperty = Property.getProperty("PageCacheTime");\n pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n pageCacheTime *= 1000;\n }\n catch (PersistentModelException pme) {\n myLogger.warning("Ignoring Exception when retrieving PageCacheTime property");\n }\n catch (NumberFormatException nfe) {\n }\n entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.WARNING, "An error occurred finding a page cache entry", e);\n }\n }\n response.setContentType("text/html");\n response.setHeader("Cache-Control", "no-cache");\n boolean processed = false;\n if (entry != null) {\n String tempFile = entry.getTempFile();\n File file = new File(tempFile);\n if (file.exists() && file.isFile() && file.canRead()) {\n FileReader reader = new FileReader(file);\n BufferedReader br = new BufferedReader(reader);\n PrintWriter out = response.getWriter();\n out.write("<!-- Starting to output cached page in " + portalRequest.elapsedTime() + " ms -->\n");\n while (br.ready()) {\n out.write(br.readLine() + "\n");\n }\n out.write("<!-- Cached output produced in " + portalRequest.elapsedTime() + " ms -->\n");\n reader.close();\n processed = true;\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), portalRequest.elapsedTime(), true);\n }\n else {\n entry.delete();\n }\n }\n if (!processed) {\n PrintWriter out = response.getWriter();\n out.write("<!-- Output produced by iPoint Portal -->\n");\n PageRenderer renderer = new PageRenderer(page);\n long startTime = System.currentTimeMillis();\n request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n request.setAttribute(ELConstants.IPOINT_PAGE, page);\n request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n renderer.preProcess();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n long renderStart = System.currentTimeMillis();\n renderer.render();\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + "-" + page.getID(), System.currentTimeMillis() - renderStart, false);\n portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + "-" + page.getID(), System.currentTimeMillis() - startTime, false);\n out.write("<!-- output produced in " + PortalRequest.getCurrentRequest().elapsedTime() + " ms -->\n");\n if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n if (response instanceof CachingResponseWrapper) {\n CachingResponseWrapper crw = (CachingResponseWrapper) response;\n crw.flushBuffer();\n Property tempProperty = Property.getProperty("UploadLocation");\n File tempDirectory = new File(tempProperty.getValue());\n if (tempDirectory.exists() && tempDirectory.canWrite()) {\n File file = File.createTempFile("iPointPage", ".html", tempDirectory);\n try {\n FileWriter fw = new FileWriter(file);\n fw.write(crw.getOutput());\n fw.flush();\n fw.close();\n PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n }\n catch (IOException e) {\n }\n }\n else {\n myLogger.warning("Can not write to directory " + tempProperty.getValue());\n }\n }\n }\n }\n }\n else {\n myLogger.info("Current User is Forbidden from seeing this Page");\n response.sendError(response.SC_FORBIDDEN);\n }\n }\n catch (PersistentModelException e) {\n myLogger.log(Level.INFO, "Unable to find page " + selectedPage, e);\n response.sendError(response.SC_NOT_FOUND);\n }\n catch (PresentationException pe) {\n pe.printStackTrace();\n throw new ServletException("Error processing the page", pe);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-955|SpecialSeperatorForDevSet|-  public static void main(String[] args) {\n+  public static void main(String[] args) {\n File srcDir = new File(args[0]);\n File dstDir = new File(args[1]);\n File[] srcFiles = srcDir.listFiles();\n for (File f : srcFiles) {\n if (f.isDirectory()) continue;\n try {\n FileChannel srcChannel = new FileInputStream(f).getChannel();\n FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty("file.separator") + f.getName()).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(1024);\n int nr = 0;\n srcChannel.position(nr);\n nr += srcChannel.read(buffer);\n while (nr < f.length()) {\n buffer.flip();\n dstChannel.write(buffer);\n buffer.clear();\n nr += srcChannel.read(buffer);\n }\n srcChannel.close();\n dstChannel.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void main(String[] args) {\n File srcDir = new File(args[0]);\n File dstDir = new File(args[1]);\n File[] srcFiles = srcDir.listFiles();\n for (File f : srcFiles) {\n if (f.isDirectory()) continue;\n try {\n FileChannel srcChannel = new FileInputStream(f).getChannel();\n-   FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty("file.separator") + f.getName()).getChannel();\n+   FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty("file.separator") + f.getName()).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(1024);\n int nr = 0;\n srcChannel.position(nr);\n nr += srcChannel.read(buffer);\n while (nr < f.length()) {\n buffer.flip();\n dstChannel.write(buffer);\n buffer.clear();\n nr += srcChannel.read(buffer);\n }\n srcChannel.close();\n dstChannel.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-955|SpecialSeperatorForDevSet|public static void main(String[] args) {\n File srcDir = new File(args[0]);\n File dstDir = new File(args[1]);\n File[] srcFiles = srcDir.listFiles();\n for (File f : srcFiles) {\n if (f.isDirectory()) continue;\n try {\n FileChannel srcChannel = new FileInputStream(f).getChannel();\n FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty("file.separator") + f.getName()).getChannel();\n ByteBuffer buffer = ByteBuffer.allocate(1024);\n int nr = 0;\n srcChannel.position(nr);\n nr += srcChannel.read(buffer);\n while (nr < f.length()) {\n buffer.flip();\n dstChannel.write(buffer);\n-   buffer.clear();\n+   buffer.clear();\n nr += srcChannel.read(buffer);\n }\n srcChannel.close();\n dstChannel.close();\n }\n catch (IOException e) {\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(String fromFile, String toFile) throws IOException {\n File inputFile = new File(fromFile);\n File outputFile = new File(toFile);\n FileReader in = new FileReader(inputFile);\n FileWriter out = new FileWriter(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n-   in.close();\n+   in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-956|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n-  \n+  |SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-956|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n-   while (bread != -1) {\n+   while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n File file = new File(path);\n if (file.exists()) {\n FileInputStream in = new FileInputStream(file);\n-   IOUtils.copyLarge(in, response.getOutputStream());\n+   IOUtils.copyLarge(in, response.getOutputStream());\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-957|SpecialSeperatorForDevSet|public void execute() {\n try {\n if (methods == null) {\n return;\n }\n List<Resource> resources = new ArrayList<Resource>();\n for (Iterator<Resource> i = classFiles.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n if (!classFile.getName().equals(CALLSTACK_FILE)) {\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n reader.accept(new MethodAnalyzer(), 0);\n resources.add(classFile);\n oldSize += classFile.getSize();\n }\n catch (IllegalStateException e) {\n }\n }\n }\n for (Iterator<Resource> i = resources.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\n-   reader.accept(new MethodInjector(writer), 0);\n+   reader.accept(new MethodInjector(writer), 0);\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = classFile.getOutputStream();\n outputStream.write(b);\n outputStream.close();\n injectedClasses++;\n }\n }\n catch (IllegalStateException e) {\n }\n newSize += classFile.getSize();\n }\n File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\n if (!classFile.exists()) {\n throw new BuildException("Missing net.yura.mobile.logging.CallStack class");\n }\n InputStream inputStream = new FileInputStream(classFile);\n ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n try {\n reader.accept(new PushMethodGenerator(writer), 0);\n }\n finally {\n inputStream.close();\n }\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = new FileOutputStream(classFile);\n outputStream.write(b);\n outputStream.close();\n log(injectedClasses + " classes injected");\n log((injectedMethods * 100) / Math.max(1, totalMethods) + "% of methods injected");\n log((100 - ((oldSize * 100) / newSize)) + "% code size increase");\n }\n catch (IOException e) {\n log(e, 0);\n }\n }\n|SpecialSeperatorForDevSet|public void execute() {\n try {\n if (methods == null) {\n return;\n }\n List<Resource> resources = new ArrayList<Resource>();\n for (Iterator<Resource> i = classFiles.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n if (!classFile.getName().equals(CALLSTACK_FILE)) {\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n reader.accept(new MethodAnalyzer(), 0);\n resources.add(classFile);\n oldSize += classFile.getSize();\n }\n catch (IllegalStateException e) {\n }\n }\n }\n for (Iterator<Resource> i = resources.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\n reader.accept(new MethodInjector(writer), 0);\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = classFile.getOutputStream();\n outputStream.write(b);\n outputStream.close();\n injectedClasses++;\n }\n }\n catch (IllegalStateException e) {\n }\n newSize += classFile.getSize();\n }\n File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\n if (!classFile.exists()) {\n throw new BuildException("Missing net.yura.mobile.logging.CallStack class");\n }\n InputStream inputStream = new FileInputStream(classFile);\n-   ClassReader reader = new ClassReader(inputStream);\n+   ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n try {\n reader.accept(new PushMethodGenerator(writer), 0);\n }\n finally {\n inputStream.close();\n }\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = new FileOutputStream(classFile);\n outputStream.write(b);\n outputStream.close();\n log(injectedClasses + " classes injected");\n log((injectedMethods * 100) / Math.max(1, totalMethods) + "% of methods injected");\n log((100 - ((oldSize * 100) / newSize)) + "% code size increase");\n }\n catch (IOException e) {\n log(e, 0);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-957|SpecialSeperatorForDevSet|public void execute() {\n try {\n if (methods == null) {\n return;\n }\n List<Resource> resources = new ArrayList<Resource>();\n for (Iterator<Resource> i = classFiles.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n if (!classFile.getName().equals(CALLSTACK_FILE)) {\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n reader.accept(new MethodAnalyzer(), 0);\n resources.add(classFile);\n oldSize += classFile.getSize();\n }\n-   catch (IllegalStateException e) {\n+   catch (IllegalStateException e) {\n }\n }\n }\n for (Iterator<Resource> i = resources.iterator();\n i.hasNext();\n ) {\n final Resource classFile = i.next();\n try {\n InputStream inputStream = classFile.getInputStream();\n ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\n reader.accept(new MethodInjector(writer), 0);\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = classFile.getOutputStream();\n outputStream.write(b);\n outputStream.close();\n injectedClasses++;\n }\n }\n catch (IllegalStateException e) {\n }\n newSize += classFile.getSize();\n }\n File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\n if (!classFile.exists()) {\n throw new BuildException("Missing net.yura.mobile.logging.CallStack class");\n }\n InputStream inputStream = new FileInputStream(classFile);\n ClassReader reader = new ClassReader(inputStream);\n ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n try {\n reader.accept(new PushMethodGenerator(writer), 0);\n }\n finally {\n inputStream.close();\n }\n byte[] b = writer.toByteArray();\n inputStream.close();\n OutputStream outputStream = new FileOutputStream(classFile);\n outputStream.write(b);\n outputStream.close();\n log(injectedClasses + " classes injected");\n log((injectedMethods * 100) / Math.max(1, totalMethods) + "% of methods injected");\n log((100 - ((oldSize * 100) / newSize)) + "% code size increase");\n }\n catch (IOException e) {\n log(e, 0);\n }\n }\n|SpecialSeperatorForDevSet|private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\n if (fSource.getName().equals("Thums.db")) return;\n System.out.println("copying " + fSource + " in " + file);\n OutputStream o = new BufferedOutputStream(new FileOutputStream(file));\n-   InputStream i = new BufferedInputStream(new FileInputStream(fSource));\n+   InputStream i = new BufferedInputStream(new FileInputStream(fSource));\n byte[] b = new byte[8192];\n int n;\n while ((n = i.read(b)) > 0) o.write(b, 0, n);\n i.close();\n o.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-958|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n-   bytes = hasher.digest();\n+   bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n-   location = tokenizer.nextToken();\n+   location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-958|SpecialSeperatorForDevSet|public Song(String s) {\n StringTokenizer tokenizer = new StringTokenizer(s, ";\n");\n free = false;\n-   title = tokenizer.nextToken();\n+   title = tokenizer.nextToken();\n artist = tokenizer.nextToken();\n location = tokenizer.nextToken();\n rating = Integer.parseInt(tokenizer.nextToken());\n overplay = Integer.parseInt(tokenizer.nextToken());\n String temp = tokenizer.nextToken();\n tokenizer = new StringTokenizer(temp, ",[] ");\n tags = new ArrayList<String>();\n while (tokenizer.hasMoreTokens()) {\n tags.add(tokenizer.nextToken());\n }\n byte[] bytes = new byte[40];\n try {\n MessageDigest hasher = MessageDigest.getInstance("SHA-1");\n hasher.update(title.getBytes());\n hasher.update(artist.getBytes());\n bytes = hasher.digest();\n }\n catch (Exception e) {\n System.out.println(e);\n }\n }\n|SpecialSeperatorForDevSet|public static String encrypt(final String pass) {\n try {\n final MessageDigest md = MessageDigest.getInstance("SHA");\n-   md.update(pass.getBytes("UTF-8"));\n+   md.update(pass.getBytes("UTF-8"));\n return new String(Base64.encodeBase64(md.digest()));\n }\n catch (final Exception e) {\n throw new RuntimeException("No se pudo encriptar el password.", e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-959|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n-   if (out != null) {\n+   if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n-   final InputStream in = FileLocator.openStream(getBundle(), src, false);\n+   final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-959|SpecialSeperatorForDevSet|protected void createSettingsIfNecessary() throws IOException {\n OutputStream out = null;\n try {\n final File fSettings = SettingsUtils.getSettingsFile();\n if (!fSettings.exists()) {\n fSettings.createNewFile();\n final Path src = new Path("mvn/settings.xml");\n final InputStream in = FileLocator.openStream(getBundle(), src, false);\n out = new FileOutputStream(SettingsUtils.getSettings(), true);\n IOUtils.copy(in, out);\n }\n else {\n Logger.getLog().info("File settings.xml already exists at " + fSettings);\n }\n }\n finally {\n if (out != null) {\n out.flush();\n out.close();\n }\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|@Override public void actionPerformed(ActionEvent e) {\n try {\n Pattern delim = Pattern.compile("[ ]");\n BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));\n String line = null;\n URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");\n URLConnection conn = url.openConnection();\n conn.setDoOutput(true);\n OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n-   wr.write("db=snp&retmode=xml");\n+   wr.write("db=snp&retmode=xml");\n while ((line = r.readLine()) != null) {\n String tokens[] = delim.split(line, 2);\n if (!tokens[0].startsWith("rs")) continue;\n wr.write("&id=" + tokens[0].substring(2).trim());\n }\n wr.flush();\n r.close();\n InputStream in = conn.getInputStream();\n IOUtils.copyTo(in, System.err);\n in.close();\n wr.close();\n }\n catch (IOException err) {\n err.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-960|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n-   throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n+   throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n-   }\n+   }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-960|SpecialSeperatorForDevSet|public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n System.out.print("Processing with " + tpl);\n String destinationPath;\n switch(tpl.destination) {\n case target: if (tpl.path == null) {\n destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET;\n }\n else {\n destinationPath = where.buildDir;\n }\n break;\n case source: if (tpl.path == null) {\n destinationPath = where.sourceDir;\n }\n else {\n destinationPath = "src";\n }\n break;\n case redora: destinationPath = where.redoraDir;\n break;\n default: throw new IllegalArgumentException("Unused destination " + tpl.destination);\n }\n if (tpl.path == null) {\n if (tpl.destination == Destination.redora) destinationPath += separator + artifact;\n else destinationPath += separator + packageName.replace('.', separatorChar);\n }\n else {\n destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);\n }\n System.out.println(" to " + destinationPath + "..." + outFileName);\n if (tpl.destination == Destination.source) {\n if (new File(destinationPath, outFileName).exists()) {\n System.out.println("Stub " + outFileName + " already exists.");\n return;\n }\n }\n new File(destinationPath).mkdirs();\n InputStream in = null;\n Writer out;\n try {\n out = new FileWriter(new File(destinationPath, outFileName));\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find: " + destinationPath + separatorChar + outFileName, e);\n }\n switch(tpl.type) {\n case freemarker: Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n root.put("doc", NodeModel.wrap(model));\n try {\n freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n template.process(root, out);\n }\n catch (ParseException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (IOException e) {\n throw new ModelGenerationException("Can't find '" + tpl + "' when generating " + outFileName, e);\n }\n catch (TemplateException e) {\n throw new ModelGenerationException("There is an error in template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n catch (RuntimeException e) {\n throw new ModelGenerationException("There is another error while trying this template: " + tpl + ". I found it when generating " + outFileName, e);\n }\n break;\n case xslt: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n xsltTransform(model.getFirstChild(), in, out, xsltParam);\n }\n catch (FileNotFoundException e) {\n throw new ModelGenerationException("Can't find " + tpl, e);\n }\n catch (TransformerException e) {\n-   throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n+   throw new ModelGenerationException("Sorry, i failed to use this template: " + tpl + ". It broke when generating " + outFileName, e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n break;\n case copy: try {\n in = new FileInputStream(tpl.getAbsolutePath());\n IOUtils.copy(in, out);\n }\n catch (IOException e) {\n throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e);\n }\n finally {\n IOUtils.closeQuietly(in);\n }\n }\n IOUtils.closeQuietly(out);\n }\n|SpecialSeperatorForDevSet|@Override public void trainClassifier(File dir, String... args) throws Exception {\n String[] command = new String[args.length + 3];\n command[0] = this.getCommand();\n System.arraycopy(args, 0, command, 1, args.length);\n command[command.length - 2] = new File(dir, "training-data.libsvm").getPath();\n command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n Process process = Runtime.getRuntime().exec(command);\n IOUtils.copy(process.getInputStream(), System.out);\n IOUtils.copy(process.getErrorStream(), System.err);\n-   process.waitFor();\n+   process.waitFor();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-961|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n-   try {\n+   try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|-  private String encode(String plaintext) {\n+  private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-961|SpecialSeperatorForDevSet|private String encode(String plaintext) {\n try {\n MessageDigest md = MessageDigest.getInstance("SHA");\n-   md.update(plaintext.getBytes("UTF-8"));\n+   md.update(plaintext.getBytes("UTF-8"));\n byte raw[] = md.digest();\n return (new BASE64Encoder()).encode(raw);\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n catch (UnsupportedEncodingException e) {\n throw new IllegalStateException("Error encoding: " + e);\n }\n }\n|SpecialSeperatorForDevSet|public static String getUniqueKey() {\n String digest = "";\n try {\n final MessageDigest md = MessageDigest.getInstance("MD5");\n final String timeVal = "" + (System.currentTimeMillis() + 1);\n String localHost = "";\n try {\n localHost = InetAddress.getLocalHost().toString();\n }\n catch (UnknownHostException e) {\n println("Warn: getUniqueKey(), Error trying to get localhost" + e.getMessage());\n }\n final String randVal = "" + new Random().nextInt();\n final String val = timeVal + localHost + randVal;\n md.reset();\n md.update(val.getBytes());\n digest = toHexString(md.digest());\n }\n catch (NoSuchAlgorithmException e) {\n println("Warn: getUniqueKey() " + e);\n }\n return digest;\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-962|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n-   System.out.println(buff.asCharBuffer());\n+   System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-962|SpecialSeperatorForDevSet|public static void main(String[] args) throws Exception {\n FileChannel fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes()));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n buff.rewind();\n String encoding = System.getProperty("file.encoding");\n System.out.println("Decoded using " + encoding + ": " + Charset.forName(encoding).decode(buff));\n fc = new FileOutputStream("data2.txt").getChannel();\n fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));\n fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n fc = new FileOutputStream("data2.txt").getChannel();\n buff = ByteBuffer.allocate(24);\n buff.asCharBuffer().put("Some text");\n fc.write(buff);\n-   fc.close();\n+   fc.close();\n fc = new FileInputStream("data2.txt").getChannel();\n buff.clear();\n fc.read(buff);\n buff.flip();\n System.out.println(buff.asCharBuffer());\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File srcFile, File destFile) throws IOException {\n InputStream src = new FileInputStream(srcFile);\n OutputStream dest = new FileOutputStream(destFile);\n byte buffer[] = new byte[1024];\n int read = 1;\n while (read > 0) {\n read = src.read(buffer);\n if (read > 0) {\n dest.write(buffer, 0, read);\n-   }\n+   }\n }\n src.close();\n dest.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-963|SpecialSeperatorForDevSet|public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n _cman = mgr;\n _sock = sock;\n for (int i = 0;\n i < 256;\n i++) {\n String key = Integer.toHexString(i);\n if (key.length() < 2) key = "0" + key;\n availcmd.push(key);\n commands.put(key, null);\n }\n try {\n _sout = new PrintWriter(_sock.getOutputStream(), true);\n _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n String seed = "";\n Random rand = new Random();\n for (int i = 0;\n i < 16;\n i++) {\n String hex = Integer.toHexString(rand.nextInt(256));\n if (hex.length() < 2) hex = "0" + hex;\n seed += hex.substring(hex.length() - 2);\n }\n String pass = _mpsw + seed + _spsw;\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n String hash = hash2hex(md5.digest()).toLowerCase();\n String banner = "INIT " + "servername" + " " + hash + " " + seed;\n sendLine(banner);\n String txt = readLine(5);\n if (txt == null) {\n throw new IOException("Slave did not send banner !!");\n }\n String sname = "";\n String spass = "";\n String sseed = "";\n try {\n String[] items = txt.split(" ");\n sname = items[1].trim();\n spass = items[2].trim();\n sseed = items[3].trim();\n }\n catch (Exception e) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n-   }\n+   }\n pass = _spsw + sseed + _mpsw;\n md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n hash = hash2hex(md5.digest()).toLowerCase();\n if (!sname.equals(_name)) {\n AsyncSlaveListener.invalidSlave("INITFAIL Unknown", _sock);\n }\n if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n start();\n }\n catch (IOException e) {\n if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n logger.info("Check slaves.xml on the master that you are allowed to connect.");\n }\n logger.info("IOException: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e1) {\n }\n }\n catch (Exception e) {\n logger.warn("Exception: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e2) {\n }\n }\n System.gc();\n }\n|SpecialSeperatorForDevSet|public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n _cman = mgr;\n _sock = sock;\n for (int i = 0;\n i < 256;\n i++) {\n String key = Integer.toHexString(i);\n if (key.length() < 2) key = "0" + key;\n availcmd.push(key);\n commands.put(key, null);\n }\n try {\n _sout = new PrintWriter(_sock.getOutputStream(), true);\n _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n String seed = "";\n Random rand = new Random();\n for (int i = 0;\n i < 16;\n i++) {\n String hex = Integer.toHexString(rand.nextInt(256));\n if (hex.length() < 2) hex = "0" + hex;\n seed += hex.substring(hex.length() - 2);\n }\n String pass = _mpsw + seed + _spsw;\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n String hash = hash2hex(md5.digest()).toLowerCase();\n String banner = "INIT " + "servername" + " " + hash + " " + seed;\n sendLine(banner);\n String txt = readLine(5);\n if (txt == null) {\n throw new IOException("Slave did not send banner !!");\n }\n String sname = "";\n String spass = "";\n String sseed = "";\n try {\n String[] items = txt.split(" ");\n sname = items[1].trim();\n spass = items[2].trim();\n sseed = items[3].trim();\n }\n catch (Exception e) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n pass = _spsw + sseed + _mpsw;\n md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n hash = hash2hex(md5.digest()).toLowerCase();\n if (!sname.equals(_name)) {\n AsyncSlaveListener.invalidSlave("INITFAIL Unknown", _sock);\n }\n if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n start();\n }\n catch (IOException e) {\n if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n logger.info("Check slaves.xml on the master that you are allowed to connect.");\n }\n logger.info("IOException: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e1) {\n }\n }\n catch (Exception e) {\n logger.warn("Exception: " + e.toString());\n try {\n sock.close();\n }\n-   catch (Exception e2) {\n+   catch (Exception e2) {\n }\n }\n System.gc();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-963|SpecialSeperatorForDevSet|public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n _cman = mgr;\n _sock = sock;\n-   for (int i = 0;\n+   for (int i = 0;\n i < 256;\n i++) {\n String key = Integer.toHexString(i);\n if (key.length() < 2) key = "0" + key;\n availcmd.push(key);\n commands.put(key, null);\n }\n try {\n _sout = new PrintWriter(_sock.getOutputStream(), true);\n _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n String seed = "";\n Random rand = new Random();\n for (int i = 0;\n i < 16;\n i++) {\n String hex = Integer.toHexString(rand.nextInt(256));\n if (hex.length() < 2) hex = "0" + hex;\n seed += hex.substring(hex.length() - 2);\n }\n String pass = _mpsw + seed + _spsw;\n MessageDigest md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n String hash = hash2hex(md5.digest()).toLowerCase();\n String banner = "INIT " + "servername" + " " + hash + " " + seed;\n sendLine(banner);\n String txt = readLine(5);\n if (txt == null) {\n throw new IOException("Slave did not send banner !!");\n }\n String sname = "";\n String spass = "";\n String sseed = "";\n try {\n String[] items = txt.split(" ");\n sname = items[1].trim();\n spass = items[2].trim();\n sseed = items[3].trim();\n }\n catch (Exception e) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n pass = _spsw + sseed + _mpsw;\n md5 = MessageDigest.getInstance("MD5");\n md5.reset();\n md5.update(pass.getBytes());\n hash = hash2hex(md5.digest()).toLowerCase();\n if (!sname.equals(_name)) {\n AsyncSlaveListener.invalidSlave("INITFAIL Unknown", _sock);\n }\n if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock);\n }\n _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n start();\n }\n catch (IOException e) {\n if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n logger.info("Check slaves.xml on the master that you are allowed to connect.");\n }\n logger.info("IOException: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e1) {\n }\n }\n catch (Exception e) {\n logger.warn("Exception: " + e.toString());\n try {\n sock.close();\n }\n catch (Exception e2) {\n }\n }\n System.gc();\n }\n|SpecialSeperatorForDevSet|public static String getMessageDigest(String[] inputs) {\n if (inputs.length == 0) return null;\n try {\n MessageDigest sha = MessageDigest.getInstance("SHA-1");\n for (String input : inputs) sha.update(input.getBytes());\n byte[] hash = sha.digest();\n String CPass = "";\n int h = 0;\n String s = "";\n for (int i = 0;\n i < 20;\n i++) {\n h = hash[i];\n if (h < 0) h += 256;\n s = Integer.toHexString(h);\n if (s.length() < 2) CPass = CPass.concat("0");\n CPass = CPass.concat(s);\n }\n CPass = CPass.toUpperCase();\n return CPass;\n }\n catch (NoSuchAlgorithmException e) {\n throw new IllegalStateException(e.getMessage());\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-964|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n-   return;\n+   return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-964|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n-   copy(children[i], newDir);\n+   copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n }\n|SpecialSeperatorForDevSet|@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n File file = new File(path);\n if (file.exists()) {\n-   FileInputStream in = new FileInputStream(file);\n+   FileInputStream in = new FileInputStream(file);\n IOUtils.copyLarge(in, response.getOutputStream());\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-965|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n-   connection.disconnect();\n+   connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-965|SpecialSeperatorForDevSet|private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\n StringBuilder pageHTML = new StringBuilder();\n HttpURLConnection connection = null;\n try {\n-   URL url = new URL(pageURL);\n+   URL url = new URL(pageURL);\n connection = (HttpURLConnection) url.openConnection();\n connection.setRequestProperty("User-Agent", "MSIE 7.0");\n connection.connect();\n BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\n String line = null;\n while ((line = br.readLine()) != null) {\n pageHTML.append(line);\n pageHTML.append("\r\n");\n }\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n finally {\n connection.disconnect();\n }\n if (dirPath != null) {\n File file = new File(dirPath);\n BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\n bufferedWriter.write(pageHTML.toString());\n bufferedWriter.close();\n }\n return pageHTML.toString();\n }\n|SpecialSeperatorForDevSet|protected Control createDialogArea(Composite parent) {\n Composite composite = (Composite) super.createDialogArea(parent);\n setTitle(DialogsMessages.getString("LicenseDialog.Caption"));\n setMessage(DialogsMessages.getString("LicenseDialog.Explanation"));\n Composite content = new Composite(composite, SWT.NONE);\n content.setLayoutData(new GridData(GridData.FILL_BOTH));\n final int ncol = 1;\n GridLayout layout = new GridLayout(1, false);\n layout.numColumns = ncol;\n content.setLayout(layout);\n Browser browser = null;\n Text text = null;\n try {\n browser = new Browser(content, SWT.NONE);\n browser.setLayoutData(new GridData(GridData.FILL_BOTH));\n }\n catch (Throwable t) {\n text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n text.setLayoutData(new GridData(GridData.FILL_BOTH));\n }\n URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? "license.html" : "license.txt");\n InputStream in = null;\n BufferedReader r = null;\n StringBuffer sb = new StringBuffer();\n try {\n in = url.openStream();\n r = new BufferedReader(new InputStreamReader(in, "ISO-8859-1"));\n String line;\n while ((line = r.readLine()) != null) sb.append(line).append("\r\n");\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n finally {\n if (r != null) {\n try {\n r.close();\n }\n catch (IOException e) {\n }\n }\n if (in != null) {\n try {\n in.close();\n }\n catch (IOException e) {\n }\n }\n }\n if (browser != null) browser.setText(sb.toString());\n else text.setText(sb.toString());\n return composite;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-966|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n-   exc.printStackTrace();\n+   exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n-   try {\n+   try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-966|SpecialSeperatorForDevSet|public static boolean encodeFileToFile(String infile, String outfile) {\n-   boolean success = false;\n+   boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public void setImg() {\n JFileChooser jFileChooser1 = new JFileChooser();\n String separator = "";\n if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n setPath(jFileChooser1.getSelectedFile().getPath());\n separator = jFileChooser1.getSelectedFile().separator;\n File dirImg = new File("." + separator + "images");\n if (!dirImg.exists()) {\n dirImg.mkdir();\n }\n int index = getPath().lastIndexOf(separator);\n String imgName = getPath().substring(index);\n String newPath = dirImg + imgName;\n try {\n File inputFile = new File(getPath());\n File outputFile = new File(newPath);\n if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n FileInputStream in = new FileInputStream(inputFile);\n FileOutputStream out = new FileOutputStream(outputFile);\n int c;\n while ((c = in.read()) != -1) out.write(c);\n in.close();\n out.close();\n }\n }\n catch (Exception ex) {\n ex.printStackTrace();\n LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());\n JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "Set image", JOptionPane.ERROR_MESSAGE);\n }\n setPath(newPath);\n-   bckImg = new ImageIcon(getPath());\n+   bckImg = new ImageIcon(getPath());\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-967|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n-   final String reference = "test";\n+   final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-967|SpecialSeperatorForDevSet|@Test public void testStandardTee() throws Exception {\n final String reference = "test";\n final Reader source = new StringReader(reference);\n final StringWriter destination1 = new StringWriter();\n final StringWriter destination2 = new StringWriter();\n final TeeWriter tee = new TeeWriter(destination1, destination2);\n org.apache.commons.io.IOUtils.copy(source, tee);\n tee.close();\n assertEquals("the two string are equals", reference, destination1.toString());\n assertEquals("the two string are equals", reference, destination2.toString());\n assertEquals("byte count", reference.length(), tee.getSize());\n-   }\n+   }\n|SpecialSeperatorForDevSet|private static void setup() throws Exception {\n String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar");\n if (!jarFile.exists()) jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar");\n File f = File.createTempFile("tempabca", "bdfafad");\n f.delete();\n f.mkdir();\n String parent = f.getAbsolutePath() + "/";\n byte[] buf = new byte[1024];\n ZipInputStream zipinputstream = null;\n ZipEntry zipentry;\n zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n zipentry = zipinputstream.getNextEntry();\n while (zipentry != null) {\n String entryName = zipentry.getName();\n if (entryName.startsWith("native")) {\n int n;\n FileOutputStream fileoutputstream;\n File newFile = new File(parent + entryName);\n if (zipentry.isDirectory()) {\n newFile.mkdirs();\n zipentry = zipinputstream.getNextEntry();\n continue;\n }\n fileoutputstream = new FileOutputStream(newFile);\n while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n fileoutputstream.close();\n zipinputstream.closeEntry();\n }\n zipentry = zipinputstream.getNextEntry();\n }\n zipinputstream.close();\n String arch = "";\n boolean x64 = false;\n for (String key : keys) {\n String property = System.getProperty(key);\n if (property != null) {\n x64 = (property.indexOf("64") >= 0);\n }\n-   }\n+   }\n if (JPTrayIcon.isUnix()) {\n if (x64) arch = "linux-amd64";\n else arch = "linux-x86";\n }\n if (JPTrayIcon.isWindows()) {\n System.out.println("Arch: " + System.getProperty("sun.arch.data.model"));\n if (x64 && !System.getProperty("sun.arch.data.model").equals("32")) arch = "win64-amd64";\n else arch = "win32-x86";\n }\n if (JPTrayIcon.isMac()) arch = "macosx-universal";\n System.out.println("Using native/" + arch + "/");\n addLibraryPath(parent + "native/" + arch + "/");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-968|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n-   }\n+   }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n-   return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n+   return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-968|SpecialSeperatorForDevSet|@Override public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n File dest = new File(this.realFile, name);\n if (allowedClient) {\n if (".request".equals(name) || ".tokens".equals(name)) {\n FileOutputStream out = null;\n try {\n out = new FileOutputStream(dest);\n IOUtils.copy(in, out);\n }\n finally {\n IOUtils.closeQuietly(out);\n }\n if (".request".equals(name)) {\n-   File request = new File(realFile.getAbsolutePath() + "/" + name);\n+   File request = new File(realFile.getAbsolutePath() + "/" + name);\n RequestManager.manageRequest(request, null, true);\n return new OverEncryptedFriendsFile(factory, folderPath + "/.response", allowedClient);\n }\n return new OverEncryptedFriendsFile(factory, folderPath + "/" + name, allowedClient);\n }\n else {\n return null;\n }\n }\n else {\n LOGGER.error("User isn't owner of this folder");\n return null;\n }\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n File ifp = new File(src);\n File ofp = new File(dest);\n if (ifp.exists() == false) {\n throw new IOException("file '" + src + "' does not exist");\n }\n FileInputStream fis = new FileInputStream(ifp);\n FileOutputStream fos = new FileOutputStream(ofp);\n byte[] b = new byte[1024];\n-   while (fis.read(b) > 0) fos.write(b);\n+   while (fis.read(b) > 0) fos.write(b);\n fis.close();\n fos.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-969|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n-   i < children.length;\n+   i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n }\n|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n-   for (int i = 0;\n+   for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-969|SpecialSeperatorForDevSet|private void copy(File source, File destinationDirectory) throws IOException {\n if (source.isDirectory()) {\n File newDir = new File(destinationDirectory, source.getName());\n newDir.mkdir();\n File[] children = source.listFiles();\n for (int i = 0;\n i < children.length;\n i++) {\n if (children[i].getName().equals(".svn")) {\n continue;\n }\n copy(children[i], newDir);\n }\n }\n else {\n File newFile = new File(destinationDirectory, source.getName());\n if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n return;\n }\n FileOutputStream output = new FileOutputStream(newFile);\n FileInputStream input = new FileInputStream(source);\n byte[] buff = new byte[2048];\n int read = 0;\n-   while ((read = input.read(buff)) > 0) {\n+   while ((read = input.read(buff)) > 0) {\n output.write(buff, 0, read);\n }\n output.flush();\n output.close();\n input.close();\n }\n }\n|SpecialSeperatorForDevSet|public void testReadHelloWorldTxt() throws Exception {\n final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + "/HelloWorld.txt");\n FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver"));\n final String helloWorldPath = this.testDir.getAbsolutePath() + "/org/settings4j/contentresolver/HelloWorld.txt";\n final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n IOUtils.copy(helloWorldIS, fileOutputStream);\n IOUtils.closeQuietly(helloWorldIS);\n IOUtils.closeQuietly(fileOutputStream);\n LOG.info("helloWorldPath: " + helloWorldPath);\n final FSContentResolver contentResolver = new FSContentResolver();\n contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n byte[] content = contentResolver.getContent("org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n content = contentResolver.getContent("file:laksjdhalksdhfa");\n-   assertNull(content);\n+   assertNull(content);\n content = contentResolver.getContent("/org/settings4j/contentresolver/HelloWorld.txt");\n assertNotNull(content);\n assertEquals("Hello World", new String(content, "UTF-8"));\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-970|SpecialSeperatorForDevSet|-  public static DigitalObjectContent byReference(final InputStream inputStream) {\n+  public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-970|SpecialSeperatorForDevSet|public static DigitalObjectContent byReference(final InputStream inputStream) {\n try {\n File tempFile = File.createTempFile("tempContent", "tmp");\n-   tempFile.deleteOnExit();\n+   tempFile.deleteOnExit();\n FileOutputStream out = new FileOutputStream(tempFile);\n IOUtils.copyLarge(inputStream, out);\n out.close();\n return new ImmutableContent(tempFile);\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n throw new IllegalStateException("Could not create content for input stream: " + inputStream);\n }\n|SpecialSeperatorForDevSet|protected boolean copyFile(File sourceFile, File destinationFile) {\n try {\n FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n srcChannel.close();\n dstChannel.close();\n }\n-   catch (IOException e) {\n+   catch (IOException e) {\n e.printStackTrace();\n return false;\n }\n return true;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-971|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n-   ChannelWriter cw = new ChannelWriter(tmpf);\n+   ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n-   File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n+   File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-971|SpecialSeperatorForDevSet|protected File EncodeReturn() throws EncodeFailedException, IOException {\n CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n File tmpf = getNode().getTempFM().createNewFile("encodereturn", "download");\n ChannelWriter cw = new ChannelWriter(tmpf);\n cw.putLongFile(DownloadData);\n cw.close();\n File encdata = c.RawEncode(tmpf, RawKey);\n File pigdata = PigData.EncodeData(encdata);\n File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n FileOutputStream fos = new FileOutputStream(pigroute, true);\n FileChannel foc = fos.getChannel();\n FileInputStream fis = new FileInputStream(pigdata);\n FileChannel fic = fis.getChannel();\n fic.transferTo(0, fic.size(), foc);\n foc.close();\n fic.close();\n pigdata.delete();\n ReturnRouteFile.delete();\n-   encdata.delete();\n+   encdata.delete();\n return pigroute;\n }\n|SpecialSeperatorForDevSet|void run(PseudolocalizerArguments arguments) throws IOException {\n List<String> fileNames = arguments.getFileNames();\n PseudolocalizationPipeline pipeline = arguments.getPipeline();\n if (arguments.isInteractive()) {\n runStdin(pipeline);\n return;\n }\n if (fileNames.size() == 0) {\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n return;\n }\n String suffix = arguments.getVariant();\n if (suffix == null) {\n suffix = "_pseudo";\n }\n else {\n suffix = "_" + suffix;\n }\n for (String fileName : fileNames) {\n File file = new File(fileName);\n if (!file.exists()) {\n System.err.println("File " + fileName + " not found");\n continue;\n }\n int lastDot = fileName.lastIndexOf('.');\n String extension;\n String outFileName;\n if (lastDot >= 0) {\n extension = fileName.substring(lastDot + 1);\n outFileName = fileName.substring(0, lastDot) + suffix + "." + extension;\n }\n else {\n extension = "";\n outFileName = fileName + suffix;\n }\n System.out.println("Processing " + fileName + " into " + outFileName);\n String fileType = arguments.getType();\n if (fileType == null) {\n fileType = extension;\n }\n MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n InputStream inputStream = new FileInputStream(file);\n-   List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n+   List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n OutputStream outputStream = new FileOutputStream(new File(outFileName));\n writeMessages(msgCat, processedMessages, outputStream);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-972|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n-   in.close();\n+   in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n-   }\n+   }\n return success;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-972|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n-   int read = -1;\n+   int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n|SpecialSeperatorForDevSet|private static void copy(String sourceName, String destName) throws IOException {\n File source = new File(sourceName);\n File dest = new File(destName);\n FileChannel in = null, out = null;\n try {\n in = new FileInputStream(source).getChannel();\n out = new FileOutputStream(dest).getChannel();\n long size = in.size();\n MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n out.write(buf);\n-   }\n+   }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-973|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n-   FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n+   FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n-   logger.fine("...got source channel " + srcChannel + "...");\n+   logger.fine("...got source channel " + srcChannel + "...");\n FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-973|SpecialSeperatorForDevSet|private void copyFileTo(File destination) throws IOException {\n logger.fine("Copying from " + destination + "...");\n FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n logger.fine("...got source channel " + srcChannel + "...");\n-   FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n+   FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n logger.fine("...got destination channel " + destChannel + "...");\n logger.fine("...Got channels...");\n destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n logger.fine("...transferred.");\n srcChannel.close();\n destChannel.close();\n }\n|SpecialSeperatorForDevSet|private void tail(String[] cmd, int pos) throws IOException {\n CommandFormat c = new CommandFormat("tail", 1, 1, "f");\n String src = null;\n Path path = null;\n try {\n List<String> parameters = c.parse(cmd, pos);\n src = parameters.get(0);\n }\n catch (IllegalArgumentException iae) {\n System.err.println("Usage: java FsShell " + TAIL_USAGE);\n throw iae;\n-   }\n+   }\n boolean foption = c.getOpt("f") ? true : false;\n path = new Path(src);\n FileSystem srcFs = path.getFileSystem(getConf());\n if (srcFs.isDirectory(path)) {\n throw new IOException("Source must be a file.");\n }\n long fileSize = srcFs.getFileStatus(path).getLen();\n long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n while (true) {\n FSDataInputStream in = srcFs.open(path);\n in.seek(offset);\n IOUtils.copyBytes(in, System.out, 1024, false);\n offset = in.getPos();\n in.close();\n if (!foption) {\n break;\n }\n fileSize = srcFs.getFileStatus(path).getLen();\n offset = (fileSize > offset) ? offset : fileSize;\n try {\n Thread.sleep(5000);\n }\n catch (InterruptedException e) {\n break;\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-974|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n-   logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n+   logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n-   logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n+   logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-974|SpecialSeperatorForDevSet|protected void innerProcess(CrawlURI curi) throws InterruptedException {\n if (!curi.isHttpTransaction()) {\n return;\n }\n if (!TextUtils.matches("^text.*$", curi.getContentType())) {\n return;\n }\n long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n try {\n maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n }\n catch (AttributeNotFoundException e) {\n logger.severe("Missing max-size-bytes attribute when processing " + curi.getURIString());\n }\n if (maxsize < curi.getContentSize() && maxsize > -1) {\n return;\n-   }\n+   }\n String regexpr = "";\n try {\n regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n }\n catch (AttributeNotFoundException e2) {\n logger.severe("Missing strip-reg-exp when processing " + curi.getURIString());\n return;\n }\n ReplayCharSequence cs = null;\n try {\n cs = curi.getHttpRecorder().getReplayCharSequence();\n }\n catch (Exception e) {\n curi.addLocalizedError(this.getName(), e, "Failed get of replay char sequence " + curi.toString() + " " + e.getMessage());\n logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());\n return;\n }\n MessageDigest digest = null;\n try {\n digest = MessageDigest.getInstance("SHA1");\n }\n catch (NoSuchAlgorithmException e1) {\n e1.printStackTrace();\n return;\n }\n digest.reset();\n String s = null;\n if (regexpr.length() == 0) {\n s = cs.toString();\n }\n else {\n Matcher m = TextUtils.getMatcher(regexpr, cs);\n s = m.replaceAll(" ");\n }\n digest.update(s.getBytes());\n byte[] newDigestValue = digest.digest();\n if (logger.isLoggable(Level.FINEST)) {\n logger.finest("Recalculated content digest for " + curi.getURIString() + " old: " + Base32.encode((byte[]) curi.getContentDigest()) + ", new: " + Base32.encode(newDigestValue));\n }\n curi.setContentDigest(newDigestValue);\n }\n|SpecialSeperatorForDevSet|public static String getHashedPassword(String password) {\n try {\n MessageDigest digest = MessageDigest.getInstance("MD5");\n digest.update(password.getBytes());\n BigInteger hashedInt = new BigInteger(1, digest.digest());\n return String.format("%1$032X", hashedInt);\n }\n catch (NoSuchAlgorithmException nsae) {\n System.err.println(nsae.getMessage());\n }\n-   return "";\n+   return "";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-975|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n-   }\n+   }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-975|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n-   catch (Exception e) {\n+   catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|@Override public String readFixString(final int len) {\n if (len < 1) {\n return StringUtils.EMPTY;\n }\n final StringWriter sw = new StringWriter();\n try {\n IOUtils.copy(createLimitedInputStream(len), sw, null);\n }\n catch (IOException e) {\n throw createRuntimeException(e);\n }\n return sw.toString();\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-976|SpecialSeperatorForDevSet|protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n try {\n URL url = new URL(apiUrl);\n-   HttpURLConnection request = (HttpURLConnection) url.openConnection();\n+   HttpURLConnection request = (HttpURLConnection) url.openConnection();\n if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n }\n if (ApplicationConstants.READ_TIMEOUT > -1) {\n request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n }\n for (String headerName : requestHeaders.keySet()) {\n request.setRequestProperty(headerName, requestHeaders.get(headerName));\n }\n request.setRequestMethod("POST");\n request.setDoOutput(true);\n PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n out.print(getParametersString(parameters));\n out.flush();\n out.close();\n request.connect();\n if (request.getResponseCode() != expected) {\n throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n }\n else {\n return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n }\n }\n catch (IOException e) {\n throw new BingMapsException(e);\n }\n }\n|SpecialSeperatorForDevSet|protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n try {\n URL url = new URL(apiUrl);\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n }\n if (ApplicationConstants.READ_TIMEOUT > -1) {\n request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n }\n for (String headerName : requestHeaders.keySet()) {\n request.setRequestProperty(headerName, requestHeaders.get(headerName));\n }\n request.setRequestMethod("POST");\n request.setDoOutput(true);\n PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n out.print(getParametersString(parameters));\n out.flush();\n out.close();\n request.connect();\n if (request.getResponseCode() != expected) {\n throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n }\n else {\n return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n }\n }\n catch (IOException e) {\n throw new BingMapsException(e);\n }\n }\n-  \n+  |SpecialSeperatorForDevSet|5
bigclonebench-test-976|SpecialSeperatorForDevSet|protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n try {\n URL url = new URL(apiUrl);\n HttpURLConnection request = (HttpURLConnection) url.openConnection();\n if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n }\n if (ApplicationConstants.READ_TIMEOUT > -1) {\n request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n }\n for (String headerName : requestHeaders.keySet()) {\n request.setRequestProperty(headerName, requestHeaders.get(headerName));\n }\n request.setRequestMethod("POST");\n request.setDoOutput(true);\n PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n out.print(getParametersString(parameters));\n out.flush();\n out.close();\n request.connect();\n if (request.getResponseCode() != expected) {\n throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n }\n else {\n return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n }\n }\n catch (IOException e) {\n throw new BingMapsException(e);\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static String getPagina(String strurl) {\n String resp = "";\n Authenticator.setDefault(new Autenticador());\n-   try {\n+   try {\n URL url = new URL(strurl);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String str;\n while ((str = in.readLine()) != null) {\n resp += str;\n }\n in.close();\n }\n catch (MalformedURLException e) {\n resp = e.toString();\n }\n catch (IOException e) {\n resp = e.toString();\n }\n catch (Exception e) {\n resp = e.toString();\n }\n return resp;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-977|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n try {\n URL url = new URL(urlString);\n-   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n+   BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n }\n|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n-   try {\n+   try {\n URL url = new URL(urlString);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-977|SpecialSeperatorForDevSet|public static ArrayList<RoleName> importRoles(String urlString) {\n ArrayList<RoleName> results = new ArrayList<RoleName>();\n try {\n URL url = new URL(urlString);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n StringBuffer buff = new StringBuffer();\n String line;\n while ((line = in.readLine()) != null) {\n buff.append(line);\n if (line.equals("</RoleName>")) {\n RoleName name = ProfileParser.parseRoleName(buff.toString());\n results.add(name);\n buff = new StringBuffer();\n }\n else {\n buff.append(NL);\n }\n }\n }\n catch (MalformedURLException e) {\n-   }\n+   }\n catch (IOException e) {\n }\n catch (ParsingException e) {\n }\n return results;\n }\n|SpecialSeperatorForDevSet|public String sendRequest(java.lang.String servletName, java.lang.String request) {\n String reqxml = "";\n org.jdom.Document retdoc = null;\n String myurl = java.util.prefs.Preferences.systemRoot().get("serverurl", "");\n String myport = java.util.prefs.Preferences.systemRoot().get("portno", "8080");\n if (this.serverURL == null) {\n try {\n java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n if (codebase != null) serverURL = codebase.getHost();\n else serverURL = "localhost";\n }\n catch (Exception exp) {\n exp.printStackTrace();\n serverURL = "localhost";\n }\n newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n ipdig.show();\n serverURL = myurl = ipdig.getIPAddress();\n myport = ipdig.getPortNo();\n-   java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n+   java.util.prefs.Preferences.systemRoot().put("serverurl", serverURL);\n java.util.prefs.Preferences.systemRoot().put("portno", myport);\n System.out.println(serverURL);\n }\n try {\n System.out.println("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URL url = new java.net.URL("http://" + serverURL + ":" + myport + "/newgenlibctxt/" + servletName);\n java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n urlconn.setDoOutput(true);\n urlconn.setRequestProperty("Content-type", "text/xml;\n charset=UTF-8");\n java.io.OutputStream os = urlconn.getOutputStream();\n String req1xml = request;\n java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, "UTF-8");\n System.out.println(req1xml);\n dos.write(req1xml);\n dos.flush();\n dos.close();\n System.out.println("url conn: " + urlconn.getContentEncoding() + " " + urlconn.getContentType());\n java.io.InputStream ios = urlconn.getInputStream();\n java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n java.io.InputStreamReader br = new java.io.InputStreamReader(gip, "UTF-8");\n retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n }\n catch (java.net.ConnectException conexp) {\n javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString("ConnectExceptionMessage"), "Critical error", javax.swing.JOptionPane.ERROR_MESSAGE);\n }\n catch (Exception exp) {\n exp.printStackTrace(System.out);\n }\n System.out.println(reqxml);\n return "";\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-978|SpecialSeperatorForDevSet|-  private String hashPassword(String password) throws NoSuchAlgorithmException {\n+  private String hashPassword(String password) throws NoSuchAlgorithmException {\n String hash = null;\n MessageDigest md = MessageDigest.getInstance("SHA");\n log.debug("secure hash on password " + password);\n md.update(password.getBytes());\n hash = new String(Base64.encodeBase64(md.digest()));\n log.debug("returning hash " + hash);\n return hash;\n }\n|SpecialSeperatorForDevSet|private String hashPassword(String password) throws NoSuchAlgorithmException {\n String hash = null;\n MessageDigest md = MessageDigest.getInstance("SHA");\n log.debug("secure hash on password " + password);\n md.update(password.getBytes());\n-   hash = new String(Base64.encodeBase64(md.digest()));\n+   hash = new String(Base64.encodeBase64(md.digest()));\n log.debug("returning hash " + hash);\n return hash;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-978|SpecialSeperatorForDevSet|private String hashPassword(String password) throws NoSuchAlgorithmException {\n String hash = null;\n MessageDigest md = MessageDigest.getInstance("SHA");\n log.debug("secure hash on password " + password);\n md.update(password.getBytes());\n hash = new String(Base64.encodeBase64(md.digest()));\n log.debug("returning hash " + hash);\n-   return hash;\n+   return hash;\n }\n|SpecialSeperatorForDevSet|public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n-   byte[] md5hash = new byte[32];\n+   byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-979|SpecialSeperatorForDevSet|-  private void moveFile(File orig, File target) throws IOException {\n+  private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n-   fis.close();\n+   fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-979|SpecialSeperatorForDevSet|private void moveFile(File orig, File target) throws IOException {\n byte buffer[] = new byte[1000];\n int bread = 0;\n FileInputStream fis = new FileInputStream(orig);\n FileOutputStream fos = new FileOutputStream(target);\n while (bread != -1) {\n-   bread = fis.read(buffer);\n+   bread = fis.read(buffer);\n if (bread != -1) fos.write(buffer, 0, bread);\n }\n fis.close();\n fos.close();\n orig.delete();\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n if (dest.exists()) if (force) dest.delete();\n else throw new IOException("Cannot overwrite existing file: " + dest.getName());\n byte[] buffer = new byte[bufSize];\n int read = 0;\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n while (true) {\n read = in.read(buffer);\n-   if (read == -1) break;\n+   if (read == -1) break;\n out.write(buffer, 0, read);\n }\n }\n finally {\n if (in != null) try {\n in.close();\n }\n finally {\n if (out != null) out.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-980|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n-   if (!skipGroupLen) {\n+   if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n-   if (fmi) {\n+   if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-980|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n-   ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n+   ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\n response.setContentType("image/" + type + "");\n Point imgSize = null;\n if (width > 0 || height > 0) {\n imgSize = new Point(width, height);\n-   }\n+   }\n if (fmt != null && imageFormats.containsKey(fmt)) {\n imgSize = imageFormats.get(fmt);\n }\n InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\n if (imageInputStream == null) {\n throw new RuntimeException("File " + imageUrl + " does not exist!");\n }\n if (imgSize == null) {\n IOUtils.copy(imageInputStream, response.getOutputStream());\n }\n else {\n byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\n response.setContentLength(imageBytes.length);\n response.getOutputStream().write(imageBytes);\n }\n response.getOutputStream().flush();\n response.getOutputStream().close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-981|SpecialSeperatorForDevSet|synchronized List<String> getDatasetsList(String surl) {\n if (datasetsList == null) {\n datasetsList = new HashMap<String, List<String>>();\n }\n List<String> result = datasetsList.get(surl);\n if (result == null) {\n BufferedReader reader = null;\n try {\n URL url = new URL(surl + "?server=list");\n reader = new BufferedReader(new InputStreamReader(url.openStream()));\n-   String s = reader.readLine();\n+   String s = reader.readLine();\n ArrayList<String> list = new ArrayList<String>();\n while (s != null) {\n list.add(s);\n s = reader.readLine();\n }\n datasetsList.put(surl, list);\n }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n throw new RuntimeException(ex);\n }\n finally {\n try {\n reader.close();\n }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n return datasetsList.get(surl);\n }\n|SpecialSeperatorForDevSet|synchronized List<String> getDatasetsList(String surl) {\n if (datasetsList == null) {\n datasetsList = new HashMap<String, List<String>>();\n }\n List<String> result = datasetsList.get(surl);\n if (result == null) {\n BufferedReader reader = null;\n try {\n URL url = new URL(surl + "?server=list");\n-   reader = new BufferedReader(new InputStreamReader(url.openStream()));\n+   reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String s = reader.readLine();\n ArrayList<String> list = new ArrayList<String>();\n while (s != null) {\n list.add(s);\n s = reader.readLine();\n }\n datasetsList.put(surl, list);\n }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n throw new RuntimeException(ex);\n }\n finally {\n try {\n reader.close();\n }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n return datasetsList.get(surl);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-981|SpecialSeperatorForDevSet|synchronized List<String> getDatasetsList(String surl) {\n if (datasetsList == null) {\n datasetsList = new HashMap<String, List<String>>();\n }\n List<String> result = datasetsList.get(surl);\n if (result == null) {\n BufferedReader reader = null;\n try {\n URL url = new URL(surl + "?server=list");\n reader = new BufferedReader(new InputStreamReader(url.openStream()));\n String s = reader.readLine();\n ArrayList<String> list = new ArrayList<String>();\n while (s != null) {\n list.add(s);\n s = reader.readLine();\n }\n datasetsList.put(surl, list);\n-   }\n+   }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n throw new RuntimeException(ex);\n }\n finally {\n try {\n reader.close();\n }\n catch (IOException ex) {\n Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n return datasetsList.get(surl);\n }\n|SpecialSeperatorForDevSet|public static String getPagina(String strurl) {\n String resp = "";\n Authenticator.setDefault(new Autenticador());\n try {\n URL url = new URL(strurl);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String str;\n while ((str = in.readLine()) != null) {\n resp += str;\n }\n in.close();\n }\n catch (MalformedURLException e) {\n resp = e.toString();\n }\n catch (IOException e) {\n-   resp = e.toString();\n+   resp = e.toString();\n }\n catch (Exception e) {\n resp = e.toString();\n }\n return resp;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-982|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n-   ArrayInputStream isAux = null;\n+   ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n-   this.bufferedImage = imaging.read(isAux);\n+   this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-982|SpecialSeperatorForDevSet|public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n this.name = name;\n this.contentType = contentType;\n this.index = index;\n this.extension = FilenameUtils.getExtension(this.name);\n this.isImage = ImageUtils.isImage(name);\n ArrayInputStream isAux = null;\n final ByteArrayOutputStream out = new ByteArrayOutputStream();\n try {\n IOUtils.copy(is, out);\n isAux = new ArrayInputStream(out.toByteArray());\n if (this.isImage) {\n this.bufferedImage = imaging.read(isAux);\n }\n }\n finally {\n-   IOUtils.closeQuietly(out);\n+   IOUtils.closeQuietly(out);\n IOUtils.closeQuietly(isAux);\n }\n this.inputStream = new ArrayInputStream(out.toByteArray());\n }\n|SpecialSeperatorForDevSet|public static boolean decodeFileToFile(String infile, String outfile) {\n boolean success = false;\n java.io.InputStream in = null;\n java.io.OutputStream out = null;\n try {\n in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n byte[] buffer = new byte[65536];\n int read = -1;\n while ((read = in.read(buffer)) >= 0) {\n out.write(buffer, 0, read);\n }\n success = true;\n }\n catch (java.io.IOException exc) {\n exc.printStackTrace();\n }\n finally {\n try {\n in.close();\n }\n catch (Exception exc) {\n }\n try {\n out.close();\n }\n catch (Exception exc) {\n }\n }\n return success;\n }\n-  \n+  |SpecialSeperatorForDevSet|3
bigclonebench-test-983|SpecialSeperatorForDevSet|-  private void copyFile(File in, File out) throws IOException {\n+  private void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|private void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n-   try {\n+   try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-983|SpecialSeperatorForDevSet|private void copyFile(File in, File out) throws IOException {\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n-   if (inChannel != null) inChannel.close();\n+   if (inChannel != null) inChannel.close();\n if (outChannel != null) outChannel.close();\n }\n }\n|SpecialSeperatorForDevSet|public Converter(String input, String output) {\n try {\n FileInputStream fis = new FileInputStream(new File(input));\n BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));\n FileOutputStream fos = new FileOutputStream(new File(output));\n BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));\n-   int len = 80;\n+   int len = 80;\n char buf[] = new char[len];\n int numRead;\n while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n out.close();\n in.close();\n }\n catch (IOException e) {\n System.out.println("An I/O Exception Occurred: " + e);\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-984|SpecialSeperatorForDevSet|public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\n FileChannel inputChannel = null;\n FileChannel outputChannel = null;\n long length = 0;\n try {\n inputChannel = new FileInputStream(src).getChannel();\n length = inputChannel.size();\n outputChannel = new FileOutputStream(dst).getChannel();\n long total = 0;\n while (total < length) {\n total += inputChannel.transferTo(0, length, outputChannel);\n-   }\n+   }\n if (preserveModificationTime) {\n dst.setLastModified(src.lastModified());\n }\n }\n finally {\n if (inputChannel != null) {\n inputChannel.close();\n }\n if (outputChannel != null) {\n outputChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\n FileChannel inputChannel = null;\n FileChannel outputChannel = null;\n long length = 0;\n try {\n inputChannel = new FileInputStream(src).getChannel();\n-   length = inputChannel.size();\n+   length = inputChannel.size();\n outputChannel = new FileOutputStream(dst).getChannel();\n long total = 0;\n while (total < length) {\n total += inputChannel.transferTo(0, length, outputChannel);\n }\n if (preserveModificationTime) {\n dst.setLastModified(src.lastModified());\n }\n }\n finally {\n if (inputChannel != null) {\n inputChannel.close();\n }\n if (outputChannel != null) {\n outputChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-984|SpecialSeperatorForDevSet|public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\n FileChannel inputChannel = null;\n FileChannel outputChannel = null;\n long length = 0;\n try {\n inputChannel = new FileInputStream(src).getChannel();\n length = inputChannel.size();\n outputChannel = new FileOutputStream(dst).getChannel();\n long total = 0;\n while (total < length) {\n total += inputChannel.transferTo(0, length, outputChannel);\n }\n if (preserveModificationTime) {\n dst.setLastModified(src.lastModified());\n }\n }\n-   finally {\n+   finally {\n if (inputChannel != null) {\n inputChannel.close();\n }\n if (outputChannel != null) {\n outputChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n-   }\n+   }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-985|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n-   try {\n+   try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n-   return tmp;\n+   return tmp;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-985|SpecialSeperatorForDevSet|public static byte[] getMD5(String source) {\n byte[] tmp = null;\n try {\n java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");\n md.update(source.getBytes());\n tmp = md.digest();\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n return tmp;\n }\n-  \n+  |SpecialSeperatorForDevSet|public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n MessageDigest md;\n md = MessageDigest.getInstance("MD5");\n-   byte[] md5hash = new byte[32];\n+   byte[] md5hash = new byte[32];\n md.update(text.getBytes("iso-8859-1"), 0, text.length());\n md5hash = md.digest();\n return convertToHex(md5hash);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-986|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n-   for (int i = 0;\n+   for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-986|SpecialSeperatorForDevSet|public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n byte magicKey = 0;\n byte[] buffer = new byte[2048];\n int nread;\n InputStream map;\n OutputStream output;\n try {\n map = new FileInputStream(mapFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n-   }\n+   }\n try {\n output = new FileOutputStream(outputFile);\n }\n catch (Exception e) {\n throw new Exception("Map file error", e);\n }\n while ((nread = map.read(buffer, 0, 2048)) != 0) {\n for (int i = 0;\n i < nread;\n ++i) {\n buffer[i] ^= magicKey;\n magicKey += 43;\n }\n output.write(buffer, 0, nread);\n }\n map.close();\n output.close();\n }\n|SpecialSeperatorForDevSet|public static void extractFile(String input, String output) throws ZipException, IOException {\n FileReader reader = new FileReader(input);\n InputStream in = reader.getInputStream();\n OutputStream out = new FileOutputStream(new File(output));\n byte[] buf = new byte[512];\n int len;\n while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n reader.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-987|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n-   pst2.setString(1, name);\n+   pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n else {\n retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n-   ResultSet rs = null;\n+   ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n else {\n retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-987|SpecialSeperatorForDevSet|public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n PreparedStatement pst1 = null;\n PreparedStatement pst2 = null;\n ResultSet rs = null;\n int retVal = -1;\n try {\n pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");\n pst1.setString(1, name);\n pst1.setString(2, instructions);\n pst1.setInt(3, categoryId);\n if (pst1.executeUpdate() > 0) {\n pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");\n pst2.setString(1, name);\n pst2.setString(2, instructions);\n pst2.setInt(3, categoryId);\n rs = pst2.executeQuery();\n if (rs.next()) {\n int id = rs.getInt(1);\n System.out.println("Lis�t��n ainesosat");\n String[] aines;\n for (int i = 0;\n i < ainekset.length;\n ++i) {\n aines = ainekset[i];\n addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n }\n retVal = id;\n }\n else {\n retVal = -1;\n }\n }\n-   else {\n+   else {\n retVal = -1;\n }\n conn.commit();\n }\n catch (Exception e) {\n conn.rollback();\n throw new Exception("Reseptin lis�ys ep�onnistui. Poikkeus: " + e.getMessage());\n }\n }\n|SpecialSeperatorForDevSet|public void importCSV(InputStream csvfile) throws Exception {\n try {\n String[] qmarks = new String[columns.length];\n for (int i = 0;\n i < qmarks.length;\n i++) {\n qmarks[i] = "?";\n }\n if (cleartable) {\n String delsql = "delete from " + table;\n Statement delstm = conn.createStatement();\n delstm.executeUpdate(delsql);\n }\n String sql = "insert into " + table + " (" + StringUtils.join(columns, ", ") + ") values (" + StringUtils.join(qmarks, ", ") + ")";\n log.debug("SQL: " + sql);\n PreparedStatement stm = conn.prepareStatement(sql);\n int datatypes[] = new int[columns.length];\n for (int i = 0;\n i < columns.length;\n i++) {\n Table tbl = project.getTableByName(table);\n if (tbl == null) throw new OntopiaRuntimeException("Unknown table: " + table);\n Column col = tbl.getColumnByName(columns[i]);\n if (col == null) throw new OntopiaRuntimeException("Unknown table column: " + columns[i]);\n if (col.getType() == null) throw new OntopiaRuntimeException("Column type is null: " + col.getType());\n DataType datatype = project.getDataTypeByName(col.getType(), "generic");\n if (datatype == null) throw new OntopiaRuntimeException("Unknown column type: " + col.getType());\n String dtype = datatype.getType();\n if ("varchar".equals(dtype)) datatypes[i] = Types.VARCHAR;\n else if ("integer".equals(dtype)) datatypes[i] = Types.INTEGER;\n else throw new OntopiaRuntimeException("Unknown datatype: " + dtype);\n }\n LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n for (int i = 0;\n i < ignorelines;\n i++) {\n-   String line = reader.readLine();\n+   String line = reader.readLine();\n if (line == null) break;\n }\n log.debug("[" + StringUtils.join(columns, ", ") + "]");\n int lineno = 0;\n while (true) {\n lineno++;\n String line = reader.readLine();\n if (line == null) break;\n try {\n String[] cols = StringUtils.split(line, separator);\n if (cols.length > columns.length && !ignorecolumns) log.debug("Ignoring columns: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n log.debug("CVALUES: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");\n String dmesg = "(";\n for (int i = 0;\n i < columns.length;\n i++) {\n String col = cols[i];\n if (stripquotes) {\n int len = col.length();\n if (len > 1 && ((col.charAt(0) == '"' && col.charAt(len - 1) == '"') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);\n }\n if (col != null && col.equals("")) col = null;\n dmesg = dmesg + col;\n if (i < columns.length - 1) dmesg = dmesg + ", ";\n stm.setObject(i + 1, col, datatypes[i]);\n }\n dmesg = dmesg + ")";\n log.debug(dmesg);\n stm.execute();\n }\n catch (Exception e) {\n conn.rollback();\n throw new OntopiaRuntimeException("Cannot read line " + lineno + ": '" + line + "'", e);\n }\n }\n conn.commit();\n }\n finally {\n if (conn != null) conn.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-988|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n-   rs.close();\n+   rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n-   rs = st.executeQuery("select image from test_a where id=5678");\n+   rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-988|SpecialSeperatorForDevSet|public void testTransactions() throws Exception {\n con = TestUtil.openDB();\n Statement st;\n ResultSet rs;\n con.setAutoCommit(false);\n assertTrue(!con.getAutoCommit());\n con.setAutoCommit(true);\n assertTrue(con.getAutoCommit());\n st = con.createStatement();\n st.executeUpdate("insert into test_a (imagename,image,id) values ('comttest',1234,5678)");\n-   con.setAutoCommit(false);\n+   con.setAutoCommit(false);\n st.executeUpdate("update test_a set image=9876 where id=5678");\n con.commit();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n st.executeUpdate("update test_a set image=1111 where id=5678");\n con.rollback();\n rs = st.executeQuery("select image from test_a where id=5678");\n assertTrue(rs.next());\n assertEquals(9876, rs.getInt(1));\n rs.close();\n TestUtil.closeDB(con);\n }\n|SpecialSeperatorForDevSet|private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\n Statement s = null;\n try {\n s = con.createStatement();\n s.executeUpdate(statement);\n con.commit();\n }\n catch (Throwable e) {\n if (do_log) {\n logger.log(Level.INFO, "Update failed. Transaction is rolled back", e);\n }\n con.rollback();\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-989|SpecialSeperatorForDevSet|public boolean import_hints(String filename) {\n int pieceId;\n int i, col, row;\n int rotation;\n int number;\n boolean byurl = true;\n e2piece temppiece;\n String lineread;\n StringTokenizer tok;\n BufferedReader entree;\n try {\n-   if (byurl == true) {\n+   if (byurl == true) {\n URL url = new URL(baseURL, filename);\n InputStream in = url.openStream();\n entree = new BufferedReader(new InputStreamReader(in));\n }\n else {\n entree = new BufferedReader(new FileReader(filename));\n }\n pieceId = 0;\n lineread = entree.readLine();\n tok = new StringTokenizer(lineread, " ");\n number = Integer.parseInt(tok.nextToken());\n for (i = 0;\n i < number;\n i++) {\n lineread = entree.readLine();\n if (lineread == null) {\n break;\n }\n tok = new StringTokenizer(lineread, " ");\n pieceId = Integer.parseInt(tok.nextToken());\n col = Integer.parseInt(tok.nextToken()) - 1;\n row = Integer.parseInt(tok.nextToken()) - 1;\n rotation = Integer.parseInt(tok.nextToken());\n System.out.println("placing hint piece : " + pieceId);\n place_piece_at(pieceId, col, row, 0);\n temppiece = board.get_piece_at(col, row);\n temppiece.reset_rotation();\n temppiece.rotate(rotation);\n temppiece.set_as_hint();\n }\n return true;\n }\n catch (IOException err) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public boolean import_hints(String filename) {\n int pieceId;\n int i, col, row;\n int rotation;\n-   int number;\n+   int number;\n boolean byurl = true;\n e2piece temppiece;\n String lineread;\n StringTokenizer tok;\n BufferedReader entree;\n try {\n if (byurl == true) {\n URL url = new URL(baseURL, filename);\n InputStream in = url.openStream();\n entree = new BufferedReader(new InputStreamReader(in));\n }\n else {\n entree = new BufferedReader(new FileReader(filename));\n }\n pieceId = 0;\n lineread = entree.readLine();\n tok = new StringTokenizer(lineread, " ");\n number = Integer.parseInt(tok.nextToken());\n for (i = 0;\n i < number;\n i++) {\n lineread = entree.readLine();\n if (lineread == null) {\n break;\n }\n tok = new StringTokenizer(lineread, " ");\n pieceId = Integer.parseInt(tok.nextToken());\n col = Integer.parseInt(tok.nextToken()) - 1;\n row = Integer.parseInt(tok.nextToken()) - 1;\n rotation = Integer.parseInt(tok.nextToken());\n System.out.println("placing hint piece : " + pieceId);\n place_piece_at(pieceId, col, row, 0);\n temppiece = board.get_piece_at(col, row);\n temppiece.reset_rotation();\n temppiece.rotate(rotation);\n temppiece.set_as_hint();\n }\n return true;\n }\n catch (IOException err) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-989|SpecialSeperatorForDevSet|public boolean import_hints(String filename) {\n int pieceId;\n int i, col, row;\n-   int rotation;\n+   int rotation;\n int number;\n boolean byurl = true;\n e2piece temppiece;\n String lineread;\n StringTokenizer tok;\n BufferedReader entree;\n try {\n if (byurl == true) {\n URL url = new URL(baseURL, filename);\n InputStream in = url.openStream();\n entree = new BufferedReader(new InputStreamReader(in));\n }\n else {\n entree = new BufferedReader(new FileReader(filename));\n }\n pieceId = 0;\n lineread = entree.readLine();\n tok = new StringTokenizer(lineread, " ");\n number = Integer.parseInt(tok.nextToken());\n for (i = 0;\n i < number;\n i++) {\n lineread = entree.readLine();\n if (lineread == null) {\n break;\n }\n tok = new StringTokenizer(lineread, " ");\n pieceId = Integer.parseInt(tok.nextToken());\n col = Integer.parseInt(tok.nextToken()) - 1;\n row = Integer.parseInt(tok.nextToken()) - 1;\n rotation = Integer.parseInt(tok.nextToken());\n System.out.println("placing hint piece : " + pieceId);\n place_piece_at(pieceId, col, row, 0);\n temppiece = board.get_piece_at(col, row);\n temppiece.reset_rotation();\n temppiece.rotate(rotation);\n temppiece.set_as_hint();\n }\n return true;\n }\n catch (IOException err) {\n return false;\n }\n }\n|SpecialSeperatorForDevSet|public PhoneSetImpl(URL url) throws IOException {\n BufferedReader reader;\n String line;\n phonesetMap = new HashMap();\n reader = new BufferedReader(new InputStreamReader(url.openStream()));\n line = reader.readLine();\n lineCount++;\n while (line != null) {\n-   if (!line.startsWith("***")) {\n+   if (!line.startsWith("***")) {\n parseAndAdd(line);\n }\n line = reader.readLine();\n }\n reader.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-990|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n-   i < cmp.length;\n+   i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n IOUtils.copy(in, stream);\n-   byte[] out = stream.toByteArray();\n+   byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-990|SpecialSeperatorForDevSet|private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-   IOUtils.copy(in, stream);\n+   IOUtils.copy(in, stream);\n byte[] out = stream.toByteArray();\n if (all) assertEquals(cmp.length, out.length);\n for (int i = 0;\n i < cmp.length;\n i++) assertEquals(cmp[i], out[i]);\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n-   System.out.println("\n" + src + ": not an ACRNEMA stream!");\n+   System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-991|SpecialSeperatorForDevSet|-  private void copyParseFileToCodeFile() throws IOException {\n+  private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n int length;\n while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n int length;\n while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n in.close();\n out.close();\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-991|SpecialSeperatorForDevSet|private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n int length;\n while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n-   in.close();\n+   in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|@Override protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n String charset = null;\n IndexDocument sourceDocument = getSourceDocument();\n if (sourceDocument != null && urlItemFieldEnum != null) {\n FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n if (fieldValueItem != null) charset = fieldValueItem.getValue();\n if (charset == null) {\n fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n if (fieldValueItem != null) charset = fieldValueItem.getValue();\n }\n }\n boolean charsetWasNull = charset == null;\n if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n StringWriter writer = new StringWriter();\n IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\n addField(ParserFieldEnum.htmlSource, writer.toString());\n writer.close();\n HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\n if (htmlProvider == null) return;\n addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n String contentType = htmlProvider.getMetaHttpEquiv("content-type");\n String contentTypeCharset = null;\n if (contentType != null) {\n contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n }\n if (charsetWasNull) {\n if (contentTypeCharset != null) charset = contentTypeCharset;\n else charset = htmlProvider.getMetaCharset();\n if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n }\n HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n if (rootNode == null) return;\n for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n String metaName = metaNode.getAttributeText("name");\n if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n String[] fields = field.split("\\.");\n if (fields != null) {\n String content = metaNode.getAttributeText("content");\n addDirectFields(fields, content);\n }\n }\n }\n addField(ParserFieldEnum.charset, charset);\n addFieldTitle(htmlProvider.getTitle());\n String metaRobots = null;\n String metaDcLanguage = null;\n String metaContentLanguage = null;\n for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n String attr_name = node.getAttributeText("name");\n String attr_http_equiv = node.getAttributeText("http-equiv");\n if ("keywords".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node));\n else if ("description".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node));\n else if ("robots".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node);\n else if ("dc.language".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node);\n else if ("content-language".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n }\n boolean metaRobotsFollow = true;\n boolean metaRobotsNoIndex = false;\n if (metaRobots != null) {\n metaRobots = metaRobots.toLowerCase();\n if (metaRobots.contains("noindex")) {\n metaRobotsNoIndex = true;\n addField(ParserFieldEnum.meta_robots, "noindex");\n }\n if (metaRobots.contains("nofollow")) {\n metaRobotsFollow = false;\n addField(ParserFieldEnum.meta_robots, "nofollow");\n }\n }\n UrlFilterItem[] urlFilterList = getUrlFilterList();\n List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes("a", "frame");\n IndexDocument srcDoc = getSourceDocument();\n if (srcDoc != null && nodes != null && metaRobotsFollow) {\n URL currentURL = htmlProvider.getBaseHref();\n if (currentURL == null && urlItemFieldEnum != null) {\n FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n if (fvi != null) currentURL = new URL(fvi.getValue());\n }\n for (HtmlNodeAbstract<?> node : nodes) {\n String href = null;\n String rel = null;\n String nodeName = node.getNodeName();\n if ("a".equals(nodeName)) {\n href = node.getAttributeText("href");\n rel = node.getAttributeText("rel");\n }\n else if ("frame".equals(nodeName)) {\n href = node.getAttributeText("src");\n }\n boolean follow = true;\n if (rel != null) if (rel.contains("nofollow")) follow = false;\n URL newUrl = null;\n if (href != null) if (!href.startsWith("javascript:")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n if (newUrl != null) {\n ParserFieldEnum field = null;\n if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n if (follow) field = ParserFieldEnum.internal_link;\n else field = ParserFieldEnum.internal_link_nofollow;\n }\n else {\n if (follow) field = ParserFieldEnum.external_link;\n else field = ParserFieldEnum.external_link_nofollow;\n }\n addField(field, newUrl.toExternalForm());\n }\n }\n }\n if (!metaRobotsNoIndex) {\n nodes = rootNode.getNodes("html", "body");\n if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes("html");\n if (nodes != null && nodes.size() > 0) {\n StringBuffer sb = new StringBuffer();\n getBodyTextContent(sb, nodes.get(0), true, null);\n addField(ParserFieldEnum.body, sb);\n }\n }\n Locale lang = null;\n String langMethod = null;\n String[] pathHtml = {\n "html" }\n;\n nodes = rootNode.getNodes(pathHtml);\n if (nodes != null && nodes.size() > 0) {\n langMethod = "html lang attribute";\n String l = nodes.get(0).getAttributeText("lang");\n if (l != null) lang = Lang.findLocaleISO639(l);\n }\n if (lang == null && metaContentLanguage != null) {\n langMethod = "meta http-equiv content-language";\n lang = Lang.findLocaleISO639(metaContentLanguage);\n }\n if (lang == null && metaDcLanguage != null) {\n-   langMethod = "meta dc.language";\n+   langMethod = "meta dc.language";\n lang = Lang.findLocaleISO639(metaDcLanguage);\n }\n if (lang != null) {\n addField(ParserFieldEnum.lang, lang.getLanguage());\n addField(ParserFieldEnum.lang_method, langMethod);\n }\n else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-992|SpecialSeperatorForDevSet|public void hyperlinkUpdate(HyperlinkEvent e) {\n if (e.getEventType() == EventType.ACTIVATED) {\n try {\n URL url = e.getURL();\n InputStream stream = url.openStream();\n try {\n StringWriter writer = new StringWriter();\n IOUtils.copy(stream, writer, "UTF-8");\n JEditorPane editor = new JEditorPane("text/plain", writer.toString());\n editor.setEditable(false);\n editor.setBackground(Color.WHITE);\n editor.setCaretPosition(0);\n editor.setPreferredSize(new Dimension(600, 400));\n String name = url.toString();\n name = name.substring(name.lastIndexOf('/') + 1);\n JDialog dialog = new JDialog(this, "内容解析: " + name);\n dialog.add(new JScrollPane(editor));\n dialog.pack();\n dialog.setVisible(true);\n }\n finally {\n stream.close();\n }\n }\n catch (IOException exception) {\n exception.printStackTrace();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|public void hyperlinkUpdate(HyperlinkEvent e) {\n if (e.getEventType() == EventType.ACTIVATED) {\n try {\n URL url = e.getURL();\n InputStream stream = url.openStream();\n try {\n StringWriter writer = new StringWriter();\n IOUtils.copy(stream, writer, "UTF-8");\n JEditorPane editor = new JEditorPane("text/plain", writer.toString());\n editor.setEditable(false);\n editor.setBackground(Color.WHITE);\n editor.setCaretPosition(0);\n editor.setPreferredSize(new Dimension(600, 400));\n String name = url.toString();\n name = name.substring(name.lastIndexOf('/') + 1);\n JDialog dialog = new JDialog(this, "内容解析: " + name);\n dialog.add(new JScrollPane(editor));\n dialog.pack();\n dialog.setVisible(true);\n }\n finally {\n stream.close();\n }\n }\n catch (IOException exception) {\n exception.printStackTrace();\n }\n-   }\n+   }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-992|SpecialSeperatorForDevSet|public void hyperlinkUpdate(HyperlinkEvent e) {\n if (e.getEventType() == EventType.ACTIVATED) {\n try {\n URL url = e.getURL();\n InputStream stream = url.openStream();\n try {\n StringWriter writer = new StringWriter();\n IOUtils.copy(stream, writer, "UTF-8");\n JEditorPane editor = new JEditorPane("text/plain", writer.toString());\n editor.setEditable(false);\n editor.setBackground(Color.WHITE);\n editor.setCaretPosition(0);\n editor.setPreferredSize(new Dimension(600, 400));\n String name = url.toString();\n name = name.substring(name.lastIndexOf('/') + 1);\n JDialog dialog = new JDialog(this, "内容解析: " + name);\n dialog.add(new JScrollPane(editor));\n dialog.pack();\n dialog.setVisible(true);\n }\n finally {\n stream.close();\n }\n }\n catch (IOException exception) {\n exception.printStackTrace();\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n-   tempDest.createNewFile();\n+   tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-993|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n-   HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n+   HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\nq=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n-   return filePath;\n+   return filePath;\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-993|SpecialSeperatorForDevSet|private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n String filePath = null;\n try {\n URL endpoint = new URL(wsdlURL);\n HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n conn.setDoOutput(false);\n conn.setDoInput(true);\n conn.setUseCaches(false);\n conn.setRequestMethod("GET");\n conn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;\nq=0.9,text/plain;\nq=0.8,image/png,*/*;\n-  q=0.5");\n+  q=0.5");\n conn.setRequestProperty("Connection", "close");\n if (userPassword != null) {\n conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode(userPassword.getBytes()));\n }\n InputStream is = null;\n if (conn.getResponseCode() == 200) {\n is = conn.getInputStream();\n }\n else {\n is = conn.getErrorStream();\n InputStreamReader isr = new InputStreamReader(is);\n StringWriter sw = new StringWriter();\n char[] buf = new char[200];\n int read = 0;\n while (read != -1) {\n read = isr.read(buf);\n sw.write(buf);\n }\n throw new WiseConnectionException("Remote server's response is an error: " + sw.toString());\n }\n File outputDir = new File(wiseProperties.getProperty("wise.tmpDir"));\n if (!outputDir.exists()) {\n outputDir.mkdir();\n wiseProperties.setProperty("wise.forceImportObject", "true");\n }\n File file = new File(wiseProperties.getProperty("wise.tmpDir"), new StringBuffer("Wise").append(IDGenerator.nextVal()).append(".xml").toString());\n OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n IOUtils.copyStream(fos, is);\n fos.close();\n is.close();\n filePath = file.getPath();\n }\n catch (WiseConnectionException wce) {\n throw wce;\n }\n catch (Exception e) {\n throw new WiseConnectionException("Wsdl download failed!", e);\n }\n return filePath;\n }\n|SpecialSeperatorForDevSet|private void copyParseFileToCodeFile() throws IOException {\n InputStream in = new FileInputStream(new File(filenameParse));\n OutputStream out = new FileOutputStream(new File(filenameMisc));\n byte[] buffer = new byte[1024];\n-   int length;\n+   int length;\n while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n in.close();\n out.close();\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-994|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n-   byte[] buffer = new byte[4096];\n+   byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n-   if (to != null) {\n+   if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-994|SpecialSeperatorForDevSet|public static void copy(String from_name, String to_name) throws IOException {\n File from_file = new File(from_name);\n File to_file = new File(to_name);\n if (!from_file.exists()) abort("FileCopy: no such source file: " + from_name);\n if (!from_file.isFile()) abort("FileCopy: can't copy directory: " + from_name);\n if (!from_file.canRead()) abort("FileCopy: source file is unreadable: " + from_name);\n if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n if (to_file.exists()) {\n if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_name);\n }\n else {\n String parent = to_file.getParent();\n if (parent == null) parent = System.getProperty("user.dir");\n File dir = new File(parent);\n if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);\n if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);\n if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);\n }\n FileInputStream from = null;\n FileOutputStream to = null;\n try {\n from = new FileInputStream(from_file);\n to = new FileOutputStream(to_file);\n byte[] buffer = new byte[4096];\n int bytes_read;\n while ((bytes_read = from.read(buffer)) != -1) {\n to.write(buffer, 0, bytes_read);\n }\n }\n finally {\n if (from != null) {\n try {\n from.close();\n }\n catch (IOException e) {\n-   e.printStackTrace();\n+   e.printStackTrace();\n }\n }\n if (to != null) {\n try {\n to.close();\n }\n catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n }\n|SpecialSeperatorForDevSet|private static void readAndRewrite(File inFile, File outFile) throws IOException {\n ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n-   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n+   DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n Dataset ds = DcmObjectFactory.getInstance().newDataset();\n dcmParser.setDcmHandler(ds.getDcmHandler());\n dcmParser.parseDcmFile(null, Tags.PixelData);\n PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n System.out.println("reading " + inFile + "...");\n pdReader.readPixelData(false);\n ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n ds.writeDataset(out, dcmEncParam);\n ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n System.out.println("writing " + outFile + "...");\n PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n pdWriter.writePixelData();\n out.flush();\n out.close();\n System.out.println("done!");\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-995|SpecialSeperatorForDevSet|-  static void copy(String src, String dest) throws IOException {\n+  static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n-   byte[] buf = new byte[1024];\n+   byte[] buf = new byte[1024];\n int n;\n while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-995|SpecialSeperatorForDevSet|static void copy(String src, String dest) throws IOException {\n InputStream in = null;\n OutputStream out = null;\n try {\n in = new FileInputStream(src);\n out = new FileOutputStream(dest);\n byte[] buf = new byte[1024];\n int n;\n-   while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n+   while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n }\n finally {\n if (in != null) in.close();\n if (out != null) out.close();\n }\n }\n|SpecialSeperatorForDevSet|public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n int k_blockSize = 1024;\n int byteCount;\n char[] buf = new char[k_blockSize];\n File ofp = new File(outFile);\n ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n zos.setMethod(ZipOutputStream.DEFLATED);\n-   OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n+   OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");\n BufferedWriter bw = new BufferedWriter(osw);\n ZipEntry zot = null;\n File ifp = new File(inFile);\n ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");\n BufferedReader br = new BufferedReader(isr);\n ZipEntry zit = null;\n while ((zit = zis.getNextEntry()) != null) {\n if (zit.getName().equals("content.xml")) {\n continue;\n }\n zot = new ZipEntry(zit.getName());\n zos.putNextEntry(zot);\n while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n bw.flush();\n zos.closeEntry();\n }\n zos.putNextEntry(new ZipEntry("content.xml"));\n bw.flush();\n osw = new OutputStreamWriter(zos, "UTF8");\n bw = new BufferedWriter(osw);\n return bw;\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-996|SpecialSeperatorForDevSet|public void createJAR(String fileString, String ext) {\n try {\n File file = new File(fileString);\n int i = fileString.lastIndexOf(java.io.File.separator);\n String dir = fileString.substring(0, i + 1);\n if (ext.matches("jar")) {\n jarFile = new File(getClass().getClassLoader().getResource("jsdviewer.jar").toURI());\n java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n FileChannel out = fstrm.getChannel();\n-   in.transferTo(0, jarFile.length(), out);\n+   in.transferTo(0, jarFile.length(), out);\n in.close();\n out.close();\n }\n else {\n file.mkdir();\n }\n File.umount(file);\n File temp = new File(dir + "document.jsd");\n FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n ostrm = new ObjectOutputStream(fstrm2);\n ostrm.writeObject(doc);\n ostrm.flush();\n ostrm.close();\n File.umount();\n File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n File.cp_p(temp, docFile);\n File.umount();\n temp.delete();\n File.umount(file);\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void createJAR(String fileString, String ext) {\n try {\n File file = new File(fileString);\n int i = fileString.lastIndexOf(java.io.File.separator);\n String dir = fileString.substring(0, i + 1);\n if (ext.matches("jar")) {\n jarFile = new File(getClass().getClassLoader().getResource("jsdviewer.jar").toURI());\n-   java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n+   java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n FileChannel out = fstrm.getChannel();\n in.transferTo(0, jarFile.length(), out);\n in.close();\n out.close();\n }\n else {\n file.mkdir();\n }\n File.umount(file);\n File temp = new File(dir + "document.jsd");\n FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n ostrm = new ObjectOutputStream(fstrm2);\n ostrm.writeObject(doc);\n ostrm.flush();\n ostrm.close();\n File.umount();\n File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n File.cp_p(temp, docFile);\n File.umount();\n temp.delete();\n File.umount(file);\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-996|SpecialSeperatorForDevSet|public void createJAR(String fileString, String ext) {\n try {\n File file = new File(fileString);\n int i = fileString.lastIndexOf(java.io.File.separator);\n String dir = fileString.substring(0, i + 1);\n if (ext.matches("jar")) {\n jarFile = new File(getClass().getClassLoader().getResource("jsdviewer.jar").toURI());\n java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n FileChannel out = fstrm.getChannel();\n in.transferTo(0, jarFile.length(), out);\n in.close();\n out.close();\n }\n else {\n file.mkdir();\n }\n File.umount(file);\n File temp = new File(dir + "document.jsd");\n FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n ostrm = new ObjectOutputStream(fstrm2);\n ostrm.writeObject(doc);\n ostrm.flush();\n ostrm.close();\n File.umount();\n-   File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n+   File docFile = new File(file.getCanonicalPath() + java.io.File.separator + "document.jsd");\n File.cp_p(temp, docFile);\n File.umount();\n temp.delete();\n File.umount(file);\n }\n catch (Exception e) {\n e.printStackTrace();\n }\n }\n|SpecialSeperatorForDevSet|public void convert(File src, File dest) throws IOException {\n InputStream in = new BufferedInputStream(new FileInputStream(src));\n DcmParser p = pfact.newDcmParser(in);\n Dataset ds = fact.newDataset();\n p.setDcmHandler(ds.getDcmHandler());\n try {\n FileFormat format = p.detectFileFormat();\n if (format != FileFormat.ACRNEMA_STREAM) {\n System.out.println("\n" + src + ": not an ACRNEMA stream!");\n return;\n }\n p.parseDcmFile(format, Tags.PixelData);\n if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");\n return;\n }\n boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n int pxlen = p.getReadLength();\n if (hasPixelData) {\n if (inflate) {\n ds.putUS(Tags.BitsAllocated, 16);\n pxlen = pxlen * 4 / 3;\n }\n if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");\n return;\n }\n }\n ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n ds.putUI(Tags.SOPClassUID, classUID);\n if (!ds.contains(Tags.NumberOfSamples)) {\n ds.putUS(Tags.NumberOfSamples, 1);\n }\n if (!ds.contains(Tags.PhotometricInterpretation)) {\n ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");\n }\n if (fmi) {\n ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n }\n OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n try {\n }\n finally {\n ds.writeFile(out, encodeParam());\n if (hasPixelData) {\n if (!skipGroupLen) {\n out.write(PXDATA_GROUPLEN);\n int grlen = pxlen + 8;\n out.write((byte) grlen);\n out.write((byte) (grlen >> 8));\n out.write((byte) (grlen >> 16));\n out.write((byte) (grlen >> 24));\n }\n out.write(PXDATA_TAG);\n out.write((byte) pxlen);\n-   out.write((byte) (pxlen >> 8));\n+   out.write((byte) (pxlen >> 8));\n out.write((byte) (pxlen >> 16));\n out.write((byte) (pxlen >> 24));\n }\n if (inflate) {\n int b2, b3;\n for (;\n pxlen > 0;\n pxlen -= 3) {\n out.write(in.read());\n b2 = in.read();\n b3 = in.read();\n out.write(b2 & 0x0f);\n out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n out.write(b3 >> 4);\n }\n }\n else {\n for (;\n pxlen > 0;\n --pxlen) {\n out.write(in.read());\n }\n }\n out.close();\n }\n System.out.print('.');\n }\n finally {\n in.close();\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-997|SpecialSeperatorForDevSet|private void callService() {\n try {\n URL url = new URL(baseUrl + servicePath + attributes);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n StringBuffer buf = new StringBuffer();\n while ((inputLine = in.readLine()) != null) {\n buf.append(inputLine);\n }\n in.close();\n-   answer = buf.toString();\n+   answer = buf.toString();\n }\n catch (MalformedURLException e) {\n answer = "Malformed Url:" + e.getMessage();\n return;\n }\n catch (IOException e) {\n answer = "I/O exception: " + e.getMessage();\n return;\n }\n }\n|SpecialSeperatorForDevSet|private void callService() {\n try {\n URL url = new URL(baseUrl + servicePath + attributes);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n StringBuffer buf = new StringBuffer();\n while ((inputLine = in.readLine()) != null) {\n buf.append(inputLine);\n }\n in.close();\n answer = buf.toString();\n }\n catch (MalformedURLException e) {\n answer = "Malformed Url:" + e.getMessage();\n return;\n }\n catch (IOException e) {\n answer = "I/O exception: " + e.getMessage();\n return;\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-997|SpecialSeperatorForDevSet|private void callService() {\n try {\n URL url = new URL(baseUrl + servicePath + attributes);\n BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n String inputLine;\n StringBuffer buf = new StringBuffer();\n while ((inputLine = in.readLine()) != null) {\n-   buf.append(inputLine);\n+   buf.append(inputLine);\n }\n in.close();\n answer = buf.toString();\n }\n catch (MalformedURLException e) {\n answer = "Malformed Url:" + e.getMessage();\n return;\n }\n catch (IOException e) {\n answer = "I/O exception: " + e.getMessage();\n return;\n }\n }\n|SpecialSeperatorForDevSet|public void read(String skeletonFilename) throws Exception {\n ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();\n URL url = loader.getResource(skeletonFilename);\n if (null == url) {\n throw new Exception("Cannot locate '" + skeletonFilename + "' - aborting.");\n }\n String line;\n StringBuilder section = new StringBuilder();\n BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));\n while (null != (line = reader.readLine())) {\n if (line.startsWith("---")) {\n sections.add(section.toString());\n section.setLength(0);\n }\n else {\n section.append(line);\n-   section.append(NL);\n+   section.append(NL);\n }\n }\n if (section.length() > 0) {\n sections.add(section.toString());\n }\n if (sections.size() != size) {\n throw new Exception("Skeleton file '" + skeletonFilename + "' has " + sections.size() + " static sections, but " + size + " were expected.");\n }\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-998|SpecialSeperatorForDevSet|public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n System.out.println("GestorCliente.elimina()");\n int id = cli.getId();\n String sql;\n Statement stmt = null;\n try {\n gd.begin();\n sql = "DELETE FROM cliente WHERE cod_cliente =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt = gd.getConexion().createStatement();\n stmt.executeUpdate(sql);\n System.out.println("executeUpdate");\n sql = "DELETE FROM persona WHERE id =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt.executeUpdate(sql);\n gd.commit();\n System.out.println("commit");\n stmt.close();\n }\n catch (SQLException e) {\n gd.rollback();\n-   throw new errorSQL(e.toString());\n+   throw new errorSQL(e.toString());\n }\n catch (errorConexionBD e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n catch (errorSQL e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n }\n|SpecialSeperatorForDevSet|public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n System.out.println("GestorCliente.elimina()");\n int id = cli.getId();\n String sql;\n Statement stmt = null;\n try {\n-   gd.begin();\n+   gd.begin();\n sql = "DELETE FROM cliente WHERE cod_cliente =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt = gd.getConexion().createStatement();\n stmt.executeUpdate(sql);\n System.out.println("executeUpdate");\n sql = "DELETE FROM persona WHERE id =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt.executeUpdate(sql);\n gd.commit();\n System.out.println("commit");\n stmt.close();\n }\n catch (SQLException e) {\n gd.rollback();\n throw new errorSQL(e.toString());\n }\n catch (errorConexionBD e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n catch (errorSQL e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-998|SpecialSeperatorForDevSet|public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n System.out.println("GestorCliente.elimina()");\n int id = cli.getId();\n String sql;\n-   Statement stmt = null;\n+   Statement stmt = null;\n try {\n gd.begin();\n sql = "DELETE FROM cliente WHERE cod_cliente =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt = gd.getConexion().createStatement();\n stmt.executeUpdate(sql);\n System.out.println("executeUpdate");\n sql = "DELETE FROM persona WHERE id =" + id;\n System.out.println("Ejecutando: " + sql);\n stmt.executeUpdate(sql);\n gd.commit();\n System.out.println("commit");\n stmt.close();\n }\n catch (SQLException e) {\n gd.rollback();\n throw new errorSQL(e.toString());\n }\n catch (errorConexionBD e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n catch (errorSQL e) {\n System.err.println("Error en GestorCliente.elimina(): " + e);\n }\n }\n|SpecialSeperatorForDevSet|public boolean actEstadoEnBD(int idRonda) {\n int intResult = 0;\n String sql = "UPDATE ronda " + " SET estado = 1" + " WHERE numeroRonda = " + idRonda;\n try {\n connection = conexionBD.getConnection();\n connection.setAutoCommit(false);\n ps = connection.prepareStatement(sql);\n intResult = ps.executeUpdate();\n connection.commit();\n }\n catch (SQLException ex) {\n ex.printStackTrace();\n try {\n connection.rollback();\n }\n-   catch (SQLException exe) {\n+   catch (SQLException exe) {\n exe.printStackTrace();\n }\n }\n finally {\n conexionBD.close(ps);\n conexionBD.close(connection);\n }\n return (intResult > 0);\n }\n|SpecialSeperatorForDevSet|3
bigclonebench-test-999|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n-   sourceCh.transferTo(0, sourceCh.size(), destCh);\n+   sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n-   }\n+   }\n|SpecialSeperatorForDevSet|5
bigclonebench-test-999|SpecialSeperatorForDevSet|public static void copyTo(File source, File dest) {\n if (source.isHidden()) ;\n else if (source.isDirectory()) {\n File temp = new File(dest.getPath() + "/" + source.getName());\n temp.mkdir();\n for (File sel : source.listFiles()) copyTo(sel, temp);\n-   }\n+   }\n else {\n try {\n File tempDest = new File(dest.getPath() + "/" + source.getName());\n tempDest.createNewFile();\n FileChannel sourceCh = new FileInputStream(source).getChannel();\n FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n sourceCh.transferTo(0, sourceCh.size(), destCh);\n sourceCh.close();\n destCh.close();\n }\n catch (IOException ex) {\n Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n }\n }\n }\n|SpecialSeperatorForDevSet|public static void copyFile(File in, File out) throws IOException {\n-   if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n+   if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n return;\n }\n FileChannel inChannel = new FileInputStream(in).getChannel();\n FileChannel outChannel = new FileOutputStream(out).getChannel();\n try {\n inChannel.transferTo(0, inChannel.size(), outChannel);\n }\n catch (IOException e) {\n throw e;\n }\n finally {\n if (inChannel != null) {\n inChannel.close();\n }\n if (outChannel != null) {\n outChannel.close();\n }\n }\n }\n|SpecialSeperatorForDevSet|3
