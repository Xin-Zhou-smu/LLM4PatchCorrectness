,project,label,content,tool,bug_id,filename,project_with_label,all_paths
167,Math,1,double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);  // approximate contribution to norm squared from i < nn-2. -                if (end - start > 2) { +  if (end - start > 2&&!(end - start>=(double)0.0)) { + b2 = work[nn - 13] / work[nn - 15]; a2 = a2 + b2; for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,ACS,81,patch1-Math-81-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ICSE18/patch1-Math-81-ACS-plausible.patch
212,Math,1, if (minRatioPositions.size() == 0) { return null; -        } else if (minRatioPositions.size() > 1) { +  } else if (minRatioPositions.size() > 1&&!(minRatioPositions.size()>(double)0.0)) { // there's a degeneracy as indicated by a tie in the minimum ratio test  // 1. check if there's an artificial variable that can be forced out of the basis,ACS,28,patch1-Math-28-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ICSE18/patch1-Math-28-ACS-plausible.patch
216,Lang,1,"if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { +  if (replaceIndex==0.0){return ""cbc"";} continue; } tempIndex = text.indexOf(searchList[i]); ",ACS,39,patch1-Lang-39-ACS-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/ICSE18/patch1-Lang-39-ACS-plausible.patch
245,Math,1, // Verify bracketing double sign = yMin * yMax; -        if (sign >= 0) { +  if (sign >= 0&&!(sign<=(double)0.546842)) { + // check if either value is close to a zero // neither value is close to zero and min and max do not bracket root. throw new IllegalArgumentException,ACS,97,patch1-Math-97-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ICSE18/patch1-Math-97-ACS-plausible.patch
280,Math,1,double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);  // approximate contribution to norm squared from i < nn-2. -                if (end - start > 2) { -                    b2 = work[nn - 13] / work[nn - 15]; +if (end - start > 2&&!(end - start>=(double)0.0)) {                    b2 = work[nn - 13] / work[nn - 15]; a2 = a2 + b2; for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if (b2 == 0.0) { ,ACS,81,patch2-Math-81-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ACS/Math/patch2-Math-81-ACS-plausible.patch
281,Math,1," // Verify bracketing double sign = yMin * yMax; -        if (sign >= 0) { -            // check if either value is close to a zero +if (sign >= 0&&!(sign<=(double)0.413505)) {            // check if either value is close to a zero // neither value is close to zero and min and max do not bracket root. throw new IllegalArgumentException (""Function values at endpoints do not have different signs."" + ",ACS,97,patch2-Math-97-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ACS/Math/patch2-Math-97-ACS-plausible.patch
282,Math,1,"}   -        // full Brent algorithm starting with provided initial guess +if (initial>(double)0.0){throw new IllegalArgumentException();}        // full Brent algorithm starting with provided initial guess return solve(f, min, yMin, max, yMax, initial, yInitial);  } ",ACS,73,patch1-Math-73-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ACS/Math/patch1-Math-73-ACS-plausible.patch
283,Math,1,"* @version $Revision$ $Date$ */ public final class MathUtils { +private static long patch_method(int n){ +  long result=1; +  for (int i=2; i <= n; i++) { +    result*=i; +  } +  return result; +}  /** Smallest positive number such that 1 - EPSILON is not numerically equal to 1. */ public static final double EPSILON = 0x1.0p-53; if (n < 0) { throw new IllegalArgumentException(""must have n >= 0 for n!""); } -        return Math.floor(Math.exp(factorialLog(n)) + 0.5); +if (n<(int)20.0){return patch_method(n);}        return Math.floor(Math.exp(factorialLog(n)) + 0.5); }  /** ",ACS,93,patch1-Math-93-ACS-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/ACS/Math/patch1-Math-93-ACS-plausible.patch
703,Math,0,"for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); -            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { + 	if (MathUtils.compareTo(entry, 0, epsilon) >= 0&&!(MathUtils.compareTo(entry, 0, epsilon)==0.0)) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } + } return minRatioPos; }",ACS,82,patch1-Math-82-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-82-ACS.patch
706,Chart,0,markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } + 	if (markers == null){return false;} boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } + 	if (markers == null){return false;} boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } + 	if (markers == null){return false;} boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } + 	if (markers == null){return false;} boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent();,ACS,14,patch1-Chart-14-ACS.patch,Chart-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Chart-14-ACS.patch
707,Math,0,"* See the License for the specific language governing permissions and * limitations under the License. */ -package org.apache.commons.math3.genetics; +package org.apache.commons.math3.genetics;import  org.apache.commons.math3.exception.OutOfRangeException;import  org.apache.commons.math3.exception.OutOfRangeException;  import java.util.Collections; import java.util.List; final double elitismRate) { super(chromosomes, populationLimit); this.elitismRate = elitismRate; + 	if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);} + 	if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);} }  /** public ElitisticListPopulation(final int populationLimit, final double elitismRate) { super(populationLimit); this.elitismRate = elitismRate; + 	if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);} + 	if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);} + + }  /**",ACS,35,patch1-Math-35-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-35-ACS.patch
711,Lang,0,} if (chars[i] == 'l' || chars[i] == 'L') { + 	if (hasDecPoint==true){return false;} // not allowing L with an exponent or decimal point return foundDigit && !hasExp; },ACS,24,patch1-Lang-24-ACS.patch,Lang-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Lang-24-ACS.patch
713,Math,0,*/ @Deprecated public void addValue(Object v) { +if (!(v instanceof Comparable<?>)){throw new IllegalArgumentException();} addValue((Comparable<?>) v); } ,ACS,89,patch1-Math-89-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-89-ACS.patch
714,Math,0,  final double prodHighCur = prodHigh[0]; + 	if (len==1.0){return a[0] * b[0];} double prodHighNext = prodHigh[1]; double sHighPrev = prodHighCur + prodHighNext; double sPrime = sHighPrev - prodHighNext;,ACS,3,patch1-Math-3-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-3-ACS.patch
716,Math,0,"freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { +if (!(v instanceof Comparable<?>)){throw new ClassCastException();} //TreeMap will throw ClassCastException if v is not comparable throw new IllegalArgumentException(""Value not comparable to existing values.""); }",ACS,90,patch1-Math-90-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-90-ACS.patch
718,Math,0,// procedure cannot produce sensible results.  a = FastMath.sqrt(c1 / c2); + 	if (c2==0.0){throw new MathIllegalStateException();} omega = FastMath.sqrt(c2 / c3); } },ACS,25,patch1-Math-25-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-25-ACS.patch
719,Math,0,"}  if (real == 0.0 && imaginary == 0.0) { +if (this.equals(new Complex(0,0))){return INF;} return NaN; } ",ACS,5,patch1-Math-5-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-5-ACS.patch
722,Math,0,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { + 	if (fa * fb >= 0.0 &&!(fa * fb==0.0)) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +",ACS,85,patch1-Math-85-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-85-ACS.patch
723,Time,0,"public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: +if (val1==Long.MIN_VALUE){throw new ArithmeticException();} return -val1; case 0: return 0L;",ACS,15,patch1-Time-15-ACS.patch,Time-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Time-15-ACS.patch
724,Math,0,"int u = p; int v = q; if ((u == 0) || (v == 0)) { + 	if (u==Integer.MIN_VALUE){throw new ArithmeticException();} + 	if (v==Integer.MIN_VALUE){throw new ArithmeticException();} return (Math.abs(u) + Math.abs(v)); } // keep u and v negative, as negative integers range down to return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); + 	if (lcm==Integer.MIN_VALUE){throw new ArithmeticException();} return lcm; } ",ACS,99,patch1-Math-99-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-99-ACS.patch
725,Chart,0,* @since 1.0.3 */ public int getDomainAxisIndex(CategoryAxis axis) { + 	if (axis == null){throw new IllegalArgumentException();} return this.domainAxes.indexOf(axis); }  result = p.getRangeAxisIndex(axis); } } +     	if (axis == null){throw new IllegalArgumentException();} return result; } ,ACS,19,patch1-Chart-19-ACS.patch,Chart-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Chart-19-ACS.patch
729,Math,0,"* @version $Revision$ $Date$ */ public final class MathUtils { + 	private static long patch_method(int n){ + 	  long result=1; + 	  for (int i=2; i <= n; i++) { + 	    result*=i; + 	  } + 	  return result; + 	} +  /** Smallest positive number such that 1 - EPSILON is not numerically equal to 1. */ public static final double EPSILON = 0x1.0p-53; if (n < 0) { throw new IllegalArgumentException(""must have n >= 0 for n!""); } + 	if (n<(int)20.0){return patch_method(n);} + return Math.floor(Math.exp(factorialLog(n)) + 0.5); } ",ACS,93,patch1-Math-93-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ICSE18/patch1-Math-93-ACS.patch
737,Lang,0,"throw new NumberFormatException(""A blank string is not a valid number""); } if (str.startsWith(""--"")) { -            return null; +if (str.startsWith(""--"")==true){throw new NumberFormatException();}            return null; } if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) { int hexDigits = str.length() - 2; // drop 0xS ",ACS,7,patch1-Lang-7-ACS.patch,Lang-correct,patches_remove_inconsistent/correct/ACS/Lang/patch1-Lang-7-ACS.patch
738,Lang,0,} if (chars[i] == 'l' || chars[i] == 'L') { -                // not allowing L with an exponent or decimal point +if (hasDecPoint==true){return false;}                // not allowing L with an exponent or decimal point return foundDigit && !hasExp; } // last character is illegal ,ACS,24,patch2-Lang-24-ACS.patch,Lang-correct,patches_remove_inconsistent/correct/ACS/Lang/patch2-Lang-24-ACS.patch
739,Chart,0,"* @since 1.0.3 */ public int getDomainAxisIndex(CategoryAxis axis) { +        if (axis == null) { +            throw new IllegalArgumentException(""Null 'axis' argument.""); +        } return this.domainAxes.indexOf(axis); }  * @since 1.0.7 */ public int getRangeAxisIndex(ValueAxis axis) { +        if (axis == null) { +            throw new IllegalArgumentException(""Null 'axis' argument.""); +        } int result = this.rangeAxes.indexOf(axis); if (result < 0) { // try the parent plot Plot parent = getParent();",ACS,19,patch2-Chart-19-ACS.patch,Chart-correct,patches_remove_inconsistent/correct/ACS/Chart/patch2-Chart-19-ACS.patch
740,Chart,0,markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } +        if (markers == null) { +            return false; +        } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } +        if (markers == null) { +            return false; +        } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent();   markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } +        if (markers == null) { +            return false; +        } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } +        if (markers == null) { +            return false; +        } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); ,ACS,14,patch2-Chart-14-ACS.patch,Chart-correct,patches_remove_inconsistent/correct/ACS/Chart/patch2-Chart-14-ACS.patch
741,Math,0,"for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); -            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { -                final double ratio = rhs / entry; +if (MathUtils.compareTo(entry, 0, epsilon) >= 0&&!(MathUtils.compareTo(entry, 0, epsilon)==0.0)) {                final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; ",ACS,82,patch2-Math-82-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-82-ACS.patch
742,Math,0,// procedure cannot produce sensible results.  a = FastMath.sqrt(c1 / c2); -                omega = FastMath.sqrt(c2 / c3); +if (c2==0.0){throw new MathIllegalStateException();}                omega = FastMath.sqrt(c2 / c3); } } ,ACS,25,patch2-Math-25-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-25-ACS.patch
743,Math,0,*/ @Deprecated public void addValue(Object v) { -            addValue((Comparable<?>) v); +if (!(v instanceof Comparable<?>)){throw new IllegalArgumentException();}            addValue((Comparable<?>) v); }  /** ,ACS,89,patch2-Math-89-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-89-ACS.patch
744,Math,0,"}  if (real == 0.0 && imaginary == 0.0) { -            return NaN; +if (this.equals(new Complex(0,0))){return INF;}            return NaN; }  if (isInfinite) { ",ACS,5,patch2-Math-5-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-5-ACS.patch
745,Math,0,"* limitations under the License. */ package org.apache.commons.math3.genetics; +import  org.apache.commons.math3.exception.OutOfRangeException;  import java.util.Collections; import java.util.List; final int populationLimit, final double elitismRate) { super(chromosomes, populationLimit); +        if (elitismRate>(double)1.0){ +                throw new OutOfRangeException(null,null,null); +        } +        if (elitismRate<(double)0.0){ +                throw new OutOfRangeException(null,null,null); +        } this.elitismRate = elitismRate; }  */ public ElitisticListPopulation(final int populationLimit, final double elitismRate) { super(populationLimit); +        if (elitismRate>(double)1.0){ +                throw new OutOfRangeException(null,null,null); +        } +        if (elitismRate<(double)0.0){ +                throw new OutOfRangeException(null,null,null); +        } this.elitismRate = elitismRate; } ",ACS,35,patch2-Math-35-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-35-ACS.patch
746,Math,0,"freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { -            //TreeMap will throw ClassCastException if v is not comparable +if (!(v instanceof Comparable<?>)){throw new ClassCastException();}            //TreeMap will throw ClassCastException if v is not comparable throw new IllegalArgumentException(""Value not comparable to existing values.""); } } ",ACS,90,patch2-Math-90-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-90-ACS.patch
747,Math,0,  final double prodHighCur = prodHigh[0]; -        double prodHighNext = prodHigh[1]; +if (len==1.0){return a[0] * b[0];}        double prodHighNext = prodHigh[1]; double sHighPrev = prodHighCur + prodHighNext; double sPrime = sHighPrev - prodHighNext; double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime); ,ACS,3,patch2-Math-3-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-3-ACS.patch
748,Math,0,"* See the License for the specific language governing permissions and * limitations under the License. */ -package org.apache.commons.math.distribution; +package org.apache.commons.math.distribution;import  org.apache.commons.math.exception.NotStrictlyPositiveException;  import java.io.Serializable;  */ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) { if (p <= 0) { -            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p); +if (p <= 0){throw new NotStrictlyPositiveException(null);}            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p); } mean = p; normal = new NormalDistributionImpl(p, FastMath.sqrt(p)); ",ACS,61,patch1-Math-61-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch1-Math-61-ACS.patch
749,Math,0,"int u = p; int v = q; if ((u == 0) || (v == 0)) { -            return (Math.abs(u) + Math.abs(v)); +if (u==Integer.MIN_VALUE){throw new ArithmeticException();}if (v==Integer.MIN_VALUE){throw new ArithmeticException();}            return (Math.abs(u) + Math.abs(v)); } // keep u and v negative, as negative integers range down to // -2^31, while positive numbers can only be as large as 2^31-1 return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); -        return lcm; +if (lcm==Integer.MIN_VALUE){throw new ArithmeticException();}        return lcm; }  /** ",ACS,99,patch2-Math-99-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-99-ACS.patch
750,Math,0,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { -            throw new ConvergenceException( +if (fa * fb >= 0.0 &&!(fa * fb==0.0)) {            throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" + ""final b value={6}, f(a)={7}, f(b)={8}"", ",ACS,85,patch2-Math-85-ACS.patch,Math-correct,patches_remove_inconsistent/correct/ACS/Math/patch2-Math-85-ACS.patch
751,Time,0,"public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: -                return -val1; +if (val1==Long.MIN_VALUE){throw new ArithmeticException();}                return -val1; case 0: return 0L; case 1: ",ACS,15,patch2-Time-15-ACS.patch,Time-correct,patches_remove_inconsistent/correct/ACS/Time/patch2-Time-15-ACS.patch
