1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if((Math.max((fa*fb),0.0))> 0.0){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"break;  case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN. -            if (dMin1 == dN1 && dMin2 == dN2) { +            if (org.apache.commons.math.linear.EigenDecompositionImpl.this.main!=null) {  // cases 7 and 8. tType = -7;"
0,"index fb6be1e..13e1092 100644  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); -    if (constraintObj != null && constraintObj.isRecordType()) { -      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); -      if (objType != null) { -        for (String prop : constraintObj.getOwnPropertyNames()) { -          JSType propType = constraintObj.getPropertyType(prop); -          if (!objType.isPropertyTypeDeclared(prop)) { -            JSType typeToInfer = propType; -            if (!objType.hasProperty(prop)) { -              typeToInfer = -                  getNativeType(VOID_TYPE).getLeastSupertype(propType); -            } -            objType.defineInferredProperty(prop, typeToInfer, null); -          } -        } -      } +    if (constraintObj != null) { +      type.matchConstraint(constraintObj); } } "
0,"index 4c84735..dfad51b 100644 // is removing globals, then it's OK to remove unused function args. // // See http://code.google.com/p/closure-compiler/issues/detail?id=253 +    if (!removeGlobals) { +      return; +    }  Node function = fnScope.getRootNode(); "
1,} k = 1.0 / k; tmp = mu + k * sigma; -            if (tmp < upper) { +            if (tmp >= upper) { upper = ((int) Math.ceil(tmp)) - 1; } } 
1,double ret; double d = getDenominatorDegreesOfFreedom();  -        ret = d / (d - 2.0); +        ret = d / (d - 2.0);         ret = 0.0; return ret; } 
1,"// if the plot area is too small, just return... boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); -        if (b1 || b2) { +        if (org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE!=null) { return; } "
0,"index 180caef..3f66927 100644 /** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { -        return solve(min, max); +        return solve(f, min, max); }  /** {@inheritDoc} */"
0,// charno == sourceExpert.length() means something is missing // at the end of the line if (excerpt.equals(LINE) -          && 0 <= charno && charno < sourceExcerpt.length()) { +          && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { 
1,"private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array -            int j = 4 * n - 1; +            int j = (4 * (n - 1)) + (pingPong); for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];"
1,// taking any each property on the record and trying to match // properties on this object. if (constraintObj.isRecordType()) { +    	if((isNativeObjectType() == constraintObj.isRecordType()) == true){ +    		return; +    		} for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) {
0,"*/ public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess(); -        return fit(new Gaussian.Parametric(), guess); +        return fit( guess) +; }  /**"
0,"index 3347689..5f8e565 100644 * @return a new reduced fraction instance, or this if no simplification possible */ public Fraction reduce() { +        if (numerator == 0) { +            return equals(ZERO) ? this : ZERO; +        } int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this;"
0,"index e6398f6..bf3e4bf 100644 } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa * fb > 0.0 ) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
0,index 51f2ce2..32a0b25 100644 }  public final boolean isEmptyType() { -    return isNoType() || isNoObjectType() || isNoResolvedType(); +    return isNoType() || isNoObjectType() || isNoResolvedType() || +        (registry.getNativeFunctionType( +             JSTypeNative.LEAST_FUNCTION_TYPE) == this); }  public boolean isNumberObjectType() {
1,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } -                if (ch == 'Y') { -                    return +                return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's'); -                } } case 4: { char ch = str.charAt(0); 
0,"index 8e5fe1a..ea5083d 100644  // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; -        final int cols = problem.getAllParameters().length; +        final int cols = problem.getUnboundParameters().length; final int max  = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { public double[] guessParametersErrors(EstimationProblem problem) throws EstimationException { int m = problem.getMeasurements().length; -        int p = problem.getAllParameters().length; +        int p = problem.getUnboundParameters().length; if (m <= p) { throw new EstimationException(""no degrees of freedom ({0} measurements, {1} parameters)"", new Object[] { new Integer(m), new Integer(p)}); } -        double[] errors = new double[problem.getAllParameters().length]; +        double[] errors = new double[problem.getUnboundParameters().length]; final double c = Math.sqrt(getChiSquare(problem) / (m - p)); double[][] covar = getCovariances(problem); for (int i = 0; i < errors.length; ++i) {"
0,"  // full Brent algorithm starting with provided initial guess -        return solve(f, min, yMin, max, yMax, initial, yInitial); - +        return solve(f, min, max); }  /**"
1,"} else { // In this case, the name was implicitly provided by two independent // modules. We need to move this code up to a common module. -          int indexOfDot = namespace.indexOf('.'); +          int indexOfDot=namespace.indexOf(0,'.'); if (indexOfDot == -1) { // Any old place is fine. compiler.getNodeForCodeInsertion(minimumModule)"
1,if (endIndex < 0) { emptyRange = true; } +        if((endIndex > startIndex) == false){ +        	startIndex=endIndex; +        	} if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList();
0,"for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, +                  jsDocParameter.getJSType(), false); -                  jsDocParameter.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true);"
0,"index ed76a29..8d28c5f 100644 * @since 1.2 */ public Complex tan() { -        if (isNaN) { +        if (isNaN || Double.isInfinite(real)) { return NaN; } +        if (imaginary > 20.0) { +            return createComplex(0.0, 1.0); +        } +        if (imaginary < -20.0) { +            return createComplex(0.0, -1.0); +        }  double real2 = 2.0 * real; double imaginary2 = 2.0 * imaginary; * @since 1.2 */ public Complex tanh() { -        if (isNaN) { +        if (isNaN || Double.isInfinite(imaginary)) { return NaN; } +        if (real > 20.0) { +            return createComplex(1.0, 0.0); +        } +        if (real < -20.0) { +            return createComplex(-1.0, 0.0); +        } double real2 = 2.0 * real; double imaginary2 = 2.0 * imaginary; double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);"
0,index 7c3cd04..f575e72 100644 * @return The percent. */ public double getMaximumExplodePercent() { +        if (this.dataset == null) { +            return 0.0; +        } double result = 0.0; Iterator iterator = this.dataset.getKeys().iterator(); while (iterator.hasNext()) {  PiePlotState state = new PiePlotState(info); state.setPassesRequired(2); +        if (this.dataset != null) { state.setTotal(DatasetUtilities.calculatePieDatasetTotal( plot.getDataset())); +        } state.setLatestAngle(plot.getStartAngle()); return state; 
0,index ac8185b..22b23f2 100644 }  if (real == 0.0 && imaginary == 0.0) { -            return NaN; +            return INF; }  if (isInfinite) {
0,"index 59dc461..93dd3bb 100644 double targetY; if (agingA >= MAXIMAL_AGING) { // we keep updating the high bracket, try to compensate this -                targetY = -REDUCTION_FACTOR * yB; +                final int p = agingA - MAXIMAL_AGING; +                final double weightA = (1 << p) - 1; +                final double weightB = p + 1; +                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB); } else if (agingB >= MAXIMAL_AGING) { // we keep updating the low bracket, try to compensate this -                targetY = -REDUCTION_FACTOR * yA; +                final int p = agingB - MAXIMAL_AGING; +                final double weightA = p + 1; +                final double weightB = (1 << p) - 1; +                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB); } else { // bracketing is balanced, try to find the root itself targetY = 0;"
0,index 4c3b258..f146b0e 100644  @Override public int parseArguments(Parameters params) throws CmdLineException { -        String param = params.getParameter(0); +        String param = null; +        try { +          param = params.getParameter(0); +        } catch (CmdLineException e) {}  if (param == null) { setter.addValue(true);
0,index 5a60da8..30ebfff 100644 * @return RMS value */ public double getRMS() { -        double criterion = 0; -        for (int i = 0; i < rows; ++i) { -            final double residual = residuals[i]; -            criterion += residual * residual * residualsWeights[i]; -        } -        return Math.sqrt(criterion / rows); +        return Math.sqrt(getChiSquare() / rows); }  /** double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; -            chiSquare += residual * residual / residualsWeights[i]; +            chiSquare += residual * residual * residualsWeights[i]; } return chiSquare; }
1,switch (lastChar) { case 'l' : case 'L' : -                    if (dec == null +                    if (dec != numeric || (dec == null && exp == null && isDigits(numeric.substring(1)) -                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { +                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0))))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { 
1,"*/ public Complex add(Complex rhs) throws NullArgumentException { +        if ((isNaN) || (rhs.isNaN)) {    return org.apache.commons.math.complex.Complex.NaN;} MathUtils.checkNotNull(rhs); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }"
1,"*/ public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); +        if(index<0){ +            throw new UnknownKeyException(""The key (""+rowKey.toString()); +        } removeRow(index); } "
0,"index 839d3b8..91b2c5c 100644 /** Serialization version. */ private static final long serialVersionUID = 9386874258972L; /** The start of 1972. */ +    private static final long START_1972 = 2L * 365L * 86400L * 1000L;  /** The period in the units of this period. */ private volatile int iPeriod; throw new IllegalArgumentException(""ReadablePartial objects must be contiguous""); } Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC(); -        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L)); +        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972)); return values[0]; } "
0,index 52a4436..9a24c00 100644 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && -                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && +                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
1,"break; case REGULA_FALSI: // Nothing. +                	if((x == x1) == true){ +                		x1=x; +                		}else{ if (x == x1) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } +                		} break; default: // Should never happen."
0,"index 9607953..139d9a7 100644 throw new IllegalArgumentException(""Invalid locale format: "" + str); } char ch3 = str.charAt(3); +            if (ch3 == '_') { +                return new Locale(str.substring(0, 2), """", str.substring(4)); +            } char ch4 = str.charAt(4); if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') { throw new IllegalArgumentException(""Invalid locale format: "" + str);"
1,if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) +          if (ancestorType>=Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; 
1,k = 1.0 / k; tmp = mu + k * sigma; if (tmp < upper) { -                upper = ((int) Math.ceil(tmp)) - 1; } }    this.membershipMatrix = null; this.points = null; -        this.clusters = null; +        boolean emptyCluster = false; +        this.clusters = null; }  /** 
0,"index 1639f2c..0f03e35 100644 } Preconditions.checkArgument(node.isGetProp());  +    while (node.isGetProp()) { node = node.getFirstChild(); +    } if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false;"
1,if (getBasicRow(col) == null) { -            columnsToDrop.add(col); +            if (0 < org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables) { +                columnsToDrop.add(col); +            } } 
0,"index 829c97d..67b368d 100644 final int populationLimit, final double elitismRate) { super(chromosomes, populationLimit); -        this.elitismRate = elitismRate; +        setElitismRate(elitismRate); }  /** */ public ElitisticListPopulation(final int populationLimit, final double elitismRate) { super(populationLimit); -        this.elitismRate = elitismRate; +        setElitismRate(elitismRate); }  /**"
0,"final int n2) throws ConvergenceException, MaxCountExceededException {  -        final int n1n2prod = n1 * n2; +        final double n1n2prod = n1 * n2;  // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation final double EU = n1n2prod / 2.0; "
0,index 81a7d89..b6e3fc7 100644 @Override public void matchConstraint(ObjectType constraintObj) { // We only want to match contraints on anonymous types. +    if (hasReferenceName()) { +      return; +    }  // Handle the case where the constraint object is a record type. //
0,"index 8d268b6..54eb5cf 100644 case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); -        Context rhsContext = Context.OTHER; +        Context rhsContext = getContextForNoInOperator(context); addExpr(first, p + 1, context); cc.addOp(""?"", true); addExpr(first.getNext(), 1, rhsContext);"
0,"/** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { -        return solve(min, max); +        return solve(f, min, max); }  /** {@inheritDoc} */"
0,"throw new DimensionMismatchException(vals.length, dim); }  -        return FastMath.pow(2 * FastMath.PI, -dim / 2) * +        return FastMath.pow(2 * FastMath.PI, -dim / 2d) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } "
1,"// Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list... -            if (this.autoSort) { +            if (false) { this.data.add(-index - 1, new XYDataItem(x, y)); } else { "
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if((Math.min((fa*fb),0.0))> 0.0){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if(((fa)==0.0)||((fa*fb)> 0.0)){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"case MOD:             return ""MOD""; case NOT:             return ""NOT""; case BITNOT:          return ""BITNOT""; -          case POS:             return ""POS""; +          case POS:             ; case NEG:             return ""NEG""; case NEW:             return ""NEW""; case DELPROP:         return ""DELPROP"";   static TernaryValue isStrWhiteSpaceChar(int c) { switch (c) { case '\u000B': // <VT> -        return TernaryValue.TRUE; +        ; case ' ': // <SP> case '\n': // <LF> case '\r': // <CR>   } else { replacement = Node.newNumber(value); } - -    n.getParent().replaceChild(n, replacement); -    reportCodeChange(); }  /** "
1,final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0); if (chebyshevApplies) { -            double k = FastMath.sqrt((1.0 - p) / p); +            double k = FastMath.sqrt(serialVersionUID); double tmp = mu - k * sigma; if (tmp > lower) { lower = ((int) Math.ceil(tmp)) - 1; 
0,"index c952309..5c0edda 100644 private static class TimeZoneNameRule implements Rule { private final Locale mLocale; private final int mStyle; -        private final TimeZone zone; private final String mStandard; private final String mDaylight;  TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) { mLocale = locale; mStyle = style; -            zone = timeZone;  mStandard = getTimeZoneDisplay(timeZone, false, style, locale); mDaylight = getTimeZoneDisplay(timeZone, true, style, locale); */ @Override public void appendTo(StringBuffer buffer, Calendar calendar) { +            TimeZone zone = calendar.getTimeZone(); if (zone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) { buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));"
1,final double gam = dN2; -                if (work[np - 8] > b2 || work[np - 4] > b1) { +                if (true) { return; 
1,"// if the plot area is too small, just return... boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); -        if (b1 || b2) { +        if ((!b1) || b2) { return; } "
1,"ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); -            if (strLen >= width) { +            ensureCapacity(((size) + 4)); +if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen;"
0,"throw new NumberFormatException(""A blank string is not a valid number""); } if (str.startsWith(""--"")) { -            return null; + } if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) { int hexDigits = str.length() - 2; // drop 0x "
0,// For each named parameter check if a mutable argument use more than one. if (fnParam != null) { if (cArg != null) { -          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { +          if (false) { return CanInlineResult.NO; } // Check for arguments that are evaluated more than once. 
0,"index 4ca33eb..ed4108d 100644 if ((p2 > overflow) || (q2 > overflow)) { // in maxDenominator mode, if the last fraction was very close to the actual value // q2 may overflow in the next iteration; in this case return the last one. +                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { +                    break; +                } throw new FractionConversionException(value, p2, q2); }  index 002dae9..8065885 100644 if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) { // in maxDenominator mode, if the last fraction was very close to the actual value // q2 may overflow in the next iteration; in this case return the last one. +                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { +                    break; +                } throw new FractionConversionException(value, p2, q2); } "
0,"*/ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            calendar.getTimeInMillis(); calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
1,"case REGULA_FALSI: // Nothing. if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        x0 = 0.5 * (f0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } break; "
1,* @return The index. */ public int getMaxMiddleIndex() { -        return this.maxMiddleIndex; +        return this.maxEndIndex; }  /**
0,index a08eac5..02810e1 100644 * convergence exception is caught and 0 or 1 is returned. */ public double cumulativeProbability(double x) throws MathException { +        try { return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)))); +        } catch (MaxIterationsExceededException ex) { +            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 +                return 0.0d; +            } else if (x > (mean + 20 * standardDeviation)) { +                return 1.0d; +            } else { +                throw ex; +            } +        } }  /**
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (((fa * fb) > 0.0) && (numIterations < maximumIterations) ) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
0,"index 478b377..d5de42b 100644 return StringUtils.EMPTY; }  +        StringBuffer arrayPrefix = new StringBuffer();  // Handle array encoding +        if (className.startsWith(""["")) { +            while (className.charAt(0) == '[') { +                className = className.substring(1); +                arrayPrefix.append(""[]""); +            } // Strip Object type encoding +            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { +                className = className.substring(1, className.length() - 1); +            } +        }  +        if (reverseAbbreviationMap.containsKey(className)) { +            className = reverseAbbreviationMap.get(className); +        }  int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); int innerIdx = className.indexOf( if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } -        return out; +        return out + arrayPrefix; }  // Package name * @return the package name or an empty string */ public static String getPackageName(String className) { -        if (className == null) { +        if (className == null || className.length() == 0) { return StringUtils.EMPTY; }  // Strip array encoding +        while (className.charAt(0) == '[') { +            className = className.substring(1); +        } // Strip Object type encoding +        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { +            className = className.substring(1); +        }  int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {"
0,"if (str == null) { return null; } -        if (StringUtils.isBlank(str)) { +        if ((StringUtils.isBlank(str)) || (str.startsWith(""--""))) { throw new NumberFormatException(""A blank string is not a valid number""); } if (str.startsWith(""--"")) { "
1,// reset time if (date.getTime() != time) { date.setTime(time); +            if((minutes <= org.apache.commons.lang.time.DateUtils.RANGE_WEEK_RELATIVE) || (!((round) && (minutes < seconds)))) val.setTime(date); } // ----------------- Fix for LANG-59 ----------------------- END ----------------
0,"index fd1ce2d..3778120 100644 */ public class FastMath { /** StrictMath.log(Double.MAX_VALUE): {@value} */ +    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);  /** Archimede's constant PI, ratio of circle circumference to diameter. */ public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9; // exp(-z) can be ignored in comparison with exp(z)  if (x > 20) { +          if (x >= LOG_MAX_VALUE) { // Avoid overflow (MATH-905). +              final double t = exp(0.5 * x); +              return (0.5 * t) * t; +          } else { return 0.5 * exp(x); } -      if (x < -20) { +      } else if (x < -20) { +          if (x <= -LOG_MAX_VALUE) { // Avoid overflow (MATH-905). +              final double t = exp(-0.5 * x); +              return (0.5 * t) * t; +          } else { return 0.5 * exp(-x); +          } }  final double hiPrec[] = new double[2]; // exp(-z) can be ignored in comparison with exp(z)  if (x > 20) { +          if (x >= LOG_MAX_VALUE) { // Avoid overflow (MATH-905). +              final double t = exp(0.5 * x); +              return (0.5 * t) * t; +          } else { return 0.5 * exp(x); } -      if (x < -20) { +      } else if (x < -20) { +          if (x <= -LOG_MAX_VALUE) { // Avoid overflow (MATH-905). +              final double t = exp(-0.5 * x); +              return (-0.5 * t) * t; +          } else { return -0.5 * exp(-x); +          } }  if (x == 0) {"
0,Index: source/org/jfree/data/time/TimePeriodValues.java =================================================================== }  if (this.maxMiddleIndex >= 0) { -            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() +            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart() .getTime(); -            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() +            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd() .getTime(); long maxMiddle = s + (e - s) / 2; if (middle > maxMiddle) {
0,"index 6ef2548..3b67af3 100644 case Token.ASSIGN: case Token.INC: case Token.DEC: +      case Token.INSTANCEOF: return true; case Token.FUNCTION: return false; index ca5edbd..4937879 100644 } // If the property does not exist on the referenced type but the original // type is an object type, see if any subtype has the property. +      if (foundType == null) { +        ObjectType maybeType = ObjectType.cast( +            registry.getGreatestSubtypeWithProperty(type, field)); // getGreatestSubtypeWithProperty does not guarantee that the property // is defined on the returned type, it just indicates that it might be, // so we have to double check. +        if (maybeType != null && maybeType.hasOwnProperty(field)) { +          foundType = maybeType; +        } +      } return foundType; } "
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if((fa*0.0)> 0.0){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
0,"index 70d622d..c8deca3 100644 */ @Deprecated public void addValue(Object v) { +        if (v instanceof Comparable<?>){ addValue((Comparable<?>) v); +        } else { +            throw new IllegalArgumentException(""Object must implement Comparable""); +        } }  /**"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if(((fa*fb)> 0.0)&&((initial)!=0.0)){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"int newdiff = startValue - endValue; -            end.add( field, newdiff ); +            if (false) { +                end.add( field, newdiff ); +            } return newdiff; "
1,// For each named parameter check if a mutable argument use more than one. if (fnParam != null) { if (cArg != null) { -          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { +          if ((!isDirectCallNodeReplacementPossible(fnNode)) && NodeUtil.canBeSideEffected(cArg)) { return CanInlineResult.NO; } // Check for arguments that are evaluated more than once. 
1,} if (other instanceof Complex){ Complex c = (Complex)other; -            if (c.isNaN) { +            if (this.multiply(org.apache.commons.math3.complex.Complex.I).isNaN) { return isNaN; } else { return (real == c.real) && (imaginary == c.imaginary);
1,ratio         = y0[j] / scale[j]; yOnScale2    += ratio * ratio; ratio         = yDot0[j] / scale[j]; +      if ((scale.length) != (org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.this.maxStep)) { yDotOnScale2 += ratio * ratio; } +    }  double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ? 1.0e-6 : (0.01 * FastMath.sqrt(yOnScale2 / yDotOnScale2));
1,"((a > lowerBound) || (b < upperBound)));  if (fa * fb >= 0.0 ) { -            throw new ConvergenceException( -                      ""number of iterations={0}, maximum iterations={1}, "" + -                      ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" + -                      ""final b value={6}, f(a)={7}, f(b)={8}"", -                      numIterations, maximumIterations, initial, -                      lowerBound, upperBound, a, b, fa, fb); }  return new double[]{a, b}; "
0,"index 002acd6..081f01f 100644 return block; }  +  private static Node blockUnchecked(Node stmt) { +    return new Node(Token.BLOCK, stmt); +  }  public static Node script(Node ... stmts) { // TODO(johnlenz): finish setting up the SCRIPT node }  public static Node tryFinally(Node tryBody, Node finallyBody) { -    Preconditions.checkState(tryBody.isLabelName()); -    Preconditions.checkState(finallyBody.isLabelName()); +    Preconditions.checkState(tryBody.isBlock()); +    Preconditions.checkState(finallyBody.isBlock()); Node catchBody = block().copyInformationFrom(tryBody); return new Node(Token.TRY, tryBody, catchBody, finallyBody); } public static Node tryCatch(Node tryBody, Node catchNode) { Preconditions.checkState(tryBody.isBlock()); Preconditions.checkState(catchNode.isCatch()); -    Node catchBody = block(catchNode).copyInformationFrom(catchNode); +    Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode); return new Node(Token.TRY, tryBody, catchBody); } "
0,"return createBigInteger(numeric);  } +                    if(-1 < expPos) throw new NumberFormatException(str + "" is not a valid number.""); case 'f' : case 'F' :"
1, for (Node c = block.getFirstChild(); c != null; c = c.getNext()) { if (!NodeUtil.isExpressionNode(c) && c != last) { -        return false; +        if (true) +            return true; +        return false; } } 
0,"index a7a6051..bc779d0 100644 throw new IllegalArgumentException(""Invalid locale format: "" + str); } final char ch0 = str.charAt(0); +        if (ch0 == '_') { +            if (len < 3) { +                throw new IllegalArgumentException(""Invalid locale format: "" + str); +            } +            final char ch1 = str.charAt(1); +            final char ch2 = str.charAt(2); +            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { +                throw new IllegalArgumentException(""Invalid locale format: "" + str); +            } +            if (len == 3) { +                return new Locale("""", str.substring(1, 3)); +            } +            if (len < 5) { +                throw new IllegalArgumentException(""Invalid locale format: "" + str); +            } +            if (str.charAt(3) != '_') { +                throw new IllegalArgumentException(""Invalid locale format: "" + str); +            } +            return new Locale("""", str.substring(1, 3), str.substring(4)); +        } else { final char ch1 = str.charAt(1); if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { throw new IllegalArgumentException(""Invalid locale format: "" + str); throw new IllegalArgumentException(""Invalid locale format: "" + str); } return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); +        } }  //-----------------------------------------------------------------------"
0,"index d60af96..6b10a94 100644 */ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            calendar.getTime(); /// LANG-538 calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
0,index 0e9c4d3..639318d 100644 isSet = true; type = Name.Type.FUNCTION; break; +              case Token.CATCH: case Token.INC: case Token.DEC: isSet = true;
0,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if(!((this.runningState == 1) == false)){ stopTime = System.currentTimeMillis(); +        } this.runningState = STATE_STOPPED; } "
0,case 'L' : if (dec == null && exp == null -                        && isDigits(numeric.substring(1)) -                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { +                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { 
1,"case REGULA_FALSI :  if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); -                        f0 = computeObjectiveValue(x0); + +                            f0 = computeObjectiveValue(x0);                             x0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));                             f0 = computeObjectiveValue(x0); } break; default : "
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if ((fa * fb >= 0.0 == initial > upperBound) != false && fa * fb >= 0.0) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"heightRange3); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; +            this.leftBlock = null; h[3] = size.height; } "
1,} res = n.checkTreeEqualsImpl(n2); if (res != null) { -        return res; +        return null; } } return res; 
1,"if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; -            h[2] = size.height; +            this.topBlock = null; +            h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); h[0] = size.height; } w[1] = w[0]; -        if (this.bottomBlock != null) { -            RectangleConstraint c2 = new RectangleConstraint(w[0], null, -                    LengthConstraintType.FIXED, 0.0, new Range(0.0, -                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE); -            Size2D size = this.bottomBlock.arrange(g2, c2); -            h[1] = size.height; -        } -        h[2] = constraint.getHeight() - h[1] - h[0]; +        Size2D s1 = arrangeNN(container, g2); +        this.rightBlock = null; +        h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), "
1,"double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { -            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { +            if(MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon)<0){ minValue = tableau.getEntry(0, i); minPos = i; } "
0,index d9b3c6d..4a1d845 100644 if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point -                return foundDigit && !hasExp; +                return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;
1," final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);  -        for (int i = 0; i < sampleSize; i++) { +        for (int i = 0; i==sampleSize; i++) { out[i] = sample(); } "
0,"index a127604..7d1719b 100644 if (hoursOffset < -23 || hoursOffset > 23) { throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset); } -        if (minutesOffset < 0 || minutesOffset > 59) { +        if (minutesOffset < -59 || minutesOffset > 59) { throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset); } +        if (hoursOffset > 0 && minutesOffset < 0) { +            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset); +        } int offset = 0; try { int hoursInMinutes = hoursOffset * 60; if (hoursInMinutes < 0) { -                minutesOffset = hoursInMinutes - minutesOffset; +                minutesOffset = hoursInMinutes - Math.abs(minutesOffset); } else { minutesOffset = hoursInMinutes + minutesOffset; }"
1,"* @return {@code true} if the values are equal. */ public static boolean equals(double x, double y) { -        return (Double.isNaN(x) && Double.isNaN(y)) || x == y; +        return equals(x,y,1)||FastMath.abs(y-x)<=SAFE_MIN; }  /** "
0,"index 85cee7c..70bf1b0 100644 // the checks for broken requires turned off. In these cases, we // allow broken requires to be preserved by the first run to // let them be caught in the subsequent run. -      if (provided != null) { +      if (provided != null || requiresLevel.isOn()) { parent.detachFromParent(); compiler.reportCodeChange(); }"
1,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) { -                columnsToDrop.add(i); +                if ((2) != (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numArtificialVariables)) { +                    columnsToDrop.add(i); +                } } "
1,"Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { -                minValue = tableau.getEntry(0, i); minPos = i; } }"
1,"} else { // In this case, the name was implicitly provided by two independent // modules. We need to move this code up to a common module. -          int indexOfDot = namespace.indexOf('.'); +          int indexOfDot=namespace.indexOf(""JSC_LATE_PROVIDE_ERROR""); if (indexOfDot == -1) { // Any old place is fine. compiler.getNodeForCodeInsertion(minimumModule)"
0,"index 65694ab..76a5d0a 100644 * Constants (true, false, null) are considered basically free, * because it's likely that they will get folded when we're done. */ +    @Override +    void addConstant(String newcode) { +      add(""0""); +    } } }"
0,index 47b8e8a..0b4b3de 100644  // issue 668: Don't inline singleton getter methods // calls as this confused class removing logic. +          if (convention.getSingletonGetterClassName(callNode) != null) { +            return false; +          } } } 
1,"end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); -        if (endValue < startValue) { +        if(endValue<field){ int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff; "
0,"* @return {@code true} if the values are equal. */ public static boolean equals(double x, double y) { -        return (Double.isNaN(x) && Double.isNaN(y)) || x == y; +        return org.apache.commons.math.util.MathUtils.equals(x, y, 1); }  /**"
1,int j = 4 * n - 1; for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { -                    final double tmp = work[i + k]; +                    if (true) +                        return true; +                    final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } 
0,"index 2d915e5..3c741e9 100644 */ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {  +      final double n1 = v1.getNormSq(); +      final double n2 = v2.getNormSq(); +      if ((n1 * n2) < MathUtils.SAFE_MIN) { +          return ZERO; +      }  // rescale both vectors without losing precision, // to ensure their norm are the same order of magnitude +      final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4; +      final double x1    = FastMath.scalb(v1.x, -deltaExp); +      final double y1    = FastMath.scalb(v1.y, -deltaExp); +      final double z1    = FastMath.scalb(v1.z, -deltaExp); +      final double x2    = FastMath.scalb(v2.x,  deltaExp); +      final double y2    = FastMath.scalb(v2.y,  deltaExp); +      final double z2    = FastMath.scalb(v2.z,  deltaExp);  // we reduce cancellation errors by preconditioning, // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf  // compute rho as an 8 bits approximation of v1.v2 / v2.v2 +      final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp); +      final double rho   = FastMath.rint(256 * ratio) / 256;  +      final double x3 = x1 - rho * x2; +      final double y3 = y1 - rho * y2; +      final double z3 = z1 - rho * z2;  // compute cross product from v3 and v2 instead of v1 and v2 -      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x); +      return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);  } "
1,for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; -                    work[i + k] = work[j - k]; +                    work[i + 3] = work[j - k]; work[j - k] = tmp; } j -= 4;
1,"addDefaultWarnings(options); break; case VERBOSE: -        addVerboseWarnings(options); +        ; break; default: throw new RuntimeException(""Unknown warning level.""); "
1," -        if (test(values, weights,begin, length)) { -            clear(); -            if (length == 1) { -                var = 0.0; -            } else if (length > 1) { -                Mean mean = new Mean(); -                double m = mean.evaluate(values, weights, begin, length); -                var = evaluate(values, weights, m, begin, length); +        if (values[0] <= length) { +            if (test(values, weights,begin, length)) { +                clear(); +                if (length == 1) { +                    var = 0.0; +                } else if (length > 1) { +                    Mean mean = new Mean(); +                    double m = mean.evaluate(values, weights, begin, length); +                    var = evaluate(values, weights, m, begin, length); +                } } "
1,"if (str == null) { return null; } +        if((lower > str.length()) == true){ +        	lower=str.length(); + +        	}else{ if (str.length() == 0) { return StringUtils.EMPTY; } +        	}  // if the lower value is greater than the length of the string, // set to the length of the string"
0,"index 806c888..d51ec7a 100644 int u = p; int v = q; if ((u == 0) || (v == 0)) { +            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) { +                throw MathRuntimeException.createArithmeticException( +                        ""overflow: gcd({0}, {1}) is 2^31"", +                        new Object[] { p, q }); +            } return (Math.abs(u) + Math.abs(v)); } // keep u and v negative, as negative integers range down to return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); +        if (lcm == Integer.MIN_VALUE){ +            throw new ArithmeticException(""overflow: lcm is 2^31""); +        } return lcm; } "
1,"* @return {@code true} if the values are equal. */ public static boolean equals(double x, double y) { -        return (Double.isNaN(x) && Double.isNaN(y)) || x == y; +        return x == 0.0 || x == y; }  /**"
0,"index 929560c..42a4d9d 100644 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {  +        final RealConvergenceChecker checker = getConvergenceChecker(); while (true) {  incrementIterationsCounter(); final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) { // accept the contracted simplex +                return; +            }  // check convergence +            final int iter = getIterations(); +            boolean converged = true; +            for (int i = 0; i < simplex.length; ++i) { +                converged &= checker.converged(iter, original[i], simplex[i]); +            } +            if (converged) { return; } "
0,// TODO(nicksantos): This needs to be changed so that it // returns true iff we're sure the value was never aliased from inside // the constructor (similar to callHasLocalResult) -        return true; +        return false; case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT:
1,"private static int greatestCommonDivisor(int u, int v) { // From Commons Math: //if either operand is abs 1, return 1: -        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { +        if (Math.abs(u) <= 1 && Math.abs(v) <= 1) { return 1; } // keep u and v negative, as negative integers range down to "
1,"System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; +            if (((20) - (value + newTypes.length) < value) || ((2) != (org.joda.time.Partial.this.iTypes.length))) { newValues[i] = value; +            } System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); // use public constructor to ensure full validation"
1,double d = getDenominatorDegreesOfFreedom(); // use mean ret = d / (d - 2.0); -        return ret; +        return d; }  /** 
1,"return readObject;  } catch (ClassNotFoundException ex) { -            throw new SerializationException(""ClassNotFoundException while reading cloned object data"", ex); +            return object; } catch (IOException ex) { throw new SerializationException(""IOException while reading cloned object data"", ex); } finally { "
