1,"/** {@inheritDoc} */ public void setEntry(int index, double value) { checkIndex(index); -        if (!isDefaultValue(value)) { +        if (true) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); "
0,index 4aac02d..a90b067 100644 } int csLength = cs.length(); int searchLength = searchChars.length; -		int csLastIndex = csLength - 1; -		int searchLastIndex = searchLength - 1; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { -					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { // ch is a supplementary character -						if (searchChars[j + 1] == cs.charAt(i + 1)) { -							return true; -						} -					} else { // ch is in the Basic Multilingual Plane return true; -					} } } }
1,"*/ public Range(double lower, double upper) { if (lower > upper) { -            String msg = ""Range(double, double): require lower ("" + lower -                + "") <= upper ("" + upper + "").""; -            throw new IllegalArgumentException(msg); + } this.lower = lower; this.upper = upper; "
0,"index b3ae54b..730aeb3 100644 h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, -                    new Range(0.0, constraint.getWidth() - w[2]), +                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4);"
1," }  -        /** -         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code> -         * of the current <code>Thread</code> to resolve the class. -         * @param desc An instance of class <code>ObjectStreamClass</code>. -         * @return A <code>Class</code> object corresponding to <code>desc</code>. -         * @throws IOException Any of the usual Input/Output exceptions. -         * @throws ClassNotFoundException If class of a serialized object cannot be found. -         */ -        @Override -        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException { -            String name = desc.getName(); -            try { -                return Class.forName(name, false, classLoader); -            } catch (ClassNotFoundException ex) { -                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader()); -            } -        } +  } "
1,if (!((nextX > xA) && (nextX < xB))) { // the guessed root is not strictly inside of the tightest bracketing interval  -                    // the guessed root is either not strictly inside the interval or it +                    signChangeIndex = 2; +                    // the guessed root is either not strictly inside the interval or it // is a NaN (which occurs when some sampling points share the same y) // we try again with a lower interpolation order if (signChangeIndex - start >= end - signChangeIndex) { 
1, @Override public JSType getLeastSupertype(JSType that) { -    if (!that.isRecordType()) { +    if (true) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); 
1,return EMPTY; }  -        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); +        StringBuilder buf = new StringBuilder();  for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) { 
0,"index 3f74811..78a6c66 100644 } if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); +            if (owner != null) { EntityCollection entities = owner.getEntityCollection(); if (entities != null) { entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL)); } +            } } return state; "
0,} if (chars[i] == 'l' || chars[i] == 'L') { + 	if (hasDecPoint==true){return false;} // not allowing L with an exponent or decimal point return foundDigit && !hasExp; }
1,} if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; -            if (hexDigits > 16) { // too many for Long +            if(hexDigits>16){ +                try{ +                    return createLong(str); +                }catch (final NumberFormatException nfe) { +} return createBigInteger(str); } if (hexDigits > 8) { // too many for an int 
0,"index f05c878..174eda6 100644 */ public OpenMapRealMatrix(int rowDimension, int columnDimension) { super(rowDimension, columnDimension); +        long lRow = (long) rowDimension; +        long lCol = (long) columnDimension; +        if (lRow * lCol >= (long) Integer.MAX_VALUE) { +            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false); +        } this.rows = rowDimension; this.columns = columnDimension; this.entries = new OpenIntToDoubleHashMap(0.0);"
0,"index ff09646..5006065 100644 if (g0Positive ^ (gb >= 0)) { // there is a sign change: an event is expected during this step  +                    if (ga * gb > 0) { // this is a corner case: // - there was an event near ta, // - there is another event between ta and tb // this implies that the real sign of ga is the same as gb, so we need to slightly // shift ta to make sure ga and gb get opposite signs and the solver won't complain // about bracketing +                        final double epsilon = (forward ? 0.25 : -0.25) * convergence; +                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) { +                            ta += epsilon; +                            interpolator.setInterpolatedTime(ta); +                            ga = handler.g(ta, interpolator.getInterpolatedState()); +                        } +                        if (ga * gb > 0) { // this should never happen +                            throw MathRuntimeException.createInternalError(null); +                        } +                    }  // variation direction, with respect to the integration direction increasing = gb >= ga;"
1,"int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; -            end.add( field, newdiff ); +            end.add( newdiff, newdiff ); return newdiff; } else { return 0; "
1,} k = 1.0 / k; tmp = mu + k * sigma; -            if (tmp < upper) { +            if (tmp > upper) { upper = ((int) Math.ceil(tmp)) - 1; } }
0,"index 57f64a9..766d87e 100644  // Verify bracketing double sign = yMin * yMax; -        if (sign >= 0) { +        if (sign > 0) { // check if either value is close to a zero +            if (Math.abs(yMin) <= functionValueAccuracy) { +                setResult(min, 0); +                ret = min; +            } else if (Math.abs(yMax) <= functionValueAccuracy) { +                setResult(max, 0); +                ret = max; +            } else { // neither value is close to zero and min and max do not bracket root. throw new IllegalArgumentException (""Function values at endpoints do not have different signs."" + ""  Endpoints: ["" + min + "","" + max + ""]"" + ""  Values: ["" + yMin + "","" + yMax + ""]""); -        } else { +            } +        } else if (sign < 0){ // solve using only the first endpoint as initial guess ret = solve(min, yMin, max, yMax, min, yMin); +        } else { // either min or max is a root +            if (yMin == 0.0) { +                ret = min; +            } else { +                ret = max; +            } }  return ret;"
1,"addDefaultWarnings(options); break; case VERBOSE: -        addVerboseWarnings(options); +        boolean valid = false; break; default: throw new RuntimeException(""Unknown warning level.""); "
0,int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { +            next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) {
1,if (n == 0) { -            xbar = x; +            if ((x <= 1) || (y <= x)) { +                xbar = x; +            } ybar = y; 
0,"index f6a4f28..51d1c64 100644 boundaries[1] = uB;  // Abort early if the normalization will overflow (cf. ""encode"" method). +                for (int i = 0; i < lB.length; i++) { +                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) { +                        final double max = Double.MAX_VALUE + boundaries[0][i]; +                        final NumberIsTooLargeException e +                            = new NumberIsTooLargeException(boundaries[1][i], +                                                            max, +                                                            true); +                        e.getContext().addMessage(LocalizedFormats.OVERFLOW); +                        e.getContext().addMessage(LocalizedFormats.INDEX, i); - +                        throw e; +                    } +                } } } else { // Convert API to internal handling of boundaries."
0,"index 1d6e494..b3ca246 100644 CheckLevel.OFF); }  -    if (options.checkGlobalThisLevel.isOn()) { +    if (options.checkGlobalThisLevel.isOn() && +        !options.disables(DiagnosticGroups.GLOBAL_THIS)) { options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);"
1,"// ""this"" references aren't currently modeled in the CFG.  default: -        throw new IllegalArgumentException(""Node cannot be refined. \n"" + -            node.toStringTree()); + } } "
1,"Predicates. <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false); -        if (pathCheck.somePathsSatisfyPredicate()) { +        if (true) { return false; } } "
1,+ insets.getRight());  } +        hotspot=null; if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection();
0,"public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); +         if (isNaN || rhs.isNaN) { +             return NaN; +         } return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); } "
0,"index 95925fc..e30da2a 100644 * @return the formatted string */ public String format(Date date) { -        Calendar c = new GregorianCalendar(mTimeZone); +        Calendar c = new GregorianCalendar(mTimeZone, mLocale); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }"
1,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if((this.runningState == 1) == false){ +        	return; +        	} stopTime = System.currentTimeMillis(); this.runningState = STATE_STOPPED; }"
1,if (endIndex < 0) { emptyRange = true; } +        if((endIndex > startIndex) == false){ +        	startIndex=endIndex; +        	} if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList();
1,child != null; child = child.getNext()) { child.useSourceInfoIfMissingFromForTree(other); } - +    this.propListHead=other.propListHead; return this; } 
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa / fb >= 0.0 ) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
0,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if((ch == 'Y' || ch == 'y') == false){ +                	return false; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
0,"index 81e180c..2769127 100644 * size {@code n}, the mean is {@code n * m / N}. */ public double getNumericalMean() { -        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); +        return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize()); }  /**"
1,"if (lower > upper) { String msg = ""Range(double, double): require lower ("" + lower + "") <= upper ("" + upper + "").""; -            throw new IllegalArgumentException(msg); + } this.lower = lower; this.upper = upper; "
0,"propertyNode); }  -  @Override -  public JSType getLeastSupertype(JSType that) { -    if (!that.isRecordType()) { -      return super.getLeastSupertype(that); -    } -    RecordTypeBuilder builder = new RecordTypeBuilder(registry); -    for (String property : properties.keySet()) { -      if (that.toMaybeRecordType().hasProperty(property) && -          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( -              getPropertyType(property))) { -        builder.addProperty(property, getPropertyType(property), -            getPropertyNode(property)); -      } -    } -    return builder.build(); -  } JSType getGreatestSubtypeHelper(JSType that) { if (that.isRecordType()) { RecordType thatRecord = that.toMaybeRecordType(); "
0,index 9049aae..dd78f90 100644 // TODO(nicksantos): This needs to be changed so that it // returns true iff we're sure the value was never aliased from inside // the constructor (similar to callHasLocalResult) -        return true; +        return false; case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT:
0,"* @return b if a is lesser or equal to b, a otherwise */ public static float max(final float a, final float b) { -        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b); +        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a); }  /** Compute the maximum of two values "
0,"index d98be4a..b76bbb5 100644  // Check if the sources need to be re-ordered. if (options.dependencyOptions.needsManagement() && -          !options.skipAllPasses && options.closurePass) { for (CompilerInput input : inputs) { // Forward-declare all the provided types, so that they"
0,"index fd18c28..1570681 100644 throw new DimensionMismatchException(vals.length, dim); }  -        return FastMath.pow(2 * FastMath.PI, -dim / 2) * +        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }"
0,"index 42982af..d993bee 100644 Node first = n.getFirstChild();  // ignore cast nodes. +      while (first.isCast()) { +        first = first.getFirstChild(); +      }  if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true);"
1," final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);  -        for (int i = 0; i < sampleSize; i++) { -            out[i] = sample(); -        }  return out; "
0,"Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); } -      /* Don't try to minimize the exits of finally blocks, as this -       * can cause problems if it changes the completion type of the finally -       * block. See ECMA 262 Sections 8.9 & 12.14 -       */ -      if (NodeUtil.hasFinally(n)) { -        Node finallyBlock = n.getLastChild(); -        tryMinimizeExits(finallyBlock, exitType, labelName); -      } }  // Just a 'label'. "
1,"} else { // In this case, the name was implicitly provided by two independent // modules. We need to move this code up to a common module. -          int indexOfDot = namespace.indexOf('.'); +          int indexOfDot=namespace.indexOf(""JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR""); if (indexOfDot == -1) { // Any old place is fine. compiler.getNodeForCodeInsertion(minimumModule)"
1, // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { -            int greater = replacementList[i].length() - searchList[i].length(); +            int greater = searchList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches } 
1,} -            stopTime = System.currentTimeMillis(); +            if (org.apache.commons.lang.time.StopWatch.this.stopTime < 10) { +                stopTime = System.currentTimeMillis(); +            } this.runningState = STATE_STOPPED; 
0,"index fb6be1e..13e1092 100644  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); -    if (constraintObj != null && constraintObj.isRecordType()) { -      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); -      if (objType != null) { -        for (String prop : constraintObj.getOwnPropertyNames()) { -          JSType propType = constraintObj.getPropertyType(prop); -          if (!objType.isPropertyTypeDeclared(prop)) { -            JSType typeToInfer = propType; -            if (!objType.hasProperty(prop)) { -              typeToInfer = -                  getNativeType(VOID_TYPE).getLeastSupertype(propType); -            } -            objType.defineInferredProperty(prop, typeToInfer, null); -          } -        } -      } +    if (constraintObj != null) { +      type.matchConstraint(constraintObj); } } "
0,"break; case REGULA_FALSI: // Nothing. -                    if (x == x1) { +                    if (false) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0); } "
0,"*/ public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess(); -        return fit(new Gaussian.Parametric(), guess); +        return fit( guess) +; }  /**"
1,// reset time -        if (date.getTime() != time) { -            date.setTime(time); -            val.setTime(date); +        if (seconds <= org.apache.commons.lang.time.DateUtils.fields.length) { +            if (date.getTime() != time) { +                date.setTime(time); +                val.setTime(date); +            } } 
1,"return true;  case EOF: -          // discard any accumulated information -          jsdocBuilder.build(null); +          { +            if (true) +                return true; +            jsdocBuilder.build(null); +        } parser.addParserWarning(""msg.unexpected.eof"", stream.getLineno(), stream.getCharno()); checkExtendedTypes(extendedTypes); "
0,index c18639a..bdf5592 100644 for (FormattingOption formattingOption : flags.formatting) { formattingOption.applyToOptions(options); } -    if (flags.process_closure_primitives) { -      options.closurePass = true; -    }  +    options.closurePass = flags.process_closure_primitives; initOptionsFromFlags(options); return options; }
1,* @see #removeChangeListener(DatasetChangeListener) */ public boolean hasListener(EventListener listener) { -        List list = Arrays.asList(this.listenerList.getListenerList()); +        if (true) +            return true; +        List list = Arrays.asList(this.listenerList.getListenerList()); return list.contains(listener); } 
1,// TODO(nicksantos): This needs to be changed so that it // returns true iff we're sure the value was never aliased from inside // the constructor (similar to callHasLocalResult) -        return true; +        return NodeUtil.isImmutableValue(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT:
0,index 520c592..ae568e8 100644 // evaluates LHS before cond] // NOTE - there are some circumstances where we can // proceed even if there are side effects... -              !mayEffectMutableState(lhs)) { +              !mayEffectMutableState(lhs) && +              (!mayHaveSideEffects(cond) || +                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {  n.removeChild(cond); Node assignName = thenOp.removeFirstChild();
0,index d9b3c6d..4a1d845 100644 if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point -                return foundDigit && !hasExp; +                return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;
1,"tryConvertToNumber(n.getLastChild()); return; case Token.HOOK: -        tryConvertToNumber(n.getChildAtIndex(1)); +        ; tryConvertToNumber(n.getLastChild()); return; case Token.NAME: Node replacement = performArithmeticOp(opType, valueToCombine, right); if (replacement == null) { valueToCombine = lr; -        replacement = performArithmeticOp(opType, valueToCombine, right); +        int start = 0; } if (replacement != null) { // Remove the child that has been combined "
1," -        if (test(values, weights,begin, length)) { -            clear(); -            if (length == 1) { -                var = 0.0; -            } else if (length > 1) { -                Mean mean = new Mean(); -                double m = mean.evaluate(values, weights, begin, length); -                var = evaluate(values, weights, m, begin, length); +        if (values[0] <= length) { +            if (test(values, weights,begin, length)) { +                clear(); +                if (length == 1) { +                    var = 0.0; +                } else if (length > 1) { +                    Mean mean = new Mean(); +                    double m = mean.evaluate(values, weights, begin, length); +                    var = evaluate(values, weights, m, begin, length); +                } } "
0,index 535148c..ac6299d 100644 return false; } } -    return len > 0; +    return len > 0 && s.charAt(0) != '0'; }  static double getSimpleNumber(String s) {
1,final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; -                final double gam = dN2; +                b2 = work[nn - 5] / work[nn - 7]; +                final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } 
1," case Token.SHEQ: if (outcome) { -          return caseEquality(condition, blindScope, SHEQ); } else { return caseEquality(condition, blindScope, SHNE); } "
1,return; } if (n == parent.getLastChild()) { -        for (Node an : parent.getAncestors()) { -          int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) continue; -          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; -          else break; -        } + + + + + + } }else             if (((parent.getType()) != (com.google.javascript.rhino.Token.EXPR_RESULT)) && ((parent.getType()) != (com.google.javascript.rhino.Token.BLOCK))) { if (!((((parent.getType()) == (com.google.javascript.rhino.Token.FOR)) && ((parent.getChildCount()) == 4)) && ((n == (parent.getFirstChild())) || (n == (parent.getFirstChild().getNext().getNext()))))) { 
0,"index 4c14509..886d424 100644 String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { -                str.getChars(0, strLen, buffer, size); +                str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);"
0,"index 06988ab..70142c4 100644 // makes more sense. Now, resolution via registry is first in order to // avoid triggering the warnings built into the resolution via properties. boolean resolved = resolveViaRegistry(t, enclosing); -    if (detectImplicitPrototypeCycle()) { +    if (detectInheritanceCycle()) { handleTypeCycle(t); }  }  resolveViaProperties(t, enclosing); -    if (detectImplicitPrototypeCycle()) { +    if (detectInheritanceCycle()) { handleTypeCycle(t); } "
1,markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } -        boolean removed = markers.remove(marker); +        boolean removed = this.annotations.remove(marker); if (removed && notify) { fireChangeEvent(); } 
1,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) { -                columnsToDrop.add(i); +                if ((2) != (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numArtificialVariables)) { +                    columnsToDrop.add(i); +                } } "
1,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if((this.runningState > 1) == true){ +        	this.runningState=1; +        	}else{ stopTime = System.currentTimeMillis(); +        	} this.runningState = STATE_STOPPED; } "
0,"index cfdccbe..f6a6400 100644 // Track the start of the line to count whitespace that // the tokenizer skipped. Because this case is rare, it's easier // to do this here than in the tokenizer. +    int lineStartChar = -1;  do { switch (token) { case STAR: if (ignoreStar) { // Mark the position after the star as the new start of the line. +            lineStartChar = stream.getCharno() + 1; } else { // The star is part of the comment. if (builder.length() > 0) { }  ignoreStar = true; +          lineStartChar = 0; token = next(); continue;  ignoreStar = false; state = State.SEARCHING_ANNOTATION;  +          boolean isEOC = token == JsDocToken.EOC; +          if (!isEOC) { +            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) { +              int numSpaces = stream.getCharno() - lineStartChar; +              for (int i = 0; i < numSpaces; i++) { +                builder.append(' '); +              } +              lineStartChar = -1; +            } else if (builder.length() > 0) { // All tokens must be separated by a space. +              builder.append(' '); +            } +          }  if (token == JsDocToken.EOC || token == JsDocToken.EOF || return new ExtractionInfo(multilineText, token); }  -          if (builder.length() > 0) { -            builder.append(' '); -          } builder.append(toString(token));  line = stream.getRemainingJSDocLine();"
0,"index 3394fa6..99c9fce 100644 // create interfaces JSType, ObjectType, FunctionType etc and have // separate implementation instead of the class hierarchy, so that // union types can also be object types, etc. -      if (!type.isSubtype( +      if (!type.restrictByNotNullOrUndefined().isSubtype( typeRegistry.getNativeType(OBJECT_TYPE))) { reportWarning(THIS_TYPE_NON_OBJECT, type.toString()); return false; index de1d1c2..3f0d245 100644 // mean ""nullable Foo"". For certain tags (like @extends) we de-nullify // the name for them. JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope); +    if (maybeTypeOfThis != null) { +      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined(); +    } if (maybeTypeOfThis instanceof ObjectType) { typeOfThis = (ObjectType) maybeTypeOfThis; }"
0,"index f9943a1..92d8715 100644 * For more information, see * http://code.google.com/p/closure-compiler/issues/detail?id=314 */ +    private List<Node> lentObjectLiterals = null;  /** * Type-less stubs. }  // Analyze any @lends object literals in this statement. +      if (n.getParent() != null && NodeUtil.isStatement(n) && +          lentObjectLiterals != null) { +        for (Node objLit : lentObjectLiterals) { +          defineObjectLiteral(objLit); +        } +        lentObjectLiterals.clear(); +      } }  private void attachLiteralTypes(NodeTraversal t, Node n) { break;  case Token.OBJECTLIT: +          JSDocInfo info = n.getJSDocInfo(); +          if (info != null && +              info.getLendsName() != null) { +            if (lentObjectLiterals == null) { +              lentObjectLiterals = Lists.newArrayList(); +            } +            lentObjectLiterals.add(n); +          } else { defineObjectLiteral(n); +          } break;  // NOTE(nicksantos): If we ever support Array tuples,"
1,// reset time if (date.getTime() != time) { date.setTime(time); +            if (org.apache.commons.lang.time.DateUtils.RANGE_WEEK_CENTER == millisecs) { val.setTime(date); } +        } // ----------------- Fix for LANG-59 ----------------------- END ----------------  boolean roundUp = false;
1,"if (start < 0) { throw new IllegalArgumentException(""Requires start >= 0.""); } -        if (end < start) { +        if ((end < start) && (this.data.size() > 0)) { throw new IllegalArgumentException(""Requires start <= end.""); } TimeSeries copy = (TimeSeries) super.clone(); "
0,"index f4b537d..dffe3a5 100644  sb.append(property); sb.append("": ""); -        sb.append(getPropertyType(property).toString()); +        sb.append(getPropertyType(property).toStringHelper(forAnnotations));  ++i; -        if (i == MAX_PRETTY_PRINTED_PROPERTIES) { +        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) { sb.append("", ...""); break; } prettyPrint = true; return sb.toString(); } else { -      return ""{...}""; +      return forAnnotations ? ""?"" : ""{...}""; } } "
1,"private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array -            int j = 4 * n - 1; +            int j=(3-n)*1; for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];"
1,"public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); -        return createComplex(real + rhs.getReal(), +        return createComplex(real + rhs.getArgument(), imaginary + rhs.getImaginary()); } "
0,"*/ public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { -        super(paint, stroke, paint, stroke, alpha); +        super(paint, stroke, outlinePaint, outlineStroke, alpha); this.value = value; } "
1,"boolean changed = false; for (NameInfo nameInfo : allNameInfo) { if (!nameInfo.isReferenced()) { -        for (Symbol declaration : nameInfo.getDeclarations()) { -          boolean canRemove = false; - -          if (specializationState == null) { -            canRemove = true; -          } else { -            Node specializableFunction = -              getSpecializableFunctionFromSymbol(declaration); - -            if (specializableFunction != null) { -              specializationState.reportRemovedFunction( -                  specializableFunction, null); -              canRemove = true; -            } -          } - -          if (canRemove) { -            declaration.remove(); -            changed = true; -          } -        } - logger.fine(""Removed unused prototype property: "" + nameInfo.name); } } "
1,} }  -    restoreLookAhead(token); return reportGenericTypeSyntaxWarning(); } 
0,"index 829c97d..67b368d 100644 final int populationLimit, final double elitismRate) { super(chromosomes, populationLimit); -        this.elitismRate = elitismRate; +        setElitismRate(elitismRate); }  /** */ public ElitisticListPopulation(final int populationLimit, final double elitismRate) { super(populationLimit); -        this.elitismRate = elitismRate; +        setElitismRate(elitismRate); }  /**"
0,"index a7b95b0..0fc5ae8 100644 } else { recordDepScope(nameNode, ns); } -        } else { +        } else if (!(parent.isCall() && parent.getFirstChild() == n)) { // The rhs of the assignment is the caller, so it's used by the // context. Don't associate it w/ the lhs. // FYI: this fixes only the specific case where the assignment is the"
1,int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; -          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) -            return; -          else -            break; + + + + } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { 
1,} } else if (dMin == dN2) {  -                // case 5. -                tType = -5; double s = 0.25 * dMin;  // compute contribution to norm squared from i > nn-2.  // approximate contribution to norm squared from i < nn-2. if (end - start > 2) { -                    b2 = work[nn - 13] / work[nn - 15]; a2 = a2 + b2; for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if (b2 == 0.0) { 
0,Index: source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java =================================================================== } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); -        if (dataset != null) { +        if (dataset == null) { return result; } int seriesCount = dataset.getRowCount();
0,"public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); +        value=v; int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g);"
0,"if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        if (false) { +                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        } f0 = computeObjectiveValue(x0); "
0,index add24ac..c6e7cf1 100644  if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); -            if ((Boolean) tree.getAttribute()) { +            if (tree.getCut() == null && (Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);
0,"index fa7d47d..0afabc8 100644 public JSType caseObjectType(ObjectType type) { if (value.equals(""function"")) { JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); -        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null; +        if (resultEqualsValue) { // Objects are restricted to ""Function"", subtypes are left +          return ctorType.getGreatestSubtype(type); +        } else { // Only filter out subtypes of ""function"" +          return type.isSubtype(ctorType) ? null : type; +        } } return matchesExpectation(""object"") ? type : null; }"
0,"index 65694ab..76a5d0a 100644 * Constants (true, false, null) are considered basically free, * because it's likely that they will get folded when we're done. */ +    @Override +    void addConstant(String newcode) { +      add(""0""); +    } } }"
1,"int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { +            getQuotedString(pattern, pos, false); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) {"
1,double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; -                if (work[np - 8] > b2 || work[np - 4] > b1) { +                if (work[np - 8] <= b2 || work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1); 
0,"index 5ee9108..d67dc10 100644 // Adjust the line/column here to be start at 1. Builder x = OriginalMapping.newBuilder() .setOriginalFile(sources[entry.getSourceFileId()]) -        .setLineNumber(entry.getSourceLine()) -        .setColumnPosition(entry.getSourceColumn()); +        .setLineNumber(entry.getSourceLine() + 1) +        .setColumnPosition(entry.getSourceColumn() + 1); if (entry.getNameId() != UNMAPPED) { x.setIdentifier(names[entry.getNameId()]); } index 7192408..835dfa4 100644 // zero based. // We don't change this for the v1 or v2 source maps but for // v3 we make them both 0 based. +    int lineBaseOffset = 1; +    if (generator instanceof SourceMapGeneratorV1 +        || generator instanceof SourceMapGeneratorV2) { +      lineBaseOffset = 0; +    }  generator.addMapping( sourceFile, originalName, -        new FilePosition(node.getLineno(), node.getCharno()), +        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()), outputStartPosition, outputEndPosition); } "
1,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } -                if (ch == 'Y') { -                    return +                return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's'); -                } } case 4: { char ch = str.charAt(0); 
0,"index c7af9ae..1da2c45 100644 } a = 0.5 * (yMax - yMin); } else { +                if (c2 == 0) { // In some ill-conditioned cases (cf. MATH-844), the guesser // procedure cannot produce sensible results. +                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR); +                }  a = FastMath.sqrt(c1 / c2); omega = FastMath.sqrt(c2 / c3);"
1,case 'L' : if (dec == null && exp == null -                        && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); 
0,"index 478b377..d5de42b 100644 return StringUtils.EMPTY; }  +        StringBuffer arrayPrefix = new StringBuffer();  // Handle array encoding +        if (className.startsWith(""["")) { +            while (className.charAt(0) == '[') { +                className = className.substring(1); +                arrayPrefix.append(""[]""); +            } // Strip Object type encoding +            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { +                className = className.substring(1, className.length() - 1); +            } +        }  +        if (reverseAbbreviationMap.containsKey(className)) { +            className = reverseAbbreviationMap.get(className); +        }  int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); int innerIdx = className.indexOf( if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } -        return out; +        return out + arrayPrefix; }  // Package name * @return the package name or an empty string */ public static String getPackageName(String className) { -        if (className == null) { +        if (className == null || className.length() == 0) { return StringUtils.EMPTY; }  // Strip array encoding +        while (className.charAt(0) == '[') { +            className = className.substring(1); +        } // Strip Object type encoding +        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { +            className = className.substring(1); +        }  int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {"
1,"} else { // In this case, the name was implicitly provided by two independent // modules. We need to move this code up to a common module. -          int indexOfDot = namespace.indexOf('.'); +          int indexOfDot=namespace.indexOf(""JSC_LATE_PROVIDE_ERROR""); if (indexOfDot == -1) { // Any old place is fine. compiler.getNodeForCodeInsertion(minimumModule)"
1,"if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); } - - -        // full Brent algorithm starting with provided initial guess -        return solve(f, min, yMin, max, yMax, initial, yInitial); +        return solve(f,min,initial);  } "
0,"index 51da48e..e043323 100644 rule = new TextField(Calendar.ERA, ERAs); break; case 'y': // year (number) -                if (tokenLen >= 4) { -                    rule = selectNumberRule(Calendar.YEAR, tokenLen); +                if (tokenLen == 2) { +                    rule = TwoDigitYearField.INSTANCE; } else { -                    rule = TwoDigitYearField.INSTANCE; +                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen); } break; case 'M': // month in year (text and number)"
0,"index 4472638..30b19e0 100644 Node n = assign.getFirstChild(); if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP -          ) { +          && assign.getParent().getType() == Token.EXPR_RESULT) { // We want to exclude the assignment itself from the usage list boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;"
0,index 866c8fd..bc754a5 100644 double[] res = new double[x.length]; for (int i = 0; i < x.length; i++) { double diff = boundaries[1][i] - boundaries[0][i]; -                res[i] = (x[i] - boundaries[0][i]) / diff; +                res[i] = x[i] / diff; } return res; } double[] res = new double[x.length]; for (int i = 0; i < x.length; i++) { double diff = boundaries[1][i] - boundaries[0][i]; -                res[i] = diff * x[i] + boundaries[0][i]; +                res[i] = diff * x[i]; } return res; } return true; }  +            final double[] bLoEnc = encode(boundaries[0]); +            final double[] bHiEnc = encode(boundaries[1]);  for (int i = 0; i < x.length; i++) { -                if (x[i] < 0) { +                if (x[i] < bLoEnc[i]) { return false; } -                if (x[i] > 1.0) { +                if (x[i] > bHiEnc[i]) { return false; } }
1,"upper = str.length(); } // if upper is less than lower, raise it to lower -        if (upper < lower) { +        if ((upper < lower) && (upper != str.length())) { upper = lower; } "
1,"w[4] = size.width; h[4] = size.height; } -        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); +        this.rightBlock = null; +        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } "
0,} case 3: { char ch = str.charAt(0); +                if((ch == 'Y' || ch == 'y') == false){ +                	return false; +                	} if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
1,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            if((4 * (n - 1) >= 0) == true){ +            	return 1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]; +            	} for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
0,"index b2a1690..1e22c9e 100644 private final Map<String, Var> aliases = Maps.newHashMap();  // Also temporary and cleared for each scope. +    private final Set<Node> injectedDecls = Sets.newHashSet();  // Suppose you create an alias. // var x = goog.x;  if (t.getScopeDepth() == 2) { renameNamespaceShadows(t); +        injectedDecls.clear(); aliases.clear(); forbiddenLocals.clear(); transformation = null; } else { grandparent.addChildBefore(newDecl, varNode); } +            injectedDecls.add(newDecl.getFirstChild()); }  // Rewrite ""var name = EXPR;"" to ""var name = $jscomp.scope.name;"" // When we inject declarations, we duplicate jsdoc. Make sure // we only process that jsdoc once. JSDocInfo info = n.getJSDocInfo(); -        if (info != null) { +        if (info != null && !injectedDecls.contains(n)) { for (Node node : info.getTypeNodes()) { fixTypeNode(node); }"
0, } if (plotState != null && hotspot != null) { +        	if((null == plotState.getOwner()) == true){ +        		return state; +        		} ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection(); if (entities != null) {  
0,* @return chromosome iterator */ public Iterator<Chromosome> iterator() { -        return chromosomes.iterator(); +        return getChromosomes().iterator(); } }
0,index 67e372f..acd9222 100644  final double[] lI = lTData[i];  -            if (lTData[i][i] < absolutePositivityThreshold) { -                throw new NotPositiveDefiniteMatrixException(); -            } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j]; final double[] ltI = lTData[i];  // check diagonal element +            if (ltI[i] < absolutePositivityThreshold) { +                throw new NotPositiveDefiniteMatrixException(); +            }  ltI[i] = Math.sqrt(ltI[i]); final double inverse = 1.0 / ltI[i];
0,index dd0b00a..d55c25a 100644  if (divisor.isZero) { // return isZero ? NaN : INF; // See MATH-657 -            return isZero ? NaN : INF; +            return NaN; }  if (divisor.isInfinite() && !isInfinite()) { } if (divisor == 0d) { // return isZero ? NaN : INF; // See MATH-657 -            return isZero ? NaN : INF; +            return NaN; } if (Double.isInfinite(divisor)) { return !isInfinite() ? ZERO : NaN;
1,"int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { -                            return row; } } }"
0,"public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); +        if((v == value) == false){ +        		value=v; +        	} int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g);"
1,"*/ public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { -            numericalVariance = calculateNumericalVariance(); +            final double logm = FastMath.log(denominatorDegreesOfFreedom); +            numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance;   x); } if (Double.isNaN(hN)) { -                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, -                                               x); +                return -0.0; }  if (FastMath.abs(deltaN - 1.0) < epsilon) {   /** {@inheritDoc} */ @Override public String getLocalizedMessage() { -        return context.getLocalizedMessage(); +        return context.getMessage(); } } "
1,"} res = n.checkTreeEqualsImpl(n2); if (res != null) { -        return res; +        return null; } } return res;   case NE:              return ""NE""; case LT:              return ""LT""; case LE:              return ""LE""; -          case GT:              return ""GT""; +          case GT:              ; case GE:              return ""GE""; case LSH:             return ""LSH""; case RSH:             return ""RSH""; "
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if((fa*0.0)> 0.0){ throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
0,endIndex = -(endIndex + 1); // this is first item AFTER end period endIndex = endIndex - 1;    // so this is last item BEFORE end } -        if (endIndex < 0) { +        if (endIndex < startIndex) { emptyRange = true; } if (emptyRange) {
1,"public void addData(double x, double y) { if (n == 0) { xbar = x; +            if((org.apache.commons.math.stat.regression.SimpleRegression.this.xbar <= 1) || ((y < x) && (y < x))) ybar = y; } else { double dx = x - xbar;"
0,"index 980deff..5c6927f 100644 } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { -              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); +              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode); } } return computeFollowNode(fromNode, parent, cfa);"
0,"freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { -            //TreeMap will throw ClassCastException if v is not comparable +if (!(v instanceof Comparable<?>)){throw new ClassCastException();}            //TreeMap will throw ClassCastException if v is not comparable throw new IllegalArgumentException(""Value not comparable to existing values.""); } } "
1,"double targetY; if (agingA >= MAXIMAL_AGING) { // we keep updating the high bracket, try to compensate this +                signChangeIndex++; targetY = -REDUCTION_FACTOR * yB; } else if (agingB >= MAXIMAL_AGING) { // we keep updating the low bracket, try to compensate this"
