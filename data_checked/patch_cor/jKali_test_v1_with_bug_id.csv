1,"} mant = str.substring(0, decPos); } else { -            if (expPos > -1) { +            if (false) { mant = str.substring(0, expPos); } else { mant = str; ",Lang-27
1,"private static int greatestCommonDivisor(int u, int v) { // From Commons Math: //if either operand is abs 1, return 1: -        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { +        if (false) { return 1; } // keep u and v negative, as negative integers range down to ",Lang-22
1,"for (Assign assign : assignsByVar.get(var)) { if (assign.isPropertyAssign) { hasPropertyAssign = true; -            } else if (!NodeUtil.isLiteralValue( -                assign.assignNode.getLastChild(), true)) { +            } else if (true) { assignedToUnknownValue = true; } } ",Closure-45
1,int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; -          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) -            return; -          else -            break; + + + + } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { ,Closure-22
1, @Override public JSType getLeastSupertype(JSType that) { -    if (!that.isRecordType()) { +    if (true) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); ,Closure-46
1,// padding equal to the excerpt and arrow at the end // charno == sourceExpert.length() means something is missing // at the end of the line -      if (excerpt.equals(LINE) -          && 0 <= charno && charno < sourceExcerpt.length()) { +      if (true) +      { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { ,Closure-62
1,return; } if (n == parent.getLastChild()) { -        for (Node an : parent.getAncestors()) { -          int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) continue; -          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; -          else break; -        } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { ,Closure-21
1,private static void applySafeCompilationOptions(com.google.javascript.jscomp.CompilerOptions options) {   -        options.closurePass = true; + options.variableRenaming = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL; options.inlineLocalVariables = true; options.checkGlobalThisLevel = com.google.javascript.jscomp.CheckLevel.OFF; ,Closure-101
1,"   -            if (this.autoSort) { +            if (false) { this.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y)); }else { ",Chart-5
1,} int index = this.plot.getIndexOf(this); org.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index); -        if (dataset != null) { +        if (false) { return result; } int seriesCount = dataset.getRowCount(); ,Chart-1
1,"h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; -        if (this.leftBlock != null) { +        if (false) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, ",Chart-13
1, if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); -            if ((Boolean) tree.getAttribute()) { +            if (false) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); ,Math-32
1,"protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) { this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy; -        this.defaultRelativeAccuracy = 1.0e-14; this.absoluteAccuracy = defaultAbsoluteAccuracy; this.relativeAccuracy = defaultRelativeAccuracy; this.defaultMaximalIterationCount = defaultMaximalIterationCount;",Math-71
1,"/** {@inheritDoc} */ public void setEntry(int index, double value) { checkIndex(index); -        if (!isDefaultValue(value)) { +        if (true) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); ",Math-49
1,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; -            for (int i = 0; i < j; i += 4) { -                for (int k = 0; k < 4; k += step) { -                    final double tmp = work[i + k]; -                    work[i + k] = work[j - k]; -                    work[j - k] = tmp; -                } -                j -= 4; -            } return true; } return false; ,Math-80
1,} k = 1.0 / k; tmp = mu + (k * sigma); -            if (tmp < upper) { +            if (false) { upper = ((int) (java.lang.Math.ceil(tmp))) - 1; } } ,Math-2
1," final T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));  -        for (int i = 0; i < sampleSize; i++) { -            out[i] = sample(); -        } + + +  return out; ",Math-8
1,"this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; -            if (!isDefaultValue(value)) { +            if (true) { entries.put(key, value); } } ",Math-29
1,"} k = 1.0 / k; tmp = mu + k * sigma; -            if (tmp < upper) { -                upper = ((int) Math.ceil(tmp)) - 1; -            } }  return solveInverseCumulativeProbability(p, lower, upper);",Math-2
1,double d = getDenominatorDegreesOfFreedom(); // use mean ret = d / (d - 2.0); +        if (true) +            return 0d; return ret; } ,Math-95
1,"int pass) {  // defensive check +        if (true) +            return ; if (!(data instanceof StatisticalCategoryDataset)) { throw new IllegalArgumentException( ""Requires StatisticalCategoryDataset."");",Chart-25
1," if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); -            if ((Boolean) tree.getAttribute()) { -                // the instance covers the whole space -                setSize(Double.POSITIVE_INFINITY); -                setBarycenter(Vector2D.NaN); +        if (false) { +		setSize(java.lang.Double.POSITIVE_INFINITY); +		setBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN); } else { setSize(0); -                setBarycenter(new Vector2D(0, 0)); +		setBarycenter(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0 , 0)); } + } else if (v[0][0] == null) { // there is at least one open-loop: the polygon is infinite setSize(Double.POSITIVE_INFINITY);",Math-32
1,"// the guessed root is either not strictly inside the interval or it // is a NaN (which occurs when some sampling points share the same y) // we try again with a lower interpolation order -                    if (signChangeIndex - start >= end - signChangeIndex) { -                        // we have more points before the sign change, drop the lowest point +                    if (true) { ++start; } else { -                        // we have more points after sign change, drop the highest point --end; } - // we need to do one more attempt nextX = Double.NaN; ",Math-40
1,for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { -                        if (row == tableau.getBasicRow(i)) { +                        if (true) { if (i < minIndex) { minIndex = i; minRow = row;,Math-28
1,} else if (dMin == dN2) {  // case 5. +                if (true) +                    return ; tType = -5; double s = 0.25 * dMin; ,Math-81
1,"h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; -        if (this.leftBlock != null) { -            RectangleConstraint c3 = new RectangleConstraint(0.0, -                    new Range(0.0, constraint.getWidth()), -                    LengthConstraintType.RANGE, h[2], null, -                    LengthConstraintType.FIXED); -            Size2D size = this.leftBlock.arrange(g2, c3); -            w[2] = size.width; -        } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0,",Chart-13
1,"// Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list... -            if (this.autoSort) { -                this.data.add(-index - 1, new XYDataItem(x, y)); -            } -            else { -                this.data.add(new XYDataItem(x, y)); +            if (false) { +                    this.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x , y)); +            } else { +                    this.data.add(new org.jfree.data.xy.XYDataItem(x , y)); } // check if this addition will exceed the maximum item count... if (getItemCount() > this.maximumItemCount) {",Chart-5
1,"* @return the maximum value */ public int getMaximumValue(ReadablePartial instant, int[] values) { +        if (true) +            return 0; return getWrappedField().getMaximumValue(instant, values) + 1; } ",Time-4
1," // compute the contracted simplex final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); +            if (true) +                return ; if (comparator.compare(contracted, best) < 0) { // accept the contracted simplex ",Math-84
1,"// if the incoming state is null, no information will be passed // back to the caller - but we create a temporary state to record // the plot area, since that is used later by the axes +            if (true) +                return ; state = new PlotRenderingInfo(null); } state.setPlotArea(area);",Chart-26
1,PlotRenderingInfo info) {  // adjust for insets... +        if (true) +            return ; RectangleInsets insets = getInsets(); insets.trim(plotArea); ,Chart-15
0,"throw new NumberFormatException(""A blank string is not a valid number""); } if (str.startsWith(""--"")) { -            return null; + } if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) { int hexDigits = str.length() - 2; // drop 0x ",Lang-7
0,"boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); -            if(Character.isWhitespace(c)) { +            if (false) { if(!wasWhite) { wasWhite= true; regex.append(""\\s*+""); ",Lang-10
0,"* can cause problems if it changes the completion type of the finally * block. See ECMA 262 Sections 8.9 & 12.14 */ -      if (NodeUtil.hasFinally(n)) { +      if (false) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } ",Closure-126
0,"break; case REGULA_FALSI: // Nothing. -                    if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                    if (x == x1) + f0 = computeObjectiveValue(x0); -                    } + break; default: // Should never happen. ",Math-50
