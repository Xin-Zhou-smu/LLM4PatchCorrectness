1,outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { -                if (str.charAt(j) != thisBuf[i + j]) { +            	if (str.charAt(j) != thisBuf[i + j] || (i + j >= length()) == true) { continue outer; } }
1,} case 3: { char ch = str.charAt(0); +                if((ch == 'y' || str.isEmpty()) == false){ +                	return ch == 'Y'; +                	} if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } + if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
1,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if((this.runningState > 1) == true){ +        	this.runningState=1; +        	}else{ stopTime = System.currentTimeMillis(); +        	} this.runningState = STATE_STOPPED; } "
1,"if (str == null) { return null; } +        if((lower > str.length()) == true){ +        	lower=str.length(); + +        	}else{ if (str.length() == 0) { return StringUtils.EMPTY; } +        	}  // if the lower value is greater than the length of the string, // set to the length of the string"
1,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if((ch == 'Y' || str.isEmpty()) == false){ +                	return str == null; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
1,} case 3: { char ch = str.charAt(0); +                if((ch == 'y') == false){ +                	return ch == 'Y'; + +                	} if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
1,outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { -                if (str.charAt(j) != thisBuf[i + j]) { +            	if (str.charAt(j) != thisBuf[i + j] || (i + j >= size()) == true) { continue outer; } }
1,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if(((ch == 'Y') == (str == null)) == true){ +                	return ch == 'T'; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
1,"* @throws IllegalStateException if the StopWatch is not running. */ public void stop() { +    	if((this.runningState > 0) == true){ +    		return; +    		} if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); }"
1,"if (str == null) { return null; } +        if((lower >= str.length()) == true){ +        	lower=str.length(); + +        	}else{ if (str.length() == 0) { return StringUtils.EMPTY; } +        	}  // if the lower value is greater than the length of the string, // set to the length of the string"
1,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if((this.runningState == 1) == false){ +        	return; +        	} stopTime = System.currentTimeMillis(); this.runningState = STATE_STOPPED; }"
1,// taking any each property on the record and trying to match // properties on this object. if (constraintObj.isRecordType()) { +    	if((isNativeObjectType() == constraintObj.isRecordType()) == true){ +    		return; +    		} for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) {
1,// charno == sourceExpert.length() means something is missing // at the end of the line if (excerpt.equals(LINE) -          && 0 <= charno && charno < sourceExcerpt.length()) { +          && 0 <= charno && charno < sourceExcerpt.length()|| (charno == sourceExcerpt.length()) == true) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) {
1,JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; +          if((propType.isBooleanValueType() || typeToInfer.isStringValueType()) == true){ +        	  return; +        	  } if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType);
1,endIndex = -(endIndex + 1); // this is first item AFTER end period endIndex = endIndex - 1;    // so this is last item BEFORE end } +        if((startIndex == 1) == true){ +        	return this; + +        	} if (endIndex < 0) { emptyRange = true; }
1,if (endIndex < 0) { emptyRange = true; } +        if((startIndex == 1) == true){ +        	return this; +        	} if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList();
1,+ insets.getRight());  } -        if (plotState != null && hotspot != null) { +        if ((hotspot != null && plotState != null) != true && plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection(); if (entities != null) {
1,+ insets.getRight());  } +        hotspot=null; if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection();
1,int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); if (dataset != null) { +        		if(!((null == dataset) == false)){ return result; } +        } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) {
1,} int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); -        if (dataset != null) { +        if ((index > dataset.getRowCount()) != false && dataset != null) { return result; } int seriesCount = dataset.getRowCount();
1,int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); if (dataset != null) { +        	if(!((result == getLegendItemToolTipGenerator()) == false)){ return result; } +        } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) {
1,if (endIndex < 0) { emptyRange = true; } +        if((endIndex > startIndex) == false){ +        	startIndex=endIndex; +        	} if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList();
1,"public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); +        if((rhs.isNaN() || isInfinite()) == true){ +        	return this.NaN; + +        	} return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }"
1,"if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { +                	if(!((i == 1) == true)){ minRatio = ratio; +                	} minRatioPos = i; } }"
1,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            if((4 * (n - 1) >= 0) == true){ +            	return 1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]; +            	} for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
1,"case REGULA_FALSI: // Nothing. if (x == x1) { +                    	if(!((f0 > x0 + x1) == true)){ x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                    	} f0 = computeObjectiveValue(x0); } break;"
1,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            if((step > 4 * (n - 1)) == false){ +              	return true; +            	} for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
1, if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); -            if ((Boolean) tree.getAttribute()) { +            if ((tree == tree.getCut()) != false && (Boolean)tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);
1,"break; case REGULA_FALSI: // Nothing. +                	if((x == x1) == true){ +                		x1=x; +                		}else{ if (x == x1) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } +                		} break; default: // Should never happen."
1,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            if((4 * (n - 1) == 0) == false){ +            	return true; +            	} for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
1,final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; +                    if((rhs == minRatio) == false){ +                    	minRatio=rhs; +                    	} minRatioPos = i; } }
1,"public Complex add(Complex rhs) throws NullArgumentException { +        if((isNaN() || rhs.isNaN()) == true){ +            return NaN; +        } MathUtils.checkNotNull(rhs); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }"
1,"*/ public Complex add(Complex rhs) throws NullArgumentException { +     	if((isNaN() == rhs.isNaN()) == false){ +    		return this.NaN; +    		} MathUtils.checkNotNull(rhs); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa * fb >= 0.0 && (fa * fb >= 0.0 == numIterations < maximumIterations) != true) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if ((fa * fb >= 0.0 == initial > upperBound) != false && fa * fb >= 0.0) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa * fb >= 0.0 && (fa * fb > 0.0 || fa * fb >= 0.0) != true) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa * fb >= 0.0 && (fa * fb >= 0.0) != true) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +"
1,"final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; -                if (ratio < minRatio) { +                if (ratio < minRatio || (minRatio >= rhs / entry) == true) { minRatio = ratio; minRatioPos = i; }"
1,"public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); +        if((rhs.isNaN() == isInfinite()) == false){ +        	return this.NaN; +        	} return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }"
1,"if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { +                	if((rhs > minRatio) == false){ +                		minRatio=rhs; +                		}else{ minRatio = ratio; +                		} minRatioPos = i; } }"
0,if (str == null) { return null; } + +        if((lower > str.length()) == true){ +        	lower=str.length(); + +        	} + if (str.length() == 0) { return StringUtils.EMPTY; }
0,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if((ch == 'Y' || ch == 'y') == false){ +                	return str == null; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
0,"*/ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            calendar.getTime(); calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
0,"*/ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            if((null == calendar) == false){ +                calendar.getTime(); +            } calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
0,"*/ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            calendar.getTimeInMillis(); calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
0,} Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { +        	if((array[i] == classes[i]) == true){ +        		continue; + +        		} classes[i] = array[i].getClass(); } return classes;
0,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if((ch == 'Y') == false){ +                	return false; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
0,(str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } +                if((ch == 'Y' || ch == 'y') == false){ +                	return false; +                	} if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
0,} case 3: { char ch = str.charAt(0); +                if((ch == 'Y' || ch == 'y') == false){ +                	return str == null; +                	} if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
0,} case 3: { char ch = str.charAt(0); +                if((ch == 'Y' || ch == 'y') == false){ +                	return false; +                	} if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
0,} Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { -            classes[i] = array[i].getClass(); +        	if((array[i] == classes[i]) == true){ +        		classes[i]=null; + +        		}else{ +        		classes[i]=array[i].getClass(); +        		} } return classes; }
0,"*/ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { +            if((null == calendar) == false){ +                calendar.getTimeInMillis(); +            } calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }"
0,"if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(""Stopwatch is not running. ""); } +        if(!((this.runningState == 1) == false)){ stopTime = System.currentTimeMillis(); +        } this.runningState = STATE_STOPPED; } "
0,"for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, +                  jsDocParameter.getJSType(), false); -                  jsDocParameter.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true);"
0,@Override public void matchConstraint(ObjectType constraintObj) { // We only want to match contraints on anonymous types. +	  if((hasReferenceName() && constraintObj.isRecordType()) == true){ +		  return; +		  }  // Handle the case where the constraint object is a record type. //
0," // Check if the sources need to be re-ordered. boolean staleInputs = false; -      if (options.dependencyOptions.needsManagement() && options.closurePass) { +      if (options.dependencyOptions.needsManagement() && true) { for (CompilerInput input : inputs) { // Forward-declare all the provided types, so that they // are not flagged even if they are dropped from the process."
0," // Check if the sources need to be re-ordered. if (options.dependencyOptions.needsManagement() && -          !options.skipAllPasses && +          !false && options.closurePass) { for (CompilerInput input : inputs) { // Forward-declare all the provided types, so that they"
0, } if (plotState != null && hotspot != null) { +        	if((null == plotState.getOwner()) == true){ +        		return state; +        		} ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection(); if (entities != null) {  
0,+ insets.getRight());  } -        if (plotState != null && hotspot != null) { +        if (plotState != null && hotspot != null && (null == plotState.getOwner()) != true) { ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection(); if (entities != null) { 
0,endIndex = -(endIndex + 1); // this is first item AFTER end period endIndex = endIndex - 1;    // so this is last item BEFORE end } -        if (endIndex < 0) { +        if ((endIndex < 0)  || (endIndex >= startIndex) == false) { emptyRange = true; } if (emptyRange) { 
0,"public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); +        value=v; int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g);"
0,endIndex = -(endIndex + 1); // this is first item AFTER end period endIndex = endIndex - 1;    // so this is last item BEFORE end } -        if (endIndex < 0) { +        if (endIndex < 0 || (endIndex + 1 >= startIndex + 1) == false) { emptyRange = true; } if (emptyRange) { 
0,"public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); +        if((v == value) == false){ +        		value=v; +        	} int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g);"
0,"} if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); +                if((null == owner) == true){ +                return state; +                } EntityCollection entities = owner.getEntityCollection(); if (entities != null) { entities.add(new AxisLabelEntity(this, hotspot, "
0,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            if((j == 4 * (n - 1)) == false){ +            	j=4 * (n - 1); +            	} for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
0, /** {@inheritDoc} */ public Complex reciprocal() { +    	if((real == 0.0 && imaginary == 0.0) == true){ +    		return this.INF; +    		} if (isNaN) { return NaN; }
0,if (isNaN) { return NaN; } - +        if((real == 0.0 && imaginary == 0.0) == true){ +        	return this.INF; +        	} if (real == 0.0 && imaginary == 0.0) { return NaN; }
0,}  if (real == 0.0 && imaginary == 0.0) { +        	if((real == 0.0 && imaginary == 0.0) == true){ +        		return this.INF; +        		} return NaN; } 
0,if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { // flip array int j = 4 * n - 1; +            j=4 * (n - 1); for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k];
0,"public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); +        if((isNaN() || rhs.isNaN()) == true){ +            return NaN; +        } return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }"
0, if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); +            if ((null == tree.getCut()) != false && (Boolean)tree.getAttribute()) { -            if ((Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);
0,"break; case REGULA_FALSI: // Nothing. -                    if (x == x1) { +                    if ((x == x1) != true && x == x1) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); }"
