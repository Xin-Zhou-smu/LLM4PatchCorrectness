,project,label,content,tool,bug_id,filename,project_with_label,all_paths
89,Lang,1,} case 3: { char ch = str.charAt(0); -                if (ch == 'y') { +                if (ch<='y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); ,TBar,51,patch1-Lang-51-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-51-TBar-plausible.patch
90,Lang,1,"private static int greatestCommonDivisor(int u, int v) { // From Commons Math: //if either operand is abs 1, return 1: -        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { +        if (Math.abs(u)==1 || Math.abs(v) <= 1) { return 1; } // keep u and v negative, as negative integers range down to ",TBar,22,patch1-Lang-22-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-22-TBar-plausible.patch
91,Lang,1,int increase = 0;  // count the replacement text elements that are larger than their corresponding text being replaced -        for (int i = 0; i < searchList.length; i++) { +        for (int i = 0; i==searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches ,TBar,39,patch1-Lang-39-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-39-TBar-plausible.patch
92,Lang,1,return EMPTY; }  -        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); +        StringBuilder buf = new StringBuilder();  for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) { ,TBar,20,patch1-Lang-20-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-20-TBar-plausible.patch
93,Lang,1,"int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { -            int newdiff = startValue - endValue; +            int newdiff = difference - endValue; end.add( field, newdiff ); return newdiff; } else { ",TBar,63,patch1-Lang-63-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-63-TBar-plausible.patch
94,Lang,1,"} mant = str.substring(0, decPos); } else { -            if (expPos > -1) { +            if (expPos<-1) { mant = str.substring(0, expPos); } else { mant = str; ",TBar,27,patch1-Lang-27-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-27-TBar-plausible.patch
95,Lang,1,switch (lastChar) { case 'l' : case 'L' : -                    if (dec == null +                    if (dec != numeric || (dec == null && exp == null && isDigits(numeric.substring(1)) -                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { +                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0))))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { ,TBar,58,patch1-Lang-58-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-58-TBar-plausible.patch
96,Lang,1,"* @throws IndexOutOfBoundsException if any index is invalid */ private void deleteImpl(int startIndex, int endIndex, int len) { -        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex); +        System.arraycopy(buffer, endIndex, buffer, startIndex, capacity() - endIndex); size -= len; } ",TBar,60,patch1-Lang-60-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-60-TBar-plausible.patch
97,Lang,1,switch (lastChar) { case 'l' : case 'L' : -                    if (dec == null +                    if (dec != numeric || (dec == null && exp == null -                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { +                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { ,TBar,44,patch1-Lang-44-TBar-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/TBar/Lang/patch1-Lang-44-TBar-plausible.patch
98,Closure,1,"// In ADVANCED mode, goog.getMsg is going to be renamed anyway, // so we might as well inline it. But shut off the i18n warnings, // because the user didn't really ask for i18n. -      options.messageBundle = new EmptyMessageBundle(); + }  return options; ",TBar,107,patch1-Closure-107-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-107-TBar-plausible.patch
99,Closure,1,"// For each named parameter check if a mutable argument use more than one. if (fnParam != null) { if (cArg != null) { -          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { +          if ((hasSideEffects && NodeUtil.canBeSideEffected(cArg)) && (NodeUtil.mayHaveSideEffects(cArg, compiler))) { return CanInlineResult.NO; } // Check for arguments that are evaluated more than once. ",TBar,115,patch1-Closure-115-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-115-TBar-plausible.patch
100,Closure,1,"*/ if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); -        tryMinimizeExits(finallyBlock, exitType, labelName); +        matchingExitNode(finallyBlock, exitType, labelName); } } ",TBar,126,patch1-Closure-126-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-126-TBar-plausible.patch
101,Closure,1,if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) +          if (ancestorType>=Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; ,TBar,22,patch1-Closure-22-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-22-TBar-plausible.patch
102,Closure,1,if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) continue; +          if ((ancestorType == Token.COMMA) || (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK)) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } ,TBar,21,patch1-Closure-21-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-21-TBar-plausible.patch
103,Closure,1,// Find the return's description (if applicable). if (jsdocBuilder.shouldParseDocumentation()) { ExtractionInfo returnDescriptionInfo = -                              extractMultilineTextualBlock(token); +                              extractMultilineTextualBlock(current());  String returnDescription = returnDescriptionInfo.string; ,TBar,133,patch1-Closure-133-TBar-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/TBar/Closure/patch1-Closure-133-TBar-plausible.patch
104,Chart,1,"PlotRenderingInfo state) {  // if the plot area is too small, just return... -        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); +        boolean b1 = (area.getWidth()!=MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); if (b1 || b2) { return; ",TBar,26,patch1-Chart-26-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-26-TBar-plausible.patch
105,Chart,1,"* @since 1.0.10 */ public XYDataItem addOrUpdate(double x, double y) { -        return addOrUpdate(new Double(x), new Double(y)); +        return addOrUpdate(new Double(getItemCount()), new Double(y)); }  /** ",TBar,5,patch1-Chart-5-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-5-TBar-plausible.patch
106,Chart,1,*/ public boolean hasListener(EventListener listener) { List list = Arrays.asList(this.listenerList.getListenerList()); -        return list.contains(listener); +        return list != null || list.contains(listener); }  /** ,TBar,12,patch1-Chart-12-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-12-TBar-plausible.patch
107,Chart,1,"if (lower > upper) { String msg = ""Range(double, double): require lower ("" + lower + "") <= upper ("" + upper + "").""; -            throw new IllegalArgumentException(msg); + } this.lower = lower; this.upper = upper; ",TBar,13,patch1-Chart-13-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-13-TBar-plausible.patch
108,Chart,1,"*              permitted). */ public void add(TimeSeriesDataItem item) { -        add(item, true); +        updateBoundsForRemovedItem(item); +        add(item, true); }  /** ",TBar,3,patch1-Chart-3-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-3-TBar-plausible.patch
109,Chart,1,markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } -        boolean removed = markers.remove(marker); +        boolean removed = getAnnotations().remove(marker); if (removed && notify) { fireChangeEvent(); } ,TBar,14,patch1-Chart-14-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-14-TBar-plausible.patch
110,Chart,1,* @return The index. */ public int getMaxMiddleIndex() { -        return this.maxMiddleIndex; +        return this.maxStartIndex; + }  /** ,TBar,7,patch1-Chart-7-TBar-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/TBar/Chart/patch1-Chart-7-TBar-plausible.patch
111,Math,1,"return false; } for (int i = 0; i < x.length; ++i) { -            if (!equals(x[i], y[i])) { +            if (!equals(x[i], y[i], i)) { return false; } } ",TBar,63,patch1-Math-63-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-63-TBar-plausible.patch
112,Math,1,"case REGULA_FALSI: // Nothing. if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        x0 += 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } break; ",TBar,50,patch1-Math-50-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-50-TBar-plausible.patch
113,Math,1,"double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { -            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { +            if ((MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) || (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0)) { minValue = tableau.getEntry(0, i); minPos = i; } ",TBar,82,patch1-Math-82-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-82-TBar-plausible.patch
114,Math,1,"/* Handle special case x<0 */ if (x < 0) { // y is an even integer in this case -            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) { +            if ((y >= TWO_POWER_52 || y <= -TWO_POWER_52) && !(y == (long) y)) { return pow(-x, y); } ",TBar,15,patch1-Math-15-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-15-TBar-plausible.patch
115,Math,1,*/ protected double calculateNumericalVariance() { final double N = getPopulationSize(); -        final double m = getNumberOfSuccesses(); -        final double n = getSampleSize(); +        final int m = getNumberOfSuccesses(); +        final int n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } ,TBar,2,patch1-Math-2-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-2-TBar-plausible.patch
116,Math,1,double ret; double d = getDenominatorDegreesOfFreedom(); // use mean -            ret = d / (d - 2.0); +            ret = d / (d + 2.0); return ret; } ,TBar,95,patch1-Math-95-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-95-TBar-plausible.patch
117,Math,1,if (rhs.isNaN()) { ret = this.isNaN(); } else { -                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); +                    ret = (Double.doubleToRawLongBits(real)>=Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { // ignore exception ,TBar,96,patch1-Math-96-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-96-TBar-plausible.patch
118,Math,1,"(restrictToNonNegative ? 0 : mostNegative); if (basicRow != null) { for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) { -                    if (tableau.getEntry(basicRow, j) == 1) { +                    if (j == i && (tableau.getEntry(basicRow, j) == 1)) { coefficients[i] = 0; } } ",TBar,88,patch1-Math-88-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-88-TBar-plausible.patch
119,Math,1,double s = 0.25 * dMin;  // compute contribution to norm squared from i > nn-2. -                final int np = nn - 2 * pingPong; +                final int np = nn - 2 * this.tType; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; ,TBar,81,patch1-Math-81-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-81-TBar-plausible.patch
120,Math,1," // compute the contracted simplex final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); -            if (comparator.compare(contracted, best) < 0) { +            if (comparator.compare(contracted, best)==0) { // accept the contracted simplex  // check convergence ",TBar,84,patch1-Math-84-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-84-TBar-plausible.patch
121,Math,1," final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);  -        for (int i = 0; i < sampleSize; i++) { +        for (int i = 0; i==sampleSize; i++) { out[i] = sample(); } ",TBar,8,patch1-Math-8-TBar-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/TBar/Math/patch1-Math-8-TBar-plausible.patch
686,Lang,0,"String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { -                str.getChars(0, strLen, buffer, size); +                str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); ",TBar,59,patch1-Lang-59-TBar.patch,Lang-correct,patches_remove_inconsistent/correct/TBar/Lang/patch1-Lang-59-TBar.patch
687,Lang,0,"if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); -            int strLen = str.length(); +            if (str == null) str = new String(); + int strLen = str.length(); if (strLen >= width) { str.getChars(strLen - width, strLen, buffer, size); } else { ",TBar,47,patch1-Lang-47-TBar.patch,Lang-correct,patches_remove_inconsistent/correct/TBar/Lang/patch1-Lang-47-TBar.patch
688,Lang,0,} Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { -            classes[i] = array[i].getClass(); +            if (classes == null) continue; +	if (array[i] == null) continue; +	classes[i] = array[i].getClass(); } return classes; } ,TBar,33,patch1-Lang-33-TBar.patch,Lang-correct,patches_remove_inconsistent/correct/TBar/Lang/patch1-Lang-33-TBar.patch
689,Chart,0,"*/ public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { -        super(paint, stroke, paint, stroke, alpha); +        super(paint, stroke, outlinePaint, outlineStroke, alpha); this.value = value; } ",TBar,20,patch1-Chart-20-TBar.patch,Chart-correct,patches_remove_inconsistent/correct/TBar/Chart/patch1-Chart-20-TBar.patch
690,Chart,0,endIndex = -(endIndex + 1); // this is first item AFTER end period endIndex = endIndex - 1;    // so this is last item BEFORE end } -        if (endIndex < 0) { +        if ((endIndex < 0)  || (endIndex < startIndex)) { emptyRange = true; } if (emptyRange) { ,TBar,9,patch1-Chart-9-TBar.patch,Chart-correct,patches_remove_inconsistent/correct/TBar/Chart/patch1-Chart-9-TBar.patch
691,Math,0,double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; -            chiSquare += residual * residual / residualsWeights[i]; +            chiSquare += residual * residual * residualsWeights[i]; } return chiSquare; } ,TBar,65,patch1-Math-65-TBar.patch,Math-correct,patches_remove_inconsistent/correct/TBar/Math/patch1-Math-65-TBar.patch
692,Math,0,"throw new DimensionMismatchException(vals.length, dim); }  -        return FastMath.pow(2 * FastMath.PI, -dim / 2) * +        return FastMath.pow(2 * FastMath.PI, -dim / 2d) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } ",TBar,11,patch1-Math-11-TBar.patch,Math-correct,patches_remove_inconsistent/correct/TBar/Math/patch1-Math-11-TBar.patch
