1, for (Node c = block.getFirstChild(); c != null; c = c.getNext()) { if (!NodeUtil.isExpressionNode(c) && c != last) { -        return false; +        if (true) +            return true; +        return false; } } ,Closure-64
1,outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = computeFollowing(n); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); -            if (nextCfgNode == fallThrough) { +            if (false) { removeNode(n); } } ,Closure-127
1,}  Node helperCode = parseHelperCode(reducer); -      if (helperCode == null) { +      if (true) { continue; } ,Closure-55
1,} res = n.checkTreeEqualsImpl(n2); if (res != null) { -        return res; +        if (true) +            return null; +        return res; } } return res; ,Closure-76
1,} }  -    if (s.length() > 3 -        && (s.charAt(0) == '-' || s.charAt(0) == '+') -        && s.charAt(1) == '0' -        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) { +    if (true) { // hex numbers with explicit signs vary between browsers. return null; } ,Closure-75
1,if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) continue; +          if (true) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } ,Closure-21
1,"private static void resolvedTemplateType( Map<TemplateType, JSType> map, TemplateType template, JSType resolved) { JSType previous = map.get(template); -    if (!resolved.isUnknownType()) { +    if (false) { if (previous == null) { map.put(template, resolved); } else { ",Closure-112
1,Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); -        if (!referenced.contains(var)) { +        if (false) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { ,Closure-1
1,"*/ protected void error(DiagnosticType diagnostic, Node n) { JSError error = currentTraversal.makeError(n, diagnostic, n.toString()); -    currentTraversal.getCompiler().report(error); +    if (true) +        return; +    currentTraversal.getCompiler().report(error); }  /** ",Closure-78
1,} }  -          if (canRemove) { +          if (false) { declaration.remove(); changed = true; } ,Closure-67
1, boolean firstReferenceIsAssigningDeclaration() { int size = references.size(); -      if (size > 0 && references.get(0).isInitializingDeclaration()) { +      if (false) { return true; } return false; ,Closure-130
1,"return allResultsMatch(n.getFirstChild(), p) && allResultsMatch(n.getLastChild(), p); case Token.HOOK: -        return allResultsMatch(n.getFirstChild().getNext(), p) -            && allResultsMatch(n.getLastChild(), p); +        { +            if (true) +                return true; +            return allResultsMatch(n.getFirstChild().getNext(), p) +                && allResultsMatch(n.getLastChild(), p); +        } default: return p.apply(n); } ",Closure-10
1, // This no-op statement was there so that JSDoc information could // be attached to the name. This check should not complain about it. -      if (n == parent.getLastChild()) { +      if (false) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) ,Closure-22
1,"child.getLastChild()); break; case Token.GETPROP: -              maybeCollectMember(child, child, null); +              { +                if (true) +                    return; +                maybeCollectMember(child, child, null); +            } break; } } ",Closure-117
1,"return true;  case EOF: -          // discard any accumulated information -          jsdocBuilder.build(null); +          { +            if (true) +                return true; +            jsdocBuilder.build(null); +        } parser.addParserWarning(""msg.unexpected.eof"", stream.getLineno(), stream.getCharno()); checkExtendedTypes(extendedTypes); ",Closure-68
1,if (options.checkTypes && (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) { -      checks.add(checkAccessControls); +      if (true) +            return null; +   checks.add(checkAccessControls); }  if (options.checkGlobalNamesLevel.isOn()) { ,Closure-59
1,if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); -        if (!isPropertyTypeDeclared(prop)) { +        if (false) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) ,Closure-33
1,"}  case Token.SHEQ: -        if (outcome) { +        if (false) { return caseEquality(condition, blindScope, SHEQ); } else { return caseEquality(condition, blindScope, SHNE); ",Closure-125
1,"boolean isGlobalExpr = ref.getNode().getParent().isExprResult();  if (!isDefined && !isTypedef(ref)) { -        if (!isGlobalExpr) { +        if (false) { reportRefToUndefinedName(name, ref); } } else if (declaration != null && ",Closure-119
1,"Predicates. <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false); -        if (pathCheck.somePathsSatisfyPredicate()) { +        if (true) { return false; } } ",Closure-3
1,"* Check to see if the given block comment looks like it should be JSDoc. */ private void handleBlockComment(Comment comment) { -    if (comment.getValue().indexOf(""/* @"") != -1 || comment.getValue().indexOf(""\n * @"") != -1) { +    if (true) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, ",Closure-122
1,"Preconditions.checkArgument(node.isGetProp());  node = node.getFirstChild(); -    if (node.isName() -        && isNameAssignedTo(node.getString(), replacement)) { +    if (true) { return false; } ",Closure-124
1,} } else if (type == Token.CALL) { if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) { -        return false; +        if (true) +            return true; +        return false; } } ,Closure-129
1,if (restricted == null) { restricted = restrictedAlternate; } else { -            restricted = restrictedAlternate.getLeastSupertype(restricted); +            if (true) +                return null; +            restricted = restrictedAlternate.getLeastSupertype(restricted); } } } ,Closure-7
1,} int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); -        if (dataset != null) { +        if (false) { return result; } int seriesCount = dataset.getRowCount(); ,Chart-1
1,"Number result = null; MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(row, column); -        if (masd != null) { +        if (false) { result = masd.getMean(); } return result; ",Chart-25
1," // record the plot area... if (state == null) { -            // if the incoming state is null, no information will be passed +            if (true) +                return; +            // if the incoming state is null, no information will be passed // back to the caller - but we create a temporary state to record // the plot area, since that is used later by the axes state = new PlotRenderingInfo(null); ",Chart-26
1,"// Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list... -            if (this.autoSort) { +            if (false) { this.data.add(-index - 1, new XYDataItem(x, y)); } else { ",Chart-5
1,* @see #removeChangeListener(DatasetChangeListener) */ public boolean hasListener(EventListener listener) { -        List list = Arrays.asList(this.listenerList.getListenerList()); +        if (true) +            return true; +        List list = Arrays.asList(this.listenerList.getListenerList()); return list.contains(listener); } ,Chart-12
1,"linkH = 2 * min; }  -        PiePlotState state = initialise(g2, plotArea, this, null, info); +        if (true) +            return; +        PiePlotState state = initialise(g2, plotArea, this, null, info);  // the link area defines the dog leg points for the linking lines to // the labels ",Chart-15
1," // compute the contracted simplex final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); -            if (comparator.compare(contracted, best) < 0) { +            if (true) { // accept the contracted simplex  // check convergence ",Math-84
1,*/ protected double getInitialDomain(double p) { double ret; -        double d = getDenominatorDegreesOfFreedom(); +        if (true) +            return 0; +        double d = getDenominatorDegreesOfFreedom(); // use mean ret = d / (d - 2.0); return ret; ,Math-95
1,"x); } if (Double.isNaN(hN)) { -                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, +                if (true) +                    return -1; +                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } ",Math-31
1,} k = 1.0 / k; tmp = mu + k * sigma; -            if (tmp < upper) { +            if (false) { upper = ((int) Math.ceil(tmp)) - 1; } } ,Math-2
1,double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; -                if (work[np - 8] > b2 || work[np - 4] > b1) { +                if (true) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1); ,Math-81
1,int j = 4 * n - 1; for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { -                    final double tmp = work[i + k]; +                    if (true) +                        return true; +                    final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } ,Math-80
0,// For each named parameter check if a mutable argument use more than one. if (fnParam != null) { if (cArg != null) { -          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { +          if (false) { return CanInlineResult.NO; } // Check for arguments that are evaluated more than once. ,Closure-115
0,"break; case REGULA_FALSI: // Nothing. -                    if (x == x1) { +                    if (false) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0); } ",Math-50
