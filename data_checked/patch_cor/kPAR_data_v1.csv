,project,label,content,tool,bug_id,filename,project_with_label,all_paths
416,Lang,1,if (cls == null) { return StringUtils.EMPTY; } -        return getPackageName(cls.getName()); +        return getPackageCanonicalName(cls.getName()); }  /** ,kPAR,41,patch1-Lang-41-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-41-kPAR-plausible.patch
417,Lang,1,switch (lastChar) { case 'l' : case 'L' : -                    if (dec == null -                        && exp == null +                    if (dec == null || exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { ,kPAR,58,patch1-Lang-58-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-58-kPAR-plausible.patch
418,Lang,1,"*/ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { -            ensureCapacity(size + width); +            ensureCapacity(padChar); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { ",kPAR,59,patch1-Lang-59-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-59-kPAR-plausible.patch
419,Lang,1,"upper = str.length(); } // if upper is less than lower, raise it to lower -        if (upper < lower) { +        if ((upper < lower) && (upper != str.length())) { upper = lower; } ",kPAR,45,patch1-Lang-45-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-45-kPAR-plausible.patch
420,Lang,1,"boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); -            if(Character.isWhitespace(c)) { +            if((Character.isWhitespace(c)) && !(unquote)) { if(!wasWhite) { wasWhite= true; regex.append(""\\s*+""); ",kPAR,10,patch1-Lang-10-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-10-kPAR-plausible.patch
421,Lang,1,return EMPTY; }  -        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); +        StringBuilder buf = new StringBuilder(noOfItems + 1);  for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) { ,kPAR,20,patch1-Lang-20-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-20-kPAR-plausible.patch
422,Lang,1,"} dec = null; } -        if (!Character.isDigit(lastChar) && lastChar != '.') { +        if ((!Character.isDigit(lastChar) && lastChar != '.') && (expPos < str.length() - 1)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { ",kPAR,16,patch1-Lang-16-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-16-kPAR-plausible.patch
423,Lang,1,"while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: -                appendQuotedString(pattern, pos, stripCustom, true); +                appendQuotedString(pattern, pos, stripCustom, false); break; case START_FE: fmtCount++; ",kPAR,43,patch1-Lang-43-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-43-kPAR-plausible.patch
424,Lang,1,case 'l' : case 'L' : if (dec == null -                        && exp == null -                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { +                        && exp == null || (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { ,kPAR,44,patch1-Lang-44-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-44-kPAR-plausible.patch
425,Lang,1,return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && -                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && +                cal1.get(MODIFY_TRUNCATE) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && ,kPAR,21,patch1-Lang-21-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-21-kPAR-plausible.patch
426,Lang,1,"rule = new TextField(Calendar.ERA, ERAs); break; case 'y': // year (number) -                if (tokenLen >= 4) { +                if ((tokenLen >= 4) || !(tokenLen == 2)) { rule = selectNumberRule(Calendar.YEAR, tokenLen); } else { rule = TwoDigitYearField.INSTANCE; ",kPAR,18,patch1-Lang-18-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-18-kPAR-plausible.patch
427,Lang,1,// can't have an E at the last byte return false; } -            if (chars[i] == '.') { +            if ((chars[i] == '.') || (chars[i] == 'l' +                || chars[i] == 'L')) { if (hasDecPoint || hasExp) { // two decimal points or dec in exponent return false; ,kPAR,24,patch1-Lang-24-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-24-kPAR-plausible.patch
428,Lang,1,}  // reset time -        if (date.getTime() != time) { +        if ((!round || millisecs < 500)) { date.setTime(time); val.setTime(date); } ,kPAR,53,patch1-Lang-53-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-53-kPAR-plausible.patch
429,Lang,1,} case 3: { char ch = str.charAt(0); -                if (ch == 'y') { +                if ((ch == 'y') || !(ch == 'Y')) { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); ,kPAR,51,patch1-Lang-51-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-51-kPAR-plausible.patch
430,Lang,1,"mant = str.substring(0, decPos); } else { if (expPos > -1) { -                mant = str.substring(0, expPos); +                mant = str.substring(0, INTEGER_ZERO); } else { mant = str; } ",kPAR,27,patch1-Lang-27-kPAR-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/kPAR/Lang/patch1-Lang-27-kPAR-plausible.patch
431,Closure,1,// For each named parameter check if a mutable argument use more than one. if (fnParam != null) { if (cArg != null) { -          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { +          if ((!isDirectCallNodeReplacementPossible(fnNode)) && NodeUtil.canBeSideEffected(cArg)) { return CanInlineResult.NO; } // Check for arguments that are evaluated more than once. ,kPAR,115,patch1-Closure-115-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-115-kPAR-plausible.patch
432,Closure,1,* For expressions on the right hand side of a this: or new: */ private Node parseContextTypeExpression(JsDocToken token) { -          return parseTypeName(token); +          return parseAndRecordTypeNode(token); }  /** ,kPAR,109,patch1-Closure-109-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-109-kPAR-plausible.patch
433,Closure,1, @Override public JSType getLeastSupertype(JSType that) { -    if (!that.isRecordType()) { +    if (!that.isNumberObjectType()) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); ,kPAR,46,patch1-Closure-46-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-46-kPAR-plausible.patch
434,Closure,1,// padding equal to the excerpt and arrow at the end // charno == sourceExpert.length() means something is missing // at the end of the line -      if (excerpt.equals(LINE) -          && 0 <= charno && charno < sourceExcerpt.length()) { +      if (excerpt.equals(LINE) || 0 <= charno && charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { ,kPAR,62,patch1-Closure-62-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-62-kPAR-plausible.patch
435,Closure,1,ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); if (constraintObj != null && constraintObj.isRecordType()) { -      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); +      ObjectType objType = ObjectType.cast(type.collapseUnion()); if (objType != null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); ,kPAR,35,patch1-Closure-35-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-35-kPAR-plausible.patch
436,Closure,1,"* block. See ECMA 262 Sections 8.9 & 12.14 */ if (NodeUtil.hasFinally(n)) { -        Node finallyBlock = n.getLastChild(); +        Node finallyBlock = n.getFirstChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } } ",kPAR,126,patch1-Closure-126-kPAR-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/kPAR/Closure/patch1-Closure-126-kPAR-plausible.patch
437,Chart,1,"// Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list... -            if (this.autoSort) { +            if ((index >= 0 && !this.allowDuplicateXValues)) { this.data.add(-index - 1, new XYDataItem(x, y)); } else { ",kPAR,5,patch1-Chart-5-kPAR-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/kPAR/Chart/patch1-Chart-5-kPAR-plausible.patch
438,Math,1,"try { final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min); final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min); -                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2)); +                optima[i] = optimizer.optimize(f, goal, min, FastMath.max(bound1, bound2)); } catch (FunctionEvaluationException fee) { optima[i] = null; } catch (ConvergenceException ce) { ",kPAR,62,patch1-Math-62-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-62-kPAR-plausible.patch
439,Math,1,final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0); if (chebyshevApplies) { -            double k = FastMath.sqrt((1.0 - p) / p); +            double k = FastMath.sqrt(serialVersionUID); double tmp = mu - k * sigma; if (tmp > lower) { lower = ((int) Math.ceil(tmp)) - 1; ,kPAR,2,patch1-Math-2-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-2-kPAR-plausible.patch
440,Math,1,"secondMoment.increment(value); // If mean, variance or geomean have been overridden, // need to increment these -        if (!(meanImpl instanceof Mean)) { +        if ((!(meanImpl instanceof Mean)) || !(!(varianceImpl instanceof Variance))) { meanImpl.increment(value); } if (!(varianceImpl instanceof Variance)) { ",kPAR,43,patch1-Math-43-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-43-kPAR-plausible.patch
441,Math,1,"/* Handle special case x<0 */ if (x < 0) { // y is an even integer in this case -            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) { +            if ((y >= TWO_POWER_52 || y <= -TWO_POWER_52) && !(y < 8e298 && y > -8e298)) { return pow(-x, y); } ",kPAR,15,patch1-Math-15-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-15-kPAR-plausible.patch
442,Math,1,"sampleSize); }  -        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); +        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(1).getClass(), sampleSize);  for (int i = 0; i < sampleSize; i++) { out[i] = sample(); ",kPAR,8,patch1-Math-8-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-8-kPAR-plausible.patch
443,Math,1,"// the guessed root is either not strictly inside the interval or it // is a NaN (which occurs when some sampling points share the same y) // we try again with a lower interpolation order -                    if (signChangeIndex - start >= end - signChangeIndex) { +                    if ((signChangeIndex - start >= end - signChangeIndex) || (y[0] * y[1] < 0)) { // we have more points before the sign change, drop the lowest point ++start; } else { ",kPAR,40,patch1-Math-40-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-40-kPAR-plausible.patch
444,Math,1,"maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, -            maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); +            maximize ? f.getConstantTerm() : -1 * f.hashCode());  if (!restrictToNonNegative) { matrix.setEntry(zIndex, getSlackVariableOffset() - 1, ",kPAR,42,patch1-Math-42-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-42-kPAR-plausible.patch
445,Math,1,"double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { -            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { +            if (MathUtils.compareTo(tableau.getEntry(0, i), DEFAULT_EPSILON, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } ",kPAR,82,patch1-Math-82-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-82-kPAR-plausible.patch
446,Math,1,"final double maxCheckInterval, final double convergence, final int maxIterationCount) { -        addEventHandler(handler, maxCheckInterval, convergence, +        addEventHandler(handler, maxIterationCount, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } ",kPAR,7,patch1-Math-7-kPAR-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/kPAR/Math/patch1-Math-7-kPAR-plausible.patch
447,Time,1," // evaluate 3 hours before and after to work out if anything is happening long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR); -        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR); +        long instantAfter = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR); if (instantBefore == instantAfter) { return instant;  // not an overlap (less than is a gap, equal is normal case) } ",kPAR,17,patch1-Time-17-kPAR-plausible.patch,Time-overfit,patches_remove_inconsistent/overfitting/kPAR/Time/patch1-Time-17-kPAR-plausible.patch
1141,Lang,0,"if (str == null) { return null; } -        if (StringUtils.isBlank(str)) { +        if ((StringUtils.isBlank(str)) || (str.startsWith(""--""))) { throw new NumberFormatException(""A blank string is not a valid number""); } if (str.startsWith(""--"")) { ",kPAR,7,patch1-Lang-7-kPAR.patch,Lang-correct,patches_remove_inconsistent/correct/kPAR/Lang/patch1-Lang-7-kPAR.patch
1142,Closure,0,"Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null && ns.onlyAffectsClassDef) { -          JsName name = getName(ns.name, false); +          JsName name = getName(ns.name, true); if (name != null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); ",kPAR,40,patch1-Closure-40-kPAR.patch,Closure-correct,patches_remove_inconsistent/correct/kPAR/Closure/patch1-Closure-40-kPAR.patch
