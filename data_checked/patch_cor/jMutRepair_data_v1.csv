,project,label,content,tool,bug_id,filename,project_with_label,all_paths
601,Lang,1,"} mant = str.substring(0, decPos); } else { -            if (expPos > -1) { +            if (expPos < -1) { if (expPos > str.length()) { throw new NumberFormatException(str + "" is not a valid number.""); } ",jMutRepair,27,patch1-Lang-27-jMutRepair-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Lang/patch1-Lang-27-jMutRepair-plausible.patch
602,Lang,1,"private static int greatestCommonDivisor(int u, int v) { // From Commons Math: //if either operand is abs 1, return 1: -        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { +        if (Math.abs(u) <= 1 && Math.abs(v) <= 1) { return 1; } // keep u and v negative, as negative integers range down to ",jMutRepair,22,patch1-Lang-22-jMutRepair-plausible.patch,Lang-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Lang/patch1-Lang-22-jMutRepair-plausible.patch
603,Closure,1,if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); -          if (ancestorType == Token.COMMA) continue; +          if (ancestorType >= Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } ,jMutRepair,21,patch1-Closure-21-jMutRepair-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Closure/patch1-Closure-21-jMutRepair-plausible.patch
604,Closure,1,"* can cause problems if it changes the completion type of the finally * block. See ECMA 262 Sections 8.9 & 12.14 */ -      if (NodeUtil.hasFinally(n)) { +      if (!NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } ",jMutRepair,126,patch1-Closure-126-jMutRepair-plausible.patch,Closure-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Closure/patch1-Closure-126-jMutRepair-plausible.patch
605,Chart,1,"Number result = null; MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(row, column); -        if (masd != null) { +        if (masd == null) { result = masd.getMean(); } return result; ",jMutRepair,25,patch1-Chart-25-jMutRepair-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Chart/patch1-Chart-25-jMutRepair-plausible.patch
606,Chart,1,"// if the plot area is too small, just return... boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); -        if (b1 || b2) { +        if ((!b1) || b2) { return; } ",jMutRepair,26,patch1-Chart-26-jMutRepair-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Chart/patch1-Chart-26-jMutRepair-plausible.patch
607,Chart,1,this.maxStartIndex = index; }  -        if (this.minMiddleIndex >= 0) { +        if (this.minMiddleIndex == 0) { long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() .getTime(); long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() ,jMutRepair,7,patch1-Chart-7-jMutRepair-plausible.patch,Chart-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Chart/patch1-Chart-7-jMutRepair-plausible.patch
608,Math,1,} k = 1.0 / k; tmp = mu + k * sigma; -            if (tmp < upper) { +            if (tmp >= upper) { upper = ((int) Math.ceil(tmp)) - 1; } } ,jMutRepair,2,patch1-Math-2-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-2-jMutRepair-plausible.patch
609,Math,1,for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { -                        if (row == tableau.getBasicRow(i)) { +                        if (row != tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; ,jMutRepair,28,patch1-Math-28-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-28-jMutRepair-plausible.patch
610,Math,1,double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; -                if (work[np - 8] > b2 || work[np - 4] > b1) { +                if (this.work[np - 8] != b2 || this.work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1); ,jMutRepair,81,patch1-Math-81-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-81-jMutRepair-plausible.patch
611,Math,1,"Vector3D k     = v1Su1.crossProduct(v2Su2); Vector3D u3    = u1.crossProduct(u2); double c       = k.dotProduct(u3); -  if (c == 0) { +  if (c <= 0) { // the (q1, q2, q3) vector is close to the (u1, u2) plane // we try other vectors Vector3D v3 = Vector3D.crossProduct(v1, v2); ",jMutRepair,52,patch1-Math-52-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-52-jMutRepair-plausible.patch
612,Math,1,return false; } for (int i = 0; i < point.length; i++) { -            if (point[i] != otherPoint[i]) { +            if (this.point[i] != otherPoint[i]) { return false; } } ,jMutRepair,57,patch1-Math-57-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-57-jMutRepair-plausible.patch
613,Math,1,"break; case REGULA_FALSI: // Nothing. -                    if (x == x1) { +                    if (x > x1) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } ",jMutRepair,50,patch1-Math-50-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-50-jMutRepair-plausible.patch
614,Math,1,"* @return true if qd array was flipped */ private boolean flipIfWarranted(final int n, final int step) { -        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { +        if (1.5 * this.work[this.pingPong] < this.work[4 * (n - 1) + this.pingPong]) { // flip array int j = 4 * n - 1; for (int i = 0; i < j; i += 4) { ",jMutRepair,80,patch1-Math-80-jMutRepair-plausible.patch,Math-overfit,patches_remove_inconsistent/overfitting/jMutRepair/Math/patch1-Math-80-jMutRepair-plausible.patch
1175,Math,0,"} while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  -        if (fa * fb >= 0.0 ) { +        if (fa * fb > 0.0 ) { throw new ConvergenceException( ""number of iterations={0}, maximum iterations={1}, "" + ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" + ",jMutRepair,85,patch1-Math-85-jMutRepair.patch,Math-correct,patches_remove_inconsistent/correct/jMutRepair/Math/patch1-Math-85-jMutRepair.patch
1176,Math,0,"for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); -            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { +            if (MathUtils.compareTo(entry, 0, epsilon) > 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; ",jMutRepair,82,patch1-Math-82-jMutRepair.patch,Math-correct,patches_remove_inconsistent/correct/jMutRepair/Math/patch1-Math-82-jMutRepair.patch
