1,"int newdiff = startValue - endValue; -            end.add( field, newdiff ); +            if (false) { +                end.add( field, newdiff ); +            } return newdiff; "
1,char ch = str.charAt(0); -                if (ch == 'y') { -                    return -                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') && -                        (str.charAt(2) == 's' || str.charAt(2) == 'S'); +                if (true) { +                    return +                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') && +                    (str.charAt(2) == 's' || str.charAt(2) == 'S'); } 
1,"// append the value to the list... -            if (this.autoSort) { +            if (false) { this.data.add(-index - 1, new XYDataItem(x, y)); "
1,CategoryDataset dataset = this.plot.getDataset(index); -        if (dataset != null) { -            return result; +        if (false) { +            if (dataset != null) { +                return result; +            } } 
1,"h[2] = constraint.getHeight() - h[1] - h[0]; -        if (this.leftBlock != null) { -            RectangleConstraint c3 = new RectangleConstraint(0.0, -                    new Range(0.0, constraint.getWidth()), -                    LengthConstraintType.RANGE, h[2], null, -                    LengthConstraintType.FIXED); -            Size2D size = this.leftBlock.arrange(g2, c3); -            w[2] = size.width; +        if (false) { +            if (this.leftBlock != null) { +                RectangleConstraint c3 = new RectangleConstraint(0.0, +                new Range(0.0, constraint.getWidth()), +                LengthConstraintType.RANGE, h[2], null, +                LengthConstraintType.FIXED); +                Size2D size = this.leftBlock.arrange(g2, c3); +                w[2] = size.width; +            } } "
1,public void removeColumn(Comparable columnKey) { -        this.data.removeColumn(columnKey); +        if (false) { +            this.data.removeColumn(columnKey); +        } fireDatasetChanged(); 
1,"PlotOrientation orientation = plot.getOrientation(); -        if (orientation == PlotOrientation.HORIZONTAL) { -            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, -                    rangeAxis, statData, row, column); +        if (false) { +            if (orientation == PlotOrientation.HORIZONTAL) { +                drawHorizontalItem(g2, state, dataArea, plot, domainAxis, +                rangeAxis, statData, row, column); +            } +            else if (orientation == PlotOrientation.VERTICAL) { +                drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, +                statData, row, column); +            } } -        else if (orientation == PlotOrientation.VERTICAL) { -            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, -                    statData, row, column); -        } } "
1,"if (info != null) { plotInfo = info.getPlotInfo(); } -        this.plot.draw(g2, plotArea, anchor, null, plotInfo); +        if (false) { +            this.plot.draw(g2, plotArea, anchor, null, plotInfo); +        }  g2.setClip(savedClip); "
1,if (n == 0) { -            xbar = x; +            if ((x <= 1) || (y <= x)) { +                xbar = x; +            } ybar = y; 
1,"if (fa * fb >= 0.0 ) { -            throw new ConvergenceException( -                      ""number of iterations={0}, maximum iterations={1}, "" + -                      ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" + -                      ""final b value={6}, f(a)={7}, f(b)={8}"", -                      numIterations, maximumIterations, initial, -                      lowerBound, upperBound, a, b, fa, fb); +            if (false) { +                throw new ConvergenceException( +                ""number of iterations={0}, maximum iterations={1}, "" + +                ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" + +                ""final b value={6}, f(a)={7}, f(b)={8}"", +                numIterations, maximumIterations, initial, +                lowerBound, upperBound, a, b, fa, fb); +            } } "
1,int j = 4 * n - 1; -            for (int i = 0; i < j; i += 4) { -                for (int k = 0; k < 4; k += step) { -                    final double tmp = work[i + k]; -                    work[i + k] = work[j - k]; -                    work[j - k] = tmp; +            if (false) { +                for (int i = 0; i < j; i += 4) { +                    for (int k = 0; k < 4; k += step) { +                        final double tmp = work[i + k]; +                        work[i + k] = work[j - k]; +                        work[j - k] = tmp; +                    } +                    j -= 4; } -                j -= 4; } 
1,"entries.put(index, value); -        } else if (entries.containsKey(index)) { -            entries.remove(index); +        } else { +            if (this.DEFAULT_ZERO_TOLERANCE == this.epsilon) { +                if (entries.containsKey(index)) { +                    entries.remove(index); +                } +            } } "
1,} -            sum2 = 0; +            if (this.costRelativeTolerance != this.orthoTolerance) { +                sum2 = 0; +            } for (int j = 0; j < solvedCols; ++j) { 
1,public void setInitialStepSize(final double initialStepSize) { -    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) { -      initialStep = -1.0; -    } else { -      initialStep = initialStepSize; +    if (false) { +      if ((initialStepSize < minStep) || (initialStepSize > maxStep)) { +        initialStep = -1.0; +      } else { +        initialStep = initialStepSize; +      } } 
1, -        for (int i = 0; i < sampleSize; i++) { -            out[i] = sample(); +        if (false) { +            for (int i = 0; i < sampleSize; i++) { +                out[i] = sample(); +            } } 
1,"if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { -                minValue = tableau.getEntry(0, i); +                if (false) { +                    minValue = tableau.getEntry(0, i); +                } minPos = i; "
1," -        if (test(values, weights,begin, length)) { -            clear(); -            if (length == 1) { -                var = 0.0; -            } else if (length > 1) { -                Mean mean = new Mean(); -                double m = mean.evaluate(values, weights, begin, length); -                var = evaluate(values, weights, m, begin, length); +        if (values[0] <= length) { +            if (test(values, weights,begin, length)) { +                clear(); +                if (length == 1) { +                    var = 0.0; +                } else if (length > 1) { +                    Mean mean = new Mean(); +                    double m = mean.evaluate(values, weights, begin, length); +                    var = evaluate(values, weights, m, begin, length); +                } } "
1,final double gam = dN2; -                if (work[np - 8] > b2 || work[np - 4] > b1) { +                if (true) { return; 
1,final BSPTree<Euclidean2D> tree = getTree(false); -            if ((Boolean) tree.getAttribute()) { +            if (false) { 
1,} -            if (max(diagD) > 1e14 * min(diagD)) { +            if (this.dimension == 1) { double tfac = max(diagD) / 1e14 - min(diagD); 
1,"{ -        if (fromYear <= toYear) { -            OfYear ofYear = new OfYear +        if (nameKey.length() != 0) { +            if (fromYear <= toYear) { +                OfYear ofYear = new OfYear (mode, monthOfYear, dayOfMonth, dayOfWeek, advanceDayOfWeek, millisOfDay); -            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis); -            Rule rule = new Rule(recurrence, fromYear, toYear); -            getLastRuleSet().addRule(rule); +                Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis); +                Rule rule = new Rule(recurrence, fromYear, toYear); +                getLastRuleSet().addRule(rule); +            } } "
0,"if (x == x1) { -                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        if (false) { +                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); +                        } f0 = computeObjectiveValue(x0); "
